

&НаСервереБезКонтекста
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ";")
	
	МассивСтрок = Новый Массив();
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;		
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция глМассивПеревестиСловаВРег(МассивСлов)
	
	НовыйМассив = Новый Массив; 
	
	Для Каждого Стр Из МассивСлов Цикл		
		НовыйМассив.Добавить(ВРег(СокрЛП(Стр)));
	КонецЦикла;
	
	Возврат НовыйМассив; 
	
КонецФункции





&НаСервереБезКонтекста
Функция НайтиТоварПоШтрихкоду(Штрихкод) Экспорт
	
	НайденаНоменклатура = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	МассивШтрихкодов = Новый Массив;
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденаНоменклатура.Вставить("Номенклатура", Выборка.Номенклатура);
	КонецЦикла;
	
	Возврат НайденаНоменклатура;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПоискПоПодстрокеНаСервере(СтруктураПараметров)
	
	МассивОтбора = Новый СписокЗначений();	
	
	ШаблонПоиска = СокрЛП(СтруктураПараметров.СтрокаПоиска);
	Если НЕ ЗначениеЗаполнено(ШаблонПоиска) Тогда
		Возврат МассивОтбора;
	КонецЕсли;
		
	МассивСлов   = мРазложитьСтрокуВМассивПодстрок(ШаблонПоиска," ");
	МассивСлов   = глМассивПеревестиСловаВРег(МассивСлов);
	КоличествоСлов = МассивСлов.Количество();	
	
	ПоискУсловиеИЛИ = СтруктураПараметров.ПоискУсловиеИЛИ;
	ПоискПоКоду = СтруктураПараметров.ПоискПоКоду;
	ПоискПоАртикулу = СтруктураПараметров.ПоискПоАртикулу;
	ПоискВНаименовании = СтруктураПараметров.ПоискВНаименовании;
	ПоискВПолномНаименовании =  СтруктураПараметров.ПоискВПолномНаименовании;
	ПоискПоОписанию = СтруктураПараметров.ПоискПоОписанию;
	ПоискПоШтрихкоду = СтруктураПараметров.ПоискПоШтрихкоду;
	
	Если ПоискПоАртикулу Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Артикул ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Артикул ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;		
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоискПоКоду Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Код ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Код ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоискВНаименовании Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Наименование ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Наименование ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке; 
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;		
	КонецЕсли;	
	
	Если ПоискВПолномНаименовании Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.НаименованиеПолное ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.НаименованиеПолное ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;	
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;	

	
	Если ПоискПоОписанию Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Описание ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Описание ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;

	
	Если СтруктураПараметров.ПоискПоСвойству Тогда			
		Запрос = Новый Запрос();

		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(100)) ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(100)) ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Номенклатура,
		|	ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(100)) КАК ЗначениеСвойства
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка.ЭтоГруппа = ЛОЖЬ
		|	"+?(ЗначениеЗаполнено(СтруктураПараметров.ВидСвойства)," И ДополнительныеРеквизиты.Свойство = &ВидСвойства","")+"";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке; 
		
		Запрос.Текст = ТекстЗапроса;							
		Запрос.УстановитьПараметр("ВидСвойства",СтруктураПараметров.ВидСвойства);
		Выборка = Запрос.Выполнить().Выбрать();		
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоискПоШтрихкоду Тогда
		Если СтрДлина(СтруктураПараметров.СтрокаПоиска) > 12 Тогда			
			МассивТоваров = НайтиТоварПоШтрихкоду(СтруктураПараметров.СтрокаПоиска);
			
			Если МассивТоваров.Количество() > 0 Тогда
				МассивОтбора.Добавить(МассивТоваров.Номенклатура);				
				ОбработатьВыборСтроки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОтбора.Количество() > 0 Тогда	
		Если СтруктураПараметров.ИспользоватьМегапрайс Тогда			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	мегапрайсВзаимозаменяемостьНоменклатуры.АналогНоменклатура КАК Номенклатура
			               |ИЗ
			               |	РегистрСведений.мегапрайсВзаимозаменяемостьНоменклатуры КАК мегапрайсВзаимозаменяемостьНоменклатуры
			               |ГДЕ
			               |	мегапрайсВзаимозаменяемостьНоменклатуры.Номенклатура В(&ВыбНоменклатура)";
			
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;							
			Запрос.УстановитьПараметр("ВыбНоменклатура",МассивОтбора);
			ТаблицаАналогов = Запрос.Выполнить().Выгрузить();			
			
			Если ТаблицаАналогов.Количество() > 0 Тогда
				Для Каждого СтрЭлемент Из ТаблицаАналогов Цикл
					МассивОтбора.Добавить(СтрЭлемент.Номенклатура);		
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
	Возврат МассивОтбора;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗапросПоДаннымУчета(МассивОтбора,СтруктураПараметров);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	 |	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	 |	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	 |	ЦеныНоменклатуры.Цена КАК Цена,
	 |	СвободныеОстатки.Склад КАК Склад,
	 |	ЕСТЬNULL(СвободныеОстатки.СвободныйОстаток,0) КАК СвободныйОстаток,
	 |	ЕСТЬNULL(СвободныеОстатки.ВРезерве,0) КАК ВРезерве,
	 |	ЕСТЬNULL(ЗаказыПоставщикам.ЗаказаноПоставщикам,0) КАК ЗаказаноПоставщикам,
	 |	ЕСТЬNULL(ЗаказыКлиентов.ЗаказаноКлиентами,0) КАК ЗаказаноКлиентами,
	 |	ЕСТЬNULL(РегОстаткиПоставщиков.ОстаткиПоставщиков,0) КАК ОстаткиПоставщиков,
	 |	ЕСТЬNULL(Аналоги.КоличествоАналогов,0) КАК КоличествоАналогов
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |			ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	 |			ЦеныНоменклатуры.Характеристика КАК Характеристика,
	 |			ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	 |			МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	 |						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	 |							ТОГДА ВЫБОР
	 |									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	 |											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	 |											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	 |											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	 |										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	 |									ИНАЧЕ 0
	 |								КОНЕЦ
	 |						ИНАЧЕ 1
	 |					КОНЕЦ КАК ЧИСЛО(15, 2))) КАК Цена
	 |		ИЗ
	 |			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, "+?(ЗначениеЗаполнено(Объект.ВидЦен),"ВидЦены В (&ВидЦеныНоменклатуры)","")+") КАК ЦеныНоменклатуры
	 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
	 |				ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	 |              ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	 |			    ПО (ИСТИНА)
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			ЦеныНоменклатуры.Номенклатура,
	 |			ЦеныНоменклатуры.Характеристика,
	 |			ЦеныНоменклатуры.ВидЦены) КАК ЦеныНоменклатуры
	 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	 |			СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	 |			СвободныеОстаткиОстатки.Склад КАК Склад,
	 |			СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток) - СУММА(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток) КАК СвободныйОстаток,
	 |			СУММА(СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток) КАК ВРезерве
	 |		ИЗ
	 |			РегистрНакопления.СвободныеОстатки.Остатки(,"+?(ЗначениеЗаполнено(Объект.Склад),"Склад = &СкладОтбор","")+") КАК СвободныеОстаткиОстатки
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			СвободныеОстаткиОстатки.Номенклатура,      
	 |			СвободныеОстаткиОстатки.Характеристика,
	 |			СвободныеОстаткиОстатки.Склад) КАК СвободныеОстатки
	 |		ПО ЦеныНоменклатуры.Номенклатура = СвободныеОстатки.Номенклатура
	 |		И ЦеныНоменклатуры.Характеристика = СвободныеОстатки.Характеристика
	 |		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	 |			ЗаказыПоставщикам.Характеристика КАК Характеристика,
	 |			СУММА(ЗаказыПоставщикам.ЗаказаноОстаток) КАК ЗаказаноПоставщикам
	 |		ИЗ
	 |			РегистрНакопления.ЗаказыПоставщикам.Остатки(, ) КАК ЗаказыПоставщикам
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			ЗаказыПоставщикам.Номенклатура,
	 |			ЗаказыПоставщикам.Характеристика) КАК ЗаказыПоставщикам
	 |		ПО ЦеныНоменклатуры.Номенклатура = ЗаказыПоставщикам.Номенклатура
	 |		И ЦеныНоменклатуры.Характеристика = ЗаказыПоставщикам.Характеристика}
	 |		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			ЗаказыКлиентов.Номенклатура КАК Номенклатура,
	 |			ЗаказыКлиентов.Характеристика КАК Характеристика,
	 |			СУММА(ЗаказыКлиентов.ЗаказаноОстаток) КАК ЗаказаноКлиентами
	 |		ИЗ
	 |			РегистрНакопления.ЗаказыКлиентов.Остатки(, ) КАК ЗаказыКлиентов
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			ЗаказыКлиентов.Номенклатура,
	 |			ЗаказыКлиентов.Характеристика) КАК ЗаказыКлиентов
	 |		ПО ЦеныНоменклатуры.Номенклатура = ЗаказыКлиентов.Номенклатура
	 |		И ЦеныНоменклатуры.Характеристика = ЗаказыКлиентов.Характеристика}
	 |		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			РегОстаткиПоставщиков.Номенклатура КАК Номенклатура,
	 |			РегОстаткиПоставщиков.ХарактеристикаНоменклатуры КАК Характеристика,
	 |			СУММА(РегОстаткиПоставщиков.Количество) КАК ОстаткиПоставщиков
	 |		ИЗ
	 |			РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, ) КАК РегОстаткиПоставщиков
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			РегОстаткиПоставщиков.Номенклатура,
	 |			РегОстаткиПоставщиков.ХарактеристикаНоменклатуры) КАК РегОстаткиПоставщиков
	 |		ПО ЦеныНоменклатуры.Номенклатура = РегОстаткиПоставщиков.Номенклатура
	 |		И ЦеныНоменклатуры.Характеристика = РегОстаткиПоставщиков.Характеристика}
	 |		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			Аналоги.Номенклатура КАК Номенклатура,
	 |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Аналоги.АналогНоменклатура) КАК КоличествоАналогов
	 |		ИЗ
	 |			РегистрСведений.мегапрайсВзаимозаменяемостьНоменклатуры КАК Аналоги
	 |		
	 |		СГРУППИРОВАТЬ ПО
	 |			Аналоги.Номенклатура) КАК Аналоги
	 |		ПО ЦеныНоменклатуры.Номенклатура = Аналоги.Номенклатура}
	 |ГДЕ
	 |	ЦеныНоменклатуры.Номенклатура.ЭтоГруппа = ЛОЖЬ";
	 Если МассивОтбора.Количество() > 0 Тогда
		 ТекстЗапроса = ТекстЗапроса + " И ЦеныНоменклатуры.Номенклатура В(&МассивОтбора)";
	 КонецЕсли;
	 Если ЗначениеЗаполнено(СтруктураПараметров.ОтборГруппаНоменклатуры) Тогда
		 ТекстЗапроса = ТекстЗапроса + " И ЦеныНоменклатуры.Номенклатура В ИЕРАРХИИ(&ОтборГруппаНоменклатуры)";
	 КонецЕсли;
	 Если ЗначениеЗаполнено(СтруктураПараметров.ОтборВидНоменклатуры) Тогда
		 ТекстЗапроса = ТекстЗапроса + " И ЦеныНоменклатуры.Номенклатура.ВидНоменклатуры = &ОтборВидНоменклатуры";
	 КонецЕсли;
	 Если ЗначениеЗаполнено(СтруктураПараметров.ОтборПроизводитель) Тогда
		 ТекстЗапроса = ТекстЗапроса + " И ЦеныНоменклатуры.Номенклатура.Производитель = &ОтборПроизводитель";
	 КонецЕсли;
	 Если СтруктураПараметров.ОтборТолькоВНаличии Тогда
		 ТекстЗапроса = ТекстЗапроса + " И СвободныеОстатки.СвободныйОстаток > 0";
	 КонецЕсли;
	 Если СтруктураПараметров.ОтборОстаткиПоставщиков Тогда
		 ТекстЗапроса = ТекстЗапроса + " И РегОстаткиПоставщиков.ОстаткиПоставщиков > 0";
	 КонецЕсли;  
	 ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ЦеныНоменклатуры.Номенклатура,ЦеныНоменклатуры.ВидЦены,СвободныеОстатки.Склад";

 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТекстЗапроса;					
	 Запрос.УстановитьПараметр("СкладОтбор",Объект.Склад);
	 Запрос.УстановитьПараметр("Валюта",Объект.Валюта); 
	 Запрос.УстановитьПараметр("ВидЦеныНоменклатуры",Объект.ВидЦен); 
	 Запрос.УстановитьПараметр("МассивОтбора",МассивОтбора);
	 Запрос.УстановитьПараметр("ОтборГруппаНоменклатуры", СтруктураПараметров.ОтборГруппаНоменклатуры);
	 Запрос.УстановитьПараметр("ОтборВидНоменклатуры", СтруктураПараметров.ОтборВидНоменклатуры);
	 Запрос.УстановитьПараметр("ОтборПроизводитель", СтруктураПараметров.ОтборПроизводитель);     
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 НоваяСтрока = Объект.ТаблицаПодбора.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	 КонецЦикла;

КонецПроцедуры
	
&НаКлиенте
Процедура ПрименитьПоиск()
	
	Объект.ТаблицаПодбора.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	СтруктураПараметров.Вставить("ПоискУсловиеИЛИ", ПоискУсловиеИЛИ);
	СтруктураПараметров.Вставить("ПоискПоКоду", ПоискПоКоду);
	СтруктураПараметров.Вставить("ПоискПоАртикулу", ПоискПоАртикулу);
	СтруктураПараметров.Вставить("ПоискВНаименовании", ПоискВНаименовании);
	СтруктураПараметров.Вставить("ПоискВПолномНаименовании", ПоискВПолномНаименовании);
	СтруктураПараметров.Вставить("ПоискПоОписанию", ПоискПоОписанию);
	СтруктураПараметров.Вставить("ПоискПоШтрихкоду", ПоискПоШтрихкоду);
	СтруктураПараметров.Вставить("ПоискПоСвойству", ПоискПоСвойству);
	СтруктураПараметров.Вставить("ВидСвойства", ВидСвойства);    
	СтруктураПараметров.Вставить("ОтборГруппаНоменклатуры", ОтборГруппаНоменклатуры);
	СтруктураПараметров.Вставить("ОтборВидНоменклатуры", ОтборВидНоменклатуры);
	СтруктураПараметров.Вставить("ОтборПроизводитель", ОтборПроизводитель);  
	СтруктураПараметров.Вставить("ОтборТолькоВНаличии", ОтборТолькоВНаличии);
	СтруктураПараметров.Вставить("ОтборОстаткиПоставщиков", ОтборОстаткиПоставщиков);
	СтруктураПараметров.Вставить("ОтборВыводитьАналоги", ОтборВыводитьАналоги);     
		
	Использование = ЗначениеЗаполнено(СтрокаПоиска);	
	Если Использование Тогда
		Если ПоискУбратьМусор Тогда
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"-"," ");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"/"," ");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"("," ");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска,")"," ");
		КонецЕсли;		
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("СтрокаПоиска", СтрокаПоиска);
		
	МассивОтбора = ПоискПоПодстрокеНаСервере(СтруктураПараметров);	
	
	//Если МассивОтбора.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;

	Если НЕ ИспользоватьНавигацию И МассивОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапросПоДаннымУчета(МассивОтбора,СтруктураПараметров);
	
	//Если МассивОтбора.Количество() > 0 Тогда 
	//	СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСловатьАвтозаменСлов(Строка) Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСлов = СтрРазделить(Строка," "); 
	НовыйМассив = Новый Массив;
	
	Для Каждого Стр Из МассивСлов Цикл	
		
		НайденаНоменклатура = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	мегапрайсСловарьАвтозамен.ЧтоЗаменить КАК ЧтоЗаменить,
		|	мегапрайсСловарьАвтозамен.ЗначениеЗамены КАК ЗначениеЗамены
		|ИЗ
		|	РегистрСведений.мегапрайсСловарьАвтозамен КАК мегапрайсСловарьАвтозамен
		|ГДЕ
		|	мегапрайсСловарьАвтозамен.ЧтоЗаменить = &ЧтоЗаменить";
		
		Запрос.УстановитьПараметр("ЧтоЗаменить", Стр);		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = Выборка.ЗначениеЗамены;
		КонецЦикла;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	Строка = СтрСоединить(НовыйМассив," "); 
	Возврат Строка;
	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Объект.ИспользоватьМегапрайс Тогда
		СтрокаПоиска = ПроверитьСловатьАвтозаменСлов(СтрокаПоиска);
	КонецЕсли;
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	//СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПоиск(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоискПоАртикулу", ПоискПоАртикулу);
	СтруктураПараметров.Вставить("ПоискВНаименовании", ПоискВНаименовании);
	СтруктураПараметров.Вставить("ПоискВПолномНаименовании", ПоискВПолномНаименовании);	
	
	Попытка
		СтруктураВозврата = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсНовыйПомощникПродаж.Форма.ФормаПоисковаяСтрока",СтруктураПараметров,ЭтаФорма); 
	Исключение
		СтруктураВозврата = ОткрытьФормуМодально("Обработка.мегапрайсНовыйПомощникПродаж.Форма.ФормаПоисковаяСтрока",СтруктураПараметров,ЭтаФорма); 
	КонецПопытки;
	
	Если СтруктураВозврата <> Неопределено Тогда
		СтрокаПоиска = СтруктураВозврата.СтрокаПоиска;
		ПоискПоАртикулу = СтруктураВозврата.ПоискПоАртикулу;
		ПоискВНаименовании = СтруктураВозврата.ПоискВНаименовании;
		ПоискВПолномНаименовании = СтруктураВозврата.ПоискВПолномНаименовании;	
		
		ПрименитьПоиск();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СтрокаПоиска = "";
	
	ПрименитьПоиск();
	
КонецПроцедуры









&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка 
		Константы.мегапрайсРегистрационныйКлюч.Получить();
		Объект.ИспользоватьМегапрайс = Истина;
	Исключение
		Объект.ИспользоватьМегапрайс = Ложь;
	КонецПопытки;

	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");

	Объект.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);
	
	Объект.ВидОперации = "Заказ покупателя";
	Дата   = ТекущаяДата();
	Если ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		Объект.ВариантОбеспечения = Неопределено;
	КонецЕсли;
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));

	Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет);	
	Объект.ДатаОтгрузки = КонецДня(ТекущаяДата());
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ИспользоватьНавигацию = Ложь;
	Элементы.Навигация.Видимость = ИспользоватьНавигацию;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииПоказатьСкрыть(Команда)
	
	ОтборГруппаНоменклатуры = "";
	ОтборВидНоменклатуры = "";
	ОтборПроизводитель = "";

	Элементы.Навигация.Видимость = ИспользоватьНавигацию;
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПриАктивизацииСтроки(Элемент)
	
	ОтборГруппаНоменклатуры = "";
	ОтборВидНоменклатуры = "";
	ОтборПроизводитель = "";

	Если НЕ ИспользоватьНавигацию Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыВариантыНавигации = Элементы.ВариантыНавигации;
	ТекущаяСтраницаНавигации = ЭлементыВариантыНавигации.ТекущаяСтраница;	
		
	Если ТекущаяСтраницаНавигации = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияИерархияНоменклатуры Тогда
		
		ОтборГруппаНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ОтборГруппаНоменклатуры) Тогда
			ПрименитьПоиск();
		Иначе
			Объект.ТаблицаПодбора.Очистить();
		КонецЕсли;
				
	ИначеЕсли ТекущаяСтраницаНавигации = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияВидыНоменклатуры Тогда		
		
		ОтборВидНоменклатуры = Элементы.ВидыНоменклатуры.ТекущаяСтрока;
		ПрименитьПоиск();
																			
	ИначеЕсли ТекущаяСтраницаНавигации = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияПроизводители Тогда		
		
		ОтборПроизводитель = Элементы.ПроизводителиНоменклатуры.ТекущаяСтрока;
		ПрименитьПоиск();
			
	КонецЕсли;
	
КонецПроцедуры




&НаКлиенте
Процедура НоваяПродажа(Команда)
	
	Объект.Товары.Очистить();
	
	Объект.Партнер = "";
	Объект.Контрагент = "";
	Объект.Соглашение = "";
	Объект.Договор = "";
	
КонецПроцедуры





&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВКорзинуНаСервере(СтруктураПараметры, КоличествоУпаковок, НовыеСтроки)
	
	ТекстОповещенияИтог = "";
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
		Отбор.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
		//Отбор.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",                    НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		//Если ИспользоватьДатыОтгрузки Тогда
		//	Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		//КонецЕсли;
		Отбор.Вставить("СрокПоставки",               0);
		
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ТекущаяСтрока.ВариантОбеспечения = СтруктураПараметры.ВариантОбеспечения;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			//Если НеЗаполнятьВидЦеныВКорзину Тогда
			//	ТекущаяСтрока.ВидЦены = "";
			//КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока = РезультатПоиска[0];
			
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
		ТекстОповещения = НСтр("ru = 'Товар %%Товар%% стоимостью %%Цена%% %%Валюта%% в количестве %%КоличествоУпаковок%% %%ЕдиницаИзмерения%% добавлен в корзину'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Товар%%",              Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(СтруктураПараметры.Характеристика)," ("+СтруктураПараметры.Характеристика+")",""));
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Цена%%",               ТекущаяСтрока.Цена);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Валюта%%",             Объект.Валюта);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%ЕдиницаИзмерения%%",   ?(ЗначениеЗаполнено(СтруктураПараметры.Упаковка),СтруктураПараметры.Упаковка,НСтр("ru = 'ед.'")));
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%КоличествоУпаковок%%", КоличествоУпаковок);
		
		ТекстОповещенияИтог = ?(ТекстОповещенияИтог = "", "", Символы.ПС) + ТекстОповещения;
		
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		
		// Активизируем текущую строку табличной части
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат ТекстОповещенияИтог;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(СтруктураПараметры, КоличествоУпаковок)
	
	НовыеСтроки = Новый Массив;
	
	//Если ОкруглятьЦены Тогда
	//	ЦенаПодбора = Окр(СтруктураПараметры.Цена,0);
	//Иначе
		ЦенаПодбора = СтруктураПараметры.Цена;
	//КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВариантОбеспечения", СтруктураПараметры.ВариантОбеспечения);
		ПараметрыФормы.Вставить("Номенклатура",   СтруктураПараметры.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", СтруктураПараметры.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",        СтруктураПараметры.ВидЦены);
		ПараметрыФормы.Вставить("Упаковка",       СтруктураПараметры.Упаковка);	
		ПараметрыФормы.Вставить("Цена",           ЦенаПодбора);
		ПараметрыФормы.Вставить("Дата",           ТекущаяДата());
		ПараметрыФормы.Вставить("Валюта",         Объект.Валюта);
		ПараметрыФормы.Вставить("РедактироватьЦену",    Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены", Истина);
		ПараметрыФормы.Вставить("Склад",                    СтруктураПараметры.Склад);
		ПараметрыФормы.Вставить("ДатаОтгрузки",             ТекущаяДата());
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Ложь);
		
		Попытка
			МассивСтруктур = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсНовыйПомощникПродаж.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		Исключение
			МассивСтруктур = ОткрытьФормуМодально("Обработка.мегапрайсНовыйПомощникПродаж.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		КонецПопытки;
		
		Если МассивСтруктур <> Неопределено Тогда
			
			Для Каждого ЭлементМассива Из МассивСтруктур Цикл				
				НоваяСтрока = Новый Структура;
				НоваяСтрока.Вставить("ВариантОбеспечения",         СтруктураПараметры.ВариантОбеспечения);
				НоваяСтрока.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
				НоваяСтрока.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
				НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
				НоваяСтрока.Вставить("Упаковка",                   ЭлементМассива.Упаковка);
				НоваяСтрока.Вставить("Цена",                       ЭлементМассива.Цена);
				НоваяСтрока.Вставить("ВидЦены",                    ЭлементМассива.ВидЦены);
				НоваяСтрока.Вставить("Склад",                      СтруктураПараметры.Склад);
				НоваяСтрока.Вставить("ДатаОтгрузки",               ЭлементМассива.ДатаОтгрузки);
				НоваяСтрока.Вставить("КоличествоУпаковок",         ЭлементМассива.КоличествоУпаковок);
				НоваяСтрока.Вставить("СрокПоставки",               0);
				НовыеСтроки.Добавить(НоваяСтрока);				
			КонецЦикла;			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ВариантОбеспечения",         СтруктураПараметры.ВариантОбеспечения);
		НоваяСтрока.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
		НоваяСтрока.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
		НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
		НоваяСтрока.Вставить("Упаковка",                   СтруктураПараметры.Упаковка);
		НоваяСтрока.Вставить("Цена",                       ЦенаПодбора);
		НоваяСтрока.Вставить("ВидЦены",                    СтруктураПараметры.ВидЦены);
		НоваяСтрока.Вставить("Склад",                      СтруктураПараметры.Склад);
		НоваяСтрока.Вставить("ДатаОтгрузки",               СтруктураПараметры.ДатаОтгрузки);
		НоваяСтрока.Вставить("КоличествоУпаковок",         КоличествоУпаковок);
		НоваяСтрока.Вставить("СрокПоставки",               0);
		НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	ДобавитьВКорзинуНаСервере(СтруктураПараметры, КоличествоУпаковок, НовыеСтроки);
		
КонецПроцедуры


&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеНоменклатура = Элементы.ТаблицаПодбора.ТекущиеДанные;	
	ПодборТекущаяНоменклатура = ТекущиеДанныеНоменклатура.Номенклатура;
	ПодборТекущаяХарактеристика = ТекущиеДанныеНоменклатура.Характеристика;
	ПодборТекущаяЦена           = ТекущиеДанныеНоменклатура.Цена;
	
	СтруктураПараметрыНоменклатуры = Новый Структура;
	СтруктураПараметрыНоменклатуры.Вставить("ВариантОбеспечения", Объект.ВариантОбеспечения);	
	СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ПодборТекущаяНоменклатура);
	СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикиИспользуются", ЗначениеЗаполнено(ПодборТекущаяХарактеристика));
	СтруктураПараметрыНоменклатуры.Вставить("Характеристика", ПодборТекущаяХарактеристика);
	СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ТекущиеДанныеНоменклатура.Упаковка);		
	
	СтруктураПараметрыНоменклатуры.Вставить("ВидЦены", ТекущиеДанныеНоменклатура.ВидЦены);
	СтруктураПараметрыНоменклатуры.Вставить("Цена", ПодборТекущаяЦена);
	
	СтруктураПараметрыНоменклатуры.Вставить("Склад", ТекущиеДанныеНоменклатура.Склад);
	СтруктураПараметрыНоменклатуры.Вставить("ДатаОтгрузки", ТекущаяДата());
	СтруктураПараметрыНоменклатуры.Вставить("СрокПоставки", 0);
	
	ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникСловарьАвтозамен(Команда)
	
	ОткрытьФорму("РегистрСведений.мегапрайсСловарьАвтозамен.ФормаСписка");

КонецПроцедуры





&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	МассивДокументов = мЗаказПокупателя();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция мЗаказПокупателя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Если Объект.РазбиватьДокументыПоСкладам Тогда
		
		Объект.Товары.Сортировать("Организация,Склад");
		
		НовыйДокумент = Документы.ЗаказКлиента.ПустаяСсылка();
		
		ВремОрганизация = Справочники.Организации.ПустаяСсылка();
		ВремРазмещение = Справочники.Склады.ПустаяСсылка();
		
		ТаблицаРазделения = Объект.Товары.Выгрузить();
		ТаблицаРазделения.Свернуть("Организация,Склад");
		
		Для Каждого Шапка Из ТаблицаРазделения Цикл		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Организация", Шапка.Организация);
			ПараметрыОтбора.Вставить("Склад", Шапка.Склад);
			
			ТаблЧасть = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент(); 
			НовыйДокумент.Дата        = ТекущаяДата();
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Партнер     = Объект.Партнер;
			НовыйДокумент.Соглашение  = Объект.Соглашение;   
			НовыйДокумент.Контрагент  = Объект.Контрагент;
			НовыйДокумент.Договор     = Объект.Договор;
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(НовыйДокумент.Партнер, НовыйДокумент.КонтактноеЛицо);
						
			Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
				Попытка //113
					НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
				Исключение //112
					НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
				КонецПопытки;			
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
			
			НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
			НовыйДокумент.СпособДоставки = Объект.СпособДоставки;
			НовыйДокумент.ДатаОтгрузки = Объект.ДатаОтгрузки;
			
			НовыйДокумент.Статус      = Объект.СтатусЗаказаКлиента;
			НовыйДокумент.Согласован  = Истина;
			НовыйДокумент.Менеджер    = Объект.Менеджер;
			НовыйДокумент.ДатаСогласования = ТекущаяДата();

			НовыйДокумент.Валюта      = Объект.Валюта;
			НовыйДокумент.Приоритет   = Объект.Приоритет;
			НовыйДокумент.Склад       = Шапка.Склад;
			НовыйДокумент.Подразделение = Объект.Подразделение;
			НовыйДокумент.ЖелаемаяДатаОтгрузки = Объект.ДатаОтгрузки;
			
			НовыйДокумент.Комментарий = "";
			
			Для Каждого Стр из ТаблЧасть Цикл					
				СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				СТрокаТЧ.ВариантОбеспечения = Стр.ВариантОбеспечения;
				СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				СтрокаТЧ.Характеристика   = Стр.Характеристика;
				СтрокаТЧ.Упаковка         = Стр.Упаковка;
				СтрокаТЧ.Количество       = Стр.Количество;
				СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
				СтрокаТЧ.ВидЦены          = Стр.ВидЦены;
				СтрокаТЧ.Цена             = Стр.Цена;
				СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
				СтрокаТЧ.Склад            = Шапка.Склад;
				СтрокаТЧ.СрокПоставки     = 1;
				СтрокаТЧ.ДатаОтгрузки     = Объект.ДатаОтгрузки;
			КонецЦикла;
			
			//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			
			СтруктураДействий = Новый Структура;
			//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			//СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(НовыйДокумент, Ложь));
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
			
			НовыйДокумент.ЗаполнитьЭтапыГрафикаОплаты();
			
			НовыйДокумент.Записать();
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		КонецЦикла;
		
	Иначе
		
		НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент(); 
		НовыйДокумент.Дата        = ТекущаяДата();		
		НовыйДокумент.Организация = Объект.Организация;
		НовыйДокумент.Партнер     = Объект.Партнер;
		НовыйДокумент.Соглашение  = Объект.Соглашение;
		НовыйДокумент.Контрагент  = Объект.Контрагент;
		НовыйДокумент.Договор     = Объект.Договор;

		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(НовыйДокумент.Партнер, НовыйДокумент.КонтактноеЛицо);
		
		Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
			Попытка //113
				НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
			Исключение //112
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			КонецПопытки;
		Иначе
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;

		НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
		НовыйДокумент.Валюта      = Объект.Валюта;
		НовыйДокумент.СпособДоставки = Объект.СпособДоставки;
		НовыйДокумент.ДатаОтгрузки   = Объект.ДатаОтгрузки;
		
		НовыйДокумент.Статус      = Объект.СтатусЗаказаКлиента;
		НовыйДокумент.Согласован  = Истина;
		НовыйДокумент.Менеджер    = Объект.Менеджер;
		НовыйДокумент.ДатаСогласования = ТекущаяДата();
		
		НовыйДокумент.Приоритет   = Объект.Приоритет;
		НовыйДокумент.Склад       = Объект.Склад;
		НовыйДокумент.Подразделение = Объект.Подразделение;
						
		НовыйДокумент.Комментарий = "";
		
		Для Каждого Стр из Объект.Товары Цикл					
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СТрокаТЧ.ВариантОбеспечения = Стр.ВариантОбеспечения;
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.Характеристика;
			
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			СтрокаТЧ.Количество       = Стр.Количество;
			СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
			
			СтрокаТЧ.ВидЦены          = Стр.ВидЦены;
			СтрокаТЧ.Цена             = Стр.Цена;
			СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
			
			СтрокаТЧ.Склад            = Стр.Склад;
			СтрокаТЧ.СрокПоставки     = 1;
			СтрокаТЧ.ДатаОтгрузки     = Объект.ДатаОтгрузки;
		КонецЦикла;
		
		//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		
		СтруктураДействий = Новый Структура;
		//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		//СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(НовыйДокумент, Ложь));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.ЗаполнитьЭтапыГрафикаОплаты();
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции




