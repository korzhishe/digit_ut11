&НаКлиенте
Перем ЗакрытьОбработку;

&НаКлиенте
Перем КэшированныеЗначения;
&НаКлиенте
Перем ПодборТекущаяНоменклатура;
&НаКлиенте
Перем ПодборТекущаяХарактеристика;

&НаКлиенте
Перем ПодборТекущаяЦена;
&НаКлиенте
Перем Упаковка;
&НаКлиенте
Перем ВидЦены;
&НаКлиенте
Перем СрокПоставки;
&НаКлиенте
Перем ФильтрВариантНавигации;

&НаКлиенте
Перем ТекущаяСтраницаНавигации;
&НаКлиенте
Перем НавигацияПоИерархии;
&НаКлиенте
Перем НавигацияПоВидамНоменклатуры;
&НаКлиенте
Перем НавигацияПоПроизводителям;

&НаКлиенте
Перем ТекДетализацияСнизу;	
&НаКлиенте
Перем ЗакладкиДетализацияСнизу;

&НаКлиенте
Перем ЭлементыПодборТаблицаНоменклатура;

//============================================================================
// ССЫЛКИ

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПроверитьОбновления(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/forum/forum38/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysМегапрайс(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсИмпортПрайсаПартнера.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсИмпортПрайсаПартнера.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		ЗапуститьПриложение("http://subsystems.ru/catalog/27/595/");
	Конецесли;
	
КонецПроцедуры

//============================================================================
// ФОРМА


&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ИспользоватьНавигацию = Ложь;
	Элементы.Навигация.Видимость = ИспользоватьНавигацию;
		
	ЭлементыВариантыНавигации = Элементы.ВариантыНавигации;
	ТекущаяСтраницаНавигации = ЭлементыВариантыНавигации.ТекущаяСтраница;
	НавигацияПоИерархии = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияИерархияНоменклатуры;
	НавигацияПоВидамНоменклатуры = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияВидыНоменклатуры;
	НавигацияПоПроизводителям = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияПроизводители;
	
	ЭлементыПодборТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	ТекДетализацияСнизу = Элементы.ДетализацияСнизу.ТекущаяСтраница;
	ЗакладкиДетализацияСнизу = Элементы.ДетализацияСнизу.ПодчиненныеЭлементы;
	
	ПриУстановкеИзмененииВидаЦен();
	ПриУстановкеИзмененииСклада();
	ПриУстановкеИзмененииВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовое(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширенныйПомощникПродаж.Форма.Форма",,,Истина); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРасширенныйПомощникПродаж.Форма.Форма",,,Истина); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка 
		Константы.мегапрайсРегистрационныйКлюч.Получить();
		Объект.ИспользоватьМегапрайс = Истина;
	Исключение
		Объект.ИспользоватьМегапрайс = Ложь;
	КонецПопытки;
	
	НачалоПериода          = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	НачалоПериода          = НачалоМесяца(НачалоПериода-1);
	Объект.НачалоПериода      = НачалоМесяца(НачалоПериода-1);
	Объект.КонецПериода       = КонецДня(ТекущаяДата());
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ИспользоватьСтатусыЗаказовПоставщикам  = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	ИспользоватьПодразделения                         = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьРучныеСкидкиВПродажах                 = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьКоммерческиеПредложенияКлиентам       = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	ИспользоватьЗаказыКлиентов                        = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьТиповыеСоглашенияСКлиентами           = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами    = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьСоглашенияСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьПодключаемоеОборудование              = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента      = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	ИспользоватьРасширенныеВозможностиЗаказаКлиента   = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьГрафикиОплаты                         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьУпрощеннуюСхемуОплаты                 = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	ИспользоватьСтатусыРеализацийТоваровУслуг         = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг");
	ИспользоватьОрдерныеСклады                        = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	ИспользоватьНаправленияДеятельности               = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	ИспользоватьТиповыеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж));

	Объект.ВидОперации = "Заказ покупателя";
	
	Дата   = ТекущаяДата();
	Если ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Объект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		Объект.ВариантОбеспечения = Неопределено;
	КонецЕсли;
	
	Объект.Валюта         = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);
	Объект.Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	//Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	Объект.Менеджер       = Пользователи.ТекущийПользователь();
	Объект.Склад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	Объект.Подразделение  = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Объект.Приоритет);	
	Объект.ДатаОтгрузки = КонецДня(ТекущаяДата());
	Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
	ПодборТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПодборТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Если Параметры.ЗапрашиватьКоличество <> Неопределено Тогда
		ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоСоглашению()
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение, Истина);
	Объект.Валюта = Объект.Соглашение.Валюта;
	
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПродажиСервер.ЗаполнитьЦены(
	Объект.Товары,
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, Соглашение, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	Объект.Соглашение,
	"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Истина)
	)
	);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет 			= Объект.БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	
	Объект.Организация = Объект.Соглашение.Организация; 
	Объект.Договор     = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, Объект.ХозяйственнаяОперация, Объект.Валюта);

	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = Объект.Соглашение.Склад;
	КонецЕсли;

	Объект.ВидЦен                    = Объект.Соглашение.ВидЦен;
	Объект.БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУсловияПродажПоСоглашению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеИзмененииВидаЦен()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,   "ВидЦеныНоменклатуры", Объект.ВидЦен, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,   "ВидЦеныНоменклатуры", Неопределено, Истина);
	КонецЕсли;
	
	Элементы.ПодборТаблицаНоменклатураЦена.Заголовок = Объект.ВидЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеИзмененииСклада()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"СкладОтбор", Объект.Склад, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"СкладОтбор", Неопределено, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеИзмененииВалюты()
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"Валюта", Объект.Валюта, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"Валюта", Неопределено, Истина);
	КонецЕсли;

	
	Для Каждого ВыборкаСтрока Из Объект.Товары Цикл				
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
		СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
		СтруктураЗаполненияЦены.Вставить("ВидЦены", ВыборкаСтрока.ВидЦены);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);	
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ВыборкаСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Объект.Партнер);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Объект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;			
		КонецЕсли;	
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении()
	
	ПриИзмененииПартнераСервер();
	ПриИзмененииСоглашенияСервер();
	
	ПриУстановкеИзмененииВидаЦен();
	ПриУстановкеИзмененииСклада();

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Заголовок = ""+Объект.Партнер;
	Иначе
		ЭтаФорма.АвтоЗаголовок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
	ПриУстановкеИзмененииВидаЦен();
	ПриУстановкеИзмененииСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ПриУстановкеИзмененииВидаЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();	
		ПараметрыВыбораСоглашения.Элемент                     = Элемент;
		ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
		ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
		ПараметрыВыбораСоглашения.ДатаДокумента               = ТекущаяДата();
		ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	Исключение
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Соглашение, ТекущаяДата());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладПриИзменении(Элемент)
	
	ПриУстановкеИзмененииСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыПодборТаблицаНоменклатура;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияНовойНоменклатурыНаСервере()
	
	Возврат ПодборТоваровСервер.ПараметрыСозданияНовойНоменклатуры(ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового", ПараметрыСозданияНовойНоменклатурыНаСервере(), ЭтаФорма);
	
КонецПроцедуры


//============================================================================
// НАВИГАЦИЯ

&НаКлиенте
Процедура ВариантОтбораПриИзменении()
	
	// Удаление всех наложенных отборов.
	ПодборТаблицаНоменклатура.Отбор.Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"ВидЦеныНоменклатуры", Объект.ВидЦен, Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	ПодборТаблицаНоменклатура,"СвободныйОстаток",0,ВидСравненияКомпоновкиДанных.Больше,,ОтборТолькоВНаличии);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	ПодборТаблицаНоменклатура,"ОстаткиПоставщиков",0,ВидСравненияКомпоновкиДанных.Больше,,ОтборВНаличииУПоставщиков);
	
	ПрименитьПоиск();
	
	Элементы.ВидыНоменклатуры.ТекущаяСтрока     = Неопределено;
	Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеОтборыСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,"Родитель",Неопределено,ВидСравненияКомпоновкиДанных.ВИерархии, ,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,"ВидНоменклатуры",Неопределено,ВидСравненияКомпоновкиДанных.Равно, ,Ложь);	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,"Производитель",Неопределено,ВидСравненияКомпоновкиДанных.Равно, ,Ложь);	
	
КонецПроцедуры


&НаКлиенте
Процедура ВариантыНавигацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ВариантНавигацииПоНоменклатуре = "По Иерархии" Тогда
		
		Элементы.ВариантыНавигации.ТекущаяСтраница = Элементы.НавигацияИерархияНоменклатуры; 
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Производители" Тогда
		
		Элементы.ВариантыНавигации.ТекущаяСтраница = Элементы.НавигацияПроизводители;
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Виды номенклатуры" Тогда
		
		Элементы.ВариантыНавигации.ТекущаяСтраница = Элементы.НавигацияВидыНоменклатуры;	
		
	КонецЕсли;

	ВариантОтбораПриИзменении();
	
	ТекущаяСтраницаНавигации = Элементы.ВариантыНавигации.ТекущаяСтраница;
	
	ОбновитьВсеОтборыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПриАктивизацииСтроки(Элемент)
	
	//Если ЭтаФорма.ТекущийЭлемент = ЭлементыПодборТаблицаНоменклатура Тогда
	//	Возврат
	//КонецЕсли;
	
	Если НЕ ИспользоватьНавигацию Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыВариантыНавигации = Элементы.ВариантыНавигации.ТекущаяСтраница;
	
	Если ТекущаяСтраницаНавигации = НавигацияПоИерархии Тогда
		
		ОтборГруппаНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
		
		Если ЗначениеЗаполнено(ОтборГруппаНоменклатуры) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,
																			"Родитель",
																			ОтборГруппаНоменклатуры,
																			ВидСравненияКомпоновкиДанных.ВИерархии,
																			"Родитель",
																			Истина);

		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,
																			"Родитель",
																			,
																			ВидСравненияКомпоновкиДанных.Равно,
																			"Родитель",
																			Ложь);

		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаНавигации = НавигацияПоВидамНоменклатуры Тогда		
		
		ОтборВидНоменклатуры = Элементы.ВидыНоменклатуры.ТекущаяСтрока;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,
																			"ВидНоменклатуры",
																			ОтборВидНоменклатуры,
																			ВидСравненияКомпоновкиДанных.Равно,
																			"ВидНоменклатуры",
																			Истина);
																			
	ИначеЕсли ТекущаяСтраницаНавигации = НавигацияПоПроизводителям Тогда		
		
		ОтборВидНоменклатуры = Элементы.ПроизводителиНоменклатуры.ТекущаяСтрока;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,
																			"Производитель",
																			ОтборВидНоменклатуры,
																			ВидСравненияКомпоновкиДанных.Равно,
																			"Производитель",
																			Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТолькоВНаличииПриИзменении(Элемент)
	
	//ГруппаОтбораОтборТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	//ПодборТаблицаНоменклатура.Отбор.Элементы,
	//"ГруппаОтборТолькоВНаличии",
	//ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,
																			"СвободныйОстаток",
																			0,
																			ВидСравненияКомпоновкиДанных.Больше,
																			"СвободныйОстаток",
																			ОтборТолькоВНаличии);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,
																			"ОстаткиПоставщиков",
																			0,
																			ВидСравненияКомпоновкиДанных.Больше,
																			"ОстаткиПоставщиков",
																			ОтборВНаличииУПоставщиков);

	
КонецПроцедуры

//============================================================================
// ПОИСК

//============================================================================
// СЛУЖЕБНЫЕ

&НаСервереБезКонтекста
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ";")
	
	МассивСтрок = Новый Массив();
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;		
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
Функция глМассивПеревестиСловаВРег(МассивСлов)
	
	НовыйМассив = Новый Массив; 
	
	Для Каждого Стр Из МассивСлов Цикл
		НовыйМассив.Добавить(ВРег(СокрЛП(Стр)));
	КонецЦикла;
	
	Возврат НовыйМассив; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоискПоПодстрокеНаСервере(СтруктураПараметров)
	
	МассивОтбора = Новый СписокЗначений();	
	
	ШаблонПоиска = СокрЛП(СтруктураПараметров.СтрокаПоиска);
	Если НЕ ЗначениеЗаполнено(ШаблонПоиска) Тогда
		Возврат МассивОтбора;
	КонецЕсли;
		
	МассивСлов   = мРазложитьСтрокуВМассивПодстрок(ШаблонПоиска," ");
	МассивСлов   = глМассивПеревестиСловаВРег(МассивСлов);
	КоличествоСлов = МассивСлов.Количество();	
	
	ПоискУсловиеИЛИ = СтруктураПараметров.ПоискУсловиеИЛИ;
	ПоискПоКоду = СтруктураПараметров.ПоискПоКоду;
	ПоискПоАртикулу = СтруктураПараметров.ПоискПоАртикулу;
	ПоискВНаименовании = СтруктураПараметров.ПоискВНаименовании;
	ПоискВПолномНаименовании =  СтруктураПараметров.ПоискВПолномНаименовании;
	ПоискПоОписанию = СтруктураПараметров.ПоискПоОписанию;
	ПоискПоШтрихкоду = СтруктураПараметров.ПоискПоШтрихкоду;
	
	Если ПоискПоАртикулу Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Артикул ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Артикул ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;		
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоискПоКоду Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Код ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Код ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоискВНаименовании Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Наименование ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Наименование ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке; 
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;		
	КонецЕсли;	
	
	Если ПоискВПолномНаименовании Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.НаименованиеПолное ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.НаименованиеПолное ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;	
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;	

	
	Если ПоискПоОписанию Тогда				
		Запрос = Новый Запрос();
		
		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ СпрНоменклатура.Описание ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И СпрНоменклатура.Описание ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке;
		
		Запрос.Текст = ТекстЗапроса;							
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;

	
	Если СтруктураПараметров.ПоискПоСвойству Тогда			
		Запрос = Новый Запрос();

		УсловиеПоискаПоСтроке = "";	
		Для инд = 0 По КоличествоСлов - 1 Цикл
			СтрКлючевоеСлово = СокрЛП(МассивСлов[инд]);
			
			Если ПоискУсловиеИЛИ И инд > 0 Тогда
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(150)) ПОДОБНО &ПодстрокаПоиска"+Строка(инд);
			Иначе
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " И ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(150)) ПОДОБНО &ПодстрокаПоиска"+Строка(инд);	
			КонецЕсли;
			Запрос.УстановитьПараметр("ПодстрокаПоиска"+Строка(инд),"%"+СтрКлючевоеСлово+"%");
		КонецЦикла;

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Номенклатура,
		|	ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(150)) КАК ЗначениеСвойства
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка.ЭтоГруппа = ЛОЖЬ
		|	"+?(ЗначениеЗаполнено(СтруктураПараметров.ВидСвойства)," И ДополнительныеРеквизиты.Свойство = &ВидСвойства","")+"";
		ТекстЗапроса = ТекстЗапроса + УсловиеПоискаПоСтроке; 
		
		Запрос.Текст = ТекстЗапроса;							
		Запрос.УстановитьПараметр("ВидСвойства",СтруктураПараметров.ВидСвойства);
		Выборка = Запрос.Выполнить().Выбрать();		
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);		
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоискПоШтрихкоду Тогда		
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ВыбШтрихкод";
		
		Запрос.УстановитьПараметр("ВыбШтрихкод", "%"+ШаблонПоиска+"%");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивОтбора.Добавить(Выборка.Номенклатура);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивОтбора;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьПоиск()
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);	
	Если НЕ Использование Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,"Ссылка",Неопределено,ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		Возврат;
	КонецЕсли;	
	
	Если ПоискУбратьМусор Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"-"," ");
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"/"," ");
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска,"("," ");
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска,")"," ");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	СтруктураПараметров.Вставить("СтрокаПоиска", СтрокаПоиска);
	СтруктураПараметров.Вставить("ПоискУсловиеИЛИ", ПоискУсловиеИЛИ);
	СтруктураПараметров.Вставить("ПоискПоКоду", ПоискПоКоду);
	СтруктураПараметров.Вставить("ПоискПоАртикулу", ПоискПоАртикулу);
	СтруктураПараметров.Вставить("ПоискВНаименовании", ПоискВНаименовании);
	СтруктураПараметров.Вставить("ПоискВПолномНаименовании", ПоискВПолномНаименовании);
	СтруктураПараметров.Вставить("ПоискПоОписанию", ПоискПоОписанию);
	СтруктураПараметров.Вставить("ПоискПоШтрихкоду", ПоискПоШтрихкоду);
	СтруктураПараметров.Вставить("ПоискПоСвойству", ПоискПоСвойству);
	СтруктураПараметров.Вставить("ВидСвойства", ВидСвойства);     
	
	МассивОтбора = ПоискПоПодстрокеНаСервере(СтруктураПараметров);		
	
	Если МассивОтбора.Количество() > 0 Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодборТаблицаНоменклатура,"Ссылка",МассивОтбора,ВидСравненияКомпоновкиДанных.ВСписке,,Истина);

		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	Иначе
		Состояние("Ничего не найдено");
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыПодборТаблицаНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСловатьАвтозаменСлов(Строка) Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСлов = СтрРазделить(Строка," "); 
	НовыйМассив = Новый Массив;
	
	Для Каждого Стр Из МассивСлов Цикл	
		
		НайденаНоменклатура = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	мегапрайсСловарьАвтозамен.ЧтоЗаменить КАК ЧтоЗаменить,
		|	мегапрайсСловарьАвтозамен.ЗначениеЗамены КАК ЗначениеЗамены
		|ИЗ
		|	РегистрСведений.мегапрайсСловарьАвтозамен КАК мегапрайсСловарьАвтозамен
		|ГДЕ
		|	мегапрайсСловарьАвтозамен.ЧтоЗаменить = &ЧтоЗаменить";
		
		Запрос.УстановитьПараметр("ЧтоЗаменить", Стр);		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = Выборка.ЗначениеЗамены;
		КонецЦикла;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	Строка = СтрСоединить(НовыйМассив," "); 
	Возврат Строка;
	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Объект.ИспользоватьМегапрайс Тогда
		СтрокаПоиска = ПроверитьСловатьАвтозаменСлов(СтрокаПоиска);
	КонецЕсли;

	ПрименитьПоиск();
	
КонецПроцедуры


&НаКлиенте
Процедура АктивироватьПоиск(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоискПоАртикулу", ПоискПоАртикулу);
	СтруктураПараметров.Вставить("ПоискВНаименовании", ПоискВНаименовании);
	СтруктураПараметров.Вставить("ПоискВПолномНаименовании", ПоискВПолномНаименовании);	
	
	Попытка
		СтруктураВозврата = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсРасширенныйПомощникПродаж.Форма.ФормаПоисковаяСтрока",СтруктураПараметров,ЭтаФорма); 
	Исключение
		СтруктураВозврата = ОткрытьФормуМодально("Обработка.мегапрайсРасширенныйПомощникПродаж.Форма.ФормаПоисковаяСтрока",СтруктураПараметров,ЭтаФорма); 
	КонецПопытки;
	
	Если СтруктураВозврата <> Неопределено Тогда
		СтрокаПоиска = СтруктураВозврата.СтрокаПоиска;
		ПоискПоАртикулу = СтруктураВозврата.ПоискПоАртикулу;
		ПоискВНаименовании = СтруктураВозврата.ПоискВНаименовании;
		ПоискВПолномНаименовании = СтруктураВозврата.ПоискВПолномНаименовании;	
		
		ПрименитьПоиск();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СтрокаПоиска = "";
	
	ПрименитьПоиск();
	
КонецПроцедуры

//============================================================================
// ПЕРЕНОС В ДОКУМЕНТ

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = Объект.Товары.Выгрузить();
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

//============================================================================
// СПИСКИ

&НаСервере
Функция ПолучитьТекстЗапросаЦенаПродажиПоВидуЦеныНоменклатуры(МассивТаблиц = Неопределено)
	
	Если МассивТаблиц <> Неопределено Тогда 
		МассивТаблиц.Добавить("РезультатЗапросаЦеныНоменклатуры");
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	&ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ЦеныНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.КоличествоУпаковок, 1) КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|			ВидЦены = &ВидЦены
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ПолучитьЦенуПоВидуЦены(Номенклатура, Характеристика, ВидЦены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЦенаПродажиПоВидуЦеныНоменклатуры();
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидЦены",        ВидЦены);
	Запрос.УстановитьПараметр("Валюта",         Объект.Валюта);
	Запрос.УстановитьПараметр("ТекущаяДата",    ТекущаяДата());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураЦены = Новый Структура("ВидЦены, Цена, Упаковка, ЕдиницаИзмерения", Выборка.ВидЦены, Выборка.Цена, Выборка.Упаковка, Выборка.ЕдиницаИзмерения);
	Иначе
		СтруктураЦены = Новый Структура("ВидЦены, Цена, Упаковка, ЕдиницаИзмерения", Справочники.ВидыЦен.ПустаяСсылка(), 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Новый Структура("Цена", СтруктураЦены);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда		
		СтруктураИнформацииОТоваре = ПолучитьЦенуПоВидуЦены(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Объект.ВидЦен);
		
		СтруктураЦена = СтруктураИнформацииОТоваре.Цена;
		НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(СтруктураЦена.Упаковка), Строка(СтруктураЦена.Упаковка), Строка(СтруктураЦена.ЕдиницаИзмерения));
		
		ПодборТекущаяЦена = СтруктураЦена.Цена;
		ВидЦены      = СтруктураЦена.ВидЦены;
		Упаковка     = СтруктураЦена.Упаковка;
		СрокПоставки = 0;		
		
	Иначе		
		ПодборТекущаяЦена = 0;
		ВидЦены      = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		Упаковка     = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");		СрокПоставки = 0;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеНоменклатура = ЭлементыПодборТаблицаНоменклатура.ТекущиеДанные;	
	ПодборТекущаяНоменклатура = ТекущиеДанныеНоменклатура.Ссылка;
	ПодборТекущаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	ПодборТекущаяЦена = ТекущиеДанныеНоменклатура.Цена;
				
	Если Элемент.ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
			
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ВариантОбеспечения", Объект.ВариантОбеспечения);	
	СтруктураПараметры.Вставить("Номенклатура", ПодборТекущаяНоменклатура);
	
	ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика);
	
	ТекущиеДанныеХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	СтруктураПараметры.Вставить("ХарактеристикиИспользуются", Ложь);
	СтруктураПараметры.Вставить("Характеристика", ТекущиеДанныеХарактеристика);
	СтруктураПараметры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));	
	СтруктураПараметры.Вставить("ВидЦены", Объект.ВидЦен);
	СтруктураПараметры.Вставить("Цена", ПодборТекущаяЦена);
	
	СтруктураПараметры.Вставить("Склад", Объект.Склад);
	СтруктураПараметры.Вставить("ДатаОтгрузки", ТекущаяДата());
	СтруктураПараметры.Вставить("СрокПоставки", СрокПоставки);
	
	ДобавитьВКорзину(СтруктураПараметры, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ТекущаяСтрока = ЭлементыПодборТаблицаНоменклатура.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

//============================================================================
// ПАНЕЛЬ ИНФОРМАЦИИ

&НаКлиенте
Процедура ОбновитьТекДетализацияСнизу(НомерСтраницы)
	
	ПараметрыЗапроса = ПолучитьТекущиеДанныеСтроки(); 
		
	Если НомерСтраницы = 1 Тогда
		
		РасшифровкиПолучитьСвойстваНоменклатуры(ПараметрыЗапроса);
		РасшифровкиПолучитьКартинкуНоменклатуры(ПараметрыЗапроса);		
		ОписаниеНоменклатуры = ПолучитьОписаниеНоменклатуры(ПараметрыЗапроса.Номенклатура);	
				
	ИначеЕсли НомерСтраницы = 10 Тогда
		
		Для Ном = 1 По 5 Цикл
			ИмяРеквизита = "КартинкаТовара"+Ном;
			
			ЭтотОбъект[ИмяРеквизита] = ""; 
		КонецЦикла;

		ПоказатьПодчиненныйСправочник(ПараметрыЗапроса);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПодчиненныйСправочник(ТекущиеДанные)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ТекНоменклатура";	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекНоменклатура",ТекущиеДанные.Номенклатура);
	Запрос.Текст = ТекстЗапроса;
	
	СписокКартинокТовара = Запрос.Выполнить().Выгрузить();
	
	НомерКартинки = 0;
	Для Каждого Выборка Из СписокКартинокТовара Цикл		
		НомерКартинки = НомерКартинки + 1;
		ИмяРеквизита = "КартинкаТовара"+НомерКартинки;
		
		ЭтотОбъект[ИмяРеквизита] = ПолучитьНавигационнуюСсылкуКартинки(Выборка.ПрисоединенныйФайл, УникальныйИдентификатор);
		
		Если НомерКартинки = 5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьТекущиеДанныеСтроки()
	
	ТекущиеДанныеСтроки = Новый Структура;
	ТекущиеДанныеСтроки.Вставить("ИспользоватьМегапрайс",Объект.ИспользоватьМегапрайс);
	ТекущиеДанныеСтроки.Вставить("Валюта",Объект.Валюта);
	ТекущиеДанныеСтроки.Вставить("Номенклатура",ПодборТекущаяНоменклатура);
	ТекущиеДанныеСтроки.Вставить("ХарактеристикаНоменклатуры",ПодборТекущаяХарактеристика);
	ТекущиеДанныеСтроки.Вставить("ВидЦенНоменклатуры",Объект.ВидЦен);
	ТекущиеДанныеСтроки.Вставить("СкладОтбор",Объект.Склад);
	ТекущиеДанныеСтроки.Вставить("НачалоПериода",Объект.НачалоПериода);
	ТекущиеДанныеСтроки.Вставить("КонецПериода",Объект.КонецПериода);
	ТекущиеДанныеСтроки.Вставить("ЦенаПродажи", ПодборТекущаяЦена);
	ТекущиеДанныеСтроки.Вставить("ОкруглятьЦены", ОкруглятьЦены);
	
	Возврат ТекущиеДанныеСтроки;
	
КонецФункции


&НаСервере
Процедура РасшифровкиПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки)
	
	ПодборКартинкаНоменклатуры = ПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);		
	Если ЗначениеЗаполнено(ПодборКартинкаНоменклатуры) Тогда
		КартинкаНоменклатуры = ПолучитьНавигационнуюСсылкуКартинки(ПодборКартинкаНоменклатуры, УникальныйИдентификатор)
	Иначе
		КартинкаНоменклатуры = "";
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкиПолучитьСвойстваНоменклатуры(ТекущиеДанныеСтроки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Свойство КАК Свойство,
	|	СпрНоменклатура.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &ТекНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойство";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекНоменклатура", ТекущиеДанныеСтроки.Номенклатура);
	
	СвойстваНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанныеДополнительнойИнформации()
	
	ТекДетализацияСнизу = Элементы.ДетализацияСнизу.ТекущаяСтраница;
	Если ТекДетализацияСнизу = ЗакладкиДетализацияСнизу.ТоварыГруппа Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанныеНоменклатура = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;	
	Если ТекущиеДанныеНоменклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ПодборТекущаяНоменклатура = ТекущиеДанныеНоменклатура.Ссылка;
	ПодборТекущаяЦена = ТекущиеДанныеНоменклатура.Цена;	
	
	ТекущиеДанныеСтроки = ПолучитьТекущиеДанныеСтроки(); 
	
	Если ТекДетализацияСнизу = ЗакладкиДетализацияСнизу.ИнфоПоТовару Тогда
		
		ОбновитьТекДетализацияСнизу(1);	
		
	ИначеЕсли ТекДетализацияСнизу = ЗакладкиДетализацияСнизу.Картинки Тогда	
		
		ОбновитьТекДетализацияСнизу(10);
		
	КонецЕсли;		
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)	
		
	ПодключитьОбработчикОжидания("ОбновитьДанныеДополнительнойИнформации", 0.2, Истина);
	//ОбновитьДанныеДополнительнойИнформации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодборТаблицаНоменклатураПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	//|	СУММА(мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.Количество) КАК Количество
	//|ИЗ
	//|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (&ВыбНоменклатура)) КАК мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура";
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("ВыбНоменклатура",Строки.ПолучитьКлючи());
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	СтрокаСписка = Строки[Выборка.Номенклатура];
	//	СтрокаСписка.Данные["ОстаткиПоставщиков"] = Выборка.Количество;
	//	СтрокаСписка.Оформление["ОстаткиПоставщиков"].УстановитьЗначениеПараметра("Формат","ЧЦ=15; ЧДЦ=2; ЧН=-");
	//КонецЦикла;	
	//
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	//|	МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&ВыбНоменклатура)) КАК ЦеныНоменклатуры
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЦеныНоменклатуры.Номенклатура";
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("ВыбНоменклатура",Строки.ПолучитьКлючи());
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	СтрокаСписка = Строки[Выборка.Номенклатура];
	//	СтрокаСписка.Данные["Цена"] = Выборка.Цена;
	//	СтрокаСписка.Оформление["Цена"].УстановитьЗначениеПараметра("Формат","ЧЦ=15; ЧДЦ=2; ЧН=-");
	//КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДопИнформацияПриСменеСтраницы(Элемент, ТекущаяСтраница)
			
	ПодключитьОбработчикОжидания("ОбновитьДанныеДополнительнойИнформации", 0.1, Истина);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеНоменклатуры(Номенклатура)
	
	ОписаниеНоменклатуры = Номенклатура.Описание;
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции

&НаСервере
Функция ПолучитьКартинкуНоменклатуры(Номенклатура)
	
	//УстановитьПривилегированныйРежим(Истина);
	
	ФайлКартинкиНоменклатуры = Номенклатура.ФайлКартинки;
	
	Возврат ФайлКартинкиНоменклатуры;
	
КонецФункции

//============================================================================
// КОРЗИНА

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВКорзинуНаСервере(СтруктураПараметры, КоличествоУпаковок, НовыеСтроки)
	
	ТекстОповещенияИтог = "";
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
		Отбор.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
		//Отбор.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",                    НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		Отбор.Вставить("СрокПоставки",               0);
		
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда		
			ТекущаяСтрока = Объект.Товары.Добавить();
			ТекущаяСтрока.ВариантОбеспечения = СтруктураПараметры.ВариантОбеспечения;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);			
		Иначе			
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
		ТекстОповещения = НСтр("ru = 'Товар %%Товар%% стоимостью %%Цена%% %%Валюта%% в количестве %%КоличествоУпаковок%% %%ЕдиницаИзмерения%% добавлен в корзину'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Товар%%",              Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(СтруктураПараметры.Характеристика)," ("+СтруктураПараметры.Характеристика+")",""));
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Цена%%",               ТекущаяСтрока.Цена);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Валюта%%",             Объект.Валюта);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%ЕдиницаИзмерения%%",   ?(ЗначениеЗаполнено(СтруктураПараметры.Упаковка),СтруктураПараметры.Упаковка,НСтр("ru = 'ед.'")));
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%КоличествоУпаковок%%", КоличествоУпаковок);
		
		ТекстОповещенияИтог = ?(ТекстОповещенияИтог = "", "", Символы.ПС) + ТекстОповещения;
		
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		// Активизируем текущую строку табличной части
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ТекстОповещенияИтог;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(СтруктураПараметры, КоличествоУпаковок)
	
	НовыеСтроки = Новый Массив;
	
	Если ОкруглятьЦены Тогда
		ЦенаПодбора = Окр(СтруктураПараметры.Цена,0);
	Иначе
		ЦенаПодбора = СтруктураПараметры.Цена;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВариантОбеспечения", СтруктураПараметры.ВариантОбеспечения);
		ПараметрыФормы.Вставить("Номенклатура",   СтруктураПараметры.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", СтруктураПараметры.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",        СтруктураПараметры.ВидЦены);
		ПараметрыФормы.Вставить("Упаковка",       СтруктураПараметры.Упаковка);	
		ПараметрыФормы.Вставить("Цена",           ЦенаПодбора);
		ПараметрыФормы.Вставить("Дата",           Дата);
		ПараметрыФормы.Вставить("Валюта",         Объект.Валюта);
		ПараметрыФормы.Вставить("РедактироватьЦену",    Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены", Истина);
		ПараметрыФормы.Вставить("Склад",                    СтруктураПараметры.Склад);
		ПараметрыФормы.Вставить("Склады",                   Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ДатаОтгрузки",             ТекущаяДата());
		//ПараметрыФормы.Вставить("ЭтоУслуга", СтруктураПараметры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", ИспользоватьДатыОтгрузки);
		
		Попытка
			МассивСтруктур = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсРасширенныйПомощникПродаж.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		Исключение
			МассивСтруктур = ОткрытьФормуМодально("Обработка.мегапрайсРасширенныйПомощникПродаж.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		КонецПопытки;
		
		Если МассивСтруктур <> Неопределено Тогда
			
			Для Каждого ЭлементМассива Из МассивСтруктур Цикл				
				НоваяСтрока = Новый Структура;
				НоваяСтрока.Вставить("ВариантОбеспечения",         СтруктураПараметры.ВариантОбеспечения);
				НоваяСтрока.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
				НоваяСтрока.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
				НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
				НоваяСтрока.Вставить("Упаковка",                   ЭлементМассива.Упаковка);
				НоваяСтрока.Вставить("Цена",                       ЭлементМассива.Цена);
				НоваяСтрока.Вставить("ВидЦены",                    ЭлементМассива.ВидЦены);
				НоваяСтрока.Вставить("Склад",                      СтруктураПараметры.Склад);
				НоваяСтрока.Вставить("ДатаОтгрузки",               ЭлементМассива.ДатаОтгрузки);
				НоваяСтрока.Вставить("КоличествоУпаковок",         ЭлементМассива.КоличествоУпаковок);
				НоваяСтрока.Вставить("СрокПоставки",               0);
				НовыеСтроки.Добавить(НоваяСтрока);				
			КонецЦикла;			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ВариантОбеспечения",         СтруктураПараметры.ВариантОбеспечения);
		НоваяСтрока.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
		НоваяСтрока.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
		НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
		НоваяСтрока.Вставить("Упаковка",                   СтруктураПараметры.Упаковка);
		НоваяСтрока.Вставить("Цена",                       ЦенаПодбора);
		НоваяСтрока.Вставить("ВидЦены",                    СтруктураПараметры.ВидЦены);
		НоваяСтрока.Вставить("Склад",                      СтруктураПараметры.Склад);
		НоваяСтрока.Вставить("ДатаОтгрузки",               СтруктураПараметры.ДатаОтгрузки);
		НоваяСтрока.Вставить("КоличествоУпаковок",         КоличествоУпаковок);
		НоваяСтрока.Вставить("СрокПоставки",               0);
		НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	ДобавитьВКорзинуНаСервере(СтруктураПараметры, КоличествоУпаковок, НовыеСтроки);
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыПодборТаблицаНоменклатура;
	Элементы.ДетализацияСнизу.ТекущаяСтраница = Элементы.ДетализацияСнизу.ПодчиненныеЭлементы.ТоварыГруппа;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварПодЗаказ(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ВариантОбеспечения", ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));	
	СтруктураПараметры.Вставить("Номенклатура", ПодборТекущаяНоменклатура);	
	ТекущиеДанныеХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	СтруктураПараметры.Вставить("ХарактеристикиИспользуются", Ложь);
	СтруктураПараметры.Вставить("Характеристика", ТекущиеДанныеХарактеристика);	
	ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ТекущиеДанныеХарактеристика);
	СтруктураПараметры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	
	//ПОДБОР ЦЕНЫ
	СтруктураПараметры.Вставить("ВидЦены", Объект.ВидЦен);
	СтруктураПараметры.Вставить("Цена", ПодборТекущаяЦена);		
	СтруктураПараметры.Вставить("Склад", Объект.Склад);
	СтруктураПараметры.Вставить("ДатаОтгрузки", ТекущаяДата());
	
	ДобавитьВКорзину(СтруктураПараметры, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварПодЗаказОбособленно(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ВариантОбеспечения", ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));	
	СтруктураПараметры.Вставить("Номенклатура", ПодборТекущаяНоменклатура);	
	ТекущиеДанныеХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	СтруктураПараметры.Вставить("ХарактеристикиИспользуются", Ложь);
	СтруктураПараметры.Вставить("Характеристика", ТекущиеДанныеХарактеристика);	
	ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ТекущиеДанныеХарактеристика);
	СтруктураПараметры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));

	//ПОДБОР ЦЕНЫ
	СтруктураПараметры.Вставить("ВидЦены", Объект.ВидЦен);
	СтруктураПараметры.Вставить("Цена", ПодборТекущаяЦена);	
	СтруктураПараметры.Вставить("Склад", Объект.Склад);
	СтруктураПараметры.Вставить("ДатаОтгрузки", ТекущаяДата());
	
	ДобавитьВКорзину(СтруктураПараметры, 1);
	
КонецПроцедуры


&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
		СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
		СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка",     Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
		СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонрзинаВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ЗаполнитьСписокВыбораВариантаОбеспечения(
	Элементы.Товары.ТекущиеДанные,
	ДанныеВыбора,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
		СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
		СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка",     Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
		СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяПродажа(Команда)
	
	Объект.Товары.Очистить();
	
	Объект.Партнер = "";
	Объект.Контрагент = "";
	Объект.Соглашение = "";
	Объект.Договор = "";
	КонтрагентПриИзменении();
	
	Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Элементы.СтраницыСписокНоменклатуры.ПодчиненныеЭлементы.Документ; 
	
КонецПроцедуры

&НаСервере
Процедура КорзинаУстановитьОтборПоТоварамСервер(Включить)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	ПодборТаблицаНоменклатура,
	"Ссылка",
	Объект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"),
	ВидСравненияКомпоновкиДанных.ВСписке, ,Включить);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУстановитьОтборПоТоварам(Команда)
	
	КорзинаУстановитьОтборПоТоварамСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаОтключитьОтборПоТоварам(Команда)
	
	КорзинаУстановитьОтборПоТоварамСервер(Ложь);
	
КонецПроцедуры

//============================================================================
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ

&НаКлиенте
Процедура СоздатьДокумент(Команда)
		
	Если Объект.ВидОперации = "Заказ покупателя" Тогда
		
		МассивДокументов = мЗаказПокупателя();
		Для Каждого Строка Из МассивДокументов Цикл
			ФормаДока = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
			ФормаДока.Открыть();
		КонецЦикла;
		
	ИначеЕсли Объект.ВидОперации = "Реализация" Тогда
		
		МассивДокументов = мРеализацияТоваров();
		Для Каждого Строка Из МассивДокументов Цикл
			ФормаДока = ПолучитьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
			ФормаДока.Открыть();
		КонецЦикла;
		
	ИначеЕсли Объект.ВидОперации = "Коммерческое предложение" Тогда
		
		МассивДокументов = мКоммерческоеПредложение();
		Для Каждого Строка Из МассивДокументов Цикл
			ФормаДока = ПолучитьФорму("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
			ФормаДока.Открыть();
		КонецЦикла;
		
	ИначеЕсли Объект.ВидОперации = "Установка цен номенклатуры" Тогда
		
		МассивДокументов = мУстановкаЦенНоменклатуры();
		Для Каждого Строка Из МассивДокументов Цикл
			ФормаДока = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
			ФормаДока.Открыть();
		КонецЦикла;
	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция мКоммерческоеПредложение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Если Объект.РазбиватьДокументыПоСкладам Тогда
		
		Объект.Товары.Сортировать("Организация,Склад");
		
		НовыйДокумент = Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка();
		
		ВремОрганизация = Справочники.Организации.ПустаяСсылка();
		ВремРазмещение = Справочники.Склады.ПустаяСсылка();
		
		ТаблицаРазделения = Объект.Товары.Выгрузить();
		ТаблицаРазделения.Свернуть("Организация,Склад");
		
		Для Каждого Шапка Из ТаблицаРазделения Цикл		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Организация", Шапка.Организация);
			ПараметрыОтбора.Вставить("Склад", Шапка.Склад);
			
			ТаблЧасть = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			НовыйДокумент = Документы.КоммерческоеПредложениеКлиенту.СоздатьДокумент(); 
			НовыйДокумент.Дата        = ТекущаяДата();
			НовыйДокумент.Комментарий = "";
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
			НовыйДокумент.Статус      = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
			НовыйДокумент.Согласован  = Истина;
			НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
			НовыйДокумент.Партнер     = Объект.Партнер;
			НовыйДокумент.Соглашение  = Объект.Соглашение;
						
			Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
				Попытка //113
					НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
				Исключение //112
					НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
				КонецПопытки;			
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
			
			НовыйДокумент.Валюта      = Объект.Валюта;
			НовыйДокумент.Склад       = Шапка.Склад;			
			
			Для Каждого Стр из ТаблЧасть Цикл					
				СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				СтрокаТЧ.Характеристика   = Стр.Характеристика;
				СтрокаТЧ.Упаковка         = Стр.Упаковка;
				СтрокаТЧ.Количество       = Стр.Количество;
				СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
				СтрокаТЧ.ВидЦены          = Объект.ВидЦен;
				СтрокаТЧ.Цена             = Стр.Цена;
				СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
			КонецЦикла;
			
			//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
			
			НовыйДокумент.Записать();
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		КонецЦикла;
		
	Иначе
		
		НовыйДокумент = Документы.КоммерческоеПредложениеКлиенту.СоздатьДокумент(); 
		НовыйДокумент.Дата        = ТекущаяДата();
		НовыйДокумент.Комментарий = "";
		НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
		НовыйДокумент.Статус      = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
		НовыйДокумент.Согласован  = Истина;
		НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Организация = Объект.Организация;
		НовыйДокумент.Партнер     = Объект.Партнер;
		НовыйДокумент.Соглашение  = Объект.Соглашение;
				
		Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
			Попытка //113
				НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
			Исключение //112
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			КонецПопытки;			
		Иначе
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
				
		НовыйДокумент.Валюта      = Объект.Валюта;
		НовыйДокумент.Склад       = Объект.Склад;

		Для Каждого Стр из Объект.Товары Цикл					
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.Характеристика;
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			СтрокаТЧ.Количество       = Стр.Количество;
			СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦен;
			СтрокаТЧ.Цена             = Стр.Цена;
			СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		КонецЦикла;
		
		//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция мЗаказПокупателя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Если Объект.РазбиватьДокументыПоСкладам Тогда
		
		Объект.Товары.Сортировать("Организация,Склад");
		
		НовыйДокумент = Документы.ЗаказКлиента.ПустаяСсылка();
		
		ВремОрганизация = Справочники.Организации.ПустаяСсылка();
		ВремРазмещение = Справочники.Склады.ПустаяСсылка();
		
		ТаблицаРазделения = Объект.Товары.Выгрузить();
		ТаблицаРазделения.Свернуть("Организация,Склад");
		
		Для Каждого Шапка Из ТаблицаРазделения Цикл		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Организация", Шапка.Организация);
			ПараметрыОтбора.Вставить("Склад", Шапка.Склад);
			
			ТаблЧасть = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент(); 
			НовыйДокумент.Дата        = ТекущаяДата();
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Партнер     = Объект.Партнер;
			НовыйДокумент.Соглашение  = Объект.Соглашение;   
			НовыйДокумент.Контрагент  = Объект.Контрагент;
			НовыйДокумент.Договор     = Объект.Договор;
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(НовыйДокумент.Партнер, НовыйДокумент.КонтактноеЛицо);
						
			Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
				Попытка //113
					НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
				Исключение //112
					НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
				КонецПопытки;			
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
			
			НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
			НовыйДокумент.СпособДоставки = Объект.СпособДоставки;
			НовыйДокумент.ЗонаДоставки = Объект.ЗонаДоставки;
			НовыйДокумент.ВремяДоставкиС = Объект.ВремяДоставкиС;
			НовыйДокумент.ВремяДоставкиПо = Объект.ВремяДоставкиПо;
			НовыйДокумент.ДатаОтгрузки = Объект.ДатаОтгрузки;
			НовыйДокумент.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке;

			НовыйДокумент.ДатаОтгрузки = Объект.ДатаОтгрузки;
			
			НовыйДокумент.Статус      = Объект.СтатусЗаказаКлиента;
			НовыйДокумент.Согласован  = Истина;
			НовыйДокумент.Менеджер    = Объект.Менеджер;
			НовыйДокумент.ДатаСогласования = ТекущаяДата();

			НовыйДокумент.Валюта      = Объект.Валюта;
			НовыйДокумент.Приоритет   = Объект.Приоритет;
			НовыйДокумент.Склад       = Шапка.Склад;
			НовыйДокумент.Подразделение = Объект.Подразделение;
			НовыйДокумент.ЖелаемаяДатаОтгрузки = Объект.ДатаОтгрузки;
			
			НовыйДокумент.Комментарий = "";
			
			Для Каждого Стр из ТаблЧасть Цикл					
				СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				СТрокаТЧ.ВариантОбеспечения = Стр.ВариантОбеспечения;
				СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				СтрокаТЧ.Характеристика   = Стр.Характеристика;
				СтрокаТЧ.Упаковка         = Стр.Упаковка;
				СтрокаТЧ.Количество       = Стр.Количество;
				СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
				СтрокаТЧ.ВидЦены          = Стр.ВидЦены;
				СтрокаТЧ.Цена             = Стр.Цена;
				СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
				СтрокаТЧ.Склад            = Шапка.Склад;
				СтрокаТЧ.СрокПоставки     = 1;
				СтрокаТЧ.ДатаОтгрузки     = Объект.ДатаОтгрузки;
			КонецЦикла;
			
			//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
			
			НовыйДокумент.ЗаполнитьЭтапыГрафикаОплаты();
			
			НовыйДокумент.Записать();
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		КонецЦикла;
		
	Иначе
		
		НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент(); 
		НовыйДокумент.Дата        = ТекущаяДата();		
		НовыйДокумент.Организация = Объект.Организация;
		НовыйДокумент.Партнер     = Объект.Партнер;
		НовыйДокумент.Соглашение  = Объект.Соглашение;
		НовыйДокумент.Контрагент  = Объект.Контрагент;
		НовыйДокумент.Договор     = Объект.Договор;

		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(НовыйДокумент.Партнер, НовыйДокумент.КонтактноеЛицо);
		
		Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
			Попытка //113
				НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
			Исключение //112
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			КонецПопытки;
		Иначе
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;

		НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
		НовыйДокумент.Валюта      = Объект.Валюта;
		НовыйДокумент.СпособДоставки = Объект.СпособДоставки;
		НовыйДокумент.ДатаОтгрузки   = Объект.ДатаОтгрузки;
		
		НовыйДокумент.Статус      = Объект.СтатусЗаказаКлиента;
		НовыйДокумент.Согласован  = Истина;
		НовыйДокумент.Менеджер    = Объект.Менеджер;
		НовыйДокумент.ДатаСогласования = ТекущаяДата();
		
		НовыйДокумент.Приоритет   = Объект.Приоритет;
		НовыйДокумент.Склад       = Объект.Склад;
		НовыйДокумент.Подразделение = Объект.Подразделение;
						
		НовыйДокумент.Комментарий = "";
		
		Для Каждого Стр из Объект.Товары Цикл					
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СТрокаТЧ.ВариантОбеспечения = Стр.ВариантОбеспечения;
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.Характеристика;
			
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			СтрокаТЧ.Количество       = Стр.Количество;
			СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
			
			СтрокаТЧ.ВидЦены          = Стр.ВидЦены;
			СтрокаТЧ.Цена             = Стр.Цена;
			СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
			
			СтрокаТЧ.Склад            = Стр.Склад;
			СтрокаТЧ.СрокПоставки     = 1;
			СтрокаТЧ.ДатаОтгрузки     = Объект.ДатаОтгрузки;
		КонецЦикла;
		
		//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.ЗаполнитьЭтапыГрафикаОплаты();
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция мРеализацияТоваров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Если Объект.РазбиватьДокументыПоСкладам Тогда
		
		Объект.Товары.Сортировать("Организация,Склад");
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		
		ВремОрганизация = Справочники.Организации.ПустаяСсылка();
		ВремРазмещение = Справочники.Склады.ПустаяСсылка();
		
		ТаблицаРазделения = Объект.Товары.Выгрузить();
		ТаблицаРазделения.Свернуть("Организация,Склад");
		
		Для Каждого Шапка Из ТаблицаРазделения Цикл		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Организация", Шапка.Организация);
			ПараметрыОтбора.Вставить("Склад", Шапка.Склад);
			
			ТаблЧасть = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НовыйДокумент.Дата        = ТекущаяДата(); 		
			НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Партнер     = Объект.Партнер;
			НовыйДокумент.Соглашение  = Объект.Соглашение;
			
			Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
				Попытка //113
					НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
				Исключение //112
					НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
				КонецПопытки;
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
						
			НовыйДокумент.Статус      = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
			НовыйДокумент.Валюта      = Объект.Валюта;
			НовыйДокумент.Склад       = Шапка.Склад;
			НовыйДокумент.Подразделение = Объект.Подразделение;
			НовыйДокумент.Согласован    = Истина;
			НовыйДокумент.ДатаРаспоряжения = ТекущаяДата();
			
			НовыйДокумент.Менеджер    = Объект.Менеджер;
			НовыйДокумент.Комментарий = "";
			
			Для Каждого Стр из ТаблЧасть Цикл					
				СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				СтрокаТЧ.Характеристика   = Стр.Характеристика;
				СтрокаТЧ.Упаковка         = Стр.Упаковка;
				СтрокаТЧ.Количество       = Стр.Количество;
				СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
				СтрокаТЧ.ВидЦены          = Стр.ВидЦены;
				СтрокаТЧ.Цена             = Стр.Цена;
				СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
				СтрокаТЧ.Склад            = Шапка.Склад;
			КонецЦикла;
			
			//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
			
			НовыйДокумент.Записать();
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		КонецЦикла;
		
	Иначе
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Дата        = ТекущаяДата(); 
		НовыйДокумент.ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
		НовыйДокумент.Организация = Объект.Организация;
		НовыйДокумент.Партнер     = Объект.Партнер;
		НовыйДокумент.Соглашение  = Объект.Соглашение;
		
		Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
			Попытка //113
				НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
			Исключение //112
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			КонецПопытки;
		Иначе
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
					
		НовыйДокумент.Валюта      = Объект.Валюта;
		НовыйДокумент.Менеджер    = Объект.Менеджер;	
		НовыйДокумент.Согласован  = Истина;
		НовыйДокумент.ДатаРаспоряжения = ТекущаяДата();	
		НовыйДокумент.Статус      = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.Склад       = Объект.Склад;
		НовыйДокумент.Подразделение = Объект.Подразделение;
		
		НовыйДокумент.Комментарий = "";
		
		Для Каждого Стр из Объект.Товары Цикл					
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.Характеристика;
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			СтрокаТЧ.Количество       = Стр.Количество;
			СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
			СтрокаТЧ.ВидЦены          = Стр.ВидЦены;
			СтрокаТЧ.Цена             = Стр.Цена;
			СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
			СтрокаТЧ.Склад            = Стр.Склад;
		КонецЦикла;
		
		//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция мУстановкаЦенНоменклатуры()
	
	МассивДокументов = Новый Массив;

	НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Комментарий = "";
	НовыйДокумент.Согласован = Истина;
	НовыйДокумент.Статус     = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
	СтрокаТЧ.ВидЦены = Объект.ВидЦен;	
	
	Для Каждого Стр Из Объект.Товары Цикл
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		СтрокаТЧ.Характеристика   = Стр.Характеристика;
		СтрокаТЧ.ВидЦены          = Объект.ВидЦен;
		СтрокаТЧ.Цена             = Стр.Цена;	
		СтрокаТЧ.ЦенаИзмененаВручную = Истина;
		
	КонецЦикла;
	
	НовыйДокумент.Записать();
	МассивДокументов.Добавить(НовыйДокумент.Ссылка);

	
	Возврат МассивДокументов;
	
КонецФункции


//============================================================================
// 

&НаКлиенте
Процедура НавигацияЗаказовПриАктивизацииСтроки(Элемент)
	
	//Элементы.МониторЗаказы.ОтборСтрок = Неопределено;	
	
	Если Элементы.НавигацияМониторЗаказов.ТекущаяСтраница = Элементы.НавигацияМониторЗаказов.ПодчиненныеЭлементы.Клиенты Тогда
		
		ТекущиеДанные = Элементы.НавигацияКлиентыМониторЗаказов.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
				Элементы.МониторЗаказы.ОтборСтрок = Новый ФиксированнаяСтруктура("Партнер",ТекущиеДанные.Партнер);
			Иначе
				Элементы.МониторЗаказы.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.МониторЗаказы.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.НавигацияМониторЗаказов.ТекущаяСтраница = Элементы.НавигацияМониторЗаказов.ПодчиненныеЭлементы.ДатаОтгрузки Тогда
		
		ТекущиеДанные = Элементы.НавигацияДатаОтгрузкиМониторЗаказов.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОтгрузки) Тогда
				Элементы.МониторЗаказы.ОтборСтрок = Новый ФиксированнаяСтруктура("ДатаОтгрузки",ТекущиеДанные.ДатаОтгрузки);
			Иначе
				Элементы.МониторЗаказы.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.МониторЗаказы.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.НавигацияМониторЗаказов.ТекущаяСтраница = Элементы.НавигацияМониторЗаказов.ПодчиненныеЭлементы.Менеджеры Тогда
		
		ТекущиеДанные = Элементы.НавигацияМенеджерыМониторЗаказов.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Менеджер) Тогда
				Элементы.МониторЗаказы.ОтборСтрок = Новый ФиксированнаяСтруктура("Менеджер",ТекущиеДанные.Менеджер);
			Иначе
				Элементы.МониторЗаказы.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.МониторЗаказы.ОтборСтрок = Неопределено;	
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииПоказатьСкрыть(Команда)
	
	ОбновитьВсеОтборыСервер();
	
	Элементы.Навигация.Видимость = ИспользоватьНавигацию;
	
КонецПроцедуры


//============================================================================
// ШТРИХКОДЫ И ТОРГОВОЕ ОБОРУДОВАНИЕ


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска;
	//Сообщить("ьвапфвапф");
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		
		ПолученныйШтрихкод = "";
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	//ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска;
	//Сообщить("325463564");
	
КонецПроцедуры


//============================================================================
// 

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
КонецПроцедуры

&НаКлиенте
Процедура МониторЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.МониторЗаказы.ТекущиеДанные;
	ПоказатьЗначение(Неопределено, ТекущаяСтрока.ЗаказКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроцентРучнойСкидкиПриИзменении(Элемент)
	
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры



#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.Товары,
	МассивСтрок, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, Соглашение, Организация, РасчитыватьНаборы, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	Объект.Соглашение,
	Объект.Организация,
	Истина,
	"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
	),
	СтруктураДействий);
	
	//ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	//РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.Товары,
	МассивСтрок, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ЦенаВключаетНДС, РасчитыватьНаборы, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	Объект.ЦенаВключаетНДС,
	Истина,
	"Цена, ВидЦены"
	),
	СтруктураДействий);
	
	//ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	//РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	//ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	//РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	//СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		
		ПараметрыСкидки = Новый Структура();
		ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
		ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
		ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
		ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
		ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		ПараметрыСкидки.Вставить("РеализацияСверхЗаказа", Ложь);
		
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
		
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	//ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в погмощнике.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
				Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в помощнике?'"), ДанныеКартыЛояльности.Партнер),
				РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в помощник контрагента ""%1"" и соглашение ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в помощник контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в помощник соглашение ""%2""?'");
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
				Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение),
				РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		//КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Знач Оповещение)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма,,,, Новый ОписаниеОповещения("ПрименитьИзмененияСкидокНаценокНаКлиентеЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПрименитьИзмененияСкидокНаценокНаКлиентеФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	ПрименитьИзмененияСкидокНаценокНаКлиентеФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиентеФрагмент(Знач Оповещение)
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скидки (наценки)'"),
	,
	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	БиблиотекаКартинок.Информация32);
	//ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти





&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
	"НазначитьРучнуюСкидкуЗавершение", 
	ЭтотОбъект, 
	Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта,
	Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		//РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
	"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
	ЭтотОбъект, 
	Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта,
	Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		//РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	//РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда) Экспорт
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
		Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Объект.ЦенаВключаетНДС,
		Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗакрытьОбработку Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Работа будет завершена, все введенные данные будут потеряны. Закрыть?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьОбработку = Истина;
        Закрыть();
    КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура ОткрытьСправочникСловарьАвтозамен(Команда)
	
	ОткрытьФорму("РегистрСведений.мегапрайсСловарьАвтозамен.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналЗаказов(Команда)
	
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаСписка");

КонецПроцедуры


ЗакрытьОбработку = Ложь;






































