&НаКлиенте
Перем ЗакрытьОбработку;

&НаКлиенте
Перем ПоказатьРасшифровки;

&НаКлиенте
Перем ТекущаяСтраницаРасшифровки;

&НаКлиенте
Перем ЗакладкаПоставщики;
&НаКлиенте
Перем ЗакладкаТекущиеОстатки;
&НаКлиенте
Перем ЗакладкаДинамика;
&НаКлиенте
Перем ЗакладкаРасшифровкаИсторияЗакупок;			
&НаКлиенте
Перем ЗакладкаРасшифровкаЗаказыПоставщикам;
&НаКлиенте
Перем ЗакладкаРасшифровкаЗаказыКлиентов;

//============================================================================
// АВТОР

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");

КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПроверитьОбновления(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/news/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysМегапрайс(Команда)
		
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсИмпортПрайсаПартнера.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсИмпортПрайсаПартнера.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		ЗапуститьПриложение("http://subsystems.ru/catalog/27/595/");
	Конецесли;
	
КонецПроцедуры

//============================================================================
// 

&НаСервере
Процедура ИнициализироватьОбработкуСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ИнициализироватьОбработку();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры



&НаСервере
Процедура ИспользоватьМегапрайсПриИзменении()

	ИнициализироватьОбработкуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьОбработкуСервер();
	
	Если Параметры.Свойство("РасширенныйВидЦен") Тогда 
		Объект.РасширенныйВидЦен = Параметры.РасширенныйВидЦен;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РасширенныйВидЦен) Тогда 
		МегапрайсЗаполнитьПравилаРасчетаЦен();
	КонецЕсли;
	
	Если Параметры.Свойство("ПрайсПартнера") Тогда 
		НоваяСтрока = Объект.ПрайсыПоставщиков.Добавить();
		НоваяСтрока.Партнер = Параметры.ПрайсПартнера.Партнер;
		НоваяСтрока.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройки(Команда)
	
	ИнициализироватьОбработкуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВариантНавигацииПоНоменклатуре = "По Иерархии";

	Если Параметры.Свойство("РасширенныйВидЦен") Тогда 
		Объект.РасширенныйВидЦен = Параметры.РасширенныйВидЦен;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.РасширенныйВидЦен) Тогда 
		МегапрайсЗаполнитьПравилаРасчетаЦен();
	КонецЕсли;
	
	ПанельНавигацииПометка = Ложь;
	Элементы.Навигация.Видимость = ПанельНавигацииПометка;

	ТекущаяСтраницаРасшифровки = Элементы.ДопИнформация.ТекущаяСтраница;
	
	ЗакладкаПоставщики = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаПоставщики;
	ЗакладкаТекущиеОстатки = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаТекущиеОстатки;
	ЗакладкаДинамика = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаДинамика;
	ЗакладкаРасшифровкаИсторияЗакупок = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаИсторияЗакупок;			
	ЗакладкаРасшифровкаЗаказыПоставщикам = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаЗаказыПоставщикам;
	ЗакладкаРасшифровкаЗаказыКлиентов = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаЗаказыКлиентов;
	
	УстановитьВидимостьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Если Параметры.Свойство("РасширенныйВидЦен") Тогда 
		Объект.РасширенныйВидЦен = Параметры.РасширенныйВидЦен;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.РасширенныйВидЦен) Тогда 
		МегапрайсЗаполнитьПравилаРасчетаЦен();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ДанныеПоТовару.Видимость = Объект.РасширенныйРежимРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйРежимРаботыПриИзменении(Элемент)
	
	ИнициализироватьОбработкуСервер();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры


//============================================================================
// СЛУЖЕБНЫЕ

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧисло(Число, ПорядокОкругления, ОкруглятьВБольшуюСторону = Истина) Экспорт
	
	Перем Результат;
	
	Если ПорядокОкругления = 0 Тогда
		Возврат Число;
	КОнецЕсли;
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервалов = Число / ПорядокОкругления;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
	
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлится до 0.4
			Результат = ПорядокОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлится до 0.35,
			// а 0.376 до 0.4
			Результат = ПорядокОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


//============================================================================
// 

&НаСервере
Процедура ЗаполнитьСписокПоставщиков()
	
	Объект.ПрайсыПоставщиков.Очистить();
	
	Если Объект.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ 
		|	ЦеныПоставщиков.ПрайсПартнера.Партнер КАК Партнер,
		|	ЦеныПоставщиков.ПрайсПартнера.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныПоставщиков
		|ГДЕ
		|	ЦеныПоставщиков.ПрайсПартнера.ВидЦенЗакупочная = &ВидЦенЗакупочная
		|    "+?(ЗначениеЗаполнено(Объект.ОграничениеПоДате)," И ЦеныПоставщиков.Период >= &ОграничениеПоДате","")+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныПоставщиков.ПрайсПартнера.Партнер,
		|	ЦеныПоставщиков.ПрайсПартнера.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ"; 

	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ 
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер КАК Партнер
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныНоменклатурыПоставщиковСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер.Поставщик = ИСТИНА
		|    "+?(ЗначениеЗаполнено(Объект.ОграничениеПоДате)," И ЦеныНоменклатурыПоставщиковСрезПоследних.Период >= &ОграничениеПоДате","")+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВидЦенЗакупочная",Объект.ВидЦенЗакупочная);
	Запрос.УстановитьПараметр("ОграничениеПоДате",Объект.ОграничениеПоДате);
	
	Таблица = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Объект.ПрайсыПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКонкурентов()
	
	Объект.ПрайсыКонкурентов.Очистить();
		
	Если Объект.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныПоставщиков.ПрайсПартнера.Партнер КАК Партнер,
		|	ЦеныПоставщиков.ПрайсПартнера.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныПоставщиков
		|ГДЕ
		|	ЦеныПоставщиков.ПрайсПартнера.ВидЦенПродажи = &ВидЦенПродажи
		|    "+?(ЗначениеЗаполнено(Объект.ОграничениеПоДате)," И ЦеныПоставщиков.Период >= &ОграничениеПоДате","")+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныПоставщиков.ПрайсПартнера.Партнер,
		|	ЦеныПоставщиков.ПрайсПартнера.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ"; 
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер КАК Партнер,
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныНоменклатурыПоставщиковСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер.Конкурент = ИСТИНА
		|    "+?(ЗначениеЗаполнено(Объект.ОграничениеПоДате)," И ЦеныНоменклатурыПоставщиковСрезПоследних.Период >= &ОграничениеПоДате","")+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидЦенПродажи",Объект.ВидЦенПродажи);
	Запрос.УстановитьПараметр("ОграничениеПоДате",Объект.ОграничениеПоДате);

	Таблица = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Объект.ПрайсыКонкурентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьСписокПоставщиков(Команда)
	
	ЗаполнитьСписокПоставщиков();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСписокКонкурентов(Команда)
	
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ПроцентНаценки",ТекЗначениеНаценки);

	ЗаполнитьСписокКонкурентов();
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ПроверкаПолей = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦенЗакупочная) Тогда
		Сообщить("Не заполнен базовый вид цен.");
		ПроверкаПолей = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦенПродажи) Тогда
		Сообщить("Не заполнен вид цен продажи.");
		ПроверкаПолей = Истина;
	КонецЕсли;
	Если ПроверкаПолей Тогда
		Возврат;
	КонецЕсли;	

	Объект.ТаблицаНоменклатуры.Очистить();

	мСформироватьТаблицу();
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.Анализатор;
	
КонецПроцедуры

&НаСервере
Процедура мСформироватьТаблицу() 

	Объект.ТаблицаНоменклатуры.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ГруппыНоменклатурыРеквизит = РеквизитФормыВЗначение("ГруппыНоменклатуры");
	ЦеновыеГруппыНавигацияРеквизит = РеквизитФормыВЗначение("ЦеновыеГруппыНавигация");

	ОбработкаОбъект.СформироватьТаблицуНаСервере(ГруппыНоменклатурыРеквизит,ЦеновыеГруппыНавигацияРеквизит);	
	
	ЗначениеВРеквизитФормы(ГруппыНоменклатурыРеквизит, "ГруппыНоменклатуры");
	ЗначениеВРеквизитФормы(ЦеновыеГруппыНавигацияРеквизит, "ЦеновыеГруппыНавигация");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

		
КонецПроцедуры


//============================================================================
// ИЗМЕНЕНИЕ ЦЕН

&НаСервере
Процедура ПересчетСтрокиПриИзменении(СтруктураПараметров)
	
	ТекЗначениеНаценки = СтруктураПараметров.ПроцентНаценки;
	
	//Сообщить(СтруктураПараметров.СтрВыд);
	СтрокаСоотв = Объект.ТаблицаНоменклатуры[СтруктураПараметров.СтрВыд-1];
	СтрокаСоотв.НаценкаРасчетнойЦены = ТекЗначениеНаценки;
	
	//СтруктураПар = Новый Структура;
	//СтруктураПар.Вставить("ТекущаяСтрока",СтрокаСоотв);
	
	ВыполнитьРасчетСтрокиДереваНоменклатуры(СтрокаСоотв);

КОнецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНаценкаРасчетнойЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	ТекЗначениеНаценки = ТекущаяСтрока.НаценкаРасчетнойЦены;
	
	ВыделенныеСтроки = Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки;	
	Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		НомерСтроки = Элементы.ТаблицаНоменклатуры.ДанныеСтроки(СтрВыд).НомерСтроки;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПроцентНаценки",ТекЗначениеНаценки);
		СтруктураПараметров.Вставить("СтрВыд",НомерСтроки);
		
		ПересчетСтрокиПриИзменении(СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры


//============================================================================
// ФОРМА

&НаКлиенте
Процедура ВариантНавигацииПоНоменклатуреПриИзменении(Элемент)
	
	Если ВариантНавигацииПоНоменклатуре = "По Иерархии" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Иерархия; 
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Ценовые группы" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.НавигацияЦеновыеГруппы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияТаблицыПриАктивизацииСтроки(Элемент)

	Если Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Иерархия Тогда
		
		ТекущиеДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Группа) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаНоменклатуры",ТекущиеДанные.Группа);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.НавигацияЦеновыеГруппы Тогда
		
		ТекущиеДанные = Элементы.ЦеновыеГруппыНавигация.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ЦеноваяГруппа) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ЦеноваяГруппа",ТекущиеДанные.ЦеноваяГруппа);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры



//============================================================================
// ПАНЕЛЬ ИНФОРМАЦИИ

&НаСервереБезКонтекста
Функция ИнформацияСформироватьОстаткиПоСкладам(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвободныеОстатки.Склад.Родитель КАК СкладРодитель,
	|	СвободныеОстатки.Склад КАК Склад,
	|	СвободныеОстатки.Характеристика КАК Характеристика,
	|	СУММА(СвободныеОстатки.ВНаличииОстаток) КАК ВНаличии,
	|	СУММА(СвободныеОстатки.ВРезервеСоСкладаОстаток) КАК ВРезервеСоСклада,
	|	СУММА(СвободныеОстатки.ВРезервеПодЗаказОстаток) КАК ВРезервеПодЗаказ,
	|	0 КАК МинимальноеКоличествоЗапаса,
	|	0 КАК МаксимальноеКоличествоЗапаса
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Номенклатура = &ВыбНоменклатура
	|				И Характеристика = &ВыбХарактеристика) КАК СвободныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстатки.Склад.Родитель,
	|	СвободныеОстатки.Склад,
	|	СвободныеОстатки.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварныеОграничения.Склад.Родитель,
	|	ТоварныеОграничения.Склад,
	|	ТоварныеОграничения.Характеристика,
	|	0,
	|	0,
	|	0,
	|	ТоварныеОграничения.МинимальноеКоличествоЗапаса,
	|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|ГДЕ
	|	ТоварныеОграничения.Номенклатура = &ВыбНоменклатура
	|	И ТоварныеОграничения.Характеристика = &ВыбХарактеристика
	|ИТОГИ
	|	СУММА(ВНаличии),
	|	СУММА(ВРезервеСоСклада),
	|	СУММА(ВРезервеПодЗаказ),
	|	СУММА(МинимальноеКоличествоЗапаса),
	|	СУММА(МаксимальноеКоличествоЗапаса)
	|ПО
	|	СкладРодитель,
	|	Склад,
	|	Характеристика";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСкладРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкладРодитель");
	Пока ВыборкаСкладРодитель.Следующий() Цикл					
		ВыборкаСклад = ВыборкаСкладРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл	
			Склад = ВыборкаСклад.Склад;
			
			ВыборкаХарактеристика = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаХарактеристика.Следующий() Цикл		
				
				НоваяСтрока = Новый Структура("Склад, Характеристика, ВНаличии, ВРезервеСоСклада, ВРезервеПодЗаказ, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристика);
				
				ТаблицаРезультат.Добавить(НоваяСтрока);					
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьДинамикаПродаж(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ПериодичностьДляЗапроса = Строка(ПараметрыЗапроса.Периодичность);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.КоличествоОборот КАК КоличествоПродажи,
	|	ВложенныйЗапрос.КоличествоНачальныйОстаток КАК НачальныйОстаток,
	|	ВложенныйЗапрос.КоличествоКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) КАК Период,
	|		СУММА(ВложенныйЗапрос.КоличествоОборот) КАК КоличествоОборот,
	|		СУММА(ВложенныйЗапрос.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	|		СУММА(ВложенныйЗапрос.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(СвободныеОстатки.Период, ДЕНЬ) КАК Период,
	|			0 КАК КоличествоОборот,
	|			СвободныеОстатки.ВНаличииНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|			СвободныеОстатки.ВНаличииПриход КАК ВНаличииПриход,
	|			СвободныеОстатки.ВНаличииРасход КАК ВНаличииРасход,
	|			СвободныеОстатки.ВНаличииКонечныйОстаток КАК КоличествоКонечныйОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					ДЕНЬ,
	|					,
	|					Номенклатура = &УсловиеОтбора
	|						И Характеристика = &ВыбХарактеристика) КАК СвободныеОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(ПродажиОбороты.Период, ДЕНЬ),
	|			ПродажиОбороты.КоличествоОборот,
	|			0,
	|			0,
	|			0,
	|			0
	|		ИЗ
	|			РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, ДЕНЬ, ) КАК ПродажиОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|				ПО ПродажиОбороты.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|				ПО ПродажиОбороты.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		ГДЕ
	|			АналитикаНоменклатуры.Номенклатура = &УсловиеОтбора
	|			И АналитикаНоменклатуры.Характеристика = &ВыбХарактеристика
	|			И АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|ИТОГИ
	|	СУММА(КоличествоПродажи),
	|	СУММА(НачальныйОстаток),
	|	СУММА(КонечныйОстаток)
	|ПО
	|	Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)
	|АВТОУПОРЯДОЧИВАНИЕ";
				
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"День",ПериодичностьДляЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДЕНЬ",ПериодичностьДляЗапроса);
		
	Запрос = Новый Запрос;	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УсловиеОтбора", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыЗапроса.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыЗапроса.КонецПериода));
	Запрос.УстановитьПараметр("РабочийКалендарь", ПараметрыЗапроса.РабочийКалендарь);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");
	Пока Выборка.Следующий() Цикл			
		НоваяСтрока = Новый Структура("Период, КоличествоПродажи, НачальныйОстаток, КонечныйОстаток");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаИсторияПоступлений(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Период КАК Дата,
	|	ПоступлениеТоваровУслуг.Партнер КАК Партнер,
	|	ПоступлениеТоваровУслуг.Регистратор КАК ДокументЗакупки,
	|	СУММА(ПоступлениеТоваровУслуг.КоличествоОборот) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ПоступлениеТоваровУслуг.КоличествоОборот) > 0
	|			ТОГДА СУММА(ПоступлениеТоваровУслуг.СуммаОборот) / СУММА(ПоступлениеТоваровУслуг.КоличествоОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаЗакупки,
	|	ПоступлениеТоваровУслуг.Регистратор.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(, , Регистратор, АналитикаУчетаНоменклатуры.Номенклатура = &ВыбНоменклатура) КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Период,
	|	ПоступлениеТоваровУслуг.Регистратор,
	|	ПоступлениеТоваровУслуг.Партнер,
	|	ПоступлениеТоваровУслуг.Регистратор.Валюта,
	|	ПоступлениеТоваровУслуг.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, Партнер, ДокументЗакупки, Количество, ЦенаЗакупки, Валюта, Склад");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаЗаказыПоставщикам(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщикам.ЗаказаноОстаток) КАК Заказано,
	|	СУММА(ЗаказыПоставщикам.КОформлениюОстаток) КАК КОформлению
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			,
	|			Номенклатура = &ВыбНоменклатура
	|				И Характеристика = &ВыбХарактеристика) КАК ЗаказыПоставщикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, ЖелаемаяДатаПоступления, Контрагент, ЗаказПоставщику, Склад, Заказано, КОформлению");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаЗаказыКлиентов(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыКлиентов.ЗаказКлиента.Дата КАК Дата,
	|	ЗаказыКлиентов.ЗаказКлиента.Статус КАК Статус,
	|	ЗаказыКлиентов.ЗаказКлиента.Партнер КАК Партнер,
	|	ЗаказыКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказыКлиентов.ЗаказКлиента.Склад КАК Склад,
	|	СУММА(ЗаказыКлиентов.ЗаказаноОстаток) КАК Заказано,
	|	СУММА(ЗаказыКлиентов.КОформлениюОстаток) КАК КОформлению
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|			,
	|			Номенклатура = &ВыбНоменклатура
	|				И Характеристика = &ВыбХарактеристика) КАК ЗаказыКлиентов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.ЗаказКлиента.Дата,
	|	ЗаказыКлиентов.ЗаказКлиента,
	|	ЗаказыКлиентов.ЗаказКлиента.Склад,
	|	ЗаказыКлиентов.ЗаказКлиента.Статус,
	|	ЗаказыКлиентов.ЗаказКлиента.Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, Статус, Партнер, ЗаказКлиента, Склад, Заказано, КОформлению");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияРасшифровкаИсторияПродажНоменклатуры(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Продажи.Период КАК Дата,
	|	Продажи.Регистратор КАК ДокументПродажи,
	|	Продажи.Склад КАК Склад,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	СУММА(Продажи.КоличествоОборот) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(Продажи.КоличествоОборот) > 0
	|			ТОГДА СУММА(Продажи.СуммаВыручкиОборот) / СУММА(Продажи.КоличествоОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, ) КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Продажи.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО Продажи.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	АналитикаНоменклатуры.Номенклатура = &ВыбНоменклатура
	|	И АналитикаНоменклатуры.Характеристика = &ВыбХарактеристика
	|	И АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Склад,
	|	АналитикаПоПартнерам.Партнер,
	|	Продажи.Период,
	|	Продажи.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, ДокументПродажи, Склад, Партнер, Количество, Цена");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция мИнформацияПолучитьАналоги(ТекущиеДанныеСтроки) Экспорт
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	мегапрайсВзаимозаменяемостьНоменклатуры.АналогНоменклатура КАК АналогНоменклатура,
	|	мегапрайсВзаимозаменяемостьНоменклатуры.АртикулАналога КАК АналогАртикул,
	|	мегапрайсВзаимозаменяемостьНоменклатуры.АналогНоменклатура.Производитель КАК Производитель,
	|	мегапрайсВзаимозаменяемостьНоменклатуры.Замена
	|ИЗ
	|	РегистрСведений.мегапрайсВзаимозаменяемостьНоменклатуры КАК мегапрайсВзаимозаменяемостьНоменклатуры
	|ГДЕ
	|	мегапрайсВзаимозаменяемостьНоменклатуры.Номенклатура = &ВыбНоменклатура";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ТекущиеДанныеСтроки.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("АналогНоменклатура, АналогАртикул, Производитель, Замена");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция РасшифровкиЦеныПоставщиков(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	Если ПараметрыЗапроса.ИспользоватьМегапрайс Тогда
		
		ПеречислениеВариантыКурса = Перечисления.мегапрайсВариантКурсаВалютыКонтрагента;

		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер КАК Поставщик,
		|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.ЦенаПродажи) КАК ЦенаПродажи,
		|	СУММА(ЦеныНоменклатурыКонтрагентов.Количество) КАК ОстатокКонтрагента,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Период) КАК ДатаЦены,
		|	ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	0 КАК ЦенаПересчет,
		|	0 КАК Наценка,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера КАК ПрайсПартнера,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ВариантКурсаВалютыКонтрагента КАК ВариантКурсаВалютыКонтрагента,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ИскажениеКурсаВалюты КАК ИскажениеКурсаВалюты,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ФиксированныйКурс КАК ФиксированныйКурс,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Приоритет КАК ПрайсПартнераПриоритет
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура = &ВыбНоменклатура) КАК ЦеныНоменклатурыКонтрагентов
		|ГДЕ
		|	(ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ВидЦенЗакупочная = &ВидЦенЗакупочная
		|			ИЛИ ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ВидЦенПродажи = &ВидЦенПродажи)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер,
		|	ЦеныНоменклатурыКонтрагентов.Валюта,
		|	ЦеныНоменклатурыКонтрагентов.Период,
		|	ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ВариантКурсаВалютыКонтрагента,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ИскажениеКурсаВалюты,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.ФиксированныйКурс,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрайсПартнераПриоритет УБЫВ";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыКонтрагентов.Партнер КАК Поставщик,
		|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
		|	ЦеныНоменклатурыКонтрагентов.Цена КАК ЦенаПоставщика,
		|	ЦеныНоменклатурыКонтрагентов.Период КАК ДатаЦены,
		|	ЦеныНоменклатурыКонтрагентов.Характеристика КАК ХарактеристикаНоменклатуры,
		|	0 КАК ОстатокКонтрагента,
		|	0 КАК ЦенаПродажи,
		|	0 КАК Наценка,
		|	0 КАК ЦенаПересчет
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура = &ВыбНоменклатура) КАК ЦеныНоменклатурыКонтрагентов
		|ГДЕ
		|	ЦеныНоменклатурыКонтрагентов.Партнер.Поставщик = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыКонтрагентов.Партнер,
		|	ЦеныНоменклатурыКонтрагентов.Валюта,
		|	0,
		|	ЦеныНоменклатурыКонтрагентов.Период,
		|	ЦеныНоменклатурыКонтрагентов.Характеристика,
		|	0,
		|	ЦеныНоменклатурыКонтрагентов.Цена,
		|	0,
		|	0
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура = &ВыбНоменклатура) КАК ЦеныНоменклатурыКонтрагентов
		|ГДЕ
		|	ЦеныНоменклатурыКонтрагентов.Партнер.Конкурент = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Поставщик";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВидЦенЗакупочная",ПараметрыЗапроса.ВидЦенЗакупочная);
	Запрос.УстановитьПараметр("ВидЦенПродажи",ПараметрыЗапроса.ВидЦенПродажи);
	
	
	ВозможныеПоставщикиТаб = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ВидЦенПродажи) Тогда
		ВалютаРасчетная = ПараметрыЗапроса.ВидЦенПродажи.ВалютаЦены;
	Иначе
		ВалютаРасчетная = ПараметрыЗапроса.Валюта;
	КонецЕсли;
	СтруктураВалютыРасчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
	ПоКурсуНач      = 0;	
	ЦенаПродажи = ПараметрыЗапроса.ЦенаПродажи;
	
	Для Каждого Выборка Из ВозможныеПоставщикиТаб Цикл
		//Если Выборка.ЦенаПоставщика = 0  Тогда
		//	Продолжить;
		//КонецЕсли;
				
		Если ЗначениеЗаполнено(Выборка.Валюта) И ВалютаРасчетная <> Выборка.Валюта Тогда			
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, ТекущаяДата());
			ПоКурсуНач = СтруктураВалюты.Курс;

			Если ПараметрыЗапроса.ИспользоватьМегапрайс Тогда
				Если Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБ Тогда
				ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсЧисло Тогда
					ПоКурсуНач = ПоКурсуНач + Выборка.ИскажениеКурсаВалюты;
				ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсПроцент Тогда	
					ПоКурсуНач = ПоКурсуНач *(1+Выборка.ИскажениеКурсаВалюты/100);
				ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.ФиксированныйКурс Тогда	
					ПоКурсуНач = Выборка.ФиксированныйКурс;
				КонецЕсли;
			КонецЕсли;
			Выборка.ЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.ЦенаПоставщика, Выборка.Валюта, ВалютаРасчетная, ПоКурсуНач, СтруктураВалютыРасчета.Курс);
		Иначе
			Выборка.ЦенаПересчет = Выборка.ЦенаПоставщика;
		КонецЕсли;
		
		Если Выборка.ЦенаПродажи > 0 И ЦенаПродажи > 0 Тогда
			НаценкаКЦенеКомпании = (ЦенаПродажи - Выборка.ЦенаПродажи)*100 / Выборка.ЦенаПродажи;
			Выборка.Наценка = НаценкаКЦенеКомпании;
		ИначеЕсли Выборка.ЦенаПересчет > 0 И ЦенаПродажи > 0 Тогда
			НаценкаКЦенеКомпании = (ЦенаПродажи - Выборка.ЦенаПересчет)*100 / Выборка.ЦенаПересчет;
			Выборка.Наценка = НаценкаКЦенеКомпании;
		КонецЕсли;

		НоваяСтрока = Новый Структура("ДатаЦены, ПрайсПартнера, Поставщик, ОстатокКонтрагента, ЦенаПоставщика, Валюта, ЦенаПересчет, ЦенаПродажи, Наценка");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаИсторияЦен(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Период КАК Период,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЦеныНоменклатуры.Регистратор,
	|	ЦеныНоменклатуры.ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ВидЦены = &ВидЦенПродажи
	|	И ЦеныНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВидЦенПродажи", ПараметрыЗапроса.ВидЦенПродажи);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Период, Цена, Валюта, Регистратор, ВидЦены");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервере
Функция ПолучитьКартинкуНоменклатуры(Номенклатура)
	
	//УстановитьПривилегированныйРежим(Истина);
	
	ФайлКартинкиНоменклатуры = Номенклатура.ФайлКартинки;
	
	Возврат ФайлКартинкиНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ИнформацияПолучитьСвойстваНоменклатуры(ТекущиеДанныеСтроки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Свойство КАК Свойство,
	|	СпрНоменклатура.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &ТекНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойство";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекНоменклатура", ТекущиеДанныеСтроки.Номенклатура);
	
	СвойстваНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ИнформацияПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки)
	
	ПодборКартинкаНоменклатуры = ПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);		
	Если ЗначениеЗаполнено(ПодборКартинкаНоменклатуры) Тогда
		КартинкаНоменклатуры = ПолучитьНавигационнуюСсылкуКартинки(ПодборКартинкаНоменклатуры, УникальныйИдентификатор)
	Иначе
		КартинкаНоменклатуры = "";
	Конецесли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеНоменклатуры(Номенклатура)
	
	ОписаниеНоменклатуры = Номенклатура.Описание;
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции





&НаКлиенте
Процедура ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,ИмяСтраницы)
		
	Если ИмяСтраницы = "ЗакладкаПоставщики" Тогда
		
		СтруктураИнформации = РасшифровкиЦеныПоставщиков(ПараметрыЗапроса);
		РасшифровкаЦеныПоставщиков.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЦеныПоставщиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;	
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаРасшифровкаИсторияЗакупок" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаИсторияПоступлений(ПараметрыЗапроса);
		РасшифровкаИсторияПоступлений.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаИсторияПоступлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаИсторияИзмененияЦены" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаИсторияЦен(ПараметрыЗапроса);
		РасшифровкаИсторияЦенНоменклатуры.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаИсторияЦенНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаРасшифровкаЗаказыПоставщикам" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаЗаказыПоставщикам(ПараметрыЗапроса);
		РасшифровкаЗаказыПоставщикам.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЗаказыПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаРасшифровкаЗаказыПоставщикам" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаЗаказыПоставщикам(ПараметрыЗапроса);
		РасшифровкаЗаказыПоставщикам.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЗаказыПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
	
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаТекущиеОстатки" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьОстаткиПоСкладам(ПараметрыЗапроса);
		РасшифровкаОстаткиТоваров.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаОстаткиТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаДинамика" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьДинамикаПродаж(ПараметрыЗапроса);
		Объект.ДинамикаПродаж.Очистить();
		
		ДинамикаОборотов.Обновление = Истина;
		ДинамикаОборотов.Очистить();

		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = Объект.ДинамикаПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
				
				
		Объект.ДинамикаПродаж.Сортировать("Период ВОЗР");
		Для Каждого Выборка Из Объект.ДинамикаПродаж Цикл	
			ВыборкаПериод = Выборка.Период;
			ВыборкаКоличествоОборот = Выборка.КоличествоПродажи;
			ВыборкаНачальныйОстаток = Выборка.НачальныйОстаток;
			ВыборкаКонечныйОстаток  = Выборка.КонечныйОстаток;
			
			СерияПродажи = ДинамикаОборотов.УстановитьСерию("Продажи по перидам");
			СерияПродажи.Текст       = "Продажи по перидам";
			СерияПродажи.Расшифровка = "Продажи по перидам";
			
			СерияОстатки = ДинамикаОборотов.УстановитьСерию("Остатки по перидам");
			СерияОстатки.Текст       = "Остатки по перидам";
			СерияОстатки.Расшифровка = "Остатки по перидам";

            Точка  = ДинамикаОборотов.УстановитьТочку(Формат(ВыборкаПериод, "ДФ = ""дд ММММ"""));	
			//Точка  = ДинамикаОборотов.УстановитьТочку(ПолучитьФорматДаты(ВыборкаПериод, Объект.Периодичность));	
			ДинамикаОборотов.УстановитьЗначение(Точка, СерияПродажи, ВыборкаКоличествоОборот, СерияПродажи.Расшифровка,ВыборкаКоличествоОборот);
			ДинамикаОборотов.УстановитьЗначение(Точка, СерияОстатки, ВыборкаНачальныйОстаток, СерияОстатки.Расшифровка,ВыборкаНачальныйОстаток);
		КонецЦикла;
		Объект.ДинамикаПродаж.Сортировать("Период УБЫВ");
		
		ДинамикаОборотов.ОбластьПостроения.ВертикальныеМетки = Истина;
		ДинамикаОборотов.АвтоТранспонирование = Истина;
		ДинамикаОборотов.Обновление = Истина;	
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаИсторияПродаж" Тогда
		
		СтруктураИнформации = ИнформацияРасшифровкаИсторияПродажНоменклатуры(ПараметрыЗапроса);
		РасшифровкаИсторияПродажНоменклатуры.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаИсторияПродажНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;	
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаРасшифровкаЗаказыКлиентов" Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаЗаказыКлиентов(ПараметрыЗапроса);
		РасшифровкаЗаказыКлиентов.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЗаказыКлиентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;	
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаИнформацияОТоваре" Тогда
		
		ИнформацияПолучитьСвойстваНоменклатуры(ПараметрыЗапроса);
		ИнформацияПолучитьКартинкуНоменклатуры(ПараметрыЗапроса);		
		ОписаниеНоменклатуры = ПолучитьОписаниеНоменклатуры(ПараметрыЗапроса.Номенклатура);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
		
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗакладкаПоставщики = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаПоставщики;
	ЗакладкаРасшифровкаИсторияЗакупок = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаИсторияЗакупок;
	ЗакладкаИсторияИзмененияЦены = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаИсторияИзмененияЦены;	
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыЗапроса.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
	ПараметрыЗапроса.Вставить("ЦенаПродажи", ТекущиеДанные.НоваяЦенаПродажи);

	ПараметрыЗапроса.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	ПараметрыЗапроса.Вставить("ВидЦенЗакупочная", Объект.ВидЦенЗакупочная);
	ПараметрыЗапроса.Вставить("ВидЦенПродажи", Объект.ВидЦенПродажи);
	ПараметрыЗапроса.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода", Объект.КонецПериода);
	ПараметрыЗапроса.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыЗапроса.Вставить("РабочийКалендарь", Объект.РабочийКалендарь);
	ПараметрыЗапроса.Вставить("Валюта", Объект.Валюта);
	
	ИмяТекущейСтраницы = ЭтаФорма.Элементы.ДопИнформация.ТекущаяСтраница.Имя;
	
	Попытка
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса, ИмяТекущейСтраницы);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТаблицаНоменклатурыПриАктивизацииСтрокиОбработчикОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПодвалаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраницаРасшифровки = Элементы.ДопИнформация.ТекущаяСтраница;
	
	ТаблицаНоменклатурыПриАктивизацииСтроки("");
	
КонецПроцедуры




&НаКлиенте
Процедура ТаблицаВыделитьВсе(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
	Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСнятьПометки(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаВыделенного(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки;	
	Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		НомерСтроки = Элементы.ТаблицаНоменклатуры.ДанныеСтроки(СтрВыд).НомерСтроки;
		
		СтрокаСоотв = Объект.ТаблицаНоменклатуры[НомерСтроки-1];
		СтрокаСоотв.Пометка = Истина;
	КонецЦикла;
	Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка",Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаПодорожало(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Если Строка.НоваяЦенаПродажи > 0 И Строка.СтараяЦенаПродажи < Строка.НоваяЦенаПродажи Тогда
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка",Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаПодешевело(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Если Строка.НоваяЦенаПродажи > 0 И Строка.СтараяЦенаПродажи > Строка.НоваяЦенаПродажи Тогда
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка",Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаИзменилось(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Если Строка.НоваяЦенаПродажи > 0 И Строка.СтараяЦенаПродажи <> Строка.НоваяЦенаПродажи Тогда
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка",Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыКПереоценке(Команда)
	
	Элементы.ОтборыКПереоценке.Пометка = НЕ Элементы.ОтборыКПереоценке.Пометка;

	Если Элементы.ОтборыКПереоценке.Пометка Тогда
        Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка", Истина);

	Иначе
        Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено
	КонецЕсли;

КонецПроцедуры

Процедура ОтборыКЗаказу(Команда)
	
	Элементы.ОтборыКЗаказу.Пометка = НЕ Элементы.ОтборыКЗаказу.Пометка;
	
	Если Элементы.ОтборыКЗаказу.Пометка Тогда
		Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("КЗаказу", Истина);
	Иначе
		Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено
	КонецЕсли;
	
КонецПроцедуры



//============================================================================
// РЕГИСТРАЦИЯ ЦЕН

&НаСервере
Функция ВыполнитьУстановкаЦенНоменклатурыСерверУТ11()
	
	НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Комментарий = "";
	НовыйДокумент.Согласован = Истина;
	НовыйДокумент.Статус     = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	ЕстьВидЦенЗакупочная   = ЗначениеЗаполнено(Объект.ВидЦенЗакупочная);
	ЕстьВидЦенПродажиСтарая = ЗначениеЗаполнено(Объект.ВидЦенПродажиСтарая);
	
	Если НЕ Объект.НеРегистрироватьБазовуюЦену И ЕстьВидЦенЗакупочная Тогда
		СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
		СтрокаТЧ.ВидЦены = Объект.ВидЦенЗакупочная;
	КонецЕсли;

	СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
	СтрокаТЧ.ВидЦены = Объект.ВидЦенПродажи;
	
	Если ЕстьВидЦенПродажиСтарая Тогда
		СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
		СтрокаТЧ.ВидЦены = Объект.ВидЦенПродажиСтарая;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.ТаблицаНоменклатуры Цикл
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Объект.НеРегистрироватьБазовуюЦену И ЕстьВидЦенЗакупочная Тогда
			Если Стр.МинимальнаяЦенаПоставщика = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенЗакупочная;
			СтрокаТЧ.Цена             = Стр.МинимальнаяЦенаПоставщика;	
			СтрокаТЧ.ЦенаИзмененаВручную = Истина;
		КонецЕсли;
		
		Если Стр.НоваяЦенаПродажи = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажи;
		СтрокаТЧ.Цена             = Стр.НоваяЦенаПродажи;	
		СтрокаТЧ.ЦенаИзмененаВручную = Истина;
		
		Если ЕстьВидЦенПродажиСтарая Тогда
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажиСтарая;
			СтрокаТЧ.Цена             = Стр.СтараяЦенаПродажи;	
			СтрокаТЧ.ЦенаИзмененаВручную = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыйДокумент.Товары.Количество() > 0 Тогда
		НовыйДокумент.Записать();
	КонецЕсли;
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьУстановкуЦенНоменклатуры(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = ВыполнитьУстановкаЦенНоменклатурыСерверУТ11();
	ФормаДока = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	ФормаДока.Открыть();
	
КонецПроцедуры

//============================================================================
// ЗАКАЗЫ ПОСТАВЩИКАМ

&НаКлиенте
Процедура ЗагрузитьТаблицуИзФайла(Команда)
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаказПоставщикуСервер()
	
	УстановитьПривилегированныйРежим(Истина);

	Объект.СформированныеДокументы.Очистить();
	
	НовыйДокумент  = Документы.ЗаказПоставщику.ПустаяСсылка();
	МассивДокументов = Новый Массив;
		
	ТаблицаТоваровКЗаказу = Объект.ТаблицаНоменклатуры.Выгрузить();
	ТаблицаТоваровКЗаказу.Очистить();
	Для Каждого ВыборкаСтрока Из Объект.ТаблицаНоменклатуры Цикл
		Если ВыборкаСтрока.КоличествоЗаказать > 0 Тогда
			СтрокаДоб = ТаблицаТоваровКЗаказу.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб,ВыборкаСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРазделения = ТаблицаТоваровКЗаказу.Скопировать();
	ТаблицаРазделения.Свернуть("ЛучшийПоставщик");
				
	
	Для Каждого Шапка Из ТаблицаРазделения Цикл		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЛучшийПоставщик", Шапка.ЛучшийПоставщик);
		
		ТаблЧасть = ТаблицаТоваровКЗаказу.НайтиСтроки(ПараметрыОтбора);
		
		СтрПоставщик = Шапка.ЛучшийПоставщик;
		
		НовыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
		НовыйДокумент.Дата        = ТекущаяДата();
		НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
		
		НовыйДокумент.Организация        = Объект.ДокументОрганизация;
		НовыйДокумент.НалогообложениеНДС = Объект.ДокументНалогообложениеНДС;
		НовыйДокумент.Склад         = Объект.ДокументСклад;
		НовыйДокумент.Подразделение = Объект.ДокументПодразделение;

		НовыйДокумент.Партнер     = СтрПоставщик;
		НовыйДокумент.ЗаполнитьУсловияЗакупокПоУмолчанию();
		НовыйДокумент.Валюта      = Константы.ВалютаРегламентированногоУчета.Получить();
		
		НовыйДокумент.Согласован  = Истина;
		НовыйДокумент.Статус      = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		НовыйДокумент.Приоритет   = Перечисления.Приоритеты.Средний;
		НовыйДокумент.Комментарий = "";
		
		ВремПоставщик = СтрПоставщик;
		
		Для Каждого Стр из ТаблЧасть Цикл		
			КоэффициентУпаковки = 1; //ПолучитьКоэффициентУпаковки(Стр.Упаковка); 
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.Количество       = Стр.КоличествоЗаказать;
			СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоЗаказать;
			СтрокаТЧ.Цена             = Стр.МинимальнаяЦенаПоставщика;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", СтрПоставщик);
			//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			//СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(НовыйДокумент));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		
		Если НовыйДокумент.Товары.Количество() > 0 Тогда
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(НовыйДокумент));
			
			СтруктураТЧ = Новый Структура;
			СтруктураТЧ.Вставить("СтрокиТЧ" , НовыйДокумент.Товары);
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий, Неопределено);
			
			НовыйДокумент.Записать();
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
			НоваяСтрока = Объект.СформированныеДокументы.Добавить();
			НоваяСтрока.Партнер          = СтрПоставщик;
			НоваяСтрока.ЗаказПоставщику = НовыйДокумент.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДокументов;	
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	МассивДокументов = СоздатьЗаказПоставщикуСервер();
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаСформированныеДокументы;
		
КонецПроцедуры


&НаКлиенте
Процедура СформированныеДокументыВыполнить(Команда)
	
	СформированныеДокументыВыполнитьНаСервере();
	
	Для Каждого Строка Из Объект.СформированныеДокументы Цикл
		
		Если Объект.ОткрытьДокументы Тогда
			ФормаДока = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента", Новый Структура("Ключ", Строка.ЗаказПоставщику)); 
			ФормаДока.Открыть();
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура СформированныеДокументыВыполнитьНаСервере()
	
	Для Каждого Строка Из Объект.СформированныеДокументы Цикл
				
		Если Объект.ПровестиДокументы Тогда
			ЗаказОбъект = Строка.ЗаказПоставщику.ПолучитьОбъект();
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры



&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");

КонецПроцедуры

//============================================================================
// ДЕЙСТВИЯ ИЗМЕНИТЬ ЦЕНЫ

&НаСервере
Процедура ВыполнитьРасчетСтрокиДереваНоменклатуры(СтрокаТаблицы)
	
	ПолученнаяЦена = 0;
	
	Если СтрокаТаблицы.НаценкаРасчетнойЦены <> 0 Тогда
		ПолученнаяЦена = СтрокаТаблицы.МинимальнаяЦенаПоставщикаПересчет*(1 + СтрокаТаблицы.НаценкаРасчетнойЦены/100);
		
		ПолученнаяЦена = ОкруглитьЧисло(ПолученнаяЦена, Объект.ПорядокОкругления);
	КонецЕсли;
	
	Если ПолученнаяЦена > 0 Тогда
		СтрокаТаблицы.НоваяЦенаПродажи = ПолученнаяЦена;
		
		// ПОРОГ СРАБАТЫВАНИЯ		
		Если (Объект.ПорогиСрабатывания.Количество() > 0) 
			ИЛИ (Объект.ЦеныПорогСрабатывания <> 0) Тогда
			
			СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа,ГруппаНоменклатуры", СтрокаТаблицы.ЦеноваяГруппа, СтрокаТаблицы.ГруппаНоменклатуры);

			Если Объект.ПорогиСрабатывания.Количество() > 0 Тогда
				ЦеновыеГруппыПорогов = Объект.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
				Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
					ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
				Иначе
					ПорогСрабатывания = Объект.ЦеныПорогСрабатывания;
				КонецЕсли;
			Иначе
				ПорогСрабатывания = Объект.ЦеныПорогСрабатывания;
			КонецЕсли;
			
			СтараяЦена = СтрокаТаблицы.СтараяЦенаПродажи;
			Если СтараяЦена <> 0 Тогда
				ПроцентИзменения = Окр(100*(ПолученнаяЦена - СтараяЦена)/СтараяЦена,5,2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если ПорогСрабатывания = 0
				ИЛИ СтараяЦена = 0
				ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
				
				СтрокаТаблицы.НоваяЦенаПродажи = ПолученнаяЦена;
				Если СтараяЦена <> 0 Тогда
					СтрокаТаблицы.ОтклонениеРасчетнойПроцент = ПроцентИзменения;
				Иначе
					СтрокаТаблицы.ОтклонениеРасчетнойПроцент = 0;
				КонецЕсли;				
			Иначе
				СтрокаТаблицы.НоваяЦенаПродажи = СтараяЦена;
				СтрокаТаблицы.ОтклонениеРасчетнойПроцент = 0;
			КонецЕсли;			
		КонецЕсли;	
	Иначе
		СтрокаТаблицы.НоваяЦенаПродажи = СтрокаТаблицы.СтараяЦенаПродажи;
	КонецЕсли;
	
	ЦеныОбновитьПоказателиИзменения(СтрокаТаблицы);

КонецПроцедуры

&НаСервере
Процедура ЦеныОбновитьПоказателиИзменения(СтрокаТаблицы)
	
	Если СтрокаТаблицы.НаценкаРасчетнойЦены = 0 Тогда
		Если СтрокаТаблицы.МинимальнаяЦенаПоставщикаПересчет > 0 И СтрокаТаблицы.НоваяЦенаПродажи > 0 Тогда
			НаценкаРасчетнойЦены = (СтрокаТаблицы.НоваяЦенаПродажи - СтрокаТаблицы.МинимальнаяЦенаПоставщикаПересчет)*100/СтрокаТаблицы.МинимальнаяЦенаПоставщикаПересчет;
			СтрокаТаблицы.НаценкаРасчетнойЦены = НаценкаРасчетнойЦены;
		КонецЕсли;	
	КонецЕсли;

	Если СтрокаТаблицы.НоваяЦенаПродажи > 0 И СтрокаТаблицы.СтараяЦенаПродажи > 0 Тогда
		СтрокаТаблицы.ОтклонениеРасчетнойПроцент = (СтрокаТаблицы.НоваяЦенаПродажи - СтрокаТаблицы.СтараяЦенаПродажи)*100/СтрокаТаблицы.СтараяЦенаПродажи;
		СтрокаТаблицы.ОтклонениеРасчетной = СтрокаТаблицы.НоваяЦенаПродажи - СтрокаТаблицы.СтараяЦенаПродажи;
	КонецЕсли;
	
	Если СтрокаТаблицы.МинимальнаяЦенаКонкурента > 0 Тогда
		СтрокаТаблицы.ЦенаКонкурентаОтклонениеОтТекущей = СтрокаТаблицы.МинимальнаяЦенаКонкурента - СтрокаТаблицы.СтараяЦенаПродажи;
		СтрокаТаблицы.ЦенаКонкурентаОтклонениеОтНовой   = СтрокаТаблицы.МинимальнаяЦенаКонкурента - СтрокаТаблицы.НоваяЦенаПродажи;
	КонецЕсли;

	Если СтрокаТаблицы.НоваяЦенаПродажи = СтрокаТаблицы.СтараяЦенаПродажи Тогда
		СтрокаТаблицы.Пометка = Ложь;
	Иначе
		СтрокаТаблицы.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ЦеныУравнятьЦеныСКонкурентом(Команда)
	ЦеныУравнятьЦеныСКонкурентомНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЦеныУравнятьЦеныСКонкурентомНаСервере()
	
	Для Каждого Выборка Из Объект.ТаблицаНоменклатуры Цикл
		
		Если Выборка.МинимальнаяЦенаКонкурента > 0 Тогда
			Выборка.НоваяЦенаПродажи = Выборка.МинимальнаяЦенаКонкурента;
			Выборка.Пометка = Истина;
			
			ЦеныОбновитьПоказателиИзменения(Выборка);
		Иначе
			Выборка.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныУправнятьСПоставщиком(Команда)
	ЦеныУправнятьСПоставщикомНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЦеныУправнятьСПоставщикомНаСервере()
	
	Для Каждого Выборка Из Объект.ТаблицаНоменклатуры Цикл
		
		Если Выборка.МинимальнаяЦенаПоставщикаПересчет > 0 Тогда
			Выборка.НоваяЦенаПродажи = Выборка.МинимальнаяЦенаПоставщикаПересчет;		
			Выборка.Пометка = Истина;

			ЦеныОбновитьПоказателиИзменения(Выборка);
		Иначе
			Выборка.Пометка = Ложь;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры



//============================================================================
// ПРАВИЛА РАСЧЕТА ЦЕН

&НаСервере
Процедура МегапрайсСохранитьПравилаРасчетаЦен()
	
	Если НЕ Объект.ИспользоватьМегапрайс Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.РасширенныйВидЦен) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоОбъект = Объект.РасширенныйВидЦен.ПолучитьОбъект();
	ПравилоОбъект.ВидЦенЗакупочная = Объект.ВидЦенЗакупочная;
	ПравилоОбъект.ВидЦенПродажи = Объект.ВидЦенПродажи;
	ПравилоОбъект.ПорядокОкругления = Объект.ПорядокОкругления;
	ПравилоОбъект.РасширенныйРежимРаботы = Объект.РасширенныйРежимРаботы;
	ПравилоОбъект.НеРегистрироватьБазовуюЦену = Объект.НеРегистрироватьБазовуюЦену;
	ПравилоОбъект.ПоставщикиМинимальныйОстаток = Объект.ПоставщикиМинимальныйОстаток;

	Попытка
		ПравилоОбъект.ХранилищеНастроекАнализаторПрайсов = Новый ХранилищеЗначения(Объект.КомпоновщикНастроек.Настройки);
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;

	ПравилоОбъект.ИсточникиЦенНоменклатуры.Загрузить(Объект.ИсточникиЦенНоменклатуры.Выгрузить());	
	ПравилоОбъект.ПрайсыПоставщиков.Загрузить(Объект.ПрайсыПоставщиков.Выгрузить());	
	ПравилоОбъект.ПрайсыКонкурентов.Загрузить(Объект.ПрайсыКонкурентов.Выгрузить());
	ПравилоОбъект.ПравилаРасчетаЦены.Загрузить(Объект.ПравилаРасчетаЦены.Выгрузить());
	ПравилоОбъект.ПорогиСрабатывания.Загрузить(Объект.ПорогиСрабатывания.Выгрузить());

	ПравилоОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Процедура МегапрайсЗаполнитьПравилаРасчетаЦен()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.МегапрайсЗаполнитьПравилаРасчетаЦен();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура МегапрайсИзменениеВидаЦены(Элемент)
	
	Если НЕ Объект.ИспользоватьМегапрайс Тогда
		Возврат;
	КонецЕсли;

	МегапрайсЗаполнитьПравилаРасчетаЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРасширенныйВидЦен(Команда)
	
	МегапрайсСохранитьПравилаРасчетаЦен();
	
КонецПроцедуры

//============================================================================
// НАСТРОЙКИ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗакрытьОбработку Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Работа будет завершена, все введенные данные будут потеряны. Закрыть?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьОбработку = Истина;
        Закрыть();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравилаРасчетаЦеныТекстАлгоритмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекстАлгоритма",Элементы.ПравилаРасчетаЦены.ТекущиеДанные.ТекстАлгоритма);
	
	Попытка
		Результат = ОткрытьФормуМодально("Обработка.мегапрайсАнализаторПрайсов.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма); 
	Исключение
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсАнализаторПрайсов.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.ПравилаРасчетаЦены.ТекущиеДанные.ТекстАлгоритма = Результат;
	КонецЕсли;

КонецПроцедуры



 &НаКлиенте
 Процедура ОткрытьЖурналУстановкиЦен(Команда)
	 
	 ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаСписка");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьЖурналМегапрайс(Команда)
	 
	 ОткрытьФорму("РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.ФормаСписка");
	 
 КонецПроцедуры


 &НаКлиенте
Процедура ПоказатьНавигацию(Команда)
	
	ПанельНавигацииПометка = НЕ ПанельНавигацииПометка;
	Элементы.Навигация.Видимость = ПанельНавигацииПометка;
	
КонецПроцедуры

ЗакрытьОбработку = Ложь;







