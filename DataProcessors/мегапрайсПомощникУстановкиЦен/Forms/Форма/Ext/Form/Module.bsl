&НаКлиенте
Перем ЗакрытьОбработку;

&НаКлиенте
Перем ПоказатьРасшифровки;

&НаКлиенте
Перем ИнформацияОТовареПрочитана;

//============================================================================
// АВТОР

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");

КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПроверитьОбновления(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/news");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysМегапрайс(Команда)
		
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсИмпортПрайсаПартнера.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсИмпортПрайсаПартнера.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		ЗапуститьПриложение("http://subsystems.ru/catalog/27/595/");
	Конецесли;
	
КонецПроцедуры

 
&НаКлиенте
Процедура ВидеоОбзор(Команда)
	
	ЗапуститьПриложение("https://www.youtube.com/channel/UCTukH6iP4DSW0LtdKBRfUlw");
	
КонецПроцедуры


//============================================================================
// СЛУЖЕБНЫЕ


&НаСервере
Функция ПолучитьФорматДаты(Дата)
	Если Объект.Периодичность = Перечисления.Периодичность.Год Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""гггг 'г.'""");
	ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""к 'квартал'""");
	ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""ММММ""");
	ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ""");
	ИначеЕсли Объект.Периодичность = Перечисления.Периодичность.День Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ""");
	КонецЕсли;
	
	Возврат ТекстВозврата;
КонецФункции


//============================================================================
// ФОРМА


 &НаСервере
 Процедура ИнициализироватьОбработку()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 Объект.ИсточникиЦенНоменклатуры.Очистить();
	 ОбработкаОбъект.ИнициализироватьНастройки(Объект.ИсточникиЦенНоменклатуры);
	 
 КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачалоПериода          = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	НачалоПериода          = НачалоМесяца(НачалоПериода-1);
	Объект.НачалоПериода      = НачалоМесяца(НачалоПериода-1);
	Объект.КонецПериода       = КонецДня(НачалоДня(ТекущаяДата())-1);

	ИнициализироватьОбработку();

	//ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(
	//	Перечисления.ДоступныеПериодыОтчета.День,
	//	Элементы.ВидПериода.СписокВыбора, ВидПериода);

	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Объект.Периодичность = Перечисления.Периодичность.Месяц;
	КОнецЕсли;

	Попытка 
		Константы.мегапрайсРегистрационныйКлюч.Получить();
		Объект.ИспользоватьМегапрайс = Истина;
	Исключение
		Объект.ИспользоватьМегапрайс = Ложь;
	КонецПопытки;

	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗапроса");
	URLСхемы         = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Объект.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Объект.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");	
	
	МегапрайсЗаполнитьПравилаРасчетаЦен();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПоказатьРасшифровки = Ложь;
    ПанельПоказатьРасшифровки("");
	
	Элементы.ОтборыКПереоценке.Пометка = Ложь;
	
	МегапрайсЗаполнитьПравилаРасчетаЦен();

	Если СписокОснований.Количество() > 0 Тогда
		ЗаполнитьАнализНаОснованииПриходнойНакладной();
		
		Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.АнализЦен;
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура СтандартныеНастройки(Команда)
	
	ИнициализироватьОбработку();
	
КонецПроцедуры

//============================================================================
// ФОРМИРОВАНИЕ ОТЧЕТА

&НаКлиенте
Процедура СформироватьТаблицу(Команда) 
	
	ПроверкаПолей = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦенЗакупочная) Тогда
		Сообщить("Не заполнен базовый вид цен.");
		ПроверкаПолей = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦенПродажи) Тогда
		Сообщить("Не заполнен вид цен продажи.");
		ПроверкаПолей = Истина;
	КонецЕсли;
	Если ПроверкаПолей Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ТаблицаНоменклатуры.Очистить();

	Состояние("Выполняется анализ и заполнение...");

	ПараметрыЗапроса = Новый Структура;		
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СписокОснований.Очистить();
		СписокОснований.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	
	Если СписокОснований.Количество() > 0 Тогда
		ЗаполнитьАнализНаОснованииПриходнойНакладной();
	Иначе
		мСформироватьТаблицу(ПараметрыЗапроса);
	КонецЕсли;

	УстановитьВидимостьЭлементов();
	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.АнализЦен; 
	
КонецПроцедуры

&НаСервере
Процедура мСформироватьТаблицу(ПараметрыЗапроса) 

	Объект.ТаблицаНоменклатуры.Очистить();

	МегапрайсСохранитьПравилаРасчетаЦен();

	МассивКонкурентов = Новый СписокЗначений;
	Для Каждого Конкурент Из Объект.ПрайсыКонкурентов Цикл
		Если НЕ Конкурент.Пометка Тогда
			Продолжить;
		КонецЕсли;
		МассивКонкурентов.Добавить(Конкурент.Партнер);
	КонецЦикла;
	
	МассивПоставщиков = Новый СписокЗначений;
	Для Каждого Поставщик Из Объект.ПрайсыПоставщиков Цикл
		Если НЕ Поставщик.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПоставщиков.Добавить(Поставщик.Партнер);
	КонецЦикла;

	ПараметрыЗапроса.Вставить("АдресСхемыВХранилище", Объект.КомпоновщикНастроек);
	ПараметрыЗапроса.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода", Объект.КонецПериода);
	ПараметрыЗапроса.Вставить("ИспользоватьХарактеристикиНоменклатуры", Объект.ИспользоватьХарактеристикиНоменклатуры);
	ПараметрыЗапроса.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	ПараметрыЗапроса.Вставить("НоменклатураБезЦен", Объект.НоменклатураБезЦен);
	ПараметрыЗапроса.Вставить("ВидЦенЗакупочная", Объект.ВидЦенЗакупочная);
	ПараметрыЗапроса.Вставить("ВидЦенПродажи", Объект.ВидЦенПродажи);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ГруппыНоменклатурыРеквизит = РеквизитФормыВЗначение("ГруппыНоменклатуры");
	ЦеновыеГруппыНавигацияРеквизит = РеквизитФормыВЗначение("ЦеновыеГруппыНавигация");
	
	ОбработкаОбъект.СформироватьТаблицуНаСервере(ПараметрыЗапроса,ГруппыНоменклатурыРеквизит,МассивПоставщиков,МассивКонкурентов,ЦеновыеГруппыНавигацияРеквизит);
	
	ЗначениеВРеквизитФормы(ГруппыНоменклатурыРеквизит, "ГруппыНоменклатуры");
	ЗначениеВРеквизитФормы(ЦеновыеГруппыНавигацияРеквизит, "ЦеновыеГруппыНавигация");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	РассчитатьЦеныСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАнализНаОснованииПриходнойНакладной()
	
	Если СписокОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	МАКСИМУМ(ВложенныйЗапрос.Цена) КАК Цена,
	               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПриобретениеТоваровУслуг.Номенклатура КАК Номенклатура,
	               |		ПриобретениеТоваровУслуг.Характеристика КАК ХарактеристикаНоменклатуры,
	               |		МАКСИМУМ(ПриобретениеТоваровУслуг.Цена) КАК Цена,
	               |		СУММА(ПриобретениеТоваровУслуг.Количество) КАК Количество
	               |	ИЗ
	               |		Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслуг
	               |	ГДЕ
	               |		ПриобретениеТоваровУслуг.Ссылка В(&СписокОснований)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПриобретениеТоваровУслуг.Номенклатура,
	               |		ПриобретениеТоваровУслуг.Характеристика
	               |	
	               |	ОБЪЕДИНИТЬ
	               |	
	               |	ВЫБРАТЬ
	               |		ДокПеремещениеТоваров.Номенклатура,
	               |		ДокПеремещениеТоваров.Характеристика,
	               |		0,
	               |		СУММА(ДокПеремещениеТоваров.Количество)
	               |	ИЗ
	               |		Документ.ПеремещениеТоваров.Товары КАК ДокПеремещениеТоваров
	               |	ГДЕ
	               |		ДокПеремещениеТоваров.Ссылка В(&СписокОснований)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДокПеремещениеТоваров.Номенклатура,
	               |		ДокПеремещениеТоваров.Характеристика) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры
	               |ИТОГИ
	               |	МАКСИМУМ(Цена),
	               |	СУММА(Количество)
	               |ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
				   
	Запрос.УстановитьПараметр("СписокОснований", СписокОснований);
	Результат = Запрос.Выполнить();
	
	ТаблицаЗапроса = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаЗапроса.Свернуть("Номенклатура");
	
	МассивОтбора = Новый СписокЗначений();	
	Для Каждого ВыбСтрока Из ТаблицаЗапроса Цикл
		МассивОтбора.Добавить(ВыбСтрока.Номенклатура);
	КонецЦикла;

	Настройки  = Объект.КомпоновщикНастроек.Настройки;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор,"Номенклатура",МассивОтбора,ВидСравненияКомпоновкиДанных.ВСписке,,Истина);

	//ЭлементОтбора = Настройки.Отбор.Элементы.Получить(0);
	//ЭлементОтбора.Использование  = Истина;
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбора.ПравоеЗначение = МассивОтбора;
	
	ПараметрыЗапроса = Новый Структура;
	мСформироватьТаблицу(ПараметрыЗапроса);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура",Выборка.Номенклатура);	
		Если Объект.ИспользоватьХарактеристикиНоменклатуры Тогда
			ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры",Выборка.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		НайтиСтрокиТаб = Объект.ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если НайтиСтрокиТаб.Количество() > 0 Тогда
			Для Каждого СтрТаб Из НайтиСтрокиТаб Цикл
				
				СтрТаб.ЦенаПоступления  = Выборка.Цена;
				СтрТаб.НоваяБазоваяЦена = Выборка.Цена;
				
				Если СтрТаб.НоваяБазоваяЦена > 0 И СтрТаб.СтараяБазовая > 0 Тогда
					СтрТаб.ОтклонениеБазовыхЦен = (СтрТаб.НоваяБазоваяЦена - СтрТаб.СтараяБазовая)*100/СтрТаб.СтараяБазовая;
				КонецЕсли;
			КОнецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьЦеныСервер();
		
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьАнализЦенПоДокументам(Команда)
	
	СписокОснований.Очистить();
	
	ЭлементыСписок = Элементы.СписокПриходныеНакладные;
	Для н = 0 По ЭлементыСписок.ВыделенныеСтроки.Количество()-1 Цикл
		Если ТипЗнч(ЭлементыСписок.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			СписокОснований.Добавить(ЭлементыСписок.ВыделенныеСтроки[н]);
		КонецЕсли;
	КонецЦикла;
		
	ЗаполнитьАнализНаОснованииПриходнойНакладной();
		
	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.АнализЦен;
	
КонецПроцедуры


//============================================================================
// ИЗМЕНЕНИЕ ЦЕН

&НаСервере
Процедура ПересчетСтрокиПриИзменении(СтруктураПараметров)
	
	ТекЗначениеНаценки = СтруктураПараметров.ПроцентНаценки;
	
	//Сообщить(СтруктураПараметров.СтрВыд);
	СтрокаСоотв = Объект.ТаблицаНоменклатуры[СтруктураПараметров.СтрВыд-1];
	СтрокаСоотв.НаценкаРасчетнойЦены = ТекЗначениеНаценки;
	
	//СтруктураПар = Новый Структура;
	//СтруктураПар.Вставить("ТекущаяСтрока",СтрокаСоотв);
	
	ВыполнитьРасчетСтрокиДереваНоменклатуры(Неопределено,СтрокаСоотв);

КОнецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНаценкаРасчетнойЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	ТекЗначениеНаценки = ТекущаяСтрока.НаценкаРасчетнойЦены;
	
	ВыделенныеСтроки = Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки;	
	Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		НомерСтроки = Элементы.ТаблицаНоменклатуры.ДанныеСтроки(СтрВыд).НомерСтроки;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПроцентНаценки",ТекЗначениеНаценки);
		СтруктураПараметров.Вставить("СтрВыд",НомерСтроки);
		
		ПересчетСтрокиПриИзменении(СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОкруглитьЦену(ЗначениеЦены) 
	
	КоличествоСтрок = Объект.ПравилаОкругленияЦены.Количество();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		ПравилаОкругления = Объект.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
		
		Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= ЗначениеЦены Тогда
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ОкруглитьЦену(ЗначениеЦены, ПравилаОкругления.ТочностьОкругления, Объект.ВидЦенПродажи.ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ПсихологическоеОкругление) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЗначениеЦены, ПравилаОкругления.ПсихологическоеОкругление);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеЦены;
	
КонецФункции

&НаСервере
Процедура ВыполнитьРасчетСтрокиДереваНоменклатуры(ВыборкаПравило = Неопределено,СтрокаТаблицы)
	
	ЗначениеЦены = 0;	
	НоваяБазоваяЦена = СтрокаТаблицы.НоваяБазоваяЦена;
	ПолученнаяЦена = СтрокаТаблицы.СтараяЦенаПродажи;
	НоваяЦенаПродажи = СтрокаТаблицы.НоваяЦенаПродажи;	
	
	//ПРОИЗВОЛЬНАЯ ФОРМУЛА
	Если НЕ ВыборкаПравило = Неопределено И ЗначениеЗаполнено(ВыборкаПравило.ТекстАлгоритма) Тогда
		Выполнить(ВыборкаПравило.ТекстАлгоритма);
		ЗначениеЦены = НоваяЦенаПродажи;
	Иначе
		Если СтрокаТаблицы.НаценкаРасчетнойЦены <> 0 Тогда
			ЗначениеЦены = СтрокаТаблицы.НоваяБазоваяЦена*(1 + СтрокаТаблицы.НаценкаРасчетнойЦены/100);
			ЗначениеЦены = УстановкаЦенКлиентСервер.ОкруглитьЦену(ЗначениеЦены, Объект.ВидЦенПродажи);
		КонецЕсли;
	КонецЕсли;	
				
	Если ЗначениеЦены > 0 Тогда
		СтрокаТаблицы.НоваяЦенаПродажи = ЗначениеЦены;
		
		// ПОРОГ СРАБАТЫВАНИЯ		
		Если (Объект.ПорогиСрабатывания.Количество() > 0) 
			ИЛИ (Объект.ЦеныПорогСрабатывания <> 0) Тогда
			
			СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа,ГруппаНоменклатуры", СтрокаТаблицы.ЦеноваяГруппа, СтрокаТаблицы.ГруппаНоменклатуры);
			
			Если Объект.ПорогиСрабатывания.Количество() > 0 Тогда
				ЦеновыеГруппыПорогов = Объект.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
				Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
					ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
				Иначе
					ПорогСрабатывания = Объект.ЦеныПорогСрабатывания;
				КонецЕсли;
			Иначе
				ПорогСрабатывания = Объект.ЦеныПорогСрабатывания;
			КонецЕсли;
			
			СтараяЦена = СтрокаТаблицы.СтараяЦенаПродажи;
			Если СтараяЦена <> 0 Тогда
				ПроцентИзменения = Окр(100*(ЗначениеЦены - СтараяЦена)/СтараяЦена,5,2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если ПорогСрабатывания = 0
				ИЛИ СтараяЦена = 0
				ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
				
				СтрокаТаблицы.НоваяЦенаПродажи = ЗначениеЦены;			
			Иначе
				СтрокаТаблицы.НоваяЦенаПродажи = СтараяЦена;
			КонецЕсли;			
		КонецЕсли;	
	Иначе
		СтрокаТаблицы.НоваяЦенаПродажи = СтрокаТаблицы.СтараяЦенаПродажи;
	КонецЕсли;
		
	ЦеныОбновитьПоказателиИзменения(СтрокаТаблицы);

КонецПроцедуры

Процедура ЦеныОбновитьПоказателиИзменения(СтрокаЦен)
	
	Если СтрокаЦен.НоваяЦенаПродажи > 0 И СтрокаЦен.СтараяЦенаПродажи > 0 Тогда
		СтрокаЦен.ОтклонениеРасчетной = (СтрокаЦен.НоваяЦенаПродажи - СтрокаЦен.СтараяЦенаПродажи)*100/СтрокаЦен.СтараяЦенаПродажи;
	КонецЕсли;
	
	Если СтрокаЦен.НоваяЦенаПродажи = СтрокаЦен.СтараяЦенаПродажи Тогда
		СтрокаЦен.Пометка = Ложь;
	Иначе
		СтрокаЦен.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ПересчетГруппыДерева(ГруппаНоменклатуры,НаценкаРасчетнойЦены)
		
	Для Каждого Подчиненный Из Объект.ТаблицаНоменклатуры Цикл
		
		Если Подчиненный.ГруппаНоменклатуры <> ГруппаНоменклатуры Тогда
			ПРодолжить;
		КонецЕсли;
		
		Подчиненный.НаценкаРасчетнойЦены = НаценкаРасчетнойЦены;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущаяСтрока",Подчиненный);
		
		ВыполнитьРасчетСтрокиДереваНоменклатуры(Неопределено,Подчиненный);
	КонецЦикла;
	
КОнецПроцедуры

&НаСервере
Процедура ПересчетЦеновойГруппыДерева(ЦеноваяГруппа,НаценкаРасчетнойЦены)
		
	Для Каждого Подчиненный Из Объект.ТаблицаНоменклатуры Цикл	
		Если Подчиненный.ЦеноваяГруппа <> ЦеноваяГруппа Тогда
			ПРодолжить;
		КонецЕсли;
		
		Подчиненный.НаценкаРасчетнойЦены = НаценкаРасчетнойЦены;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущаяСтрока",Подчиненный);
		
		ВыполнитьРасчетСтрокиДереваНоменклатуры(Неопределено,Подчиненный);
	КонецЦикла;
	
КОнецПроцедуры

&НаСервере
Функция ВходитВСегмент(ОбъектСсылка, СегментСсылка, Характеристика = Неопределено) Экспорт
			
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НоменклатураСегмента.Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Сегмент = &СегментСсылка
	|	И НоменклатураСегмента.Номенклатура = &ОбъектСсылка
	|	И НоменклатураСегмента.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("ОбъектСсылка",ОбъектСсылка);
	Запрос.УстановитьПараметр("СегментСсылка",СегментСсылка);
	Запрос.УстановитьПараметр("Характеристика",Характеристика);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура РассчитатьЦеныСервер()
	
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаНоменклатуры Цикл
				
		Если Объект.ПравилаРасчетаЦены.Количество() > 0 Тогда
			Для Каждого ВыборкаПравило Из Объект.ПравилаРасчетаЦены Цикл
				Если НЕ ВыборкаПравило.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПравило.ВидНоменклатуры) Тогда
					Если СтрокаТаблицы.ВидНоменклатуры <> ВыборкаПравило.ВидНоменклатуры Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеЗаполнено(ВыборкаПравило.ГруппаНоменклатуры) Тогда
					//Если СтрокаТаблицы.ГруппаНоменклатуры <> ВыборкаПравило.ГруппаНоменклатуры Тогда
					//	Продолжить;
					//КонецЕсли;
					
					Если СтрокаТаблицы.Номенклатура.ПринадлежитЭлементу(ВыборкаПравило.ГруппаНоменклатуры) = Ложь Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;		
				
				Если ЗначениеЗаполнено(ВыборкаПравило.ЦеноваяГруппа) Тогда
					Если СтрокаТаблицы.ЦеноваяГруппа <> ВыборкаПравило.ЦеноваяГруппа Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;			
				
				Если ЗначениеЗаполнено(ВыборкаПравило.Производитель) Тогда
					Если СтрокаТаблицы.Производитель <> ВыборкаПравило.Производитель Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПравило.ТоварнаяКатегория) Тогда
					Если СтрокаТаблицы.ТоварнаяКатегория <> ВыборкаПравило.ТоварнаяКатегория Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеЗаполнено(ВыборкаПравило.ДатаСозданияНоменклатуры) Тогда
					Если СтрокаТаблицы.ДатаСозданияНоменклатуры <= ВыборкаПравило.ДатаСозданияНоменклатуры Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПравило.КоллекцияНоменклатуры) Тогда
					Если СтрокаТаблицы.КоллекцияНоменклатуры <> ВыборкаПравило.КоллекцияНоменклатуры Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеЗаполнено(ВыборкаПравило.Сегмент) Тогда
					Если НЕ ВходитВСегмент(СтрокаТаблицы.Номенклатура,ВыборкаПравило.Сегмент,СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеЗаполнено(ВыборкаПравило.НижняяГраница) И ЗначениеЗаполнено(ВыборкаПравило.ВерхняяГраница) Тогда
					Если СтрокаТаблицы.НоваяБазоваяЦена > ВыборкаПравило.НижняяГраница И СтрокаТаблицы.НоваяБазоваяЦена <= ВыборкаПравило.ВерхняяГраница Тогда
						СтрокаТаблицы.НаценкаРасчетнойЦены = ВыборкаПравило.Наценка;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
								
				СтрокаТаблицы.НаценкаРасчетнойЦены = ВыборкаПравило.Наценка;
				ВыполнитьРасчетСтрокиДереваНоменклатуры(ВыборкаПравило,СтрокаТаблицы);
				
			КонецЦикла;
		КонецЕсли;		
		
		ЦеныОбновитьПоказателиИзменения(СтрокаТаблицы);						
	КонецЦикла;		

КонецПроцедуры

&НаКлиенте
Процедура КомандаРассчитатьЦены()
	
	РассчитатьЦеныСервер();
	
КонецПроцедуры

//============================================================================
// ФОРМА


&НаСервере
Функция ПолучитьКартинкуНоменклатуры(Номенклатура)
	
	//УстановитьПривилегированныйРежим(Истина);
	
	ФайлКартинкиНоменклатуры = Номенклатура.ФайлКартинки;
	
	Возврат ФайлКартинкиНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ИнформацияПолучитьСвойстваНоменклатуры(ТекущиеДанныеСтроки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Свойство КАК Свойство,
	|	СпрНоменклатура.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &ТекНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойство";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекНоменклатура", ТекущиеДанныеСтроки.Номенклатура);
	
	СвойстваНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ИнформацияПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки)
	
	ПодборКартинкаНоменклатуры = ПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);		
	Если ЗначениеЗаполнено(ПодборКартинкаНоменклатуры) Тогда
		КартинкаНоменклатуры = ПолучитьНавигационнуюСсылкуКартинки(ПодборКартинкаНоменклатуры, УникальныйИдентификатор)
	Иначе
		КартинкаНоменклатуры = "";
	Конецесли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеНоменклатуры(Номенклатура)
	
	ОписаниеНоменклатуры = Номенклатура.Описание;
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции



&НаКлиенте
Процедура ГруппыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Иерархия Тогда
		
		ТекущиеДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;

		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Группа) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаНоменклатуры",ТекущиеДанные.Группа);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.НавигацияЦеновыеГруппы Тогда
		
		ТекущиеДанные = Элементы.ЦеновыеГруппыНавигация.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ЦеноваяГруппа) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ЦеноваяГруппа",ТекущиеДанные.ЦеноваяГруппа);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Иерархия Тогда
		ТекущиеДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;		
		
		Если НЕ ТекущиеДанные = Неопределено Тогда		
			ПересчетГруппыДерева(ТекущиеДанные.Группа,ТекущиеДанные.УстановитьНаценку);
		КонецЕсли;	
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.НавигацияЦеновыеГруппы Тогда		
		ТекущиеДанные = Элементы.ЦеновыеГруппыНавигация.ТекущиеДанные;	
		
		Если НЕ ТекущиеДанные = Неопределено Тогда		
			ПересчетЦеновойГруппыДерева(ТекущиеДанные.ЦеноваяГруппа,ТекущиеДанные.УстановитьНаценку);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтраницаРасшифровки = Элементы.ДопИнформация.ТекущаяСтраница;

	Если ПоказатьРасшифровки Тогда	
		ИнформацияОТовареПрочитана = Ложь;

		ПодключитьОбработчикОжидания("ОбновитьДанныеДополнительнойИнформации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИнформацияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИнформацияОТовареПрочитана = Ложь;

	ОбновитьДанныеДополнительнойИнформации();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДополнительнойИнформацииСервер(ПараметрыЗапроса,ИмяСтраницы)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ИмяСтраницы = "ЗакладкаТекущиеОстатки" Тогда
		
		ТаблицаОстаткиТоваров = РеквизитФормыВЗначение("ОстаткиТоваров");
		ОбработкаОбъект.ИнформацияСформироватьОстаткиПоСкладам(ТаблицаОстаткиТоваров,ПараметрыЗапроса);
		ЗначениеВРеквизитФормы(ТаблицаОстаткиТоваров, "ОстаткиТоваров");
		
	ИначеЕсли ИмяСтраницы = "ИсторияПоступленийЗакладка" Тогда
		
		ТаблицаИсторияПоступлений = РеквизитФормыВЗначение("ИсторияПоступлений");
		РеквизитФормыВЗначение("Объект").ЗаполнитьТаблицуИсторииПоступления(ТаблицаИсторияПоступлений,ПараметрыЗапроса);		
		ЗначениеВРеквизитФормы(ТаблицаИсторияПоступлений, "ИсторияПоступлений");
		
	ИначеЕсли ИмяСтраницы = "ИсторияИзмененияЦенЗакладка" Тогда
		
		ТаблицаИсторияЦенНоменклатуры = РеквизитФормыВЗначение("ИсторияЦенНоменклатуры");
		РеквизитФормыВЗначение("Объект").ЗаполнитьТаблицуИсторииЦенНоменклатуры(ТаблицаИсторияЦенНоменклатуры,ПараметрыЗапроса);		
		ЗначениеВРеквизитФормы(ТаблицаИсторияЦенНоменклатуры, "ИсторияЦенНоменклатуры");
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаДинамика" Тогда
		
		ТаблицаДинамикаПродаж = РеквизитФормыВЗначение("ДинамикаПродаж");	
		ОбработкаОбъект.ИнформацияСформироватьДинамикаПродаж(ТаблицаДинамикаПродаж,ПараметрыЗапроса);
		ЗначениеВРеквизитФормы(ТаблицаДинамикаПродаж, "ДинамикаПродаж");		
		
		ДинамикаОборотов.Обновление = Ложь;
		ДинамикаОборотов.Очистить();
		
		СерияПродажи = ДинамикаОборотов.УстановитьСерию("Продажи по перидам");
		СерияПродажи.Текст       = "Продажи по перидам";
		СерияПродажи.Расшифровка = "Продажи по перидам";
		
		СерияОстатки = ДинамикаОборотов.УстановитьСерию("Остатки по перидам");
		СерияОстатки.Текст       = "Остатки по перидам";
		СерияОстатки.Расшифровка = "Остатки по перидам";
		
		ДинамикаПродаж.Сортировать("Период ВОЗР");
		Для Каждого Выборка Из ДинамикаПродаж Цикл	
			ВыборкаПериод = Выборка.Период;
			ВыборкаКоличествоОборот = Выборка.Продажи;
			ВыборкаНачальныйОстаток = Выборка.НачальныйОстаток;
			ВыборкаКонечныйОстаток  = Выборка.КонечныйОстаток;
			
			Точка  = ДинамикаОборотов.УстановитьТочку(ПолучитьФорматДаты(ВыборкаПериод));	
			ДинамикаОборотов.УстановитьЗначение(Точка, СерияПродажи, ВыборкаКоличествоОборот, СерияПродажи.Расшифровка,ВыборкаКоличествоОборот);	
			ДинамикаОборотов.УстановитьЗначение(Точка, СерияОстатки, ВыборкаНачальныйОстаток, СерияОстатки.Расшифровка,ВыборкаНачальныйОстаток);
		КонецЦикла;
		
		ДинамикаОборотов.ОбластьПостроения.ВертикальныеМетки = Истина;
		ДинамикаОборотов.АвтоТранспонирование = Истина;
		ДинамикаОборотов.Обновление = Истина;
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаПоставщики" Тогда
		
		ВозможныеПоставщикиТаб = РеквизитФормыВЗначение("РасшифровкаЦеныПоставщиков");	
		ВозможныеПоставщикиТаб.Очистить();
		
		Если Объект.ИспользоватьМегапрайс Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер КАК Поставщик,
			|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
			|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Цена) КАК ЦенаПоставщика,
			|	СУММА(ЦеныНоменклатурыКонтрагентов.Количество) КАК ОстатокКонтрагента,
			|	ЦеныНоменклатурыКонтрагентов.Период КАК ДатаЦены,
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Приоритет КАК ПрайсПартнераПриоритет
			|ИЗ
			|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(
			|			,
			|			Номенклатура = &ВыбНоменклатура
			|				И ПрайсПартнера.ВидЦенЗакупочная = &ВидЦенЗакупочная) КАК ЦеныНоменклатурыКонтрагентов
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер,
			|	ЦеныНоменклатурыКонтрагентов.Валюта,
			|	ЦеныНоменклатурыКонтрагентов.Период,
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Приоритет
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПрайсПартнераПриоритет УБЫВ";
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЦеныНоменклатурыКонтрагентов.Партнер КАК Поставщик,
			|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
			|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Цена) КАК ЦенаПоставщика,
			|	ЦеныНоменклатурыКонтрагентов.Период КАК ДатаЦены
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура = &ВыбНоменклатура) КАК ЦеныНоменклатурыКонтрагентов
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.Партнер,
			|	ЦеныНоменклатурыКонтрагентов.Валюта,
			|	ЦеныНоменклатурыКонтрагентов.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.Партнер.Наименование";
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
		Запрос.УстановитьПараметр("ВидЦенЗакупочная",Объект.ВидЦенЗакупочная);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДоб = ВозможныеПоставщикиТаб.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб,Выборка);	
		КонецЦикла;	
		
		ВалютаРасчетная = Объект.ВидЦенПродажи.ВалютаЦены;
		СтруктураВалютыУпр = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
		
		Для Каждого ВыборкаСтрока Из ВозможныеПоставщикиТаб Цикл
			Если ВыборкаСтрока.ЦенаПоставщика > 0  Тогда
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.Валюта) И ВалютаРасчетная <> ВыборкаСтрока.Валюта Тогда
					//РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаСтрока.ЦенаПоставщика,ВыборкаСтрока.Валюта,ВалютаУпр,ТекущаяДата());	
					СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВыборкаСтрока.Валюта, ТекущаяДата());
					ВыборкаСтрока.ЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ВыборкаСтрока.ЦенаПоставщика, СтруктураВалюты, СтруктураВалютыУпр);
				Иначе
					ВыборкаСтрока.ЦенаПересчет = ВыборкаСтрока.ЦенаПоставщика;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	

		ЗначениеВРеквизитФормы(ВозможныеПоставщикиТаб, "РасшифровкаЦеныПоставщиков");
		
	ИначеЕсли ИмяСтраницы = "ЗакладкаКонкуренты" Тогда
		
		ВозможныеПоставщикиТаб = РеквизитФормыВЗначение("РасшифровкаЦеныКонкурентов");	
		ВозможныеПоставщикиТаб.Очистить();
		
		Если Объект.ИспользоватьМегапрайс Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер КАК Поставщик,
			|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
			|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.ЦенаПродажи) КАК ЦенаПродажи,
			|	СУММА(ЦеныНоменклатурыКонтрагентов.Количество) КАК ОстатокКонтрагента,
			|	ЦеныНоменклатурыКонтрагентов.Период КАК ДатаЦены
			|ИЗ
			|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(
			|			,
			|			Номенклатура = &ВыбНоменклатура
			|				И ПрайсПартнера.ВидЦенПродажи = &ВидЦенПродажи) КАК ЦеныНоменклатурыКонтрагентов
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер,
			|	ЦеныНоменклатурыКонтрагентов.Валюта,
			|	ЦеныНоменклатурыКонтрагентов.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер.Наименование";
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЦеныНоменклатурыКонтрагентов.Партнер КАК Поставщик,
			|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
			|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Цена) КАК ЦенаПродажи,
			|	ЦеныНоменклатурыКонтрагентов.Период КАК ДатаЦены
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура = &ВыбНоменклатура) КАК ЦеныНоменклатурыКонтрагентов
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.Партнер,
			|	ЦеныНоменклатурыКонтрагентов.Валюта,
			|	ЦеныНоменклатурыКонтрагентов.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЦеныНоменклатурыКонтрагентов.Партнер.Наименование";
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
		Запрос.УстановитьПараметр("ВидЦенПродажи",Объект.ВидЦенПродажи);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаДоб = ВозможныеПоставщикиТаб.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоб,Выборка);	
		КонецЦикла;	
		
		ВалютаРасчетная = Объект.ВидЦенПродажи.ВалютаЦены;
		СтруктураВалютыУпр = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
		
		Для Каждого ВыборкаСтрока Из ВозможныеПоставщикиТаб Цикл
			Если ВыборкаСтрока.ЦенаПродажи > 0  Тогда
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.Валюта) И ВалютаРасчетная <> ВыборкаСтрока.Валюта Тогда
					СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВыборкаСтрока.Валюта, ТекущаяДата());
					ВыборкаСтрока.ЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ВыборкаСтрока.ЦенаПродажи, СтруктураВалюты, СтруктураВалютыУпр);
				Иначе
					ВыборкаСтрока.ЦенаПересчет = ВыборкаСтрока.ЦенаПродажи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	

		ЗначениеВРеквизитФормы(ВозможныеПоставщикиТаб, "РасшифровкаЦеныКонкурентов");
		
		
	ИначеЕсли  ИмяСтраницы = "ЗакладкаИнформацияОТоваре" Тогда	
		
		ИнформацияПолучитьСвойстваНоменклатуры(ПараметрыЗапроса);
		ИнформацияПолучитьКартинкуНоменклатуры(ПараметрыЗапроса);		
		ОписаниеНоменклатуры = ПолучитьОписаниеНоменклатуры(ПараметрыЗапроса.Номенклатура);
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДанныеДополнительнойИнформации()
	
	Если ИнформацияОТовареПрочитана Тогда
		Возврат;
	КонецЕсли;

	ИсторияПоступлений.Очистить();
	ИсторияЦенНоменклатуры.Очистить();
	ДинамикаПродаж.Очистить();
	ДинамикаОборотов.Очистить();
	ОстаткиТоваров.Очистить();

	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода", Объект.КонецПериода);
	ПараметрыЗапроса.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыЗапроса.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыЗапроса.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
    ПараметрыЗапроса.Вставить("РасчетнаяЦена", Объект.ВидЦенПродажи);

	
	ИмяТекущейСтраницы = ЭтаФорма.Элементы.ДопИнформация.ТекущаяСтраница.Имя;
	Попытка
		ОбновитьДанныеДополнительнойИнформацииСервер(ПараметрыЗапроса, ИмяТекущейСтраницы);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	ИнформацияОТовареПрочитана = Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура ОтборыКПереоценке(Команда)
	
	Элементы.ОтборыКПереоценке.Пометка = НЕ Элементы.ОтборыКПереоценке.Пометка;

	Если Элементы.ОтборыКПереоценке.Пометка Тогда
        Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка", Истина);

	Иначе
        Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПанельПоказатьРасшифровки(Команда)
	
	ПоказатьРасшифровки = НЕ Элементы.ТаблицаНоменклатурыКоманднаяПанель.ПодчиненныеЭлементы.ПоказатьРасшифровки.Пометка;
	Элементы.ТаблицаНоменклатурыКоманднаяПанель.ПодчиненныеЭлементы.ПоказатьРасшифровки.Пометка = ПоказатьРасшифровки;
	
	Элементы.ДопИнформация.Видимость = ПоказатьРасшифровки;
	
КонецПроцедуры

//============================================================================
// 

&НаСервере
Процедура ЗаполнитьСписокПоставщиков()
	
	Объект.ПрайсыПоставщиков.Очистить();
	
	Если Объект.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мегапрайсПрофилиПрайсов.Партнер КАК Ссылка,
		|	мегапрайсПрофилиПрайсов.Приоритет КАК Приоритет
		|ИЗ
		|	Справочник.мегапрайсПрофилиПрайсов КАК мегапрайсПрофилиПрайсов
		|ГДЕ
		|	мегапрайсПрофилиПрайсов.ВидЦенЗакупочная = &ВидЦенЗакупочная
		|
		|СГРУППИРОВАТЬ ПО
		|	мегапрайсПрофилиПрайсов.Партнер,
		|	мегапрайсПрофилиПрайсов.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ"; 
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	спрПартнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК спрПартнеры
		|ГДЕ
		|	спрПартнеры.Конкурент = ЛОЖЬ
		|	И спрПартнеры.Поставщик = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	спрПартнеры.Ссылка";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВидЦенЗакупочная",Объект.ВидЦенЗакупочная);
	
	Таблица = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Объект.ПрайсыПоставщиков.Добавить();
		НоваяСтрока.Партнер      = СтрокаТЧ.Ссылка;	
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКонкурентов()
	
	Объект.ПрайсыКонкурентов.Очистить();
	
	Если Объект.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мегапрайсПрофилиПрайсов.Партнер КАК Ссылка,
		|	мегапрайсПрофилиПрайсов.Приоритет КАК Приоритет
		|ИЗ
		|	Справочник.мегапрайсПрофилиПрайсов КАК мегапрайсПрофилиПрайсов
		|ГДЕ
		|	мегапрайсПрофилиПрайсов.ВидЦенПродажи = &ВидЦенПродажи
		|
		|СГРУППИРОВАТЬ ПО
		|	мегапрайсПрофилиПрайсов.Партнер,
		|	мегапрайсПрофилиПрайсов.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ВидЦенПродажи",Объект.ВидЦенПродажи);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	спрПартнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК спрПартнеры
		|ГДЕ
		|	спрПартнеры.Конкурент = Истина
		|
		|СГРУППИРОВАТЬ ПО
		|	спрПартнеры.Ссылка";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Объект.ПрайсыКонкурентов.Добавить();
		НоваяСтрока.Партнер      = СтрокаТЧ.Ссылка;	
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьСписокПоставщиков(Команда)
	
	ЗаполнитьСписокПоставщиков();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСписокКонкурентов(Команда)
	
	ЗаполнитьСписокКонкурентов();
	
КонецПроцедуры


//============================================================================
// РЕГИСТРАЦИЯ ЦЕН

&НаСервере
Функция ВыполнитьУстановкаЦенНоменклатурыСервер(ВариантЗаписи = 1)
	
	НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Комментарий = "";
	НовыйДокумент.Согласован = Истина;
	НовыйДокумент.Статус     = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		
	ЕстьВидЦенПродажиСтарая = ЗначениеЗаполнено(Объект.ВидЦенПродажиСтарая);
	
	Если ВариантЗаписи = 1 Тогда
		СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
		СтрокаТЧ.ВидЦены = Объект.ВидЦенЗакупочная;
		
		СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
		СтрокаТЧ.ВидЦены = Объект.ВидЦенПродажи;
		
		Если ЕстьВидЦенПродажиСтарая Тогда
			СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
			СтрокаТЧ.ВидЦены = Объект.ВидЦенПродажиСтарая;
		КонецЕсли;
		
	ИначеЕсли ВариантЗаписи = 2 Тогда
		СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
		СтрокаТЧ.ВидЦены = Объект.ВидЦенЗакупочная;
		
	ИначеЕсли ВариантЗаписи = 3 Тогда
		СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
		СтрокаТЧ.ВидЦены = Объект.ВидЦенПродажи;
		
		Если ЕстьВидЦенПродажиСтарая Тогда
			СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
			СтрокаТЧ.ВидЦены = Объект.ВидЦенПродажиСтарая;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.ТаблицаНоменклатуры Цикл
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВариантЗаписи = 1 Тогда
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенЗакупочная;
			СтрокаТЧ.Цена             = Стр.НоваяБазоваяЦена;	
			СтрокаТЧ.ЦенаИзмененаВручную = Истина;
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажи;
			СтрокаТЧ.Цена             = Стр.НоваяЦенаПродажи;	
			СтрокаТЧ.ЦенаИзмененаВручную = Истина;
			
			Если ЕстьВидЦенПродажиСтарая Тогда
				СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
				СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажиСтарая;
				СтрокаТЧ.Цена             = Стр.СтараяЦенаПродажи;	
				СтрокаТЧ.ЦенаИзмененаВручную = Истина;
			КонецЕсли;
			
		ИначеЕсли ВариантЗаписи = 2 Тогда
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенЗакупочная;
			СтрокаТЧ.Цена             = Стр.НоваяБазоваяЦена;	
			СтрокаТЧ.ЦенаИзмененаВручную = Истина;

		ИначеЕсли ВариантЗаписи = 3 Тогда
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажи;
			СтрокаТЧ.Цена             = Стр.НоваяЦенаПродажи;	
			СтрокаТЧ.ЦенаИзмененаВручную = Истина;
			
			Если ЕстьВидЦенПродажиСтарая Тогда
				СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
				СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажиСтарая;
				СтрокаТЧ.Цена             = Стр.СтараяЦенаПродажи;	
				СтрокаТЧ.ЦенаИзмененаВручную = Истина;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьОбеЦены(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = ВыполнитьУстановкаЦенНоменклатурыСервер(1);
	ФормаДока = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	ФормаДока.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБазовуюЦену(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = ВыполнитьУстановкаЦенНоменклатурыСервер(2);
	ФормаДока = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	ФормаДока.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРасчетнуюЦену(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект = ВыполнитьУстановкаЦенНоменклатурыСервер(3);
	ФормаДока = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	ФормаДока.Открыть();
	
КонецПроцедуры




&НаКлиенте
Процедура ТаблицаВыделитьВсе(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСнятьПометки(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаВыделенного(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки;	
	Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		НомерСтроки = Элементы.ТаблицаНоменклатуры.ДанныеСтроки(СтрВыд).НомерСтроки;
		
		СтрокаСоотв = Объект.ТаблицаНоменклатуры[НомерСтроки-1];
		СтрокаСоотв.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаПодорожало(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Если Строка.НоваяБазоваяЦена > 0 И Строка.СтараяБазовая < Строка.НоваяБазоваяЦена Тогда
			Строка.Пометка = Истина;
		КонецЕсли;

		Если Строка.НоваяЦенаПродажи > 0 И Строка.СтараяЦенаПродажи < Строка.НоваяЦенаПродажи Тогда
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаПодешевело(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Если Строка.НоваяБазоваяЦена > 0 И Строка.СтараяБазовая > Строка.НоваяБазоваяЦена Тогда
			Строка.Пометка = Истина;
		КонецЕсли;

		Если Строка.НоваяЦенаПродажи > 0 И Строка.СтараяЦенаПродажи > Строка.НоваяЦенаПродажи Тогда
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПометкаИзменилось(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Если Строка.НоваяБазоваяЦена > 0 И Строка.СтараяБазовая <> Строка.НоваяБазоваяЦена Тогда
			Строка.Пометка = Истина;
		КонецЕсли;

		Если Строка.НоваяЦенаПродажи > 0 И Строка.СтараяЦенаПродажи <> Строка.НоваяЦенаПродажи Тогда
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");

КонецПроцедуры





//============================================================================
// ПРАВИЛА РАСЧЕТА ЦЕН

&НаСервере
Процедура МегапрайсСохранитьПравилаРасчетаЦен()
	
	Если НЕ ЗначениеЗаполнено(Объект.РасширенныйВидЦен) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоОбъект = Объект.РасширенныйВидЦен.ПолучитьОбъект();
	ПравилоОбъект.ВидЦенЗакупочная = Объект.ВидЦенЗакупочная;
	ПравилоОбъект.ВидЦенПродажи = Объект.ВидЦенПродажи;
	
	Попытка
		ПравилоОбъект.ХранилищеНастроекПомощникЦен = Новый ХранилищеЗначения(Объект.КомпоновщикНастроек.Настройки);
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ПравилоОбъект.ПрайсыПоставщиков.Загрузить(Объект.ПрайсыПоставщиков.Выгрузить());	
	ПравилоОбъект.ПрайсыКонкурентов.Загрузить(Объект.ПрайсыКонкурентов.Выгрузить());
	ПравилоОбъект.ПравилаРасчетаЦены.Загрузить(Объект.ПравилаРасчетаЦены.Выгрузить());
	ПравилоОбъект.ПорогиСрабатывания.Загрузить(Объект.ПорогиСрабатывания.Выгрузить());

	ПравилоОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Процедура МегапрайсЗаполнитьПравилаРасчетаЦен()
	
	Если НЕ ЗначениеЗаполнено(Объект.РасширенныйВидЦен) Тогда
		мегапрайсРасширенныеВидыЦен = Справочники.мегапрайсРасширенныеВидыЦен;
		Объект.РасширенныйВидЦен = мегапрайсРасширенныеВидыЦен.НайтиПоРеквизиту("ВидЦенПродажи",Объект.ВидЦенПродажи);
	КонецЕсли;
	
	Объект.ПрайсыПоставщиков.Очистить();
	Объект.ПрайсыКонкурентов.Очистить();
	Объект.ПравилаРасчетаЦены.Очистить();
	Объект.ПорогиСрабатывания.Очистить();

	НайденоПравило = Объект.РасширенныйВидЦен;
	
	Объект.ВидЦенЗакупочная = НайденоПравило.ВидЦенЗакупочная;
	Объект.ВидЦенПродажи = НайденоПравило.ВидЦенПродажи;	
	
	Попытка
		Объект.КомпоновщикНастроек.ЗагрузитьНастройки(НайденоПравило.ХранилищеНастроекПомощникЦен.Получить());
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Объект.ПрайсыПоставщиков.Загрузить(НайденоПравило.ПрайсыПоставщиков.Выгрузить());	
	Объект.ПрайсыКонкурентов.Загрузить(НайденоПравило.ПрайсыКонкурентов.Выгрузить());
	Объект.ПравилаРасчетаЦены.Загрузить(НайденоПравило.ПравилаРасчетаЦены.Выгрузить());
	Объект.ПорогиСрабатывания.Загрузить(НайденоПравило.ПорогиСрабатывания.Выгрузить());	
	
КонецПроцедуры

&НаКлиенте
Процедура МегапрайсИзменениеВидаЦены(Элемент)
	
	МегапрайсЗаполнитьПравилаРасчетаЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРасширенныйВидЦен(Команда)
	
	МегапрайсСохранитьПравилаРасчетаЦен();
	
КонецПроцедуры

//============================================================================
// НАСТРОЙКИ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗакрытьОбработку Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Работа будет завершена, все введенные данные будут потеряны. Закрыть?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьОбработку = Истина;
        Закрыть();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравилаРасчетаЦеныТекстАлгоритмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекстАлгоритма",Элементы.ПравилаРасчетаЦены.ТекущиеДанные.ТекстАлгоритма);
	
	Попытка
		Результат = ОткрытьФормуМодально("Обработка.мегапрайсПомощникУстановкиЦен.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма); 
	Исключение
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсПомощникУстановкиЦен.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.ПравилаРасчетаЦены.ТекущиеДанные.ТекстАлгоритма = Результат;
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ТаблицаНоменклатурыСтараяБазовая.Видимость = ПоказатьИзменения;
	Элементы.ТаблицаНоменклатурыСтараяРасчетная.Видимость = ПоказатьИзменения;
	Элементы.ТаблицаНоменклатурыНаценкаСтаройЦены.Видимость = ПоказатьИзменения;
	
	Элементы.ТаблицаНоменклатурыОтклонениеБазовыхЦен.Видимость = ПоказатьИзменения;
	Элементы.ТаблицаНоменклатурыДельта.Видимость = ПоказатьИзменения;	 	
	
КонецПроцедуры



ЗакрытьОбработку = Ложь;















