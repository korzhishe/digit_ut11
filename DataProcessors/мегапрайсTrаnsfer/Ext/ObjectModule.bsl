Перем ПустаяСсылка;


Функция СформироватьВыгрузку() Экспорт
	
	Схема = ПолучитьМакет("СхемаЗапроса");
	КомпоновщикНастроекИзХранилища = КомпоновщикНастроек;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроекИзХранилища.Настройки);
	
	ТЕКСТЗАПРОСА = МакетКомпоновки.НаборыДанных.НаборДанных.Запрос;
	
	ТекстСортировок = "";
	КолЭлементов = КомпоновщикНастроекИзХранилища.Настройки.Порядок.Элементы.Количество();
	Если КолЭлементов > 0 Тогда
	    ТекстСортировок = " 
		|УПОРЯДОЧИТЬ ПО ";
		ОбходКол = 0;
		Для Каждого Элемент Из КомпоновщикНастроекИзХранилища.Настройки.Порядок.Элементы Цикл
			Если НЕ Элемент.Использование Тогда
				Продолжить;
			КонецЕсли;
			ОбходКол = ОбходКол+1;
			
			Если Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
				ДопУсловие = "ВОЗР";
			Иначе
				ДопУсловие = "УБЫВ";
			КонецЕсли;
			
			ТекстСортировок = ТекстСортировок+" ЗапросПрайс."+Элемент.Поле+" "+ДопУсловие+",";
		КонецЦикла;
	КонецЕсли;	
	
	ТекстСортировок = Лев(ТекстСортировок, СтрДлина(ТекстСортировок)-1); 
	ТЕКСТЗАПРОСА = ТЕКСТЗАПРОСА + ТекстСортировок;
	//Сообщить(ТЕКСТЗАПРОСА);
	
	//Если ИспользоватьХарактеристикиНоменклатуры Тогда
	//	ТЕКСТЗАПРОСА = ТЕКСТЗАПРОСА + "
	//	|ИТОГИ
	//	|	МАКСИМУМ(Цена),
	//	|	СУММА(Остаток),
	//	|	МАКСИМУМ(ОстаткиПоставщиков),
	//	|	МАКСИМУМ(Штрихкод)
	//	|ПО
	//	|	Номенклатура ИЕРАРХИЯ,
	//	|	Характеристика,
	//	|	Склад,
	//	|	ВидЦены";
	//Иначе
	//	ТЕКСТЗАПРОСА = ТЕКСТЗАПРОСА + "
	//	|ИТОГИ
	//	|	МАКСИМУМ(Цена),
	//	|	МАКСИМУМ(Остаток),
	//	|	МАКСИМУМ(ОстаткиПоставщиков),
	//	|	МАКСИМУМ(Штрихкод)
	//	|ПО
	//	|	Номенклатура ИЕРАРХИЯ,
	//	|	Склад,
	//	|	ВидЦены";
	//КонецЕсли;
		
	Запрос = Новый Запрос;	
	Запрос.Текст = ТЕКСТЗАПРОСА;   

	Для Каждого ПараметрЗапроса Из МакетКомпоновки.ЗначенияПараметров Цикл
		Если Найти(ТЕКСТЗАПРОСА,"&"+ПараметрЗапроса.Имя) > 0 Тогда
			Запрос.УстановитьПараметр(ПараметрЗапроса.Имя, ПараметрЗапроса.Значение);
		КонецЕсли;
	КонецЦикла;

	//ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	РегистрОстатки.Номенклатура.Наименование КАК Номенклатура,
	//|	РегистрОстатки.Номенклатура.Код КАК Код,
	//|	РегистрОстатки.Номенклатура.Артикул КАК Артикул,
	//|	РегистрОстатки.Характеристика.Наименование КАК Характеристика,
	//|	РегистрОстатки.Склад.Наименование КАК Склад,
	//|	СУММА(РегистрОстатки.ВНаличииОстаток - РегистрОстатки.ВРезервеСоСкладаОстаток) КАК Количество,
	//|	МИНИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	//|ИЗ
	//|	РегистрНакопления.СвободныеОстатки.Остатки(, ) КАК РегистрОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВыбВидЦеныНоменклатуры) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО РегистрОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И РегистрОстатки.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	РегистрОстатки.Номенклатура.Код,
	//|	РегистрОстатки.Номенклатура.Артикул,
	//|	РегистрОстатки.Номенклатура.Наименование,
	//|	РегистрОстатки.Характеристика.Наименование,
	//|	РегистрОстатки.Склад.Наименование";
	//	
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("ВыбВидЦеныНоменклатуры",Объект.ВидЦеныНоменклатуры);
		
	
	РезультатЗапроса = Запрос.Выполнить();  
	
	ТекстоваяСтрока = "";
	Разделитель = ";";	
	
	РезультатЗапроса.Выгрузить().ВыбратьСтроку();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстоваяСтрока = ТекстоваяСтрока 
		+ Выборка.Номенклатура.ПолноеНаименование()
		+ Разделитель + Выборка.Код 
		+ Разделитель + Выборка.Артикул
		+ Разделитель + Выборка.Номенклатура
		+ Разделитель + Выборка.ХарактеристикаНоменклатуры
		+ Разделитель + Выборка.Склад.УникальныйИдентификатор()
		+ Разделитель + Выборка.Склад  
		+ Разделитель + Выборка.Количество    
		+ Разделитель + Выборка.Цена 
		+ Символы.ПС;    
	КонецЦикла;
	
	ВремФайл = ПолучитьИмяВременногоФайла("csv");
	ТекстовыйФайл = Новый ЗаписьТекста(ВремФайл,КодировкаТекста.ANSI);            
	ТекстовыйФайл.ЗаписатьСтроку(ТекстоваяСтрока); 
	ТекстовыйФайл.Закрыть(); 	
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВремФайл));
	УдалитьФайлы(ВремФайл);
	
	Возврат Адрес;
	
КонецФункции





Процедура СинхронизацияСправочникКод() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	
	ДанныеПоиска  = ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,Номенклатура,Поле_Код");
	
	ТектЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	ВременнаяДанныеПоиска.Поле_Код КАК Поле_Код
	|ПОМЕСТИТЬ ВременнаяДанныеПоиска
	|ИЗ
	|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	|ГДЕ
	|	ВременнаяДанныеПоиска.Номенклатура = &ПустаяСсылка
	|	И ВременнаяДанныеПоиска.Поле_Код <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВременнаяДанныеПоиска.Поле_Код = СпрНоменклатура.Код
	|			И (СпрНоменклатура.ПометкаУдаления = ЛОЖЬ)";
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТектЗапроса;
	Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	КолСовпадений = 0;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл	
		КолСовпадений = КолСовпадений + 1;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТаблицыСинхронизации = ТабличнаяЧасть[Выборка.НомерСтроки-1]; 
		
		ЗаполнитьЗначенияСвойств(СтрТаблицыСинхронизации, Выборка, "Номенклатура");
	КонецЦикла
	
КонецПроцедуры

Процедура СинхронизацияСправочникАртикул() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	
	ДанныеПоиска  = ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,Поле_Артикул");
	
	ТектЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул
	|ПОМЕСТИТЬ ВременнаяДанныеПоиска
	|ИЗ
	|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	|ГДЕ
	|	ВременнаяДанныеПоиска.Поле_Артикул <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВременнаяДанныеПоиска.Поле_Артикул = СпрНоменклатура.Артикул
	|			И (СпрНоменклатура.ПометкаУдаления = ЛОЖЬ)";	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТектЗапроса;
	Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	КолСтрокОбработки = 0;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл	
		КолСтрокОбработки = КолСтрокОбработки + 1;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТаблицыСинхронизации = ТабличнаяЧасть[Выборка.НомерСтроки-1]; 
		//СтрТаблицыСинхронизации = НайтиСтрокуТаблицыОбработки(ТабличнаяЧасть,Выборка.КлючСтроки);
		
		ЗаполнитьЗначенияСвойств(СтрТаблицыСинхронизации, Выборка, "Номенклатура");
	КонецЦикла;
	//Сообщить("Поиск по артикулам. Обработано строк - "+КолСтрокОбработки);
	
КонецПроцедуры

Процедура СинхронизацияРегистрШтрихкод() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	
	ДанныеПоиска  = ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,Номенклатура,Поле_Штрихкод");	
	
	ТектЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	ВременнаяДанныеПоиска.Поле_Штрихкод КАК Поле_Штрихкод
	|ПОМЕСТИТЬ ВременнаяДанныеПоиска
	|ИЗ
	|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	|ГДЕ
	|	ВременнаяДанныеПоиска.Номенклатура = &ПустаяСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	РегШтрихкоды.Номенклатура.Ссылка КАК Номенклатура,
	|	РегШтрихкоды.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК РегШтрихкоды
	|		ПО ВременнаяДанныеПоиска.Поле_Штрихкод = РегШтрихкоды.Штрихкод";
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТектЗапроса;
	Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	КолСовпадений = 0;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл		
		КолСовпадений = КолСовпадений + 1;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТаблицыСинхронизации = ТабличнаяЧасть[Выборка.НомерСтроки-1]; 
		
		ЗаполнитьЗначенияСвойств(СтрТаблицыСинхронизации, Выборка, "Номенклатура, Характеристика");
	КонецЦикла
	
КонецПроцедуры

Процедура СинхронизацияСправочникНаименование() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	
	ДанныеПоиска  = ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,Номенклатура,Поле_Наименование");
	
	ТектЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	ВременнаяДанныеПоиска.Поле_Наименование КАК Поле_Наименование
	|ПОМЕСТИТЬ ВременнаяДанныеПоиска
	|ИЗ
	|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	|ГДЕ
	|	ВременнаяДанныеПоиска.Номенклатура = &ПустаяСсылка
	|	И ВременнаяДанныеПоиска.Поле_Наименование <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВременнаяДанныеПоиска.Поле_Наименование = СпрНоменклатура.Наименование";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТектЗапроса;
	Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	КолСовпадений = 0;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл	
		КолСовпадений = КолСовпадений + 1;		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТаблицыСинхронизации = ТабличнаяЧасть[Выборка.НомерСтроки-1]; 
		
		ЗаполнитьЗначенияСвойств(СтрТаблицыСинхронизации, Выборка, "Номенклатура");
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизацияСправочникНоменклатураПоставщиков() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	
	ДанныеПоиска  = ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,Номенклатура,Поле_Наименование,Поле_Код,Поле_Артикул");
	
	ТектЗапроса = 
	"ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	ВременнаяДанныеПоиска.Поле_Код КАК Поле_Код,
	|	ВременнаяДанныеПоиска.Поле_Наименование КАК Поле_Наименование,
	|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул
	|ПОМЕСТИТЬ ВременнаяДанныеПоиска
	|ИЗ
	|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	|ГДЕ
	|	ВременнаяДанныеПоиска.Номенклатура = &ПустаяСсылка
	|	И ВременнаяДанныеПоиска.Поле_Наименование <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Ссылка КАК НоменклатураПоставщика,
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|		ПО ВременнаяДанныеПоиска.Поле_Наименование = СпрНоменклатура.Наименование
	|			И ВременнаяДанныеПоиска.Поле_Код = СпрНоменклатура.Идентификатор
	|			И ВременнаяДанныеПоиска.Поле_Артикул = СпрНоменклатура.Артикул";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТектЗапроса;
	Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	КолСовпадений = 0;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл	
		КолСовпадений = КолСовпадений + 1;		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТаблицыСинхронизации = ТабличнаяЧасть[Выборка.НомерСтроки-1]; 
		
		ЗаполнитьЗначенияСвойств(СтрТаблицыСинхронизации, Выборка);
	КонецЦикла;
	
КонецПроцедуры


Процедура мСинхронизироватьСервер() Экспорт	
	
	Если ПоискПоНоменклатуреПоставщиков Тогда
		СинхронизацияСправочникНоменклатураПоставщиков();
	КонецЕсли;
	Если ПоискПоКоду Тогда
		СинхронизацияСправочникКод();
	КонецЕсли;   
	Если ПоискПоАртикулу Тогда		
		СинхронизацияСправочникАртикул(); 
	КонецЕсли;   
	Если ПоискПоНаименованию Тогда
		СинхронизацияСправочникНаименование();
	КонецЕсли; 	
	
КОнецПроцедуры





Процедура Справочники_СоздатьНоменклатуруПоставщика(СтруктураПараметров,ТабличнаяЧасть,Изменить=Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	 
	ПрофильПрайсЛиста = СтруктураПараметров.ПрофильПрайсЛиста;
	
	Для Каждого Стр Из ТабличнаяЧасть Цикл		 
		Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если Изменить = Ложь И ЗначениеЗаполнено(Стр.НоменклатураПоставщика) Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеДляПоиска = СокрЛП(Стр.Поле_Наименование);	
		Если НЕ ЗначениеЗаполнено(НаименованиеДляПоиска) Тогда
			Сообщить(""+Стр.НомерСтроки+" - В импорте отсутствует наименование по строке. Запись по строке не будет выполнена.");
			Продолжить;
		КонецЕсли;
		
		НоменклатураПоставщикаИмеетНесколькоСоответствий = Ложь;
		//Если ИспользоватьМегапрайс Тогда
			НоменклатураПоставщикаИмеетНесколькоСоответствий = ПрофильПрайсЛиста.НоменклатураПоставщикаИмеетНесколькоСоответствий;
		//КонецЕсли;
		
		Запрос = Новый Запрос();
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НоменклатураПоставщиков.Ссылка,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|	И НоменклатураПоставщиков.Характеристика = &Характеристика
		|	И НоменклатураПоставщиков.Владелец = &Партнер";  	 
		Если НоменклатураПоставщикаИмеетНесколькоСоответствий Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НоменклатураПоставщиков.Идентификатор = &Поле_Код
			|	И НоменклатураПоставщиков.Артикул = &Поле_Артикул
			|	И НоменклатураПоставщиков.Наименование = &Поле_Наименование"; 
			
			Запрос.УстановитьПараметр("Поле_Код", Стр.Поле_Код);
			Запрос.УстановитьПараметр("Поле_Артикул", Стр.Поле_Артикул);
			Запрос.УстановитьПараметр("Поле_Наименование", Стр.Поле_Наименование);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Стр.Характеристика);
		Запрос.УстановитьПараметр("Партнер", ПрофильПрайсЛиста.Партнер);
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда				 
			Запись = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
			Запись.Владелец       = ПрофильПрайсЛиста.Партнер;
			Запись.Номенклатура   = Стр.Номенклатура;
			Запись.Характеристика = Стр.Характеристика;
			Запись.Наименование   = НаименованиеДляПоиска;
			Если ЗначениеЗаполнено(Стр.Поле_Артикул) Тогда
				Запись.Артикул = СокрЛП(Стр.Поле_Артикул);
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.Поле_Код) Тогда
				Запись.Идентификатор  = СокрЛП(Стр.Поле_Код);
			КонецЕсли;	
			Запись.УстановитьНовыйКод();
			Запись.ОбменДанными.Загрузка = Истина;
			Запись.Записать();
			Стр.НоменклатураПоставщика = Запись.Ссылка;			 
		Иначе			 
			Выборка  = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл	
				Стр.НоменклатураПоставщика = Выборка.Ссылка;
				
				//Если НоменклатураПоставщикаИмеетНесколькоСоответствий Тогда
				//	Запись = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				//	Запись.УстановитьНовыйКод();
				//	ТекстСообщения = "Внимание! У товара "+Стр.Номенклатура+" - появился дубль номенклатуры поставщика";
				//Иначе
				//	Запись = Выборка.Ссылка.ПолучитьОбъект();
				//	ТекстСообщения = "Был найден элемент Номенклатуры поставщика по товару "+Стр.Номенклатура+" - элемент обновлен новыми данными";
				//КонецЕсли;
				//Запись.Владелец       = ПрофильПрайсЛиста.Партнер;
				//Запись.Номенклатура   = Стр.Номенклатура;
				//Запись.Характеристика = Стр.Характеристика;
				//Запись.Наименование   = НаименованиеДляПоиска;
				//Если ЗначениеЗаполнено(Стр.Поле_Артикул) Тогда
				//	Запись.Артикул = СокрЛП(Стр.Поле_Артикул);
				//КонецЕсли;
				//Если ЗначениеЗаполнено(Стр.Поле_Код) Тогда
				//	Запись.Идентификатор  = СокрЛП(Стр.Поле_Код);
				//КонецЕсли;	
				//Запись.ОбменДанными.Загрузка = Истина;
				//Запись.Записать();	
				//Стр.НоменклатураПоставщика = Запись.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КОнецПроцедуры




ПустаяСсылка  = Справочники.Номенклатура.ПустаяСсылка();

