&НаКлиенте
Перем КэшированныеЗначения;
&НаКлиенте
Перем ПодборТекущаяНоменклатура;
&НаКлиенте
Перем ПодборХарактеристика; 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаДокумента = ТекущаяДата();
	Валюта        = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	//БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	Менеджер       = Пользователи.ТекущийПользователь();
	ОсновнойСклад  = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(ОсновнойСклад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	Подразделение  = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение);
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	
	Объект.Партнер             = СтруктураПараметров.Партнер;
	Объект.СоглашениеСКлиентом = СтруктураПараметров.СоглашениеСКлиентом;
	Объект.ВидЦенПродажи = СтруктураПараметров.ВидЦенПродажи;
	
	ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Статус             = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	
	Объект.ОбработкаЗаказаПокупателя.Очистить();
	
	Для Каждого Строка из СтруктураПараметров.ТабличнаяЧасть Цикл
		Если Строка.Поле_Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ОбработкаЗаказаПокупателя.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Поле_Количество = Строка.Поле_Количество;
		
		Если НоваяСтрока.Поле_Количество > 0 И НоваяСтрока.Поле_ЦенаПродажи = 0 Тогда
			НоваяСтрока.Поле_ЦенаПродажи = НоваяСтрока.Поле_Сумма/НоваяСтрока.Поле_Количество;
		КонецЕсли;
	КонецЦикла;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецПроцедуры


&НаСервере
Функция ПолучитьКоэффициентУпаковки(ТекУпаковка)
	
	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = ?(ТекУпаковка.КоличествоУпаковок>0,ТекУпаковка.КоличествоУпаковок,1);
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;
	
	Возврат ТекКоэффициент;
	
КонецФункции




&НаСервере
Функция мКоммерческоеПредложение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Объект.ОбработкаЗаказаПокупателя.Сортировать("Поле_Контрагент,Размещение,КлючСтроки");
	
	ТаблицаРазделения = Объект.ОбработкаЗаказаПокупателя.Выгрузить();
	ТаблицаРазделения.Свернуть("Поле_Контрагент");
	
	Для Каждого Шапка Из ТаблицаРазделения Цикл		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поле_Контрагент", Шапка.Поле_Контрагент);
		
		ТаблЧасть = Объект.ОбработкаЗаказаПокупателя.НайтиСтроки(ПараметрыОтбора);
		
		НовыйДокумент = Документы.КоммерческоеПредложениеКлиенту.СоздатьДокумент(); 
		НовыйДокумент.Дата        = ДатаДокумента;
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			НовыйДокумент.Номер = НомерДокумента;
		КонецЕсли;
		НовыйДокумент.Комментарий = "Импорт из Excel "+Шапка.Поле_Контрагент;
		НовыйДокумент.Статус      = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
		
		Если НЕ ЗначениеЗаполнено(Шапка.Поле_Контрагент) Тогда
			НовыйДокумент.Партнер     = Объект.Партнер;
			Если ЗначениеЗаполнено(Объект.СоглашениеСКлиентом) Тогда
				НовыйДокумент.Соглашение  = Объект.СоглашениеСКлиентом;
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		Иначе
			НайтиКонтрагента = Справочники.Контрагенты.НайтиПоНаименованию(Шапка.Поле_Контрагент);
			НовыйДокумент.Контрагент = НайтиКонтрагента.Ссылка;
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
		
		НеПересчитыватьСуммуЕслиНетЦены = Ложь;
		
		Для Каждого Стр из ТаблЧасть Цикл	
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрКоличество = ?(Стр.Количество > 0,Стр.Количество,Стр.Поле_Количество);
			Если СтрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			СтрокаТЧ.Количество       = СтрКоличество;
			
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
			
			СтрокаТЧ.КоличествоУпаковок = СтрКоличество / КоэффициентУпаковки;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажи;
			
			Если Стр.Поле_Сумма > 0 Тогда	
				НеПересчитыватьСуммуЕслиНетЦены = Истина;
				
				СтрокаТЧ.Сумма = Стр.Поле_Сумма; 
				СтрокаТЧ.Цена  = Стр.Поле_Сумма/СтрокаТЧ.КоличествоУпаковок;
			Иначе
				СтрокаТЧ.Цена  = Стр.Поле_ЦенаПродажи;		
				СтрокаТЧ.Сумма = Стр.Поле_ЦенаПродажи*СтрокаТЧ.КоличествоУпаковок;
			КонецЕсли;			
		КонецЦикла;
		
		Попытка
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		Исключение //СТАРЫЕ ВЕРСИИ УТ
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		КонецПопытки;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		Если НЕ НеПересчитыватьСуммуЕслиНетЦены Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьКоммерческоеПредложение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		Сообщить("Не указан Партнер!");
		Возврат;
	КонецЕсли;
	
	МассивДокументов = мКоммерческоеПредложение();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;
	
КонецПроцедуры



&НаСервере
Функция мЗаказПокупателя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Объект.ОбработкаЗаказаПокупателя.Сортировать("Поле_Контрагент,Размещение,КлючСтроки");
	
	ТаблицаРазделения = Объект.ОбработкаЗаказаПокупателя.Выгрузить();
	ТаблицаРазделения.Свернуть("Поле_Контрагент");
	
	Для Каждого Шапка Из ТаблицаРазделения Цикл		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поле_Контрагент", Шапка.Поле_Контрагент);
		
		ТаблЧасть = Объект.ОбработкаЗаказаПокупателя.НайтиСтроки(ПараметрыОтбора);
		
		НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент(); 
		НовыйДокумент.Дата        = ДатаДокумента;
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			НовыйДокумент.Номер = НомерДокумента;
		КонецЕсли;
		
		НовыйДокумент.Комментарий = "Импорт из Excel "+Шапка.Поле_Контрагент;
		НовыйДокумент.Приоритет   = Приоритет;
		НовыйДокумент.Статус      = Статус;
		НовыйДокумент.Менеджер    = Менеджер;
		
		НовыйДокумент.Организация   = Организация;
		НовыйДокумент.Склад         = ОсновнойСклад;
		НовыйДокумент.Подразделение = Подразделение;
		НовыйДокумент.ЖелаемаяДатаОтгрузки = ДатаОтгрузки;
		
		Если НЕ ЗначениеЗаполнено(Шапка.Поле_Контрагент) Тогда
			НовыйДокумент.Партнер     = Объект.Партнер;
			Если ЗначениеЗаполнено(Объект.СоглашениеСКлиентом) Тогда
				НовыйДокумент.Соглашение  = Объект.СоглашениеСКлиентом;
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		Иначе
			НайтиКонтрагента = Справочники.Контрагенты.НайтиПоНаименованию(Шапка.Поле_Контрагент);
			НовыйДокумент.Контрагент = НайтиКонтрагента.Ссылка;
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
		
		НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		
		НеПересчитыватьСуммуЕслиНетЦены = Ложь;
		
		Для Каждого Стр из ТаблЧасть Цикл	
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрКоличество = ?(Стр.Количество > 0,Стр.Количество,Стр.Поле_Количество);
			Если СтрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СТрокаТЧ.ВариантОбеспечения = ВариантОбеспечения;
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			СтрокаТЧ.Количество       = СтрКоличество;
			
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
			
			СтрокаТЧ.КоличествоУпаковок = СтрКоличество / КоэффициентУпаковки;
			СтрокаТЧ.ВидЦены          = Объект.ВидЦенПродажи;
			СтрокаТЧ.Склад            = ?(ЗначениеЗаполнено(Стр.Размещение),Стр.Размещение,ОсновнойСклад);
			СтрокаТЧ.ДатаОтгрузки     = ДатаОтгрузки;
			
			Если Стр.Поле_Сумма > 0 Тогда	
				НеПересчитыватьСуммуЕслиНетЦены = Истина;
				
				СтрокаТЧ.Сумма = Стр.Поле_Сумма; 
				СтрокаТЧ.Цена  = Стр.Поле_Сумма/СтрокаТЧ.КоличествоУпаковок;
			Иначе
				СтрокаТЧ.Цена  = Стр.Поле_ЦенаПродажи;		
				СтрокаТЧ.Сумма = Стр.Поле_ЦенаПродажи*СтрокаТЧ.КоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		Исключение //СТАРЫЕ ВЕРСИИ УТ
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		КонецПопытки;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(НовыйДокумент, Ложь));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		Если НЕ НеПересчитыватьСуммуЕслиНетЦены Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.ЗаполнитьЭтапыГрафикаОплаты();
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказПокупателя(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) И
		НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация и партнер!");
		Возврат;
	КонецЕсли;
	
	МассивДокументов = мЗаказПокупателя();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция мРеализацияТоваров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Объект.ОбработкаЗаказаПокупателя.Сортировать("Поле_Контрагент,Размещение,КлючСтроки");
	
	НовыйДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	ВремРазмещение = Справочники.Склады.ПустаяСсылка();
	
	ТаблицаРазделения = Объект.ОбработкаЗаказаПокупателя.Выгрузить();
	ТаблицаРазделения.Свернуть("Поле_Контрагент,Размещение");
	
	Для Каждого Шапка Из ТаблицаРазделения Цикл		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поле_Контрагент", Шапка.Поле_Контрагент);
		ПараметрыОтбора.Вставить("Размещение", Шапка.Размещение);
		
		ТаблЧасть = Объект.ОбработкаЗаказаПокупателя.НайтиСтроки(ПараметрыОтбора);
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Дата      = ДатаДокумента;
		Если ЗначениеЗаполнено(НомерДокумента) Тогда
			НовыйДокумент.Номер = НомерДокумента;
		КонецЕсли;
		НовыйДокумент.Комментарий = "Импорт из Excel "+Шапка.Поле_Контрагент;
		
		НовыйДокумент.Организация   = Организация;
		
		Если НЕ ЗначениеЗаполнено(Шапка.Поле_Контрагент) Тогда
			НовыйДокумент.Партнер     = Объект.Партнер;
			Если ЗначениеЗаполнено(Объект.СоглашениеСКлиентом) Тогда
				НовыйДокумент.Соглашение  = Объект.СоглашениеСКлиентом;
				НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
			Иначе
				НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		Иначе
			НайтиКонтрагента = Справочники.Контрагенты.НайтиПоНаименованию(Шапка.Поле_Контрагент);
			НовыйДокумент.Контрагент = НайтиКонтрагента.Ссылка;
			НовыйДокумент.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
		
		НовыйДокумент.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		НовыйДокумент.ВариантОформленияПродажи = ВариантОформленияПродажи;
		НовыйДокумент.Склад       = Шапка.Размещение;
		НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
		
		НовыйДокумент.Статус      = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.Согласован  = Истина;
		
		НеПересчитыватьСуммуЕслиНетЦены = Ложь;
		
		Для Каждого Стр из ТаблЧасть Цикл					
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			СтрокаТЧ.Упаковка         = Стр.Упаковка;
			
			КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
			
			СтрКоличество = ?(Стр.Количество > 0,Стр.Количество,Стр.Поле_Количество);
			Если СтрКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.Количество         = СтрКоличество / КоэффициентУпаковки;
			СтрокаТЧ.КоличествоУпаковок = СтрКоличество / КоэффициентУпаковки;
			СтрокаТЧ.Склад            = ?(ЗначениеЗаполнено(Шапка.Размещение),Шапка.Размещение,ОсновнойСклад);
			
			Если Стр.Поле_Сумма > 0 Тогда	
				НеПересчитыватьСуммуЕслиНетЦены = Истина;
				
				СтрокаТЧ.Сумма = Стр.Поле_Сумма; 
				СтрокаТЧ.Цена  = Стр.Поле_Сумма/СтрокаТЧ.КоличествоУпаковок;
			Иначе
				СтрокаТЧ.Цена  = Стр.Поле_ЦенаПродажи;		
				СтрокаТЧ.Сумма = Стр.Поле_ЦенаПродажи*СтрокаТЧ.КоличествоУпаковок;
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		Исключение //СТАРЫЕ ВЕРСИИ УТ
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
		КонецПопытки;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		Если НЕ НеПересчитыватьСуммуЕслиНетЦены Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьРеализацияТоваров(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) И
		НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация и партнер!");
		Возврат;
	КонецЕсли;
	
	МассивДокументов = мРеализацияТоваров();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;
	
КонецПроцедуры





&НаКлиенте
Процедура ОбработкаЗаказаПокупателяПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ОбработкаЗаказаПокупателя.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПодборТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
		
		Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
			ПодборХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		Иначе
			ПодборХарактеристика = ТекущиеДанные.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодборХарактеристика) Тогда
			Элементы.СписокХарактеристика.Видимость = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СписокОстаткиПоСкладам.Отбор,
		"Номенклатура", 
		ПодборТекущаяНоменклатура,
		ВидСравненияКомпоновкиДанных.Равно,"ОтборПоУмолчанию",Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СписокОстаткиПоСкладам.Отбор,
		"Характеристика", 
		ПодборХарактеристика,
		ВидСравненияКомпоновкиДанных.Равно,"ОтборПоУмолчанию",ЗначениеЗаполнено(ПодборХарактеристика));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаказаПокупателяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбработкаЗаказаПокупателя.ПодчиненныеЭлементы.ОбработкаЗаказаПокупателяКоличество
		ИЛИ Поле = Элементы.ОбработкаЗаказаПокупателя.ПодчиненныеЭлементы.ОбработкаЗаказаПокупателяРазмещение Тогда
	Иначе
		СтандартнаяОбработка    = Ложь;
		ЭтаФорма.ТекущийЭлемент = Элементы.СписокОстаткиПоСкладам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОстаткиПоСкладамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеТовары = Элементы.ОбработкаЗаказаПокупателя.ТекущиеДанные;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ПодборТекущаяНоменклатура);
		СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
		СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ТекущиеДанныеТовары.Упаковка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",   СтруктураПараметрыНоменклатуры.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", СтруктураПараметрыНоменклатуры.ХарактеристикаНоменклатуры);
		ПараметрыФормы.Вставить("Упаковка",       СтруктураПараметрыНоменклатуры.Упаковка);
		ПараметрыФормы.Вставить("Дата",           ДатаДокумента);
		ПараметрыФормы.Вставить("Валюта",         Валюта);
		ПараметрыФормы.Вставить("СкрытьЦену",           Ложь);
		ПараметрыФормы.Вставить("РедактироватьЦену",    Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены", Истина);
		
		СтруктураВозвращенноеЗначение = ОткрытьФормуМодально("Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		Если СтруктураВозвращенноеЗначение <> Неопределено Тогда
			ВводКоличество  = СтруктураВозвращенноеЗначение.Количество;
			
			РезультатПоиска = Объект.ОбработкаЗаказаПокупателя.НайтиСтроки(СтруктураПараметрыНоменклатуры);
			Если РезультатПоиска.Количество() > 0 Тогда
				
				ТекущаяСтрока = РезультатПоиска[0];
				
			КонецЕсли;
			
			ТекущаяСтрока.Количество = ВводКоличество;
			ТекущаяСтрока.Размещение  = ТекущиеДанные.Склад;
		КонецЕсли;
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ОбработкаЗаказаПокупателя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвторазмещениеСервер()
	
	МассивНоменклатуры = Новый СписокЗначений;	
	Для Каждого Стр Из Объект.ОбработкаЗаказаПокупателя Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		Стр.Количество = 0;
		Стр.Размещение = "";
		
		МассивНоменклатуры.Добавить(Стр.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Номенклатура" , МассивНоменклатуры);
	Запрос.УстановитьПараметр("Склад"        , ОсновнойСклад);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Склад КАК Размещение,
	|	СУММА(ТоварыНаСкладах.ВНаличииОстаток) - СУММА(ТоварыНаСкладах.ВРезервеСоСкладаОстаток) КАК ВНаличииОстаток
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Склад В ИЕРАРХИИ (&Склад)) КАК ТоварыНаСкладах
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.Склад";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	Сч = 0;
	Пока Сч < Таблица.Количество() Цикл
		СтрокаТаблицы = Таблица.Получить(Сч);
		Если СтрокаТаблицы.ВНаличииОстаток <= 0 Тогда
			Таблица.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ОбработкаЗаказаПокупателя Цикл		
		Если ЗначениеЗаполнено(СтрокаТЧ.Размещение) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		Если ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) Тогда
			СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
		
		Количество = СтрокаТЧ.Количество;
		
		Для Каждого Строка Из НайденныеСтроки Цикл			
			Если Количество <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоСвободныйОстаток = Строка.ВНаличииОстаток;		
			Если КоличествоСвободныйОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоСвободныйОстаток >= Количество Тогда
				КоэффСписания = Количество / КоличествоСвободныйОстаток;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			СписанноеКоличество = Окр(КоличествоСвободныйОстаток * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			СтрокаТЧ.Размещение  = Строка.Размещение;
			СтрокаТЧ.Количество  = СписанноеКоличество;
			
			Количество = Количество - СписанноеКоличество;			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Авторазмещение(Команда)
	
	АвторазмещениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.СоглашениеСКлиентом, ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенНоменклатурыПриИзменении(Элемент)
	
	ВидЦенНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЦенНоменклатурыПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦенПродажи) Тогда
		ВОзврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока из Объект.ОбработкаЗаказаПокупателя Цикл		
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Продолжить;
		КОнецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних");
		
		Запрос.УстановитьПараметр("ВидЦены"       , Объект.ВидЦенПродажи);
		Запрос.УстановитьПараметр("Дата"          , ТекущаяДата());
		Запрос.УстановитьПараметр("Номенклатура"  , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.ХарактеристикаНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Цена) Тогда
				ТекущаяСтрока.Цена = Выборка.Цена;
			Иначе
				ТекущаяСтрока.Цена = 0;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена*ТекущаяСтрока.Количество;
		
	КонецЦикла;
	
КонецПроцедуры








&НаСервере
Процедура СформироватьОтветКлиентуНаСервере()
	
	ТаблицаОтчета.Очистить();
	
	ТаблицаОтчета.АвтоМасштаб = Истина;
	ТаблицаОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Попытка
		Макет = Обработки.мегапрайсРасширеннаяЗагрузкаИзExcel.ПолучитьМакет("МакетПрайса");
	Исключение
		Макет = ВнешниеОбработки.мегапрайсРасширеннаяЗагрузкаИзExcel.ПолучитьМакет("МакетПрайса");
	КонецПопытки;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Дата = ТекущаяДата();
	ТаблицаОтчета.Вывести(ОбластьМакета);
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	ТаблицаОтчета.Вывести(Секция);
	
	Для Каждого Выборка Из Объект.ОбработкаЗаказаПокупателя Цикл
		
		Секция = Макет.ПолучитьОбласть("Строка");
		Секция.Параметры.Поле_Артикул = Выборка.Поле_Артикул;
		Секция.Параметры.Поле_Наименование = Выборка.Поле_Наименование;
		Секция.Параметры.Номенклатура = Выборка.Номенклатура;
		
		Секция.Параметры.Поле_Количество = Выборка.Поле_Количество;
		Секция.Параметры.Количество = Выборка.Количество;
		Секция.Параметры.Цена = Выборка.Цена;
		Секция.Параметры.Сумма = Выборка.Сумма;
		Секция.Параметры.Размещение = Выборка.Размещение;
		
		
		
		ТаблицаОтчета.Вывести(Секция);
	КонецЦикла;
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.ЗакладкаОтветКлиенту; 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтветКлиенту(Команда)
	
	СформироватьОтветКлиентуНаСервере();
	
КонецПроцедуры

