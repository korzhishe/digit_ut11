 
 &НаКлиенте
 Перем ЗакрытьОбработку;
 
 &НаСервере
 Перем КомпонентаSubsystems;
 
 &НаСервере
 Перем ОбработкаОбъект;
 
 &НаКлиенте
 Перем ИндексТекущейСтраницы;
 
 //============================================================================
 // АВТОР
 
 &НаКлиенте
 Процедура SubSysSkype(Команда)
	 
	 ЗапуститьПриложение("skype:shekineugeniy?chat");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	 
	 ЗапуститьПриложение("https://subsystems.ru/");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура SubSysПроверитьОбновления(Команда)
	 
	 ЗапуститьПриложение("https://subsystems.ru/news/");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СкачатьМарафетНажатие(Элемент)
	 
	 ЗапуститьПриложение("https://subsystems.ru/catalog/41/586/");
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура Сабсистемс_ВидеоОбзор(Команда)
	 
	 ЗапуститьПриложение("https://www.youtube.com/channel/UCTukH6iP4DSW0LtdKBRfUlw");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьИнструкции(Команда)
	 
	 ЗапуститьПриложение("https://subsystems.ru/forum/24/topic1024/");

 КонецПроцедуры
 

 //============================================================================
 // РЕГИСТРАЦИЯ
 
 &НаКлиенте
 Процедура АктивироватьКлюч(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.РегОрганизация) 
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.РегКлюч)
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.Сабсистемс_Логин)
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.Сабсистемс_Пароль) Тогда
		 Сообщить("Заполните все данные на этой форме, включая данные о регистрации на сайте SubSystems.ru");
		 Возврат;
	 КонецЕсли;
	 
	 Попытка            
		 HTTP = Новый HTTPСоединение("subsystems.ru", , Объект.Сабсистемс_Пароль, Объект.Сабсистемс_Логин);  
		 Сабсистемс_ТекущийПОльзователь = "";
	 Исключение                      
		 Сообщить("Не удалось соединиться с сервером:  www.subsystems.ru");            
		 Возврат;      
	 КонецПопытки; 
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("РегОрганизация",Объект.РегОрганизация);
	 СтруктураПараметров.Вставить("РегКлюч",Объект.РегКлюч);
	 СтруктураПараметров.Вставить("Сабсистемс_Логин",Объект.Сабсистемс_Логин);
	 СтруктураПараметров.Вставить("Сабсистемс_Пароль",Объект.Сабсистемс_Пароль);
	 
	 СохранитьРегДанные(СтруктураПараметров);
	 
	 УстановитьЗаголовок();
	 
	 Если НЕ ЗначениеЗаполнено(Объект.РегОрганизация) Тогда
		 Элементы.ПрофилиЗагрузки.Видимость  = Ложь;
		 Элементы.ЖурналСообщений.Видимость  = Ложь;
		 Элементы.ИсходнаяТаблица.Видимость  = Ложь;
		 Элементы.АвтозаменыУчетныхСправочников.Видимость = Ложь;
		 Элементы.ГруппаТабличнаяЧасть.Видимость = Ложь;
	 Иначе
		 Элементы.ПрофилиЗагрузки.Видимость = Истина;
		 Элементы.ЖурналСообщений.Видимость = Истина;
		 Элементы.ИсходнаяТаблица.Видимость = Истина;
		 Элементы.АвтозаменыУчетныхСправочников.Видимость = Истина;
		 Элементы.ГруппаТабличнаяЧасть.Видимость = Истина;
	 КонецЕсли;
	 
	 СообщениеВЖурналКлиент("ДОБРО ПОЖАЛОВАТЬ!! Спасибо за выбор нашего продукта!",Истина);  
	 СообщениеВЖурналКлиент("Чтобы приступить к загрезке первого прайса, перейдите на закладку профили загрузки!"); 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура УстановитьЗаголовок() Экспорт
	 
	 Попытка
		 ЭтаФорма.Заголовок = "Мегапрайс - Загрузка прайса. SubSystems.ru (c) 2019/"+Объект.РегОрганизация.ИНН;
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Процедура СохранитьРегДанные(СтруктураПараметров) Экспорт
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 ХранилищеСистемныхНастроек.Сохранить("Subsystems","Регистрация",СтруктураПараметров,"Регистрационные данные","Пользователь");
	 
	 УстановитьПривилегированныйРежим(Ложь);
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция ЗагрузитьРегДанные() Экспорт
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 Настройки = ХранилищеСистемныхНастроек.Загрузить("Subsystems","Регистрация","Регистрационные данные","Пользователь");
	 Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		 Возврат Настройки;
	 КонецЕсли;
	 
	 УстановитьПривилегированныйРежим(Ложь);
	 
	 Возврат Неопределено;
	 
 КонецФункции
 
 //============================================================================
 // СЛУЖЕБНЫЕ
 
 &НаСервере
 Процедура СообщениеВЖурнал(ТекстСообщения,Показать=Ложь,ОбъектСсылка="")  
	 
	 НоваяСтрока = Объект.ТаблицаСообщений.Вставить(0);
	 НоваяСтрока.Дата                = ТекущаяДата();
	 НоваяСтрока.ИдентификаторПрайса = Объект.ИдентификаторПрайса;
	 НоваяСтрока.ТексСообщения       = ТекстСообщения;
	 НоваяСтрока.ОбъектСсылка        = ОбъектСсылка;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СообщениеВЖурналКлиент(ТекстСообщения,Показать=Ложь,ОбъектСсылка="")  
	 
	 НоваяСтрока = Объект.ТаблицаСообщений.Вставить(0);
	 НоваяСтрока.Дата                = ТекущаяДата();
	 НоваяСтрока.ИдентификаторПрайса = Объект.ИдентификаторПрайса;
	 НоваяСтрока.ТексСообщения       = ТекстСообщения;
	 НоваяСтрока.ОбъектСсылка        = ОбъектСсылка;	 
	 Если Показать Тогда
		 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ЖурналСообщений;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 
 &НаСервереБезКонтекста
 Функция ЕстьРеквизитОбъекта(Ссылка,ИмяРеквизита) Экспорт
	 
	 МетаданныеОбъекта = Ссылка.Метаданные();
	 
	 Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		 Возврат Ложь;
	 Иначе
		 Возврат Истина;
	 КонецЕсли; 
	 
 КонецФункции 
 
 &НаКлиенте
 Функция глУбратьСимволы(пКатНом)
	 
	 КатНом = пКатНом;
	 КатНом = СтрЗаменить(КатНом,"-","");
	 КатНом = СтрЗаменить(КатНом,"_","");
	 КатНом = СтрЗаменить(КатНом,".","");
	 КатНом = СтрЗаменить(КатНом,",","");
	 КатНом = СтрЗаменить(КатНом,"/","");
	 КатНом = СтрЗаменить(КатНом,"""","");
	 КатНом = СтрЗаменить(КатНом,"=","");
	 КатНом = СтрЗаменить(КатНом,"*","");
	 КатНом = СтрЗаменить(КатНом,"  "," ");
	 
	 КатНом = СокрЛП(КатНом);
	 
	 Возврат КатНом;
	 
 КонецФункции		
 
 &НаСервереБезКонтекста
 Функция ПолучитьПустуюСсылку()
	 
	 Возврат Справочники.Номенклатура.ПустаяСсылка();
	 
 КонецФункции
 
 //============================================================================
 // ФОРМА
 
 &НаКлиенте
 Функция ПоместитьДанныеВХранилище_ГлавнаяТаблица()
	 
	 Перем СтруктураПараметров;
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ИдентификаторПрайса",Объект.ИдентификаторПрайса);
	 СтруктураПараметров.Вставить("Партнер",Объект.Партнер);
	 СтруктураПараметров.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);	
	 СтруктураПараметров.Вставить("СоглашениеСПоставщиком",Объект.СоглашениеСПоставщиком);
	 СтруктураПараметров.Вставить("СоглашениеСКлиентом",Объект.СоглашениеСКлиентом);
	 СтруктураПараметров.Вставить("ВидЦеныПоставщика",Объект.ВидЦеныПоставщика);	
	 
	 СтруктураПараметров.Вставить("ВидЦенЗакупочная",Объект.ВидЦенЗакупочная);
	 СтруктураПараметров.Вставить("ВидЦенПродажи",Объект.ВидЦенПродажи);
	 СтруктураПараметров.Вставить("ВидЦенПродажи2",Объект.ВидЦенПродажи2);
	 СтруктураПараметров.Вставить("ВидЦенПродажи3",Объект.ВидЦенПродажи3);
	 
	 СтруктураПараметров.Вставить("Комментарий",Объект.ИдентификаторПрайса);
	 
	 СтруктураПараметров.Вставить("КонтрольУникальностиНоменклатуры",Объект.КонтрольУникальностиНоменклатуры);
	 СтруктураПараметров.Вставить("РоботИзменитьЦеныДублейНоменклатуры",Объект.РоботИзменитьЦеныДублейНоменклатуры);
	 СтруктураПараметров.Вставить("РоботИзменитьЦеныВсехХарактеристик",Объект.РоботИзменитьЦеныВсехХарактеристик);
	 
	 СтруктураПараметров.Вставить("ДокументОрганизация",Объект.ДокументОрганизация);
	 СтруктураПараметров.Вставить("ДокументНалогообложениеНДС",Объект.ДокументНалогообложениеНДС);
	 СтруктураПараметров.Вставить("ДокументСклад",Объект.ДокументСклад);
	 
	 //ПустаяСсылка  = Справочники.Номенклатура.ПустаяСсылка();
	 
	 //ПараметрыОтбора = Новый Структура;
	 ////ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	 //ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
	 //ПараметрыОтбора.Вставить("Пометка", Истина);
	 //
	 //ДанныеПоиска  = Объект.ТабличнаяЧасть.Выгрузить(ПараметрыОтбора);
	 
	 СтруктураПараметров.Вставить("ТабличнаяЧасть",Объект.ТабличнаяЧасть);
	 
	 Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,Новый УникальныйИдентификатор);
	 Возврат Адрес; 
	 
 КонецФункции 
 
 &НаКлиенте
 Функция ПоместитьДанныеВХранилище_ПоискСоответствийНоменклатуры()
	 
	 Перем СтруктураПараметров;
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Партнер",Объект.Партнер);
	 СтруктураПараметров.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);	 
	 СтруктураПараметров.Вставить("ПроизводительПоУмолчанию",Объект.ПроизводительПоУмолчанию);
	 
	 //ПустаяСсылка  = Справочники.Номенклатура.ПустаяСсылка();
	 //ПараметрыОтбора = Новый Структура;
	 //ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	 //ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
	 //ПараметрыОтбора.Вставить("Пометка", Истина);
	 //
	 //ДанныеПоиска  = Объект.ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,КлючСтроки,Пометка,Поле_Артикул,Поле_Идентификатор,Поле_Наименование,Поле_Производитель,ГруппаСправочника,Поле_Описание");
	 
	 СтруктураПараметров.Вставить("ТабличнаяЧасть",Объект.ТабличнаяЧасть);
	 СтруктураПараметров.Вставить("ПоискСоответствий",Объект.ПоискСоответствий);
	 
	 Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,Новый УникальныйИдентификатор);
	 Возврат Адрес; 
	 
 КонецФункции 
 
 &НаКлиенте
 Функция ПоместитьДанныеВХранилище_ЗагрузкаКартинок()
	 
	 Перем СтруктураПараметров;	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ИдентификаторПрайса",Объект.ИдентификаторПрайса);
	 СтруктураПараметров.Вставить("Партнер",Объект.Партнер);
	 СтруктураПараметров.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);	
	 
	 СтруктураПараметров.Вставить("ЗагрузкаКартинокНоменклатуры",Объект.ТабличнаяЧасть);
	 
	 Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,Новый УникальныйИдентификатор);
	 Возврат Адрес; 
	 
 КонецФункции 
 
 &НаСервере
 Процедура ИнициализироватьНастройкиПоискаСервер()
	 
	 Объект.НастройкаПоиска.Очистить();
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ИнициализироватьНастройкиПоиска(Объект.НастройкаПоиска);
	 
	 ОбновитьНаборыВариантовПоиска();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ИнициализироватьНастройкиСервер()
	 
	 Объект.СпособНахожденияГрупп = "ПропускатьГруппы";	 
	 Объект.НастройкиКолонокЛиста.Очистить();
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ИнициализироватьНастройки();	
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
	 ОбновитьНаборыКолонок();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ИнициализироватьНастройкиХарактеристикСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ИнициализироватьНастройкиХарактеристик(Объект.НастройкиКолонокХарактеристики);
	 //ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
	 ОбновитьНаборыСвойствХарактеристик();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ИнициализироватьНастройкиСвойствСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ИнициализироватьНастройкиСвойств(Объект.НастройкиКолонокДополнительныеРеквизиты);
	 //ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
	 ОбновитьНаборыСвойствНоменклатуры();
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ЗаполнитьНастройкиКоманда(Команда)
	 
	 ИнициализироватьНастройкиСервер();
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура НовыйИмпорт(Команда)
	 
	 Объект.ТекущаяНастройкаНаименование = "";
	 
	 ИнициализироватьНастройкиСервер();
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы); 
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ЗаполнитьНастройкиПоискаКоманда(Команда)
	 
	 ИнициализироватьНастройкиПоискаСервер();
	 
 КонецПроцедуры
 
 
 
 &НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 Попытка 
		 Константы.мегапрайсРегистрационныйКлюч.Получить();
		 Объект.ИспользоватьМегапрайс = Истина;
	 Исключение
		 Объект.ИспользоватьМегапрайс = Ложь;
	 КонецПопытки;
	 
	 Объект.ИспользоватьВебсервис = Истина;  
	 
	 Объект.ИспользоватьВерсионность = ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеОбъектов");
	 
	 Объект.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	 Объект.ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	 
	 Объект.КонтрольУникальностиНоменклатуры = "БезКонтроля";	 
	 Объект.ФайлВидРасположения = "НаЛокальномДиске";
	 
	 Объект.ДокументОрганизация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.ДокументОрганизация);
	 Объект.ДокументМенеджер       = Пользователи.ТекущийПользователь();
	 Объект.ДокументСклад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.ДокументСклад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	 Объект.ДокументПодразделение  = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.ДокументМенеджер, Объект.ДокументПодразделение);	
	 
	 Объект.СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.БезНДС;	 	 
	 ДлинаНаименованияСправочникаНоменклатура = Метаданные.Справочники.Номенклатура.ДлинаНаименования;
	 
	 ИнициализироватьОбработку();
	 
	 Если Параметры.Свойство("ПрайсПартнера") Тогда 
		 Объект.ПрайсПартнера = Параметры.ПрайсПартнера;
		 
		 Мегапрайс_ПолучитьНастройкиПрофиляПрайса();
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ИнициализироватьОбработку()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 ИнициализироватьНастройкиСервер();
	 ИнициализироватьНастройкиПоискаСервер();
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ИмпортЧерезБуферПриИзмененииСервер()
	 
	 Объект.ТабличныйДокумент.Очистить();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ИмпортЧерезБуферПриИзменении(Элемент)
	 
	 ИмпортЧерезБуферПриИзмененииСервер();
	 
	 Элементы.ТабличныйДокумент.Защита = Ложь;
	 
	 Элементы.СтраницаСтруктураЛистов.Видимость = НЕ Объект.ИмпортЧерезБуфер;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПриОткрытии(Отказ)
	 
	 #Если ВебКлиент Тогда
		 Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			 УстановитьРасширениеРаботыСФайлами();
			 Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
				 Сообщить("Неудалось подключить Расширение работы с файлами. Подробную информацию можете прочитать по адресу http://www.v8.1c.ru/small.biz/online/settings.htm"); 
				 ВызватьИсключение ("Неудачное подключение расширения работы с файлами");
			 КонецЕсли;
		 КонецЕсли;
	 #КонецЕсли
	 
	 // Проверка регистрации
	 Настройки = ЗагрузитьРегДанные();
	 Если Настройки <> Неопределено Тогда
		 Объект.РегОрганизация = Настройки["РегОрганизация"];
		 Объект.РегКлюч 	   = Настройки["РегКлюч"];
		 Попытка
			 Объект.Сабсистемс_Логин = Настройки["Сабсистемс_Логин"];
			 Объект.Сабсистемс_Пароль= Настройки["Сабсистемс_Пароль"];
		 Исключение
		 КонецПопытки;
		 ЗаголовокПриложения = ПолучитьЗаголовокПриложения();
		 УстановитьЗаголовок();
		 УстановитьЗаголовокПриложения(ЭтаФорма.Заголовок);
	 КонецЕсли;
	 
	 Если НЕ ЗначениеЗаполнено(Объект.РегОрганизация) 
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.РегКлюч)
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.Сабсистемс_Логин)
		 ИЛИ НЕ ЗначениеЗаполнено(Объект.Сабсистемс_Пароль) Тогда
		 Элементы.ПрофилиЗагрузки.Видимость                 = Ложь;
		 Элементы.ЖурналСообщений.Видимость                 = Ложь;
		 Элементы.ИсходнаяТаблица.Видимость                 = Ложь;
		 Элементы.АвтозаменыУчетныхСправочников.Видимость   = Ложь;
		 Элементы.ГруппаТабличнаяЧасть.Видимость            = Ложь;
	 КонецЕсли;
	 
	 Элементы.АвтозаменыЗаписатьЗначения.Доступность = Объект.ИспользоватьМегапрайс;
	 
	 Если Объект.ИспользоватьХарактеристикиНоменклатуры Тогда
		 Элементы.ТабличнаяЧастьПоле_Характеристика.Видимость = Истина;
		 Элементы.ТабличнаяЧастьХарактеристикаНоменклатуры.Видимость = Истина;
		 Элементы.УстановкаЦенКонтрагентаХарактеристикаНоменклатуры.Видимость = Истина;
	 Иначе
		 Элементы.ТабличнаяЧастьПоле_Характеристика.Видимость = Ложь;
		 Элементы.ТабличнаяЧастьХарактеристикаНоменклатуры.Видимость = Ложь;
		 Элементы.УстановкаЦенКонтрагентаХарактеристикаНоменклатуры.Видимость = Ложь;
	 КонецЕсли;
	 
	 Если Объект.ИспользоватьВерсионность Тогда
		 Сообщить("ВНИМАНИЕ! В главных настройках конфигурации установлена Версионность объектов - эта опция катастрофически влияет на скорость работы Базы данных. Рекомендуем выключить");
	 КОнецЕсли; 
	 
	 ИспользоватьПодсветкуКолонок = Истина;
	 
	 Если НЕ Объект.ИспользоватьМегапрайс Тогда
		 Элементы.ПрайсПартнера.Доступность = Ложь;
		 Элементы.КомандаМегапрайсРегистрацияЦенПоставщика.Доступность = Ложь;
	 КонецЕсли;
	 
	 ПрочитатьКаталогНастроек();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПриЗакрытии()	     
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицыОбработокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	 
	 Если Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе Тогда
		 
		 Элементы.ТабличнаяЧасть.ОтборСтрок = Неопределено;
		 
	 ИначеЕсли Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаНовые Тогда
		 
		 Элементы.ТабличнаяЧастьНовые.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура,Пометка,ЭтоГруппа",ПолучитьПустуюСсылку(),Истина,Ложь);
		 
	 ИначеЕсли Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаУстановкаЦенНоменклатуры Тогда
		 
		 //ЗаполнитьТаблицуУстановкаЦенНоменклатуры();
		 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТабличнаяЧастьХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 //СтандартнаяОбработка = Ложь;
	 //
	 //Если Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе Тогда
	 //	ТекущиеДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	 //	//ТекущийЭлемент = Элементы.ТабличнаяЧастьНовые;
	 //Иначе
	 //	ТекущиеДанные = Элементы.ТабличнаяЧастьНовые.ТекущиеДанные;
	 //	//ТекущийЭлемент = Элементы.ТабличнаяЧастьНовые;
	 //КонецЕсли;
	 //
	 //Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
	 //	Сообщить(НСтр("ru = 'Для того, чтобы выбрать характеристику Вам необходимо предварительно выбрать номенклатуру.'"));
	 //	Возврат;
	 //КонецЕсли;
	 //
	 //ВладелецХарактеристики = Неопределено;
	 //
	 //ПараметрыФормыВыбора = Новый Структура;
	 //ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущиеДанные.ХарактеристикаНоменклатуры);
	 //ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
	 //ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущиеДанные.Номенклатура);
	 //
	 //Характеристика = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора);
	 //Если Характеристика = Неопределено Тогда
	 //	Возврат;
	 //КонецЕсли;
	 //
	 //ДанныеВыбора = Новый СписокЗначений;
	 //ДанныеВыбора.Добавить(Характеристика); //Сообщить(Характеристика);
	 ////СтандартнаяОбработка = Истина;
	 
 КонецПроцедуры
 
 
 //============================================================================
 // ХРАНИМЫЕ НАСТРОЙКИ 
 
 &НаСервере
 Функция ВнешнийКаталогНастроек_СохранитьНастройкуСервер()
	 
	 Отбор = Новый Структура();
	 Отбор.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);
	 Отбор.Вставить("Партнер",Объект.Партнер);
	 Отбор.Вставить("Наименование",Объект.ТекущаяНастройкаНаименование);
	 НайтиСтроки = Объект.НастройкиПрайсовКонтрагентов.НайтиСтроки(Отбор);
	 Если НайтиСтроки.Количество() > 0 Тогда
		 Для Каждого СтрТаблицы Из НайтиСтроки Цикл
			 НоваяСтрока = СтрТаблицы;
		 КонецЦикла;
	 Иначе
		 НоваяСтрока = Объект.НастройкиПрайсовКонтрагентов.Добавить();
	 КонецЕсли;		
	 НоваяСтрока.ПрайсПартнера = Объект.ПрайсПартнера;
	 НоваяСтрока.Партнер = Объект.Партнер;
	 НоваяСтрока.Наименование = Объект.ТекущаяНастройкаНаименование;
	 НоваяСтрока.ДатаПоследнегоИмпорта = ТекущаяДата();
	 
	 Настройки = Новый Соответствие;	
	 Настройки.Вставить("ВнешняяОбработкаЗагрузкиФайла",Объект.ВнешняяОбработкаЗагрузкиФайла);
	 
	 Настройки.Вставить("ФайлКаталогНаЛокальномДиске",Объект.ФайлКаталогНаЛокальномДиске);
	 Настройки.Вставить("ФайлПутьКФайлу",Объект.ФайлПутьКФайлу);
	 Настройки.Вставить("ФайлВидРасположения",Объект.ФайлВидРасположения);
	 Настройки.Вставить("ФайлДоступЛогин",Объект.ФайлДоступЛогин);
	 Настройки.Вставить("ФайлДоступПароль",Объект.ФайлДоступПароль);
	 Настройки.Вставить("ФайлДоступПорт",Объект.ФайлДоступПорт);
	 Настройки.Вставить("ФайлРазархивировать",Объект.ФайлРазархивировать);
	 
	 Настройки.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);
	 Настройки.Вставить("Партнер",Объект.Партнер);
	 Настройки.Вставить("СоглашениеСПоставщиком",Объект.СоглашениеСПоставщиком);
	 Настройки.Вставить("СоглашениеСКлиентом",Объект.СоглашениеСКлиентом);
	 Настройки.Вставить("ВидЦеныПоставщика",Объект.ВидЦеныПоставщика);
	 
	 Настройки.Вставить("ПроизводительПоУмолчанию",Объект.ПроизводительПоУмолчанию);
	 
	 Настройки.Вставить("ВидЦенЗакупочная",Объект.ВидЦенЗакупочная);
	 Настройки.Вставить("ВидЦенПродажи",Объект.ВидЦенПродажи);
	 
	 Настройки.Вставить("ДокументОрганизация",Объект.ДокументОрганизация);
	 Настройки.Вставить("ДокументНалогообложениеНДС",Объект.ДокументНалогообложениеНДС);
	 Настройки.Вставить("ДокументСклад",Объект.ДокументСклад);
	 Настройки.Вставить("ПроизводительПоУмолчанию",Объект.ПроизводительПоУмолчанию);
	 
	 Настройки.Вставить("ГруппаНоменклатурыПоУмолчанию",Объект.ГруппаНоменклатурыПоУмолчанию);
	 Настройки.Вставить("ВидНоменклатурыПоУмолчанию",Объект.ВидНоменклатурыПоУмолчанию);
	 Настройки.Вставить("ЕдиницаИзмеренияПоУмолчанию",Объект.ЕдиницаИзмеренияПоУмолчанию);
	 Настройки.Вставить("СтавкаНДСПоУмолчанию",Объект.СтавкаНДСПоУмолчанию);
	 Настройки.Вставить("НовыйЦеноваяГруппа",Объект.НовыйЦеноваяГруппа);
	 Настройки.Вставить("ИспользоватьТранзакцию",Объект.ИспользоватьТранзакцию);
	 
	 Настройки.Вставить("СпособНахожденияГрупп",Объект.СпособНахожденияГрупп);
	 Настройки.Вставить("КонтрольУникальностиНоменклатуры",Объект.КонтрольУникальностиНоменклатуры);
	 Настройки.Вставить("ВалютаНаходитсяВКолонкеСЦеной",Число(Объект.ВалютаНаходитсяВКолонкеСЦеной));
	 
	 Настройки.Вставить("НастройкиКолонокЛиста",Объект.НастройкиКолонокЛиста.Выгрузить());
	 Настройки.Вставить("НастройкаПоиска",Объект.НастройкаПоиска.Выгрузить());
	 Настройки.Вставить("ТаблицаЛистовФайла",Объект.ТаблицаЛистовФайла.Выгрузить());
	 
	 Настройки.Вставить("АлгоритмыКлючевыхСлов",Объект.АлгоритмыКлючевыхСлов.Выгрузить());
	 Настройки.Вставить("ЗаменаКлючевыхСлов",Объект.ЗаменаКлючевыхСлов.Выгрузить());
	 Настройки.Вставить("ПравилаСкидокЦенКонтрагента",Объект.ПравилаСкидокЦенКонтрагента.Выгрузить());
	 
	 ДанныеТЗ = Новый ХранилищеЗначения(Настройки); 
	 НоваяСтрока.ПараметрыПоУмолчанию = XMLСтрока(ДанныеТЗ);
	 
	 Объект.НастройкиПрайсовКонтрагентов.Сортировать("ДатаПоследнегоИмпорта УБЫВ");	 
	 ДанныеТЗ = Новый ХранилищеЗначения(Объект.НастройкиПрайсовКонтрагентов.Выгрузить());
	 Возврат XMLСтрока(ДанныеТЗ);
	 
 КонецФункции
 
 &НаКлиенте
 Процедура ВнешнийКаталогНастроек_СохранитьНастройку(Знач Оповещение)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.КаталогНастроек) Тогда
		 ВыполнитьОбработкуОповещения(Оповещение);
		 Возврат;
	 КонецЕсли;
	 
	 Если ПустаяСтрока(Объект.ТекущаяНастройкаНаименование) Тогда
		 ПоказатьВводСтроки(Новый ОписаниеОповещения("ВнешнийКаталогНастроек_СохранитьНастройкуЗавершение", ЭтотОбъект, Новый Структура("Оповещение, ТекущаяНастройкаНаименование", Оповещение, Объект.ТекущаяНастройкаНаименование)), Объект.ТекущаяНастройкаНаименование,"Введите наименование новой настройки");
		 Возврат;
	 КонецЕсли;
	 
	 ВнешнийКаталогНастроек_СохранитьНастройкуФрагмент(Оповещение);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ВнешнийКаталогНастроек_СохранитьНастройкуЗавершение(Строка, ДополнительныеПараметры) Экспорт
	 
	 Оповещение = ДополнительныеПараметры.Оповещение;
	 Объект.ТекущаяНастройкаНаименование = ?(ПустаяСтрока(Строка), ДополнительныеПараметры.ТекущаяНастройкаНаименование, Строка);
	 
	 ВнешнийКаталогНастроек_СохранитьНастройкуФрагмент(Оповещение);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ВнешнийКаталогНастроек_СохранитьНастройкуФрагмент(Знач Оповещение)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.КаталогНастроек) Тогда
		 Возврат;
	 КонецЕсли;
	 
	 СтрокаНастроек = ВнешнийКаталогНастроек_СохранитьНастройкуСервер();
	 
	 ИмяФайлаНастроек = "МЗД_Настройки.txt";
	 ИмяФайлаНастроек = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаНастроек);
	 ИмяФайлаНастроек = Объект.КаталогНастроек+"\"+ИмяФайлаНастроек; 
	 
	 ФайлНастроек = Новый ТекстовыйДокумент;
	 ФайлНастроек.УстановитьТекст(СтрокаНастроек);
	 ФайлНастроек.Записать(ИмяФайлаНастроек);
	 
	 ВыполнитьОбработкуОповещения(Оповещение);
	 
 КонецПроцедуры
 
 
 
 
 &НаКлиенте
 Процедура ПрочитатьКаталогНастроек()
	 
	 АдресФайлаХранилище = "";
	 
	 Если НЕ ЗначениеЗаполнено(Объект.КаталогНастроек) Тогда
		 Возврат;
	 КонецЕсли;
	 
	 МассивФайлов = НайтиФайлы(Объект.КаталогНастроек, "*.txt",Истина);
	 Для Каждого ВыборкаФайл Из МассивФайлов Цикл
		 ПолноеИмяФайла = ВыборкаФайл.ПолноеИмя;
		 ИмяФайла = ВыборкаФайл.Имя;
		 
		 Если СтрНайти(ИмяФайла,"МЗД_Настройки") = 0 Тогда
			 Продолжить;
		 КонецЕсли;	
		 
		 Если ПоместитьФайл(АдресФайлаХранилище, ПолноеИмяФайла, ПолноеИмяФайла, Ложь, УникальныйИдентификатор) Тогда
			 ПрочитатьКаталогНастроекСервер(ПолноеИмяФайла,АдресФайлаХранилище);
		 Иначе
			 Сообщить("Файл настроек не помещен на сервер");
			 Возврат;	
		 КонецЕсли;	
	 КонецЦикла;		 	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаПрочитатьКаталогНастроек(Команда)
	 ПрочитатьКаталогНастроек();
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ПрочитатьКаталогНастроекСервер(ПолноеИмяФайла,АдресФайлаХранилище)
	 
	 Если ЭтоАдресВременногоХранилища(АдресФайлаХранилище) Тогда
		 ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".txt");
		 ДвоичныеДанные     = ПолучитьИзВременногоХранилища(АдресФайлаХранилище);
		 ДвоичныеДанные.Записать(ИмяВременногоФайла);
	 Иначе
		 //Сообщить("Ошибка загрузки файла");
		 Возврат;
	 КонецЕсли;	
	 
	 ТекстовыйФайлНастроек = Новый ТекстовыйДокумент;
	 ТекстовыйФайлНастроек.Прочитать(ИмяВременногоФайла);
	 
	 ДанныеТЗ = XMLЗначение(Тип("ХранилищеЗначения"), ТекстовыйФайлНастроек.ПолучитьТекст()).Получить();
	 Если ТипЗнч(ДанныеТЗ) = Тип("ТаблицаЗначений") Тогда
		 Объект.НастройкиПрайсовКонтрагентов.Загрузить(ДанныеТЗ);
	 КонецЕсли;	
	 Объект.НастройкиПрайсовКонтрагентов.Сортировать("ДатаПоследнегоИмпорта УБЫВ");
	 
	 УдалитьИзВременногоХранилища(АдресФайлаХранилище);
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ВнешнийКаталогНастроек_ПрочитатьНастройкуСервер(СтрокаНастроек)	
	 
	 Если НЕ ЗначениеЗаполнено(СтрокаНастроек.ПараметрыПоУмолчанию) Тогда
		 ИнициализироватьОбработку();
		 Возврат;
	 КонецЕсли;
	 
	 Попытка
		 ПараметрыПоУмолчанию = XMLЗначение(Тип("ХранилищеЗначения"), СтрокаНастроек.ПараметрыПоУмолчанию).Получить();		 
	 Исключение
		 ИнициализироватьОбработку();
		 Возврат;
	 КонецПопытки;
	 
	 Если ТипЗнч(ПараметрыПоУмолчанию) <> Тип("Соответствие") Тогда
		 Сообщить("Тип настроек: "+ТипЗнч(ПараметрыПоУмолчанию));
		 ВызватьИсключение("Ошибка");
	 КонецЕсли;
	 
	 Объект.ВнешняяОбработкаЗагрузкиФайла = ПараметрыПоУмолчанию.Получить("ВнешняяОбработкаЗагрузкиФайла");  
	 
	 Попытка
		 Объект.ФайлКаталогНаЛокальномДиске = ПараметрыПоУмолчанию.Получить("ФайлКаталогНаЛокальномДиске");  
		 Объект.ФайлПутьКФайлу              = ПараметрыПоУмолчанию.Получить("ФайлПутьКФайлу");
		 Объект.ФайлВидРасположения         = ПараметрыПоУмолчанию.Получить("ФайлВидРасположения");
		 Объект.ФайлДоступЛогин             = ПараметрыПоУмолчанию.Получить("ФайлДоступЛогин");
		 Объект.ФайлДоступПароль            = ПараметрыПоУмолчанию.Получить("ФайлДоступПароль");
		 Объект.ФайлДоступПорт              = ПараметрыПоУмолчанию.Получить("ФайлДоступПорт");
		 Объект.ФайлРазархивировать         = ПараметрыПоУмолчанию.Получить("ФайлРазархивировать");
	 Исключение
	 КонецПопытки;
	 
	 Объект.РоботИзменитьЦеныВсехХарактеристик = ПараметрыПоУмолчанию.Получить("РоботИзменитьЦеныВсехХарактеристик");
	 Объект.КонтрольУникальностиНоменклатуры = ПараметрыПоУмолчанию.Получить("КонтрольУникальностиНоменклатуры");
	 Объект.СпособНахожденияГрупп         = ПараметрыПоУмолчанию.Получить("СпособНахожденияГрупп");
	 Объект.ВалютаНаходитсяВКолонкеСЦеной = ПараметрыПоУмолчанию.Получить("ВалютаНаходитсяВКолонкеСЦеной");
	 Объект.НастройкиКолонокЛиста.Загрузить(ПараметрыПоУмолчанию.Получить("НастройкиКолонокЛиста"));
	 Объект.НастройкаПоиска.Загрузить(ПараметрыПоУмолчанию.Получить("НастройкаПоиска"));
	 
	 Объект.ПрайсПартнера          = ПараметрыПоУмолчанию.Получить("ПрайсПартнера");
	 Объект.Партнер                = ПараметрыПоУмолчанию.Получить("Партнер");	
	 Объект.СоглашениеСПоставщиком = ПараметрыПоУмолчанию.Получить("СоглашениеСПоставщиком");
	 Объект.СоглашениеСКлиентом    = ПараметрыПоУмолчанию.Получить("СоглашениеСКлиентом");	
	 Объект.ВидЦеныПоставщика      = ПараметрыПоУмолчанию.Получить("ВидЦеныПоставщика");	
	 
	 Объект.ВидЦенЗакупочная = ПараметрыПоУмолчанию.Получить("ВидЦенЗакупочная");
	 Объект.ВидЦенПродажи = ПараметрыПоУмолчанию.Получить("ВидЦенПродажи");
	 
	 Объект.ДокументОрганизация = ПараметрыПоУмолчанию.Получить("ДокументОрганизация");
	 Объект.ДокументНалогообложениеНДС = ПараметрыПоУмолчанию.Получить("ДокументНалогообложениеНДС");
	 Объект.ДокументСклад            = ПараметрыПоУмолчанию.Получить("ДокументСклад");
	 Объект.ПроизводительПоУмолчанию = ПараметрыПоУмолчанию.Получить("ПроизводительПоУмолчанию");
	 
	 Объект.ГруппаНоменклатурыПоУмолчанию = ПараметрыПоУмолчанию.Получить("ГруппаНоменклатурыПоУмолчанию");
	 Объект.ВидНоменклатурыПоУмолчанию  = ПараметрыПоУмолчанию.Получить("ВидНоменклатурыПоУмолчанию");
	 Объект.ЕдиницаИзмеренияПоУмолчанию = ПараметрыПоУмолчанию.Получить("ЕдиницаИзмеренияПоУмолчанию");
	 Объект.СтавкаНДСПоУмолчанию = ПараметрыПоУмолчанию.Получить("СтавкаНДСПоУмолчанию");
	 Объект.НовыйЦеноваяГруппа = ПараметрыПоУмолчанию.Получить("НовыйЦеноваяГруппа");
	 
	 Объект.ИспользоватьТранзакцию = ПараметрыПоУмолчанию.Получить("ИспользоватьТранзакцию");
	 
	 ПроверкаТаблицаЛистовФайла = ПараметрыПоУмолчанию.Получить("ТаблицаЛистовФайла");
	 Если ПроверкаТаблицаЛистовФайла.Количество () > 0 Тогда
		 Объект.ТаблицаЛистовФайла.Загрузить(ПараметрыПоУмолчанию.Получить("ТаблицаЛистовФайла"));
	 КонецЕсли;
	 Попытка
		 Объект.АлгоритмыКлючевыхСлов.Загрузить(ПараметрыПоУмолчанию.Получить("АлгоритмыКлючевыхСлов"));
	 Исключение
	 КонецПопытки;
	 Попытка
		 Объект.ЗаменаКлючевыхСлов.Загрузить(ПараметрыПоУмолчанию.Получить("ЗаменаКлючевыхСлов"));
	 Исключение
	 КонецПопытки;
	 Попытка
		 Объект.ПравилаСкидокЦенКонтрагента.Загрузить(ПараметрыПоУмолчанию.Получить("ПравилаСкидокЦенКонтрагента"));
	 Исключение
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ВнешнийКаталогНастроек_ВосстановитьНастройку(Команда)
	 
	 ОчиститьТаблицыСДаннымиКлиент();
	 
	 ТекущиеДанные = Элементы.НастройкиПрайсовКонтрагентов.ТекущиеДанные;
	 
	 Если ТекущиеДанные <> Неопределено Тогда
		 НомерТекущейНастройки = ТекущиеДанные.НомерСтроки;
		 
		 ТекущиеДанныеСтроки = Новый Структура;
		 ТекущиеДанныеСтроки.Вставить("ПрайсПартнера",ТекущиеДанные.ПрайсПартнера);
		 ТекущиеДанныеСтроки.Вставить("ПараметрыПоУмолчанию",ТекущиеДанные.ПараметрыПоУмолчанию);
		 ТекущиеДанныеСтроки.Вставить("ПараметрыТабличныхНастроек",ТекущиеДанные.ПараметрыТабличныхНастроек);		 
		 
		 Объект.ТекущаяНастройкаНаименование = ТекущиеДанные.Наименование;
		 ВнешнийКаталогНастроек_ПрочитатьНастройкуСервер(ТекущиеДанныеСтроки);
	 КонецЕсли;
	 
	 Элементы.ЗакладкиНастроек.ТекущаяСтраница = Элементы.НастройкиИмпорта; 
	 
 КонецПроцедуры
 
 
 
 
 &НаКлиенте
 Процедура ПартнерПриИзменении()
	 
	 Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		 Элементы.НастройкиПрайсовКонтрагентов.ОтборСтрок = Новый ФиксированнаяСтруктура("Партнер", Объект.Партнер);
	 Иначе
		 Элементы.НастройкиПрайсовКонтрагентов.ОтборСтрок = Неопределено
	 КонецЕсли;		
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура КаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	 ДиалогОткрытияФайла.Фильтр = "Файлы TXT|*.txt|Все файлы|*.*";
	 ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог настроек'");
	 
	 Объект.НастройкиПрайсовКонтрагентов.Очистить();
	 
	 Если ДиалогОткрытияФайла.Выбрать() Тогда
		 Объект.КаталогНастроек = ДиалогОткрытияФайла.Каталог;
		 
		 ПрочитатьКаталогНастроек();
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 
 //============================================================================
 // НОВАЯ ВЕРСИЯ
 
 &НаКлиенте
 Процедура УсловноеОформлениеТаблицыБуфер()
	 
	 мЖирныйШрифт = Новый Шрифт(, 8, Истина);
	 
	 ОбластьТабличногоПоля = Объект.ТабличныйДокумент.Область("R"+Формат(1, "ЧГ="));
	 ОбластьТабличногоПоля.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	 ОбластьТабличногоПоля.ЦветФона = WebЦвета.СеребристоСерый;
	 ОбластьТабличногоПоля.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	 Для Каждого СтрокаНастройки Из Объект.НастройкиКолонокЛиста Цикл	
		 Если СтрокаНастройки.НомерКолонки = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 ОбластьТабличногоПоля = Объект.ТабличныйДокумент.Область("R"+Формат(1, "ЧГ=")+"C"+Формат(СтрокаНастройки.НомерКолонки, "ЧГ="));
		 ОбластьТабличногоПоля.Примечание.Текст = "Определена колонка "+СтрокаНастройки.Представление;
		 ОбластьТабличногоПоля.Шрифт    = мЖирныйШрифт;
		 Если СтрокаНастройки.ГруппаПолей = "Цены" ИЛИ СтрокаНастройки.ГруппаПолей = "Документ"	Тогда
			 ОбластьТабличногоПоля.ЦветФона = WebЦвета.ЦветМорскойВолныТемный;
		 ИначеЕсли СтрокаНастройки.ГруппаПолей = "Характеристики" Тогда
			 ОбластьТабличногоПоля.ЦветФона = WebЦвета.СветлоКоралловый;	
		 ИначеЕсли СтрокаНастройки.ГруппаПолей = "ДопРеквизиты" Тогда
			 ОбластьТабличногоПоля.ЦветФона = WebЦвета.Хаки;		
		 Иначе
			 ОбластьТабличногоПоля.ЦветФона = WebЦвета.СероСиний;
		 КонецЕсли;	
	 КонецЦикла;	
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы)
	 
	 УсловныеОформления = Новый Массив();
	 
	 Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		 Если Оформление.Представление = "СозданоПрограммно" Тогда
			 УсловныеОформления.Добавить(Оформление);                         
		 КонецЕсли;
	 КонецЦикла;
	 
	 Для Каждого Оформление Из УсловныеОформления Цикл
		 УсловноеОформление.Элементы.Удалить(Оформление);
	 КонецЦикла;	
	 
	 ИмяТаблицыИмпорта = "ТаблицаЛист"+(ИндексТекущейСтраницы-1);		 
	 
	 Для Каждого Стр Из Объект.НастройкиКолонокЛиста Цикл		
		 Если Стр.НомерКолонки = 0 Тогда 
			 Продолжить;
		 КонецЕсли;		
		 
		 // Условное оформление - Номер первой строки 
		 НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		 НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки;
		 НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		 НовыйЭлементУсловногоОформления.Использование = Истина;
		 
		 //ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 //ЭлементОтбора.Использование = Истина;		
		 //ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		 //ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		 //ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЛистовФайла.НомерПервойСтроки");
		 
		 ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 ЭлементОтбора.Использование = Истина;		
		 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		 ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Меньше;
		 ЭлементОтбора.ПравоеЗначение = 100;
		 
		 
		 НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		 НовоеПоле.Использование = Истина;
		 НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки);		
		 Если Стр.ГруппаПолей = "Цены и количества" ИЛИ Стр.ГруппаПОлей = "Документ"	Тогда
			 НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);
		 Иначе
			 НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
		 КонецЕсли;
	 КонецЦикла;	
	 
	 Для Каждого Стр Из Объект.НастройкиКолонокХарактеристики Цикл		
		 Если Стр.НомерКолонки = 0 Тогда 
			 Продолжить;
		 КонецЕсли;		
		 
		 // Условное оформление - Номер первой строки 
		 НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		 НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки;
		 НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		 НовыйЭлементУсловногоОформления.Использование = Истина;
		 
		 //ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 //ЭлементОтбора.Использование = Истина;		
		 //ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		 //ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		 //ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЛистовФайла.НомерПервойСтроки");
		 
		 ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 ЭлементОтбора.Использование = Истина;		
		 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		 ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Меньше;
		 ЭлементОтбора.ПравоеЗначение = 100;
		 
		 
		 НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		 НовоеПоле.Использование = Истина;
		 НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки);		
		 //НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		 НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ДымчатоБелый);	
	 КонецЦикла;	
	 
	 Для Каждого Стр Из Объект.НастройкиКолонокДополнительныеРеквизиты Цикл		
		 Если Стр.НомерКолонки = 0 Тогда 
			 Продолжить;
		 КонецЕсли;		
		 
		 // Условное оформление - Номер первой строки 
		 НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		 НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки;
		 НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		 НовыйЭлементУсловногоОформления.Использование = Истина;
		 
		 //ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 //ЭлементОтбора.Использование = Истина;		
		 //ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		 //ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		 //ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЛистовФайла.НомерПервойСтроки");
		 
		 ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 ЭлементОтбора.Использование = Истина;		
		 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		 ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Меньше;
		 ЭлементОтбора.ПравоеЗначение = 100;	 
		 
		 НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		 НовоеПоле.Использование = Истина;
		 НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки);		
		 //НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		 НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ДымчатоБелый);	
	 КонецЦикла;	
	 
	 // Условное оформление - Номер первой строки 
	 НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	 НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяТаблицыИмпорта;
	 НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	 НовыйЭлементУсловногоОформления.Использование = Истина;
	 
	 ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 ЭлементОтбора.Использование = Истина;
	 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
	 ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	 ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЛистовФайла.НомерПервойСтроки");
	 
	 НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	 НовоеПоле.Использование = Истина;
	 НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта);
	 
	 НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,10,Истина));
	 НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ТемноСерый);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ИспользоватьПодсветкуКолонокПриИзменении(Элемент)
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);	
	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ЧтениеФайлов_Выполнить(СтруктураПараметров)
	 
	 Перем ПутьВременногоФайла;	 
	 ИмяВременногоФайла = "";
	 
	 Если ЭтоАдресВременногоХранилища(СтруктураПараметров.АдресФайлаХранилище) Тогда
		 ИмяВременногоФайла = ПолучитьИмяВременногоФайла(СтруктураПараметров.ФайлНаДискеРасширение);
		 ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресФайлаХранилище);
		 ДвоичныеДанные.Записать(ИмяВременногоФайла);
	 КонецЕсли;	
	 
	 //Сообщить(ФайлНаДискеРасширение);
	 //Сообщить(ИмяВременногоФайла);
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	 
	 Объект.АдресДанныхВХранилище = ОбработкаОбъект.ЧтениеФайлов_ВыполнитьЗагрузкуТаблиц(ИмяВременногоФайла,Объект.ТаблицаЛистовФайла);
	 
	 ЗаполнитьТаблицыВОбработке(Объект.АдресДанныхВХранилище);
	 
	 Если ЭтоАдресВременногоХранилища(СтруктураПараметров.АдресФайлаХранилище) Тогда
		 УдалитьИзВременногоХранилища(СтруктураПараметров.АдресФайлаХранилище);
	 КонецЕсли;
	 
 КонецПроцедуры 
 
 &НаКлиенте
 Процедура КомандаПерезагрузитьДанныеТаблиц()
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ЗаполнитьТаблицыВОбработке(АдресДанныхВХранилище)
	 
	 СтруктураПараметров   = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	 МассивВременныхТаблиц = СтруктураПараметров.МассивВременныхТаблиц;
	 
	 //ОчищатьНастройкиПриЗагрузке = Ложь;
	 //// если уже есть настройки, то не надо очищать, только искать подходящие листы
	 //Если ОчищатьНастройкиПриЗагрузке Тогда
	 //    Объект.ТаблицаЛистовФайла.Очистить();
	 //Иначе
	 //    // удаляю из настроек лишние листы которых нет в файле
	 //    НомЛиста = 0;
	 //    Пока НомЛиста < Объект.ТаблицаЛистовФайла.Количество() Цикл
	 //   	 СтрЛиста = Объект.ТаблицаЛистовФайла[НомЛиста];
	 //   	 Найден = Ложь;
	 //   	 Для Ном = 0 По МассивВременныхТаблиц.Количество()-1 Цикл		
	 //   		 Если СтрЛиста.ИмяЛиста = МассивВременныхТаблиц[Ном].Представление Тогда
	 //   			 Найден = Истина;
	 //   			 Прервать;
	 //   		 КонецЕсли;
	 //   	 КонецЦикла;
	 //   	 Если НЕ Найден Тогда
	 //   		 Объект.ТаблицаЛистовФайла.Удалить(СтрЛиста);
	 //   	 Иначе
	 //   		 НомЛиста = НомЛиста + 1;
	 //   	 КонецЕсли;
	 //    КонецЦикла;
	 //КонецЕсли;
	 
	 УдаляемыеРеквизиты = Новый Массив();
	 УдаляемыеЭлементы  = Новый Массив();
	 УсловныеОформления = Новый Массив();
	 
	 Ном = 0;
	 Для Каждого ТекЭлемент Из Элементы.ПанельЛистов.ПодчиненныеЭлементы Цикл
		 Если ТекЭлемент = Элементы.ПанельЛистов.ПодчиненныеЭлементы.ЛистБуфер Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 УдаляемыеЭлементы.Добавить(ТекЭлемент);
		 УдаляемыеРеквизиты.Добавить("ТаблицаЛист"+Ном);
		 Ном = Ном+1;
	 КонецЦикла;	
	 Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		 Элементы.Удалить(УдаляемыйЭлемент);
	 КонецЦикла;
	 
	 ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	 
	 Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		 Если Оформление.Представление = "СозданоПрограммно" Тогда
			 УсловныеОформления.Добавить(Оформление);
		 КонецЕсли;
	 КонецЦикла;
	 
	 Для Каждого Оформление Из УсловныеОформления Цикл
		 УсловноеОформление.Элементы.Удалить(Оформление);
	 КонецЦикла;	
	 
	 КоличествоЛистов = 0;
	 Для Ном = 0 По МассивВременныхТаблиц.Количество()-1 Цикл
		 КоличествоЛистов = КоличествоЛистов + 1;
		 ВременнаяТаблица = МассивВременныхТаблиц[Ном].Значение;
		 ИмяТаб           = МассивВременныхТаблиц[Ном].Представление;
		 
		 //// найти лист с таким именем и использовать его
		 //НовыйЛист = Неопределено;
		 //Для Каждого СтрЛиста Из Объект.ТаблицаЛистовФайла Цикл
		 //    Если СтрЛиста.ИмяЛиста = ИмяТаб Тогда
		 //   	 НовыйЛист = СтрЛиста;
		 //   	 Прервать;
		 //    КонецЕсли;
		 //КонецЦикла;
		 //
		 //Если НовыйЛист = Неопределено Тогда
		 //    НовыйЛист = Объект.ТаблицаЛистовФайла.Добавить();
		 //    НовыйЛист.ИмяЛиста = ИмяТаб;
		 //    Если КоличествоЛистов = 1 Тогда
		 //   	 НовыйЛист.Пометка  = Истина;
		 //    КонецЕсли;
		 //    //НовыйЛист.НастройкиКолонок = ЗначениеВСтрокуВнутр(Объект.НастройкиКолонокЛиста);
		 //КонецЕсли;
		 //
		 ////АЛГОРИТМ ТАБЛИЦ
		 //Если ЗначениеЗаполнено(НовыйЛист.Алгоритм) Тогда
		 //    Выполнить(НовыйЛист.Алгоритм.ТекстАлгоритма);	
		 //КонецЕсли;
		 
		 ВременнамТабКоличество = ВременнаяТаблица.Количество();
		 //НовыйЛист.НомерЛиста = Ном+1;
		 //НовыйЛист.КоличествоСтрок = ВременнамТабКОличество;
		 
		 ИмяЛиста   = "СтраницаЛист"+Ном;
		 ИмяТаблицы = "ТаблицаЛист"+Ном;
		 
		 МассивРеквизитов = Новый Массив;
		 МассивТипаВыбора = Новый Массив;
		 МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
		 ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
		 МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, ОписаниеТипаВыбора, "", ИмяТаблицы));    
		 
		 Для Каждого Колонка Из ВременнаяТаблица.Колонки Цикл			
			 ИмяТаблицыКолонка = Колонка.Имя;
			 
			 МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицыКолонка, Колонка.ТипЗначения,ИмяТаблицы, Колонка.Заголовок));
		 КонецЦикла;
		 
		 ИзменитьРеквизиты(МассивРеквизитов);
		 
		 НоваяСтраница     = Элементы.Добавить(ИмяЛиста, Тип("ГруппаФормы"),Элементы.ПанельЛистов);
		 НоваяСтраница.Вид = ВидГруппыФормы.Страница;
		 НоваяСтраница.Заголовок = ИмяТаб;
		 
		 Элементы.ПанельЛистов.ТекущаяСтраница = НоваяСтраница;
		 
		 НоваяТаблица                = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"),НоваяСтраница);
		 НоваяТаблица.ПутьКДанным    = ИмяТаблицы;
		 НоваяТаблица.Отображение    = ОтображениеТаблицы.Список;		 
		 НоваяТаблица.ТолькоПросмотр = Ложь;
		 
		 Для Каждого Колонка Из ВременнаяТаблица.Колонки Цикл
			 ИмяТаблицыКолонка = ИмяТаблицы+Колонка.Имя;
			 
			 НовыйЭлемент             = Элементы.Добавить(ИмяТаблицыКолонка, Тип("ПолеФормы"), НоваяТаблица);
			 НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
			 НовыйЭлемент.ПутьКДанным = ""+ИмяТаблицы+"."+Колонка.Имя; 
			 НовыйЭлемент.Ширина      = 15; 
		 КонецЦикла; 
		 
		 МассивСтрок = Новый Массив();
		 ОграничениеСтрок = Мин(500,ВременнамТабКОличество);
		 Для т = 1 по ОграничениеСтрок Цикл
			 Строка = ВременнаяТаблица.Получить(т-1);
			 МассивСтрок.Добавить(Строка);
		 КОнецЦИкла;
		 ВременнаяТаблицаВФорму = ВременнаяТаблица.Скопировать(МассивСтрок);
		 ЗначениеВРеквизитФормы(ВременнаяТаблицаВФорму,ИмяТаблицы);
	 КонецЦикла;
	 
 КонецПроцедуры 
 
 
 
 &НаСервере
 Функция ПолучитьАдресАрхиваВоВременномХранилище()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 СсылкаНаАрхив = ПоместитьВоВременноеХранилище(ОбработкаОбъект.ПолучитьМакет("Subsystems"),Новый УникальныйИдентификатор);
	 
	 Возврат СсылкаНаАрхив;
	 
 КонецФункции 
 
 &НаКлиенте
 Функция УстановитьКомпоненту() Экспорт
	 
	 АдресАрхиваКомпонента = "";
	 
	 АдресАрхиваКомпонента = ПолучитьАдресАрхиваВоВременномХранилище();
	 //УстановитьВнешнююКомпоненту(АдресАрхиваКомпонента);
	 НачатьУстановкуВнешнейКомпоненты(,АдресАрхиваКомпонента);
	 
	 Возврат АдресАрхиваКомпонента;
	 
 КонецФункции 
 
 
 &НаСервере
 Процедура ОбновитьСтрокуНастройкиЛистаСервер(ИндексТекущейСтраницы) Экспорт
	 
	 Объект.НастройкиКолонокЛиста.Сортировать("Сортировка,ГруппаПолей");
	 Объект.НастройкиКолонокХарактеристики.Сортировать("Сортировка,НаборСвойств");
	 Объект.НастройкиКолонокДополнительныеРеквизиты.Сортировать("Сортировка,НаборСвойств");
	 
	 СтрокаНастройки = "";
	 СтрокаНастройкиКолонокХарактеристики = "";
	 СтрокаНастройкиКолонокДополнительныеРеквизиты = "";
	 
	 ПараметрыОтбора = Новый Структура;
	 ПараметрыОтбора.Вставить("Пометка", Истина);	
	 
	 Если Объект.НастройкиКолонокЛиста.Количество() > 0 Тогда 		 
		 СтрокаНастройки = ЗначениеВСтрокуВнутр(Объект.НастройкиКолонокЛиста.Выгрузить(ПараметрыОтбора));
	 КонецЕсли;
	 
	 Если Объект.НастройкиКолонокХарактеристики.Количество() > 0 Тогда 
		 СтрокаНастройкиКолонокХарактеристики = ЗначениеВСтрокуВнутр(Объект.НастройкиКолонокХарактеристики.Выгрузить(ПараметрыОтбора));
	 КонецЕсли;
	 
	 Если Объект.НастройкиКолонокДополнительныеРеквизиты.Количество() > 0 Тогда 		 
		 СтрокаНастройкиКолонокДополнительныеРеквизиты = ЗначениеВСтрокуВнутр(Объект.НастройкиКолонокДополнительныеРеквизиты.Выгрузить(ПараметрыОтбора));
	 КонецЕсли;
	 
	 Для Каждого Строка Из Объект.ТаблицаЛистовФайла Цикл		
		 Если Объект.ИндивидуальныеНастройкиЛистов Тогда
			 Если Строка.НомерЛиста = ИндексТекущейСтраницы Тогда
				 Строка.НомерПервойСтроки = ?(Строка.НомерПервойСтроки > 0,Строка.НомерПервойСтроки,НомерСтрокиШапка);
				 Строка.НастройкиКолонок  = СтрокаНастройки;
				 Строка.НастройкиКолонокХарактеристики  = СтрокаНастройкиКолонокХарактеристики;
				 Строка.НастройкиКолонокДополнительныеРеквизиты  = СтрокаНастройкиКолонокДополнительныеРеквизиты;
			 КонецЕсли;
		 Иначе
			 Строка.НомерПервойСтроки = ?(Строка.НомерПервойСтроки > 0,Строка.НомерПервойСтроки,НомерСтрокиШапка);
			 Строка.НастройкиКолонок  = СтрокаНастройки;
			 Строка.НастройкиКолонокХарактеристики  = СтрокаНастройкиКолонокХарактеристики;
			 Строка.НастройкиКолонокДополнительныеРеквизиты  = СтрокаНастройкиКолонокДополнительныеРеквизиты;
		 КонецЕсли;
		 
		 //Если Строка.КоличествоСтрок > 0 Тогда
		 //	Строка.Пометка = Истина;
		 //КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура СохранитьНастройкиКолонокПрофиля()
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);		
	 ОбновитьСтрокуНастройкиЛистаСервер(ИндексТекущейСтраницы);
	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);	 
	 
 КонецПроцедуры
 
 
 &НаСервереБезКонтекста
 Функция ПолучитьТипСвойства(ВыборкаСвойство)
	 
	 Если НЕ ЗначениеЗаполнено(ВыборкаСвойство) Тогда
		 Возврат "";
	 КонецЕсли;
	 
	 Если ВыборкаСвойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
		 ТипЗначенияТекст = "ЗначенияСвойствОбъектов";
	 ИначеЕсли ВыборкаСвойство.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
		 ТипЗначенияТекст = "Число";
	 ИначеЕсли ВыборкаСвойство.ТипЗначения.СодержитТип(Тип("Булево")) Тогда 
		 ТипЗначенияТекст = "Булево";
	 ИначеЕсли ВыборкаСвойство.ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
		 ТипЗначенияТекст = "Дата";	
	 Иначе
		 ТипЗначенияТекст = ВыборкаСвойство.ТипЗначения;
	 КонецЕсли;
	 
	 Возврат ТипЗначенияТекст;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура НастройкиКолонокЛистаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	 
	 Если Объект.ИмпортЧерезБуфер Тогда
		 УсловноеОформлениеТаблицыБуфер();
		 Возврат;
	 КонецЕсли;
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);			 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);	 
	 
	 Если Элементы.ГлавныеСтраницыНастроек.ТекущаяСтраница = Элементы.НастройкиЗагрузкиХарактеристик Тогда
		 ТекущиеДанные = Элементы.НастройкиКолонокХарактеристики.ТекущиеДанные;
	 ИначеЕсли Элементы.ГлавныеСтраницыНастроек.ТекущаяСтраница = Элементы.НастройкиЗагрузкиДопРеквизитов Тогда
		 ТекущиеДанные = Элементы.НастройкиКолонокДополнительныеРеквизиты.ТекущиеДанные;
	 Иначе
		 Возврат;
	 КонецЕсли;
	 
	 ВыборкаСвойство = ТекущиеДанные.Свойство;
	 ТекущиеДанные.Сортировка = ТекущиеДанные.НомерСтроки*1000;
	 //ТекущиеДанные.ВидНоменклатуры = ТекущиеДанные.ВидНоменклатуры;
	 //ТекущиеДанные.НаборСвойств  = ТекущиеДанные.НаборСвойств;
	 ТекущиеДанные.ВариантыСовпадений = ВыборкаСвойство;
	 ТекущиеДанные.ТипЗначенияТекст = ПолучитьТипСвойства(ВыборкаСвойство);
	 
 КонецПроцедуры
 
 
 
 
 
 &НаСервере
 Процедура ПрочитатьНастройкуТекущегоЛистаСервер(Строка) 
	 
	 //Очистим настройки
	 Для Каждого Стр Из Объект.НастройкиКолонокЛиста Цикл
		 Стр.Пометка = Ложь;
		 Стр.НомерКолонки = 0;
	 КонецЦикла;
	 Для Каждого Стр Из Объект.НастройкиКолонокХарактеристики Цикл
		 Стр.Пометка = Ложь;
		 Стр.НомерКолонки = 0;
	 КонецЦикла;
	 Для Каждого Стр Из Объект.НастройкиКолонокДополнительныеРеквизиты Цикл
		 Стр.Пометка = Ложь;
		 Стр.НомерКолонки = 0;
	 КонецЦикла;
	 
	 Если НЕ ЗначениеЗаполнено(Строка.НастройкиКолонок) Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Попытка
		 ТаблицаИзНастроек = ЗначениеИзСтрокиВнутр(Строка.НастройкиКолонок); 
		 Если ТипЗнч(ТаблицаИзНастроек) = Тип("ТаблицаЗначений") Тогда
			 Если ТаблицаИзНастроек.Количество() > 0 Тогда
				 
				 Если Объект.НастройкиКолонокЛиста.Количество() > 0 Тогда
					 Для Каждого ВыборкаКолонка ИЗ ТаблицаИзНастроек Цикл
						 ПараметрыОтбора = Новый Структура;
						 ПараметрыОтбора.Вставить("ПолеЗагрузки", ВыборкаКолонка.ПолеЗагрузки);
						 НайтиСтроки = Объект.НастройкиКолонокЛиста.НайтиСтроки(ПараметрыОтбора);
						 Для Каждого ВыборкаСтрока ИЗ НайтиСтроки Цикл
							 ЗаполнитьЗначенияСвойств(ВыборкаСтрока,ВыборкаКолонка);
							 Если ВыборкаКолонка.НомерКолонки > 0 Тогда
								 ВыборкаСтрока.Пометка = Истина;
								 ВыборкаСтрока.Сортировка = ВыборкаСтрока.НомерКолонки;
							 КонецЕсли;
						 КонецЦикла;
					 КонецЦикла;
				 Иначе
					 Объект.НастройкиКолонокЛиста.Загрузить(ТаблицаИзНастроек);
				 КонецЕсли;
			 КонецЕсли;
		 КонецЕсли;
	 Исключение
	 КонецПопытки;	 
	 
	 Попытка
		 ТаблицаИзНастроек = ЗначениеИзСтрокиВнутр(Строка.НастройкиКолонокХарактеристики);
		 Если ТипЗнч(ТаблицаИзНастроек) = Тип("ТаблицаЗначений") Тогда
			 Если ТаблицаИзНастроек.Количество() > 0 Тогда
				 
				 Если Объект.НастройкиКолонокХарактеристики.Количество() > 0 Тогда
					 Для Каждого ВыборкаКолонка ИЗ ТаблицаИзНастроек Цикл
						 ПараметрыОтбора = Новый Структура;
						 ПараметрыОтбора.Вставить("НаборСвойств", ВыборкаКолонка.НаборСвойств);
						 ПараметрыОтбора.Вставить("Свойство", ВыборкаКолонка.Свойство);
						 НайтиСтроки = Объект.НастройкиКолонокХарактеристики.НайтиСтроки(ПараметрыОтбора);
						 Для Каждого ВыборкаСтрока ИЗ НайтиСтроки Цикл
							 ЗаполнитьЗначенияСвойств(ВыборкаСтрока,ВыборкаКолонка);
							 Если ВыборкаКолонка.НомерКолонки > 0 Тогда
								 ВыборкаСтрока.Пометка = Истина;
								 ВыборкаСтрока.Сортировка = ВыборкаСтрока.НомерКолонки;
							 КонецЕсли;
						 КонецЦикла;
					 КонецЦикла;
				 Иначе
					 Объект.НастройкиКолонокХарактеристики.Загрузить(ТаблицаИзНастроек);
				 КонецЕсли;
				 
			 КонецЕсли;			 
		 КонецЕсли;
	 Исключение
	 КонецПопытки;	 
	 
	 Попытка
		 ТаблицаИзНастроек = ЗначениеИзСтрокиВнутр(Строка.НастройкиКолонокДополнительныеРеквизиты);
		 Если ТипЗнч(ТаблицаИзНастроек) = Тип("ТаблицаЗначений") Тогда
			 Если ТаблицаИзНастроек.Количество() > 0 Тогда
				 
				 Если Объект.НастройкиКолонокДополнительныеРеквизиты.Количество() > 0 Тогда
					 Для Каждого ВыборкаКолонка ИЗ ТаблицаИзНастроек Цикл
						 ПараметрыОтбора = Новый Структура;
						 ПараметрыОтбора.Вставить("НаборСвойств", ВыборкаКолонка.НаборСвойств);
						 ПараметрыОтбора.Вставить("Свойство", ВыборкаКолонка.Свойство);
						 НайтиСтроки = Объект.НастройкиКолонокДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
						 Для Каждого ВыборкаСтрока ИЗ НайтиСтроки Цикл
							 ЗаполнитьЗначенияСвойств(ВыборкаСтрока,ВыборкаКолонка);
							 Если ВыборкаКолонка.НомерКолонки > 0 Тогда
								 ВыборкаСтрока.Пометка = Истина;
								 ВыборкаСтрока.Сортировка = ВыборкаСтрока.НомерКолонки;
							 КонецЕсли;
						 КонецЦикла;
					 КонецЦикла;
				 Иначе
					 Объект.НастройкиКолонокДополнительныеРеквизиты.Загрузить(ТаблицаИзНастроек);
				 КонецЕсли;
				 
			 КонецЕсли;
		 КонецЕсли;
	 Исключение
	 КонецПопытки;	
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ПолучитьСохраненныеНастройкиКолонокПрофиляСервер(ИндексТекущейСтраницы=Неопределено)
	 
	 Если ИндексТекущейСтраницы = Неопределено Тогда
		 ИндексТекущейСтраницы = 1;
	 КонецЕсли;
	 
	 Для Каждого Строка Из Объект.ТаблицаЛистовФайла Цикл
		 Если Объект.ИндивидуальныеНастройкиЛистов Тогда
			 Если Строка.НомерЛиста = ИндексТекущейСтраницы Тогда
				 ПрочитатьНастройкуТекущегоЛистаСервер(Строка);
			 КонецЕсли;
		 Иначе
			 ПрочитатьНастройкуТекущегоЛистаСервер(Строка);
		 КонецЕсли;
	 КонецЦикла;
	 
	 ОбновитьНаборыСвойствХарактеристик();
	 ОбновитьНаборыСвойствНоменклатуры();
	 
	 Объект.НастройкиКолонокЛиста.Сортировать("Сортировка");
	 Объект.НастройкиКолонокХарактеристики.Сортировать("Сортировка");
	 Объект.НастройкиКолонокДополнительныеРеквизиты.Сортировать("Сортировка");
	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПолучитьАктивныеНастройкиКолонокЛистаКлиент(ИндексТекущейСтраницы=Неопределено)	
	 
	 Если ИндексТекущейСтраницы = Неопределено Тогда
		 ИндексТекущейСтраницы = 1;
	 КонецЕсли;
	 
	 ПолучитьСохраненныеНастройкиКолонокПрофиляСервер(ИндексТекущейСтраницы);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПанельЛистовПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	 
	 //ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);
	 //ПолучитьАктивныеНастройкиКолонокЛистаКлиент(ИндексТекущейСтраницы);
	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаЛистовФайлаПриАктивизацииСтроки(Элемент)
	 
	 ТекущиеДанные = Элементы.ТаблицаЛистовФайла.ТекущиеДанные;	
	 Если ТекущиеДанные = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ИндексТекущейСтраницы = ТекущиеДанные.НомерЛиста;
	 Попытка		 
		 Элементы.ПанельЛистов.ТекущаяСтраница = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы); 
		 //Если Объект.ИндивидуальныеНастройкиЛистов Тогда
		 ПолучитьАктивныеНастройкиКолонокЛистаКлиент(ИндексТекущейСтраницы);			 
		 //КонецЕсли;
	 Исключение
		 //Сообщить(ОписаниеОшибки());
	 КонецПопытки;
	 
 КонецПроцедуры
 
 
 //============================================================================
 // СЧИТЫВАНИЕ
 
 &НаСервере
 Процедура АвтонастройкаИмпортаСервер(ИндексТекущейСтраницы)
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 Если Объект.ИмпортЧерезБуфер Тогда
		 ОбработкаОбъект.мАвтонастройкаКолонокИмпортаБуфер(Объект.ТабличныйДокумент,Объект.НастройкиКолонокЛиста,НомерСтрокиШапка);
	 Иначе		 
		 ТаблицаИмпорта = РеквизитФормыВЗначение("ТаблицаЛист"+(ИндексТекущейСтраницы-1));	
		 
		 ОбработкаОбъект.мАвтонастройкаИмпортаТаблица(ТаблицаИмпорта,Объект.НастройкиКолонокЛиста,Объект.НастройкиКолонокХарактеристики,Объект.НастройкиКолонокДополнительныеРеквизиты,НомерСтрокиШапка);
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаАвтонастройкаИмпорта(Команда)
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);
	 
	 АвтонастройкаИмпортаСервер(ИндексТекущейСтраницы);
	 
	 Если Объект.ИмпортЧерезБуфер Тогда
		 УсловноеОформлениеТаблицыБуфер();
	 КонецЕсли;
	 
	 СохранитьНастройкиКолонокПрофиля();
	 
	 ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаНастройкаКолонок;
	 ЭтаФорма.ОбновитьОтображениеДанных();
	 
 КонецПроцедуры
 
 &НаСервере
 Функция мегапрайсВыполнитьПолнуюОбработкуДанных(ВыполнитьЗаполнение=Ложь,ВыполнитьСинхронизацию=Ложь,ВыполнитьАвтоматику=Ложь)
	 
	 ПредупреждениеОЗаменах = Ложь;
	 
	 Если ВыполнитьЗаполнение Тогда		 
		 Объект.ТабличнаяЧасть.Очистить();
		 Объект.ТаблицаГруппНоменклатуры.Очистить();
		 Объект.СвойстваНоменклатуры.Очистить();
		 Объект.СвойстваХарактеристик.Очистить();
		 Объект.ТоварыУстановкаЦенНоменклатуры.Очистить();
		 Объект.ПоискСоответствий.Очистить();
	 КонецЕсли;
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 Если ВыполнитьЗаполнение Тогда	
		 ОбработкаОбъект.СообщениеВЖурнал("ЗАПОЛНЕНИЕ Таблица результат - начало");
		 
		 Если Объект.ИмпортЧерезБуфер Тогда
			 ОбработкаОбъект.мПрочитатьТабличныйДокумент(Объект.ТабличныйДокумент);
		 Иначе
			 
			 ПредупреждениеОЗаменах = ОбработкаОбъект.ЗаполнениеТаблиц_ЗагрузитьМассивТаблиц();
		 КонецЕсли;		 
		 
		 ОбработкаОбъект.СообщениеВЖурнал("ЗАПОЛНЕНИЕ Таблица результат - завершение");
		 
		 Если ПредупреждениеОЗаменах Тогда
			 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			 Возврат ПредупреждениеОЗаменах;
		 КонецЕсли;
	 КонецЕсли;
	 
	 Если ВыполнитьСинхронизацию Тогда	
		 СообщениеВЖурнал("СИНХРОНИЗАЦИЯ с 1С - начало");
		 ОбработкаОбъект.ВыполнитьСинхронизациюЗамен();	
		 ОбработкаОбъект.мСинхронизироватьСервер();	 
		 СообщениеВЖурнал("СИНХРОНИЗАЦИЯ с 1С - завершение");			 
	 КонецЕсли;
	 
	 Если ВыполнитьАвтоматику Тогда	
		 Если Объект.РоботСоздатьНоменклатуру Тогда
			 ОбработкаОбъект.СоздатьНовуюНоменклатуруСервер();
		 КонецЕсли;
		 
		 Если Объект.РоботЗагрузитьЦеныПоставщика Тогда
			 ОбработкаОбъект.Результат_РегистрацияЦенПоставщикаМегапрайс(Истина);
		 КонецЕсли;	 
		 
		 Если Объект.РоботЗагрузитьЦеныПоставщикаТиповая Тогда
			 ОбработкаОбъект.Результат_ДокументРегистрацияЦенПоставщикаТиповая();
		 КонецЕсли;	
		 
		 Если Объект.РоботЗагрузитьЦеныНоменклатуры Тогда
			 ОбработкаОбъект.Результат_ДокументУстановкаЦенНоменклатуры();
		 КонецЕсли;
		 
		 Если Объект.РоботЗагрузитьДополнительныеСвойства Тогда
			 ОбработкаОбъект.СинхронизироватьТаблицуСвойствСНоменклатурой();
			 ОбработкаОбъект.ВыполнитьЗаписатьДопРеквизитыНаСервере();		 
		 КонецЕсли;
		 
		 Если Объект.РоботЗагрузитьЗаказКлиента Тогда
			 ОбработкаОбъект.Результат_ДокументЗаказПокупателя();
		 КонецЕсли;
	 КонецЕсли;	 
	 
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 //СообщениеВЖурнал("ПЕРЕДАЧА ДАННЫХ в форму для показа - завершение");
	 
	 Возврат ПредупреждениеОЗаменах;
	 
 КонецФункции 
 
 &НаКлиенте
 Процедура ВыполнитьАвтоматическуюЗагрузку(Команда)
	 
	 ПрочитатьВыбранныйФайл();
	 
	 ПредупреждениеОЗаменах = мегапрайсВыполнитьПолнуюОбработкуДанных(Истина,Истина,Истина);
	 
	 Если ПредупреждениеОЗаменах Тогда
		 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.АвтозаменыУчетныхСправочников;
	 Иначе
		 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ЖурналСообщений;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаПрочитатьТаблицуИСинхронизировать(Команда)		 
	 //ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);		
	 //ОбновитьСтрокуНастройкиЛистаСервер(ИндексТекущейСтраницы);
	 
	 ВыполнитьЗаполнение = Истина;
	 Если ВыполнитьЗаполнение Тогда		 
		 Объект.ТабличнаяЧасть.Очистить();
		 Объект.ТаблицаГруппНоменклатуры.Очистить();
		 Объект.СвойстваНоменклатуры.Очистить();
		 Объект.СвойстваХарактеристик.Очистить();
		 Объект.ТоварыУстановкаЦенНоменклатуры.Очистить();
		 Объект.ПоискСоответствий.Очистить();
		 Объект.ЗагрузкаКартинокНоменклатуры.Очистить();
	 КонецЕсли;
	 
	 ПредупреждениеОЗаменах = мегапрайсВыполнитьПолнуюОбработкуДанных(ВыполнитьЗаполнение,Истина);
	 
	 Если ПредупреждениеОЗаменах Тогда
		 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.АвтозаменыУчетныхСправочников;
	 Иначе
		 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТабличнаяЧасть;
	 КонецЕсли;
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура Автозамены_ИгнорироватьКоманда(Команда)
	 
	 мегапрайсВыполнитьПолнуюОбработкуДанных(Ложь,Истина);
	 
	 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТабличнаяЧасть;
	 
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 //============================================================================
 // СЧИТЫВАНИЕ ФАЙЛОВ
 
 &НаСервере
 Процедура мПрочитатьТабличныйДокумент(ТабличныйДокумент,СтруктураПараметров)
	 
	 ИмяВременногоФайла = СтруктураПараметров.ПолноеИмяФайла;
	 
	 //Если ЭтоАдресВременногоХранилища(АдресФайлаХранилище) Тогда
	 //	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".mxl");
	 //	ДвоичныеДанные     = ПолучитьИзВременногоХранилища(АдресФайлаХранилище);
	 //	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	 //Иначе
	 //	Сообщить("Ошибка загрузки файла");
	 //	Возврат;
	 //КонецЕсли;	
	 
	 Объект.ТабличныйДокумент.Очистить();
	 Объект.ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	 
 КонецПроцедуры
 
 &НаСервере
 Функция глРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель=" ") Экспорт
	 
	 МассивСтрок = Новый Массив();
	 Если Разделитель = " " Тогда
		 Стр = СокрЛП(Стр);
		 Пока 1 = 1 Цикл
			 Поз = Найти(Стр,Разделитель);
			 
			 Если Поз = 0 Тогда
				 СтрокаВМассив = СокрЛП(Стр);
				 
				 МассивСтрок.Добавить(СтрокаВМассив);
				 Возврат МассивСтрок;
			 КонецЕсли;
			 
			 СтрокаВМассив = СокрЛП(Лев(Стр,Поз-1));
			 
			 МассивСтрок.Добавить(СтрокаВМассив);
			 Стр = СокрЛ(Сред(Стр,Поз));
		 КонецЦикла;
	 Иначе
		 ДлинаРазделителя = СтрДлина(Разделитель);
		 Пока 1 = 1 Цикл
			 Поз = Найти(Стр,Разделитель);
			 
			 Если Поз = 0 Тогда
				 СтрокаВМассив = СокрЛП(Стр);
				 
				 МассивСтрок.Добавить(СтрокаВМассив);
				 Возврат МассивСтрок;
			 КонецЕсли;
			 
			 СтрокаВМассив = СокрЛП(Лев(Стр,Поз-1));
			 
			 МассивСтрок.Добавить(СтрокаВМассив);
			 Стр = Сред(Стр,Поз+ДлинаРазделителя);
		 КонецЦикла;
	 КонецЕсли;
	 
 КонецФункции 
 
 &НаСервере
 Процедура мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,СтруктураПараметров)
	 
	 ИмяВременногоФайла = СтруктураПараметров.ПолноеИмяФайла;
	 
	 //Если ЭтоАдресВременногоХранилища(АдресФайлаХранилище) Тогда
	 //	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".dbf");
	 //	ДвоичныеДанные     = ПолучитьИзВременногоХранилища(АдресФайлаХранилище);
	 //	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	 //Иначе
	 //	Сообщить("Ошибка загрузки файла");
	 //	Возврат;
	 //КонецЕсли;
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 ОбработкаОбъект.мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ИмяВременногоФайла);
	 
 КонецПроцедуры
 
 
 
 &НаКлиенте
 Функция ПрочитатьВыбранныйФайл()
	 
	 АдресФайлаХранилище = "";
	 ВыбранныйПутьКФайлу = "";
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ФайлВидРасположения) Тогда
		 Объект.ФайлВидРасположения = "НаЛокальномДиске";
	 КонецЕсли;
	 
	 Если Объект.ФайлВидРасположения = "НаЛокальномДиске" Тогда
		 #Если ВебКлиент Тогда			
		 #Иначе		 
			 ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			 ДиалогОткрытияФайла.Фильтр    = "(*.mxl;*.xls;*.xlsx;*.xlsm*.ODS;*.CSV;*.txt;*.dbf;*.xml;*.yml)|*.mxl;*.xls;*.xlsx;*.ods;*.csv;*.txt;*.dbf;*.xml;*.yml";
			 ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
			 
			 ДиалогОткрытияФайла.Каталог = Объект.ФайлКаталогНаЛокальномДиске;
			 ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ФайлПутьКФайлу;
			 
			 Если ДиалогОткрытияФайла.Выбрать() Тогда
				 Если НЕ ЗначениеЗаполнено(Объект.ФайлКаталогНаЛокальномДиске) Тогда
					 Объект.ФайлКаталогНаЛокальномДиске = ДиалогОткрытияФайла.Каталог;
				 КонецЕсли;
				 Объект.ФайлПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
			 Иначе
				 Сообщить("Не указан файл или лист файла импорта");
				 Возврат Ложь;
			 КонецЕсли;			 
		 #КонецЕсли	
		 
		 ВыбранныйПутьКФайлу = Объект.ФайлПутьКФайлу;
		 
	 ИначеЕсли Объект.ФайлВидРасположения = "ПоСсылке" Тогда
		 
		 СтрПуть = СокрЛП(Объект.ФайлПутьКФайлу);
		 
		 Если НЕ ЗначениеЗаполнено(Объект.ФайлКаталогНаЛокальномДиске) Тогда
			 Сообщить("Не выбран каталог на диске, в который будут сохранятся файлы.");
			 Возврат Ложь;
		 КонецЕсли;
		 
		 МногострочнаяСтрока = СтрЗаменить(СтрПуть,"/",Символы.ПС);
		 ИмяФайла   = СтрПолучитьСтроку(МногострочнаяСтрока,СтрЧислоСтрок(МногострочнаяСтрока));
		 ВыбранныйПутьКФайлу = Объект.ФайлКаталогНаЛокальномДиске+"\"+ИмяФайла;
		 
		 //ЗАГРУЖАЕМ ВАРИАНТ 1
		 ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
		 ПараметрыПолучения.Вставить("ПутьДляСохранения", ВыбранныйПутьКФайлу);
		 ПараметрыПолучения.Вставить("Пользователь", Объект.ФайлДоступЛогин);
		 ПараметрыПолучения.Вставить("Пароль", Объект.ФайлДоступПароль);
		 //ПараметрыПолучения.Вставить("Порт", Неопределено);
		 //ПараметрыПолучения.Вставить("Таймаут", 1);
		 //ПараметрыПолучения.Вставить("ЗащищенноеСоединение", Неопределено);
		 //ПараметрыПолучения.Вставить("ПассивноеСоединение", Неопределено);
		 //ПараметрыПолучения.Вставить("Заголовки", Новый Соответствие);
		 //ПараметрыПолучения.Вставить("ИспользоватьАутентификациюОС", Ложь);
		 // ПараметрыПолучения.Вставить("УровеньИспользованияЗащищенногоСоединения", Неопределено);
		 
		 ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(СтрПуть,ПараметрыПолучения);
		 
		 //ЗАГРУЖАЕМ ВАРИАНТ 2
		 //КопироватьФайл(Объект.ФайлПутьКФайлу,СтрПуть);
		 
		 //ЗАГРУЖАЕМ ВАРИАНТ 3
		 //Если СтрНайти(ИмяСервера,"http") > 0 Тогда
		 //    Соединение = Новый HTTPСоединение(ИмяСервера,,Объект.ФайлДоступЛогин,Объект.ФайлДоступПароль,,,,);
		 //    Соединение.Получить(ПутьКФайлуБезДомена, ВыбранныйПутьКФайлу);
		 //ИначеЕсли СтрНайти(ИмяСервера,"ftp") > 0 Тогда
		 //    Соединение = Новый FTPСоединение(ИмяСервера,,Объект.ФайлДоступЛогин,Объект.ФайлДоступПароль);
		 //    Соединение.Получить(ПутьКФайлуБезДомена, ВыбранныйПутьКФайлу);
		 //КонецЕсли;
	 КонецЕсли;		
	 
	 Если ЗначениеЗаполнено(ВыбранныйПутьКФайлу) Тогда
		 //Сообщить(ВыбранныйПутьКФайлу);
		 #Если ВебКлиент Тогда
			 Если ПоместитьФайл(АдресФайлаХранилище, ВыбранныйПутьКФайлу, ВыбранныйПутьКФайлу, Истина, УникальныйИдентификатор) Тогда
				 Сообщить("Файл не помещен на сервер");
				 Возврат Ложь;
			 КонецЕсли;
		 #КонецЕсли
		 
		 ФайлНаДиске = Новый Файл(ВыбранныйПутьКФайлу);	
		 ФайлНаДискеРасширение = нРег(ФайлНаДиске.Расширение);	 
		 ВремяИзмененияФайла = ФайлНаДиске.ПолучитьВремяИзменения();
		 РазмерФайла = ФайлНаДиске.Размер();
		 Объект.ИдентификаторПрайса = ""+РазмерФайла+"/"+ВремяИзмененияФайла;
	 КонецЕсли;
	 
	 СтруктураПараметров = Новый Структура();
	 СтруктураПараметров.Вставить("ФайлВидРасположения",Объект.ФайлВидРасположения);
	 СтруктураПараметров.Вставить("ПолноеИмяФайла",ВыбранныйПутьКФайлу);
	 СтруктураПараметров.Вставить("ФайлНаДискеРасширение",ФайлНаДискеРасширение);
	 СтруктураПараметров.Вставить("АдресФайлаХранилище",АдресФайлаХранилище);
	 
	 СообщениеВЖурналКлиент("ИМПОРТ нового файла - начало");
	 
	 Если ЗначениеЗаполнено(ВыбранныйПутьКФайлу) Тогда
		 Если ФайлНаДискеРасширение = ".mxl" Тогда
			 
			 мПрочитатьТабличныйДокумент(Объект.ТабличныйДокумент,СтруктураПараметров);
			 
		 ИначеЕсли ФайлНаДискеРасширение = ".dbf" Тогда
			 
			 мПрочитатьТабличныйДокументИзDBF(Объект.ТабличныйДокумент,СтруктураПараметров);
			 
		 Иначе	 
			 
			 Если ФайлНаДискеРасширение = ".txt" ИЛИ ФайлНаДискеРасширение = ".xml" ИЛИ ФайлНаДискеРасширение = ".yml" Тогда
				 Если НЕ ЗначениеЗаполнено(Объект.ВнешняяОбработкаЗагрузкиФайла) Тогда
					 Сообщить("Для данного формата файла воспользуйтесь дополнительной обработкой (запросить у автора)");
					 Возврат Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 #Если ВебКлиент Тогда
				 ЧтениеФайлов_Выполнить(СтруктураПараметров);
			 #Иначе
				 Если ПоместитьФайл(АдресФайлаХранилище, ВыбранныйПутьКФайлу, ВыбранныйПутьКФайлу, Ложь, УникальныйИдентификатор) Тогда			 
					 СтруктураПараметров = Новый Структура();
					 СтруктураПараметров.Вставить("ФайлВидРасположения",Объект.ФайлВидРасположения);
					 СтруктураПараметров.Вставить("ПолноеИмяФайла",ВыбранныйПутьКФайлу);
					 СтруктураПараметров.Вставить("ФайлНаДискеРасширение",ФайлНаДискеРасширение);
					 СтруктураПараметров.Вставить("АдресФайлаХранилище",АдресФайлаХранилище);			 
					 
					 ЧтениеФайлов_Выполнить(СтруктураПараметров);
				 КонецЕсли;	
			 #КонецЕсли	
		 КонецЕсли;
	 Иначе
		 ЧтениеФайлов_Выполнить(СтруктураПараметров);
	 КонецЕсли;	 
	 
	 СообщениеВЖурналКлиент("ИМПОРТ нового файла - завершение");	
	 
	 Возврат Истина;
	 
 КонецФункции
 
 
 Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) 
	 
	 ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	 ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	 
	 Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		 
		 Стр = Строка(ЧислоСтрокой);
		 Если Стр = "" Тогда
			 Возврат Неопределено;
		 КонецЕсли;
		 
		 Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		 Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			 Возврат Неопределено;
		 КонецЕсли;
	 КонецЕсли;
	 
	 Возврат ЗначениеЧисла;	
	 
 КонецФункции
 
 &НаСервере
 Функция РазобратьАдресСайта(Знач АдресСайта) Экспорт
	 
	 // Разберем адрес сайта
	 АдресСайта = СокрЛП(АдресСайта); 
	 
	 HTTPСервер		 			= ""; 
	 HTTPПорт					= 0;
	 HTTPАдресСкрипта 			= "";
	 HTTPЗащищенноеСоединение 	= Ложь;
	 
	 Если ЗначениеЗаполнено(АдресСайта) Тогда
		 
		 АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		 АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		 
		 Если ВРег(Лев(АдресСайта, 7)) = "HTTP://" Тогда
			 АдресСайта = Сред(АдресСайта, 8);
		 ИначеЕсли ВРег(Лев(АдресСайта, 8)) = "HTTPS://" Тогда
			 АдресСайта = Сред(АдресСайта, 9);
			 HTTPЗащищенноеСоединение = Истина;
		 ИначеЕсли ВРег(Лев(АдресСайта, 6)) = "FTP://" Тогда
			 АдресСайта = Сред(АдресСайта, 7);		
		 КонецЕсли;
		 
		 ПозицияСлэша = Найти(АдресСайта, "/");
		 
		 Если ПозицияСлэша > 0 Тогда
			 HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);
			 HTTPАдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		 Иначе	
			 HTTPСервер 		 = АдресСайта;
			 HTTPАдресСкрипта = "";
		 КонецЕсли;	
		 ПозицияДвоеточия = Найти(HTTPСервер, ":");
		 Если ПозицияДвоеточия > 0 Тогда
			 HTTPСерверСПортом = HTTPСервер;
			 HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			 HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		 Иначе
			 HTTPПортСтрока = "0";
		 КонецЕсли;
		 
		 HTTPПорт = ПривестиСтрокуКЧислу(HTTPПортСтрока);		
	 КонецЕсли;
	 
	 //Сообщить(HTTPСервер);
	 
	 СтруктураРезультата = Новый Структура;
	 СтруктураРезультата.Вставить("HTTPСервер"	  			, HTTPСервер); 
	 СтруктураРезультата.Вставить("HTTPПорт"		   			, HTTPПорт);
	 СтруктураРезультата.Вставить("HTTPАдресСкрипта"			, HTTPАдресСкрипта);
	 СтруктураРезультата.Вставить("HTTPЗащищенноеСоединение"	, HTTPЗащищенноеСоединение);
	 
	 Возврат СтруктураРезультата;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура ДействиеОткрытьФайлИмпорта(Кнопка)
	 
	 Отказ = Ложь;
	 Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатурыПоУмолчанию) Тогда
		 Сообщить("Настройки номенклатуры - Не указан Вид номенклатуры (по умолчанию)!");
		 Отказ = Истина;
	 КонецЕсли;	 
	 Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПоУмолчанию) Тогда
		 Сообщить("Настройки номенклатуры - Не указана Единица измерения (по умолчанию)!");
		 Отказ = Истина;
	 КонецЕсли; 	 
	 Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДСПоУмолчанию) Тогда
		 Сообщить("Настройки номенклатуры - Не указана Ставка НДС (по умолчанию)!");
		 Отказ = Истина;
	 КонецЕсли; 	 
	 Если Отказ Тогда
		 Сообщить("Перед началом работы - заполните обязательные настройки номенклатуры.");
		 Возврат;
	 КонецЕсли;
	 
	 ДействиеВыполнено = ПрочитатьВыбранныйФайл();	 
	 Если ДействиеВыполнено = Ложь Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ПолучитьАктивныеНастройкиКолонокЛистаКлиент();	 
	 Элементы.Страницы.ТекущаяСтраница = Элементы.ИсходнаяТаблица; 
	 
	 Если НЕ Объект.ИмпортЧерезБуфер Тогда
		 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаЛистовФайла;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 
 //============================================================================
 // Автозамены СПРАВОЧНИКОВ
 
 &НаСервере
 Процедура ВыполнитьСоздатьНовыхПроизводителей()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 Отбор = Новый Структура();
	 Отбор.Вставить("ИдентификаторКолонки","Поле_Производитель");
	 ТаблицаЗначенийАвтозамен = Объект.АвтозаменыСправочников.НайтиСтроки(Отбор);
	 Если ТаблицаЗначенийАвтозамен.Количество() = 0 Тогда
		 Возврат;
	 КонецЕсли;
	 
	 спрПроизводители = Справочники.Производители;
	 
	 Для Каждого ВыборкаЗамена Из ТаблицаЗначенийАвтозамен Цикл	
		 Если ЗначениеЗаполнено(ВыборкаЗамена.ЗначениеЗамены) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 НашлиСсылку = спрПроизводители.НайтиПоНаименованию(ВыборкаЗамена.ЗначениеЗамены,Истина);		 
		 Если НашлиСсылку = спрПроизводители.ПустаяСсылка() Тогда
			 НовыйЭлемент = спрПроизводители.СоздатьЭлемент();
			 НовыйЭлемент.Наименование = ВыборкаЗамена.ЧтоМеняем;
			 НовыйЭлемент.Записать();
			 НашлиСсылку = НовыйЭлемент.Ссылка;
		 КонецЕсли;
		 
		 ВыборкаЗамена.ЗначениеЗамены = НашлиСсылку.Ссылка;
	 КонецЦикла;						
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Автозамены_СоздатьНовыхПроизводителей(Команда)
	 
	 ВыполнитьСоздатьНовыхПроизводителей();
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура СоздатьГруппыНоменклатурыСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	 
	 ОбработкаОбъект.СоздатьГруппыНоменклатурыСервер();	 
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаСоздатьГруппыНоменклатуры(Команда)
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьГруппыНоменклатурыЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены ?'"), РежимДиалогаВопрос.ДаНет);
	 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьГруппыНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		 Возврат;
	 КонецЕсли;	
	 
	 СоздатьГруппыНоменклатурыСервер();
	 
	 Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе;
	 
 КонецПроцедуры
 
 
 
 &НаСервере
 Процедура СоздатьВидыНоменклатурыСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	 
	 ОбработкаОбъект.СоздатьВидыНоменклатурыСервер();	 
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаСоздатьВидыНоменклатуры(Команда)
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьВидыНоменклатурыЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены ?'"), РежимДиалогаВопрос.ДаНет); 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьВидыНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		 Возврат;
	 КонецЕсли;	
	 
	 СоздатьВидыНоменклатурыСервер();
	 
	 Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе;
	 
 КонецПроцедуры
 
 
 
 
 
 
 
 
 &НаСервере
 Процедура АвтозаменыСправочниковЗаписатьСервер()
	 
	 Для Каждого Стр из Объект.АвтозаменыСправочников Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.ЗначениеЗамены) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 НаборЗаписей = РегистрыСведений.мегапрайсАвтозаменыСправочников.СоздатьНаборЗаписей();
		 НаборЗаписей.Отбор.ИдентификаторКолонки.Установить(Стр.ИдентификаторКолонки);
		 НаборЗаписей.Отбор.ЧтоМеняем.Установить(Стр.ЧтоМеняем);				 
		 НаборЗаписей.Прочитать();
		 
		 Если НаборЗаписей.Количество() = 0 Тогда
			 НоваяЗапись = НаборЗаписей.Добавить();
		 Иначе
			 НоваяЗапись = НаборЗаписей.Получить(0);
		 КонецЕсли;
		 ЗаполнитьЗначенияСвойств(НоваяЗапись, Стр);
		 НаборЗаписей.Записать();
	 КонецЦикла;
	 
 КонецПроцедуры 
 
 &НаКлиенте
 Процедура Автозамены_ЗаписатьЗначения(Команда)
	 
	 АвтозаменыСправочниковЗаписатьСервер();
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура АвтозаменыСправочниковЗначениеЗаменыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 ТекущиеДанные = Элементы.АвтозаменыСправочников.ТекущиеДанные;	
	 Если ТекущиеДанные = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если ТекущиеДанные.ЭтоГруппаНоменклатуры Тогда
		 СтандартнаяОбработка = Ложь;
		 ПараметрыПодбора = Новый Структура;
		 ВыбранноеЗначение = Неопределено;
		 
		 ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы", ПараметрыПодбора, Элемент,,,, Новый ОписаниеОповещения("АвтозаменыСправочниковЗначениеЗаменыНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);  
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура АвтозаменыСправочниковЗначениеЗаменыНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	 ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	 
	 ВыбранноеЗначение = Результат;        
	 ТекущиеДанные.ЗначениеЗамены = ВыбранноеЗначение;
	 Модифицированность = Истина;
	 
 КонецПроцедуры
 
 
 
 
 //============================================================================
 // ОБРАБОТКИ
 
 &НаСервере
 Процедура ВыполнитьИзменениеРеквизитовНоменклатурыСервер(ПараметрыОбработки)
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 ИзменитьНаименование = ПараметрыОбработки.ИзменитьНаименование;
	 ИзменитьПолноеНаименование = ПараметрыОбработки.ИзменитьПолноеНаименование;
	 СложитьАртикулИНаименование = ПараметрыОбработки.СложитьАртикулИНаименование;
	 
	 ИзменитьВидНоменклатуры = ПараметрыОбработки.ИзменитьВидНоменклатуры;
	 ИзменитьАртикулы = ПараметрыОбработки.ИзменитьАртикулы;
	 ИзменитьОписание = ПараметрыОбработки.ИзменитьОписание;
	 ИзменитьНоменклатуруТолькоПустые = ПараметрыОбработки.ИзменитьНоменклатуруТолькоПустые;
	 ИзменитьПроизводителя   = ПараметрыОбработки.ИзменитьПроизводителя;
	 ИзменитьВесНоменклатуры = ПараметрыОбработки.ИзменитьВесНоменклатуры;
	 ИзменитьЦеновыеГруппы   = ПараметрыОбработки.ИзменитьЦеновыеГруппы;
	 ИзменитьТоварныеКатегории = ПараметрыОбработки.ИзменитьТоварныеКатегории;
	 ИзменитьКоллекциюНоменклатуры   = ПараметрыОбработки.ИзменитьКоллекциюНоменклатуры;
	 ИзменитьМинимальнаяУпаковка   = ПараметрыОбработки.ИзменитьМинимальнаяУпаковка;
	 
	 Сообщить("Обработка начата "+ТекущаяДата());
	 
	 НачатьТранзакцию();
	 КоличествоОбработанных = 0;
	 
	 ПустаяЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
	 
	 Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл
		 
		 Если НЕ Строка.Пометка Тогда
			 Продолжить;
		 КонецЕсли;
		 Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоличествоОбработанных = КоличествоОбработанных + 1;
		 
		 ТекОбъект = Строка.Номенклатура.ПолучитьОбъект();
		 ИзменениеПроизошло = Ложь;
		 
		 Если ИзменитьВидНоменклатуры Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.ВидНоменклатурыСсылка) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ВидНоменклатуры) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда				
				 ТекОбъект.ВидНоменклатуры = Строка.ВидНоменклатурыСсылка;
				 ТекОбъект.ТипНоменклатуры    = Строка.ВидНоменклатурыСсылка.ТипНоменклатуры;
				 ТекОбъект.ИспользованиеХарактеристик = Строка.ВидНоменклатурыСсылка.ИспользованиеХарактеристик;		
				 ТекОбъект.ИспользоватьУпаковки       = Строка.ВидНоменклатурыСсылка.ИспользоватьУпаковки;
				 
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьНаименование Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Наименование) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.Наименование) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 Если СложитьАртикулИНаименование Тогда
					 Если ЗначениеЗаполнено(Строка.Поле_Артикул) Тогда
						 НовоеНаименование = СокрЛП(Строка.Поле_Артикул) +" "+СокрЛП(Строка.Поле_Наименование);
					 Иначе
						 НовоеНаименование = СокрЛП(Строка.Поле_Наименование);
					 КонецЕсли;
				 Иначе
					 НовоеНаименование = СокрЛП(Строка.Поле_Наименование);
				 КонецЕсли;
				 
				 ТекОбъект.Наименование = НовоеНаименование;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьПолноеНаименование Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_ПолноеНаименование) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.НаименованиеПолное) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 Если СложитьАртикулИНаименование Тогда
					 Если ЗначениеЗаполнено(Строка.Поле_Артикул) Тогда
						 НовоеПолноеНаименование = СокрЛП(Строка.Поле_Артикул) +" "+СокрЛП(Строка.Поле_ПолноеНаименование);
					 Иначе
						 НовоеПолноеНаименование = СокрЛП(Строка.Поле_ПолноеНаименование);
					 КонецЕсли;
				 Иначе
					 НовоеПолноеНаименование = СокрЛП(Строка.Поле_ПолноеНаименование);
				 КонецЕсли;
				 
				 ТекОбъект.НаименованиеПолное = НовоеПолноеНаименование;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьАртикулы Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Артикул) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.Артикул) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 ТекОбъект.Артикул = Строка.Поле_Артикул;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьОписание Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Описание) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.Описание) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 ТекОбъект.Описание = Строка.Поле_Описание;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьПроизводителя Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Производитель) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.Производитель) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;			 
			 
			 Если ЗначениеЗаполнено(Строка.Поле_Марка) Тогда
				 МаркаНайденаСсылка = Справочники.Марки.НайтиПоНаименованию(Строка.Поле_Марка);	
				 Если МаркаНайденаСсылка =  Справочники.Марки.ПустаяСсылка() Тогда
					 МаркаНайденаСсылка = Справочники.Марки.СоздатьЭлемент();
					 МаркаНайденаСсылка.Наименование = Строка.Поле_Марка;
					 МаркаНайденаСсылка.Производитель = ТекОбъект.Производитель;
					 МаркаНайденаСсылка.Записать();
				 КонецЕсли;
				 ТекОбъект.Марка = МаркаНайденаСсылка.Ссылка;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;			 
			 
			 Если КомандаИзменить Тогда
				 ПроизводительСсылка = Строка.Поле_Производитель;
				 Если ТипЗнч(ПроизводительСсылка) = Тип("Строка") Тогда
					 ПроизводительСсылка = Справочники.Производители.НайтиПоНаименованию(Строка.Поле_Производитель,Истина);		 
					 Если ПроизводительСсылка = Справочники.Производители.ПустаяСсылка() Тогда
						 НовыйЭлемент = Справочники.Производители.СоздатьЭлемент();
						 НовыйЭлемент.Наименование = Строка.Поле_Производитель;
						 НовыйЭлемент.Записать();
						 ПроизводительСсылка = НовыйЭлемент.Ссылка;
						 Сообщить("Создан новый производитель - "+ПроизводительСсылка);
					 КонецЕсли;
				 КонецЕсли;
				 
				 ТекОбъект.Производитель = ПроизводительСсылка;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьМинимальнаяУпаковка Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_МинимальныйЗаказ) Тогда
				 КомандаИзменить = Истина;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 ТекОбъект.мегапрайсМинимальныйЗаказ = Строка.Поле_МинимальныйЗаказ;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьВесНоменклатуры Тогда	
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Вес) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ВесЧислитель) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 Если КомандаИзменить Тогда
				 ТекОбъект.ВесИспользовать = Истина;
				 ТекОбъект.ВесЧислитель   = Строка.Поле_Вес;
				 ТекОбъект.ВесЗнаменатель = 1;
				 
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
			 
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Объем) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ОбъемЧислитель) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 Если КомандаИзменить Тогда
				 ТекОбъект.ОбъемИспользовать = Истина;
				 ТекОбъект.ОбъемЧислитель   = Строка.Поле_Объем;
				 ТекОбъект.ОбъемЗнаменатель = 1;
				 
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
			 
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Длина) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ДлинаЧислитель) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 Если КомандаИзменить Тогда
				 ТекОбъект.ДлинаИспользовать = Истина;
				 ТекОбъект.ДлинаЧислитель   = Строка.Поле_Длина;
				 ТекОбъект.ДлинаЗнаменатель = 1;
				 
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
			 
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_Площадь) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ПлощадьЧислитель) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 Если КомандаИзменить Тогда
				 ТекОбъект.ПлощадьИспользовать = Истина;
				 ТекОбъект.ПлощадьЧислитель   = Строка.Поле_Площадь;
				 ТекОбъект.ПлощадьЗнаменатель = 1;
				 
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьЦеновыеГруппы Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_ЦеноваяГруппа) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ЦеноваяГруппа) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 НайтиЦеноваяГруппа = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(Строка.Поле_ЦеноваяГруппа,Истина);
				 Если НайтиЦеноваяГруппа = ПустаяЦеноваяГруппа Тогда
					 Сообщить("Ценовая группа не найдена "+Строка.Поле_ЦеноваяГруппа);
					 Продолжить;
				 КонецЕсли;
				 
				 ТекОбъект.ЦеноваяГруппа = НайтиЦеноваяГруппа.Ссылка;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменитьТоварныеКатегории Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_ТоварнаяКатегория) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.ТоварнаяКатегория) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 НайтиЭлемент = Справочники.ТоварныеКатегории.НайтиПоНаименованию(Строка.Поле_ТоварнаяКатегория,Истина);
				 Если НайтиЭлемент = Справочники.ТоварныеКатегории.ПустаяСсылка() Тогда
					 Сообщить("Товарная категория не найдена "+Строка.Поле_ТоварнаяКатегория);
					 Продолжить;
				 КонецЕсли;
				 
				 ТекОбъект.ТоварнаяКатегория = НайтиЭлемент.Ссылка;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 
		 Если ИзменитьКоллекциюНоменклатуры Тогда
			 КомандаИзменить = Ложь;
			 Если ЗначениеЗаполнено(Строка.Поле_КоллекцияНоменклатуры) Тогда
				 КомандаИзменить = Истина;
				 Если ИзменитьНоменклатуруТолькоПустые И ЗначениеЗаполнено(ТекОбъект.КоллекцияНоменклатуры) Тогда
					 КомандаИзменить = Ложь;
				 КонецЕсли;
			 КонецЕсли;
			 
			 Если КомандаИзменить Тогда
				 НайтиЭлемент = Справочники.КоллекцииНоменклатуры.НайтиПоНаименованию(Строка.Поле_КоллекцияНоменклатуры,Истина);
				 Если НайтиЭлемент = Справочники.КоллекцииНоменклатуры.ПустаяСсылка() Тогда
					 Сообщить("Коллекция не найдена "+Строка.Поле_КоллекцияНоменклатуры);
					 Продолжить;
				 КонецЕсли;
				 
				 ТекОбъект.КоллекцияНоменклатуры = НайтиЭлемент.Ссылка;
				 ИзменениеПроизошло = Истина;
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если ИзменениеПроизошло Тогда
			 ТекОбъект.ОбменДанными.Загрузка = Истина;
			 ТекОбъект.Записать();
		 КонецЕсли;	
		 
		 Если КоличествоОбработанных = 100 Тогда
			 // промежуточную транзакцию закрываем и открываем новую
			 ЗафиксироватьТранзакцию();
			 НачатьТранзакцию();
			 КоличествоОбработанных = 0;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 ЗафиксироватьТранзакцию();		 
	 Сообщить("Обработка завершена "+ТекущаяДата());
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Результат_ВыполнитьИзменениеРеквизитовНоменклатуры(Команда)
	 
	 ПараметрыОбработки = Новый Структура;
	 ПараметрыОбработки.Вставить("ИзменитьНаименование", ИзменитьНаименование);
	 ПараметрыОбработки.Вставить("ИзменитьПолноеНаименование", ИзменитьПолноеНаименование);
	 ПараметрыОбработки.Вставить("СложитьАртикулИНаименование", СложитьАртикулИНаименование);
	 
	 ПараметрыОбработки.Вставить("ИзменитьВидНоменклатуры", ИзменитьВидНоменклатуры);
	 ПараметрыОбработки.Вставить("ИзменитьАртикулы", ИзменитьАртикулы);
	 ПараметрыОбработки.Вставить("ИзменитьОписание", ИзменитьОписание);
	 ПараметрыОбработки.Вставить("ИзменитьНоменклатуруТолькоПустые", ИзменитьНоменклатуруТолькоПустые);
	 ПараметрыОбработки.Вставить("ИзменитьПроизводителя", ИзменитьПроизводителя);
	 ПараметрыОбработки.Вставить("ИзменитьВесНоменклатуры", ИзменитьВесНоменклатуры);
	 ПараметрыОбработки.Вставить("ИзменитьЦеновыеГруппы", ИзменитьЦеновыеГруппы);
	 ПараметрыОбработки.Вставить("ИзменитьТоварныеКатегории", ИзменитьТоварныеКатегории);
	 ПараметрыОбработки.Вставить("ИзменитьКоллекциюНоменклатуры", ИзменитьКоллекциюНоменклатуры);
	 ПараметрыОбработки.Вставить("ИзменитьМинимальнаяУпаковка", ИзменитьМинимальнаяУпаковка);
	 
	 
	 ВыполнитьИзменениеРеквизитовНоменклатурыСервер(ПараметрыОбработки);
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура КомандаЗагрузитьШтрихкодыСервер()
	 
	 НачатьТранзакцию();
	 КоличествоОбработанных = 0;
	 
	 Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл
		 
		 Если НЕ Строка.Пометка Тогда
			 Продолжить;
		 КонецЕсли;
		 Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 Если НЕ ЗначениеЗаполнено(Строка.Поле_ШтрихКод) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 МассивСтрок = глРазложитьСтрокуВМассивПодстрок(Строка.Поле_ШтрихКод," ");
		 
		 Для Каждого ВыборкаПодстрока Из МассивСтрок Цикл		 
			 ТекстЗапроса = 
			 "ВЫБРАТЬ
			 |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
			 |ИЗ
			 |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			 |ГДЕ
			 |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
			 |	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
			 |	И ШтрихкодыНоменклатуры.Штрихкод = &ВыборкаПодстрока";
			 
			 Запрос = Новый Запрос;
			 Запрос.Текст = ТекстЗапроса;
			 Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
			 Запрос.УстановитьПараметр("Характеристика", Строка.ХарактеристикаНоменклатуры);  
			 Запрос.УстановитьПараметр("ВыборкаПодстрока", ВыборкаПодстрока);
			 
			 РезультатЗапроса = Запрос.Выполнить();	
			 Если НЕ РезультатЗапроса.Пустой() Тогда
				 Сообщить("У данной номенклатуры штрихкод уже есть (строка пропущена)  "+Строка.Номенклатура);
				 Продолжить;
			 КонецЕсли;	 
			 
			 КоличествоОбработанных = КоличествоОбработанных + 1;
			 
			 ТекЗапись = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			 ЗаполнитьЗначенияСвойств(ТекЗапись, Строка);
			 ТекЗапись.Прочитать();
			 
			 ТекЗапись.Номенклатура   = Строка.Номенклатура;
			 ТекЗапись.Характеристика = Строка.ХарактеристикаНоменклатуры;
			 ТекЗапись.Упаковка     = Строка.Упаковка;
			 ТекЗапись.Штрихкод     = ВыборкаПодстрока;
			 ТекЗапись.Записать();
		 КонецЦикла;
		 
		 Если КоличествоОбработанных = 100 Тогда
			 // промежуточную транзакцию закрываем и открываем новую
			 ЗафиксироватьТранзакцию();
			 НачатьТранзакцию();
			 КоличествоОбработанных = 0;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 ЗафиксироватьТранзакцию();	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаЗагрузитьШтрихкоды(Команда)
	 
	 КомандаЗагрузитьШтрихкодыСервер();
	 
	 СообщениеВЖурналКлиент("Загрузка штрихкодов завершена");
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура КомандаСгенеририроватьШтрихкодыСервер()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НачатьТранзакцию();
	 КоличествоОбработанных = 0;
	 
	 Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл
		 
		 Если НЕ Строка.Пометка Тогда
			 Продолжить;
		 КонецЕсли;
		 Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоличествоОбработанных = КоличествоОбработанных + 1;
		 
		 ТекстЗапроса = 
		 "ВЫБРАТЬ
		 |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		 |ИЗ
		 |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		 |ГДЕ
		 |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		 |	И ШтрихкодыНоменклатуры.Характеристика = &ХарактеристикаНоменклатуры
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	ШтрихкодыНоменклатуры.Номенклатура";
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = ТекстЗапроса;
		 Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
		 Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
		 
		 РезультатЗапроса = Запрос.Выполнить();	
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 Сообщить("У данной номенклатуры штрихкод уже есть (строка пропущена)  "+Строка.Номенклатура);
			 Продолжить;
		 КонецЕсли;	 
		 
		 ТекЗаписьШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		 
		 ТекЗаписьШтрихкода.Номенклатура   = Строка.Номенклатура;
		 ТекЗаписьШтрихкода.Характеристика = Строка.ХарактеристикаНоменклатуры;
		 ТекЗаписьШтрихкода.Упаковка       = Строка.Упаковка;
		 ПрефиксВнутреннегоШтрихкода = Формат(Константы.ПрефиксШтучногоШтрихкода.Получить(),"ЧЦ=2; ЧН=; ЧВН=");
		 ТекЗаписьШтрихкода.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();			
		 ТекЗаписьШтрихкода.Записать();
		 
		 Если КоличествоОбработанных = 100 Тогда
			 // промежуточную транзакцию закрываем и открываем новую
			 ЗафиксироватьТранзакцию();
			 НачатьТранзакцию();
			 КоличествоОбработанных = 0;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 ЗафиксироватьТранзакцию();	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаСгенерироватьШтрихкоды(Команда)
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("КомандаСгенерироватьШтрихкодыЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены что хотите Создать новые записи?'"), РежимДиалогаВопрос.ДаНет);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаСгенерироватьШтрихкодыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		 Возврат;
	 КонецЕсли;	
	 
	 КомандаСгенеририроватьШтрихкодыСервер();
	 
	 СообщениеВЖурналКлиент("Создание штрихкодов завершено");
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	 
	 Строка = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	 
 КонецПроцедуры
 
 
 
 //============================================================================
 // НОМЕНКЛАТУРА ПОСТАВЩИКА
 
 &НаКлиенте
 Процедура НоменклатураПоставщикаПоискСоответствий(Команда)
	 
	 АдресПередаваемыхПараметров = ПоместитьДанныеВХранилище_ПоискСоответствийНоменклатуры();
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	 
	 ОписаниеОповещение = Новый ОписаниеОповещения("НоменклатураПоставщика_ЗаполнитьРезультатУстановки", ЭтаФорма, СтруктураПараметров);
	 
	 Попытка
		 ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ПоискНоменклатуры",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещение); 
	 Исключение
		 ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ПоискНоменклатуры",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещение);
	 КонецПопытки; 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Справочники_СоздатьНоменклатуруПоставщикаКнопка(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		 Сообщить("Не указан Партнер!");
		 Возврат;
	 КонецЕсли;
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("Справочники_СоздатьНоменклатуруПоставщикаЗавершение", ЭтотОбъект), НСтр("ru = 'Выберите действие со справочником Номенклатура поставщиков.
	 |Да - создать новые и обновить всю номенклатуру поставщика.
	 |Нет - только создать новые элементы.
	 |Отмена - отменить команду.'"), РежимДиалогаВопрос.ДаНетОтмена);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Справочники_СоздатьНоменклатуруПоставщикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		 Возврат;
	 КонецЕсли;	
	 
	 СообщениеВЖурналКлиент("Номенклатура поставщиков - создание (начало)");
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Справочники_СоздатьНоменклатуруПоставщикаСервер(Истина);
	 ИначеЕсли РезультатВопроса =  КодВозвратаДиалога.Нет Тогда
		 Справочники_СоздатьНоменклатуруПоставщикаСервер();
	 КонецЕсли;
	 
	 СообщениеВЖурналКлиент("Номенклатура поставщиков - создание завершено");
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура Справочники_СоздатьНоменклатуруПоставщикаСервер(Изменить=Ложь)
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Партнер",Объект.Партнер); 
	 ОбработкаОбъект.Справочники_СоздатьНоменклатуруПоставщика(СтруктураПараметров,Объект.ТабличнаяЧасть,Изменить);	 
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура НоменклатураПоставщика_ЗаполнитьРезультатУстановки(РезультатЗакрытия,Параметры) Экспорт
	 
	 Если РезультатЗакрытия = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 СтруктураПараметров = ПолучитьИзВременногоХранилища(РезультатЗакрытия.Адрес);
	 
	 //СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);	 
	 Объект.ПоискСоответствий.Загрузить(СтруктураПараметров.ПоискСоответствий);
	 
	 ПустаяСсылка  = Справочники.Номенклатура.ПустаяСсылка();
	 
	 ПараметрыОтбора = Новый Структура;
	 ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	 ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);	
	 ДанныеПоиска        = Объект.ТабличнаяЧасть.Выгрузить(ПараметрыОтбора,"НомерСтроки,КлючСтроки");
	 ТаблицаСоответствий = Объект.ПоискСоответствий.Выгрузить();
	 
	 ТектЗапроса = 
	 "ВЫБРАТЬ
	 |	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	 |	ВременнаяДанныеПоиска.КлючСтроки КАК КлючСтроки
	 |ПОМЕСТИТЬ ВременнаяДанныеПоиска
	 |ИЗ
	 |	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	НомерСтроки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТаблицаСоответствий.КлючСтроки КАК КлючСтроки,
	 |	ТаблицаСоответствий.Номенклатура КАК Номенклатура,
	 |	ТаблицаСоответствий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ТаблицаСоответствий.НоменклатураПоставщика КАК НоменклатураПоставщика
	 |ПОМЕСТИТЬ ТаблицаСоответствий
	 |ИЗ
	 |	&ТаблицаСоответствий КАК ТаблицаСоответствий
	 |ГДЕ
	 |	ТаблицаСоответствий.Номенклатура <> &ПустаяСсылка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	 |	ТаблицаСоответствий.Номенклатура КАК Номенклатура,
	 |	ТаблицаСоответствий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ТаблицаСоответствий.НоменклатураПоставщика КАК НоменклатураПоставщика
	 |ИЗ
	 |	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСоответствий КАК ТаблицаСоответствий
	 |		ПО ВременнаяДанныеПоиска.КлючСтроки = ТаблицаСоответствий.КлючСтроки";	
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТектЗапроса;
	 Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	 Запрос.УстановитьПараметр("ТаблицаСоответствий", ТаблицаСоответствий);
	 Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 КолСтрокОбработки = 0;
	 
	 Выборка = РезультатЗапроса.Выбрать();	
	 Пока Выборка.Следующий() Цикл	
		 КолСтрокОбработки = КолСтрокОбработки + 1;	 
		 
		 СтрТаблицыСинхронизации = Объект.ТабличнаяЧасть[Выборка.НомерСтроки-1]; 
		 СтрТаблицыСинхронизации.Номенклатура = Выборка.Номенклатура;
		 СтрТаблицыСинхронизации.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		 СтрТаблицыСинхронизации.НоменклатураПоставщика = Выборка.НоменклатураПоставщика;		 
	 КонецЦикла; 
	 
	 
	 //УстановитьПривилегированныйРежим(Истина);
	 //
	 //СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);	 
	 //Объект.АлгоритмыКлючевыхСлов.Загрузить(СтруктураПараметров.АлгоритмыКлючевыхСлов);
	 //Объект.ЗаменаКлючевыхСлов.Загрузить(СтруктураПараметров.ЗаменаКлючевыхСлов);
	 //
	 //Для Каждого ТекСтрока Из СтруктураПараметров.ПоискСоответствий Цикл
	 //
	 //    Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
	 //   	 Продолжить;
	 //    КонецЕсли;
	 //    
	 //    ПараметрыОтбора = Новый Структура;
	 //    ПараметрыОтбора.Вставить("КлючСтроки", ТекСтрока.КлючСтроки);
	 //    НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
	 //    
	 //    Если НайденныеСтроки.Количество() > 0 Тогда
	 //   	 Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
	 //   		 СтрокаСинхронизации.Номенклатура               = ТекСтрока.Номенклатура;
	 //   		 СтрокаСинхронизации.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
	 //   	 КонецЦикла;
	 //    КонецЕсли;
	 //    
	 //КонецЦикла;
	 
	 УдалитьИзВременногоХранилища(РезультатЗакрытия.Адрес);
	 
 КонецПроцедуры 
 
 
 //============================================================================
 // НОВАЯ НОМЕНКЛАТУРА
 
 &НаСервере
 Процедура СоздатьНовуюНоменклатуруСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	 
	 ОбработкаОбъект.СоздатьНовуюНоменклатуруСервер();	
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьНовуюНоменклатуру(Команда)
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьНовуюНоменклатуруЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены что хотите Создать новую номенклатуру?'"), РежимДиалогаВопрос.ДаНет);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьНовуюНоменклатуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		 Возврат;
	 КонецЕсли;	
	 
	 СообщениеВЖурналКлиент("СОЗДАТЬ новую номенклатуру - начало");	 
	 СоздатьНовуюНоменклатуруСервер();	 
	 СообщениеВЖурналКлиент("СОЗДАТЬ новую номенклатуру - завершение");
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 
 
 &НаСервере
 Функция ПолучитьКоэффициентУпаковки(ТекУпаковка)
	 
	 Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		 ТекКоэффициент = ?(ТекУпаковка.КоличествоУпаковок>0,ТекУпаковка.КоличествоУпаковок,1);
	 Иначе
		 ТекКоэффициент = 1;
	 КонецЕсли;
	 
	 Возврат ТекКоэффициент;
	 
 КонецФункции
 
 &НаСервере
 Процедура ПроверкаДублейНоменклатурыСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ПроверкаДублейНоменклатурыСервер();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаПроверкаДублей(Команда)
	 
	 ПроверкаДублейНоменклатурыСервер();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура УстановитьЦеновыеГруппыСервер()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НачатьТранзакцию();
	 КоличествоОбработанных = 0;
	 
	 ПустаяЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
	 
	 Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл
		 
		 Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Строка.ЭтоГруппа Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоличествоОбработанных = КоличествоОбработанных + 1;
		 
		 НоваяЦеноваяГруппа = ПустаяЦеноваяГруппа;
		 Для Каждого Диапазон Из УстановкаЦеновыхГрупп Цикл
			 Если Строка.НомерСтроки > Диапазон.СоСтроки И Строка.НомерСтроки <= Диапазон.ПоСтроку Тогда
				 НоваяЦеноваяГруппа = Диапазон.ЦеноваяГруппа;					
			 КонецЕсли;
			 
			 Если Строка.Поле_ЦенаЗакупки > Диапазон.НижняяГраница И Строка.Поле_ЦенаЗакупки <= Диапазон.ВерхняяГраница Тогда
				 НоваяЦеноваяГруппа = Диапазон.ЦеноваяГруппа;					
			 КонецЕсли;
		 КонецЦикла;
		 
		 СтрокаНоменклатураЦеноваяГруппа = Строка.Номенклатура.ЦеноваяГруппа;
		 Если НоваяЦеноваяГруппа = СтрокаНоменклатураЦеноваяГруппа Тогда
			 Продолжить;
		 КонецЕсли;	
		 
		 ТекОбъект = Строка.Номенклатура.ПолучитьОбъект();
		 Если ТекОбъект.ЭтоГруппа Тогда
			 Продолжить;
		 КонецЕсли;
		 ИзменениеПроизошло = Ложь;
		 
		 ТекОбъект.ЦеноваяГруппа = НоваяЦеноваяГруппа;
		 ИзменениеПроизошло = Истина;
		 
		 Если ИзменениеПроизошло Тогда
			 ТекОбъект.ОбменДанными.Загрузка = Истина;
			 ТекОбъект.Записать();
		 КонецЕсли;	
		 
		 Если КоличествоОбработанных = 100 Тогда
			 // промежуточную транзакцию закрываем и открываем новую
			 ЗафиксироватьТранзакцию();
			 НачатьТранзакцию();
			 КоличествоОбработанных = 0;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 ЗафиксироватьТранзакцию();	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановитьЦеновыеГруппы(Команда)
	 
	 Если УстановкаЦеновыхГрупп.Количество() = 0 Тогда
		 Сообщить("Не установлены правила");
		 Возврат;
	 КонецЕсли;	
	 
	 СообщениеВЖурналКлиент("Установить ценовые группы - начало");
	 
	 УстановитьЦеновыеГруппыСервер();
	 
	 СообщениеВЖурналКлиент("Установить ценовые группы - завершение");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НоваяНоменклатураУстановитьВидНоменклатуры(Команда)
	 
	 Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		 Для Каждого СтрУстГр Из УстановкаВидовНоменклатуры Цикл
			 Если СтрУстГр.СоСтроки = 0 ИЛИ СтрУстГр.ПоСтроку = 0 Тогда
				 Продолжить;
			 КОнецЕсли;
			 
			 Если Стр.НомерСтроки >= СтрУстГр.СоСтроки И Стр.НомерСтроки <= СтрУстГр.ПоСтроку Тогда
				 Стр.ВидНоменклатурыСсылка = СтрУстГр.ВидНоменклатуры;						
			 КонецЕсли;
		 КонецЦикла;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 //============================================================================
 // СТРАНИЦА УПРАВЛЕНИЕ ИЕРАРХИЕЙ
 
 &НаКлиенте
 Процедура ИерархияУстановитьГруппуПоВыделеннымСтрокам(Команда)
	 
	 Для Каждого Строка Из Элементы.ТабличнаяЧастьНовые.ВыделенныеСтроки Цикл		
		 НомерСтроки = Элементы.ТабличнаяЧастьНовые.ДанныеСтроки(Строка).НомерСтроки;
		 
		 СтрокаСоотв = Объект.ТабличнаяЧасть[НомерСтроки-1];
		 СтрокаСоотв.ГруппаСправочника = Объект.ГруппаНоменклатурыПоУмолчанию;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ИерархияУстановитьНаВсеСтроки(Команда)
	 
	 Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		 Стр.ГруппаСправочника = Объект.ГруппаНоменклатурыПоУмолчанию;						
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ИерархияПроставитьГруппыПоДиапазонам(Команда)
	 
	 Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		 Для Каждого СтрУстГр Из УстановкаГруппПоСтрокам Цикл
			 Если СтрУстГр.СоСтроки = 0 ИЛИ СтрУстГр.ПоСтроку = 0 Тогда
				 Продолжить;
			 КОнецЕсли;
			 
			 Если Стр.НомерСтроки >= СтрУстГр.СоСтроки И Стр.НомерСтроки <= СтрУстГр.ПоСтроку Тогда
				 Стр.ГруппаСправочника = СтрУстГр.Группа;						
			 КонецЕсли;
		 КонецЦикла;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ЗаписатьИзмененияИерархииСервер()
	 
	 НачатьТранзакцию();
	 КоличествоОбработанных = 0;
	 
	 Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл	 
		 Если НЕ Строка.Пометка Тогда
			 Продолжить;
		 КонецЕсли;
		 Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 ИзменениеПроизошло = Ложь;
		 
		 Если ЗначениеЗаполнено(Строка.ГруппаСправочника) Тогда
			 Если Строка.Номенклатура.Родитель <> Строка.ГруппаСправочника Тогда
				 ТекОбъект = Строка.Номенклатура.ПолучитьОбъект();
				 ТекОбъект.Родитель = Строка.ГруппаСправочника;
				 
				 ИзменениеПроизошло = Истина;
				 КоличествоОбработанных = КоличествоОбработанных + 1;	
			 КонецЕсли;	
		 КонецЕсли;	
		 
		 Если ИзменениеПроизошло Тогда
			 ТекОбъект.ОбменДанными.Загрузка = Истина;
			 ТекОбъект.Записать();
		 КонецЕсли;	
		 
		 Если КоличествоОбработанных = 200 Тогда
			 // промежуточную транзакцию закрываем и открываем новую
			 ЗафиксироватьТранзакцию();
			 НачатьТранзакцию();
			 КоличествоОбработанных = 0;
		 КонецЕсли;		 
	 КонецЦикла;
	 
	 ЗафиксироватьТранзакцию();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЗаписатьИзмененияИерархии(Команда)
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьИзмененияИерархииЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены ?'"), РежимДиалогаВопрос.ДаНет);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЗаписатьИзмененияИерархииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		 Возврат;
	 КонецЕсли;	
	 
	 СообщениеВЖурналКлиент("Обработка начата "+ТекущаяДата());
	 
	 ЗаписатьИзмененияИерархииСервер();
	 
	 СообщениеВЖурналКлиент("Обработка завершена "+ТекущаяДата());
	 
 КонецПроцедуры
 
 
 //============================================================================
 // ЗАГРУЗКА ХАРАКТЕРИСТИК
 
 &НаСервере
 Функция НаименованиеПоФормуле(ДанныеДляФормированияНаименования, ВидНоменклатуры, ЗначениеНаименования = "") Экспорт
	 
	 Наименование = "";
	 Если ЗначениеЗаполнено(ДанныеДляФормированияНаименования.ФормулаНаименования) Тогда
		 
		 МассивЗначенийРеквизитов = ДанныеДляФормированияНаименования.МассивЗначенийРеквизитов;
		 
		 Для Каждого Индекс из ДанныеДляФормированияНаименования.ИндексыНаименованияВМассивеЗначенийРеквизитов Цикл
			 МассивЗначенийРеквизитов[Индекс] = ЗначениеНаименования;
		 КонецЦикла;
		 
		 Попытка
			 
			 Выполнить("Наименование = """" + " + ДанныеДляФормированияНаименования.ФормулаНаименования);
			 
		 Исключение
			 
			 ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			 
			 СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			 ВызватьИсключение СообщениеОбОшибке;
			 
		 КонецПопытки;
		 
	 КонецЕсли;
	 
	 Возврат Наименование;
	 
 КонецФункции
 
 
 &НаСервере
 Процедура ЗаполнитьНаименованиеПоШаблонуКлиент(ВариантФормирования,ВидНоменклатуры,НоваяХарактеристика)
	 
	 ХарактеристикаОбъект = НоваяХарактеристика.ПолучитьОбъект();
	 
	 ФормулыНаименования = ФормулыНаименования(ВидНоменклатуры,ХарактеристикаОбъект);
	 
	 Если ВариантФормирования = "Рабочее" Тогда
		 ХарактеристикаОбъект.Наименование = НаименованиеПоФормуле(
		 ФормулыНаименования.ФормулаРабочегоНаименования,
		 ВидНоменклатуры);
	 ИначеЕсли ВариантФормирования = "ДляПечати" Тогда 
		 ХарактеристикаОбъект.НаименованиеПолное = НаименованиеПоФормуле(
		 ФормулыНаименования.ФормулаНаименованияДляПечати,
		 ВидНоменклатуры,
		 ХарактеристикаОбъект.Наименование);
	 ИначеЕсли ВариантФормирования = "Оба" Тогда
		 ХарактеристикаОбъект.Наименование = НаименованиеПоФормуле(
		 ФормулыНаименования.ФормулаРабочегоНаименования,
		 ВидНоменклатуры);
		 ХарактеристикаОбъект.НаименованиеПолное = НаименованиеПоФормуле(
		 ФормулыНаименования.ФормулаНаименованияДляПечати,
		 ВидНоменклатуры,
		 ХарактеристикаОбъект.Наименование);
	 КонецЕсли;
	 
	 ХарактеристикаОбъект.ОбменДанными.Загрузка = Истина;
	 ХарактеристикаОбъект.Записать();
	 
 КонецПроцедуры
 
 &НаСервере
 Функция ФормулыНаименования(ВидНоменклатуры,ХарактеристикаОбъект)
	 
	 ШаблонРабочегоНаименования = ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
	 ШаблонНаименованияДляПечати = ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики;
	 
	 
	 Результат = Новый Структура;
	 Результат.Вставить("ФормулаРабочегоНаименования", НоменклатураСервер.ФормулаНаименования(ШаблонРабочегоНаименования, ХарактеристикаОбъект)); 
	 Результат.Вставить("ФормулаНаименованияДляПечати", НоменклатураСервер.ФормулаНаименования(ШаблонНаименованияДляПечати, ХарактеристикаОбъект));
	 //В старых релизах Справочники.ВидыНоменклатуры.НаименованиеПоШаблону
	 
	 Возврат Результат; 
	 
 КонецФункции
 
 &НаСервере
 Процедура СформироватьНаименованиеХарактеристики(ВидНоменклатуры,ХарактеристикаОбъект)
	 
	 ФормироватьРабочееНаименование = Ложь;
	 ФормироватьНаименованиеДляПечати = Ложь;
	 
	 ШаблонРабочегоНаименования = ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
	 ШаблонНаименованияДляПечати = ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики;
	 ЗапретРедактированияНаименованияДляПечати = ВидНоменклатуры.ЗапретРедактированияНаименованияДляПечатиХарактеристики;
	 ЗапретРедактированияРабочегоНаименования = ВидНоменклатуры.ЗапретРедактированияРабочегоНаименованияХарактеристики;
	 
	 Если (Не ЗначениеЗаполнено(ХарактеристикаОбъект.Наименование)
		 И ЗначениеЗаполнено(ШаблонРабочегоНаименования))
		 Или ЗапретРедактированияРабочегоНаименования Тогда
		 
		 ФормироватьРабочееНаименование = Истина;
		 
	 КонецЕсли;
	 
	 Если (Не ЗначениеЗаполнено(ХарактеристикаОбъект.НаименованиеПолное)
		 И ЗначениеЗаполнено(ШаблонНаименованияДляПечати))
		 Или ЗапретРедактированияНаименованияДляПечати Тогда
		 
		 ФормироватьНаименованиеДляПечати = Истина;
		 
	 КонецЕсли;
	 
	 Если ФормироватьРабочееНаименование
		 И ФормироватьНаименованиеДляПечати Тогда
		 
		 ЗаполнитьНаименованиеПоШаблонуКлиент("Оба",ВидНоменклатуры,ХарактеристикаОбъект);
		 
	 ИначеЕсли ФормироватьРабочееНаименование Тогда
		 
		 ЗаполнитьНаименованиеПоШаблонуКлиент("Рабочее",ВидНоменклатуры,ХарактеристикаОбъект);
		 
	 ИначеЕсли ФормироватьНаименованиеДляПечати Тогда
		 
		 ЗаполнитьНаименованиеПоШаблонуКлиент("ДляПечати",ВидНоменклатуры,ХарактеристикаОбъект);
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 
 &НаСервере
 Функция ЗаполнитьПоШаблонуСервер(ШаблонДляПечати = Истина,ВидНоменклатуры,ХарактеристикаОбъект)
	 
	 Шаблон = "";
	 Результат = "не указан шаблон";
	 
	 Если ШаблонДляПечати Тогда
		 Шаблон = ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики;
	 Иначе
		 Шаблон = ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(Шаблон) Тогда
		 Результат = Справочники.ВидыНоменклатуры.НаименованиеПоШаблону(Шаблон, ХарактеристикаОбъект);
	 Иначе
		 Сообщить("Внимание не указан ШАБЛОН формирования наименования характеристики!");
	 КОнецЕсли;
	 
	 Возврат Результат;
	 
 КонецФункции
 
 
 &НаСервере
 Процедура ЗаполнитьТаблицуЗагрузкиХарактеристик()
	 
	 
	 СвойстваХарактеристик  = Объект.СвойстваХарактеристик.Выгрузить();
	 ТаблицаНоменклатуры = Объект.ТабличнаяЧасть.Выгрузить();
	 
	 ТектЗапроса = 
	 "ВЫБРАТЬ
	 |	СвойстваХарактеристик.КлючСтроки КАК КлючСтроки,
	 |	СвойстваХарактеристик.Поле_Штрихкод КАК Поле_Штрихкод,
	 |	СвойстваХарактеристик.Поле_Характеристика КАК Поле_Характеристика,
	 |	СвойстваХарактеристик.Номенклатура КАК Номенклатура,
	 |	СвойстваХарактеристик.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	СвойстваХарактеристик.ВидНоменклатуры КАК ВидНоменклатуры,
	 |	СвойстваХарактеристик.НаборСвойств КАК НаборСвойств,
	 |	СвойстваХарактеристик.Свойство КАК Свойство,
	 |	СвойстваХарактеристик.Значение КАК Значение,
	 |	СвойстваХарактеристик.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	 |	СвойстваХарактеристик.Индивидуальные КАК Индивидуальные,
	 |	СвойстваХарактеристик.ЗначениеСвойства КАК ЗначениеСвойства
	 |ПОМЕСТИТЬ ВременнаяСвойстваНоменклатуры
	 |ИЗ
	 |	&СвойстваХарактеристик КАК СвойстваХарактеристик
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	КлючСтроки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТаблицаНоменклатуры.КлючСтроки КАК КлючСтроки,
	 |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	 |	ТаблицаНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ТаблицаНоменклатуры.Поле_Характеристика КАК Поле_Характеристика,
	 |	ТаблицаНоменклатуры.Поле_Идентификатор КАК Поле_Идентификатор
	 |ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	 |ИЗ
	 |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	КлючСтроки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВременнаяСвойстваНоменклатуры.КлючСтроки КАК КлючСтроки,
	 |	ВременнаяСвойстваНоменклатуры.Поле_Штрихкод КАК Поле_Штрихкод,
	 |	ВременнаяСвойстваНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	 |	ВременнаяСвойстваНоменклатуры.НаборСвойств КАК НаборСвойств,
	 |	ВременнаяСвойстваНоменклатуры.Свойство КАК Свойство,
	 |	ВременнаяСвойстваНоменклатуры.Значение КАК Значение,
	 |	ВременнаяСвойстваНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	 |	ВременнаяСвойстваНоменклатуры.Индивидуальные КАК Индивидуальные,
	 |	ВременнаяТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	 |	ВременнаяТаблицаНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ВременнаяТаблицаНоменклатуры.Поле_Характеристика КАК Поле_Характеристика,
	 |	ВременнаяТаблицаНоменклатуры.Поле_Идентификатор КАК Поле_Идентификатор,
	 |	ЗначенияСвойствОбъектов.Ссылка КАК ЗначениеСвойства
	 |ИЗ
	 |	ВременнаяСвойстваНоменклатуры КАК ВременнаяСвойстваНоменклатуры
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНоменклатуры КАК ВременнаяТаблицаНоменклатуры
	 |		ПО ВременнаяСвойстваНоменклатуры.КлючСтроки = ВременнаяТаблицаНоменклатуры.КлючСтроки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |		ПО ВременнаяСвойстваНоменклатуры.Свойство = ЗначенияСвойствОбъектов.Владелец
	 |			И ВременнаяСвойстваНоменклатуры.Значение = ЗначенияСвойствОбъектов.Наименование";
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТектЗапроса;
	 Запрос.УстановитьПараметр("СвойстваХарактеристик", СвойстваХарактеристик);
	 Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Объект.СвойстваХарактеристик.Загрузить(РезультатЗапроса.Выгрузить()); 
	 
	 //Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл		
	 //    Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
	 //   	 Продолжить;
	 //    КонецЕсли;
	 //    
	 //    Если ПустаяСтрока(Строка.Поле_Наименование) Тогда
	 //   	 Продолжить;
	 //    КонецЕсли;
	 //    
	 //    Отбор = Новый Структура();
	 //    Отбор.Вставить("КлючСтроки",Строка.КлючСтроки);
	 //    НайтиСтроки = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
	 //    Для Каждого Выборка Из НайтиСтроки Цикл
	 //   	 Выборка.Поле_ШтрихКод = Строка.Поле_ШтрихКод;
	 //   	 Выборка.Номенклатура  = Строка.Номенклатура;
	 //   	 Выборка.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	 //   	 
	 //   	 Если НЕ ЗначениеЗаполнено(Выборка.ВидНоменклатуры) Тогда
	 //   		 Выборка.ВидНоменклатуры = Строка.Номенклатура.ВидНоменклатуры;
	 //   	 КонецЕсли;
	 //    КонецЦикла;
	 //КонецЦикла;	
	 
 КОнецПроцедуры
 
 &НаСервере
 Процедура ПроверитьХарактеристикиСервер()
	 
	 //СИНХРОНИЗАЦИЯ ХАРАКТЕРИСТИК	
	 ТаблицаТоваров = Объект.СвойстваХарактеристик.Выгрузить();
	 ТаблицаТоваров.Свернуть("Номенклатура,КлючСтроки");
	 
	 Для Каждого ВремТовар Из ТаблицаТоваров Цикл
		 Отбор = Новый Структура();
		 Отбор.Вставить("КлючСтроки",ВремТовар.КлючСтроки);
		 Отбор.Вставить("Номенклатура",ВремТовар.Номенклатура);
		 
		 ПолучитьХарактеристики = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		 КоличествоСвойств = ПолучитьХарактеристики.Количество();
		 
		 Если ПолучитьХарактеристики.Количество() > 0 Тогда
			 ПрерватьПоискПоЭтойПозиции = Ложь;
			 
			 Запрос = Новый Запрос();
			 Запрос.Текст = 
			 "ВЫБРАТЬ ПЕРВЫЕ 1
			 |	ЗначенияСвойствОбъектов.Ссылка.Владелец КАК Номенклатура,
			 |	ЗначенияСвойствОбъектов.Ссылка КАК Характеристика
			 |ИЗ
			 |	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствОбъектов
			 |ГДЕ
			 |	ЗначенияСвойствОбъектов.Ссылка.Владелец = &Номенклатура";
			 Запрос.УстановитьПараметр("Номенклатура", ВремТовар.Номенклатура);
			 
			 МассивСвойств = Новый Массив();
			 МассивЗначенийСвойств = Новый Массив();
			 
			 НомСвойства = 0;
			 Для Каждого ВыборкаСтрока Из ПолучитьХарактеристики  Цикл
				 Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.Значение) Тогда
					 Продолжить;
				 КонецЕсли;
				 
				 НомСвойства = НомСвойства+1;
				 
				 СвойствоХарактеристики = ВыборкаСтрока.Свойство;
				 ЗначениеСвойства = СокрЛП(ВыборкаСтрока.Значение);
				 
				 Если СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
					 УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ЗначениеСвойства,Истина,,СвойствоХарактеристики);
					 
					 Если УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
						 ПрерватьПоискПоЭтойПозиции = Истина;
						 Продолжить;
					 КонецЕсли;
				 ИначеЕсли СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
					 ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства," ","");
					 Если Найти(ЗначениеСвойства,".") > 0 И Найти(ЗначениеСвойства,",") > 0 Тогда
						 ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства,",","");
					 КонецЕсли;
					 
					 УстановитьСвойство = Число(ЗначениеСвойства);
				 Иначе
					 УстановитьСвойство = ЗначениеСвойства;
				 КонецЕсли;
				 
				 Если СвойствоХарактеристики.ЭтоДополнительноеСведение Тогда
					 ЭтоДополнительноеСведение = Истина;
				 Иначе
					 ЭтоДополнительноеСведение = Ложь;
				 КонецЕсли;
				 
				 //Сообщить(""+СвойствоХарактеристики+"  "+УстановитьСвойство);
				 
				 МассивСвойств.Добавить(СвойствоХарактеристики);
				 МассивЗначенийСвойств.Добавить(УстановитьСвойство);
				 
				 //Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Свойство = &СвойствоХарактеристики"+Строка(НомСвойства);
				 //Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Значение = &УстановитьСвойство"+Строка(НомСвойства);
				 //
				 //Запрос.УстановитьПараметр("СвойствоХарактеристики"+Строка(НомСвойства), СвойствоХарактеристики);	
				 //Запрос.УстановитьПараметр("УстановитьСвойство"+Строка(НомСвойства), УстановитьСвойство);
			 КонецЦикла;
			 
			 Если ПрерватьПоискПоЭтойПозиции Тогда
				 Продолжить;
			 КонецЕсли;
			 
			 Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Свойство В (&МассивСвойств)";
			 Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Значение В (&МассивЗначенийСвойств)";
			 
			 Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);	
			 Запрос.УстановитьПараметр("МассивЗначенийСвойств", МассивЗначенийСвойств);
			 
			 РезультатЗапроса = Запрос.Выполнить();
			 
			 Если НЕ РезультатЗапроса.Пустой() Тогда
				 Выборка = РезультатЗапроса.Выбрать();
				 Пока Выборка.Следующий() Цикл	
					 
					 ПараметрыОтбора = Новый Структура;
					 ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
					 НайденныеСтроки = Объект.СвойстваХарактеристик.НайтиСтроки(ПараметрыОтбора); 
					 
					 Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
						 СтрокаСинхронизации.ХарактеристикаНоменклатуры = Выборка.Характеристика;
					 КонецЦикла;
				 КонецЦикла;
			 КонецЕсли;
			 
		 КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СинхронизироватьТаблицыХарактеристикИНоменклатуры(Команда)
	 
	 ЗаполнитьТаблицуЗагрузкиХарактеристик();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПроверитьХарактеристики(Команда)
	 
	 ПроверитьХарактеристикиСервер();
	 
 КонецПроцедуры
 
 
 
 &НаСервере
 Процедура ВыполнитьЗагрузитьХарактеристикиНаСервере()
	 
	 ТаблицаТоваров = Объект.СвойстваХарактеристик.Выгрузить();
	 ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ВидНоменклатуры,КлючСтроки");
	 
	 //НачатьТранзакцию();
	 КоличествоОбработанных = 0; 
	 
	 Для Каждого ВремТовар Из ТаблицаТоваров Цикл
		 Если НЕ ЗначениеЗаполнено(ВремТовар.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(ВремТовар.ХарактеристикаНоменклатуры) Тогда
			 Продолжить;
		 КонецЕсли;	
		 
		 
		 КоличествоОбработанных = КоличествоОбработанных + 1;
		 
		 Отбор = Новый Структура();
		 Отбор.Вставить("КлючСтроки",ВремТовар.КлючСтроки);
		 Отбор.Вставить("Номенклатура",ВремТовар.Номенклатура);
		 //Сообщить("Обработка строки  "+ВремТовар.КлючСтроки);
		 
		 ПолучитьХарактеристики = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		 КоличествоСвойств = ПолучитьХарактеристики.Количество();
		 
		 Если ПолучитьХарактеристики.Количество() > 0 Тогда
			 НоменклатураВыборка           = ВремТовар.Номенклатура; 
			 ВладелецХарактеристики        = ВремТовар.Номенклатура;	
			 Индивидуальные                = Ложь;
			 ЭтоХарактеристикаСоСвойствами = Ложь;
			 ЭтоНоваяХарактеристика        = Истина;
			 
			 НазваниеХарактеристики = "";
			 
			 Для Каждого СтрокаВыборка Из ПолучитьХарактеристики  Цикл
				 ВидНоменклатуры        = СтрокаВыборка.ВидНоменклатуры;
				 Индивидуальные         = СтрокаВыборка.Индивидуальные;
				 НаборСвойств           = СтрокаВыборка.НаборСвойств;
				 СвойствоХарактеристики = СтрокаВыборка.Свойство;
				 ЗначЗначениеСвойства   = СокрЛП(СтрокаВыборка.Значение);
				 
				 Если НЕ ЗначениеЗаполнено(ЗначЗначениеСвойства) Тогда
					 Продолжить;
				 КонецЕсли;
				 
				 Если Индивидуальные = Ложь Тогда
					 ВладелецХарактеристики = ВидНоменклатуры;
				 Иначе
					 ВладелецХарактеристики = НоменклатураВыборка;					
				 КонецЕсли;
				 
				 Если ЗначениеЗаполнено(СвойствоХарактеристики) Тогда
					 ЭтоХарактеристикаСоСвойствами = Истина;
				 Иначе
					 ЭтоХарактеристикаСоСвойствами = Ложь;
				 Конецесли;
				 
				 НазваниеХарактеристики = СтрокаВыборка.Поле_Характеристика;
			 КонецЦикла;
			 
			 //Если ЗначениеЗаполнено(НазваниеХарактеристики) Тогда
			 //    НайдемХарактеристику = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НазваниеХарактеристики,Истина,,ВремТовар.Номенклатура);
			 //    Если НЕ НайдемХарактеристику = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			 //   	 ПараметрыОтбора = Новый Структура;
			 //   	 ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
			 //   	 НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
			 //   	 
			 //   	 Если НайденныеСтроки.Количество() > 0 Тогда
			 //   		 Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
			 //   			 СтрокаСинхронизации.ХарактеристикаНоменклатуры = НайдемХарактеристику;	
			 //   		 КонецЦикла;
			 //   	 КонецЕсли;
			 //   	 
			 //   	 Продолжить;				
			 //    КонецЕсли;
			 //КонецЕсли;
			 
			 НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			 Попытка
				 НоваяХарактеристика.мегапрайсДатаРегистрации = ТекущаяДата();
			 Исключение
			 КонецПопытки;
			 НоваяХарактеристика.Владелец = ВремТовар.Номенклатура;
			 //НоваяХарактеристика.Наименование = "новая";
			 
			 НазваниеХарактеристики = "";
			 КолСчетчик = 0;
			 Для Каждого ВыборкаСтрока Из ПолучитьХарактеристики  Цикл
				 Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.Значение) Тогда
					 Продолжить;
				 КонецЕсли;
				 
				 КолСчетчик = КолСчетчик+1;
				 
				 СвойствоХарактеристики = ВыборкаСтрока.Свойство;
				 ЗначениеСвойства = СокрЛП(ВыборкаСтрока.Значение);
				 
				 Если СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
					 УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ЗначениеСвойства,Истина,,СвойствоХарактеристики);
					 Если УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
						 НовоеСвойство = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						 НовоеСвойство.Владелец     = СвойствоХарактеристики;
						 НовоеСвойство.Наименование = СокрЛП(ЗначениеСвойства);
						 НовоеСвойство.Записать();
						 
						 УстановитьСвойство = НовоеСвойство.Ссылка;
					 КонецЕсли;
				 ИначеЕсли СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
					 
					 ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства," ","");
					 Если Найти(ЗначениеСвойства,".") > 0 И Найти(ЗначениеСвойства,",") > 0 Тогда
						 ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства,",","");
					 КонецЕсли;
					 
					 УстановитьСвойство = Число(ЗначениеСвойства);
				 Иначе
					 УстановитьСвойство = ЗначениеСвойства;
				 КонецЕсли;
				 
				 ДопРеквизиты = НоваяХарактеристика.ДополнительныеРеквизиты;
				 Строка = ДопРеквизиты.Найти(СвойствоХарактеристики,"Свойство");
				 Если Строка = Неопределено Тогда
					 Строка = ДопРеквизиты.Добавить();
					 Строка.Свойство = СвойствоХарактеристики;
					 Строка.Значение = УстановитьСвойство;
				 Иначе
					 Строка.Свойство = СвойствоХарактеристики;
					 Строка.Значение = УстановитьСвойство;
				 КонецЕсли;
				 
				 НазваниеХарактеристики = НазваниеХарактеристики + УстановитьСвойство + ?(КолСчетчик < КоличествоСвойств,", "," ");
			 КонецЦикла;
			 
			 Попытка //ОСОБЕННАЯ СИТУАЦИЯ (временно так)
				 НоваяХарактеристика.Артикул = ВыборкаСтрока.Поле_Идентификатор;
			 Исключение
			 КонецПопытки;
			 
			 Если ЭтоНоваяХарактеристика Тогда
				 ШаблонРабочегоНаименованияХарактеристики = ВремТовар.ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
				 Если ЗначениеЗаполнено(ШаблонРабочегоНаименованияХарактеристики) Тогда
					 НоваяХарактеристика.Записать();
					 СформироватьНаименованиеХарактеристики(ВремТовар.ВидНоменклатуры,НоваяХарактеристика.Ссылка);
				 Иначе
					 НоваяХарактеристика.Наименование = ?(ЗначениеЗаполнено(СтрокаВыборка.Поле_Характеристика),СтрокаВыборка.Поле_Характеристика,НазваниеХарактеристики); 
					 НоваяХарактеристика.Записать();	
				 КонецЕсли;
			 КонецЕсли;
			 
			 ВремТовар.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
			 
			 ПараметрыОтбора = Новый Структура;
			 ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
			 НайденныеСтроки = Объект.СвойстваХарактеристик.НайтиСтроки(ПараметрыОтбора); 
			 
			 Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
				 СтрокаСинхронизации.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
			 КонецЦикла;
			 
			 ПараметрыОтбора = Новый Структура;
			 ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
			 НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
			 
			 Если НайденныеСтроки.Количество() > 0 Тогда
				 Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
					 СтрокаСинхронизации.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;	
				 КонецЦикла;
			 КонецЕсли;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 //ЗафиксироватьТранзакцию();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ВыполнитьЗагрузитьХарактеристики(Команда)
	 
	 ВыполнитьЗагрузитьХарактеристикиНаСервере();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ХарактеристикиНоменклатурыИзменитьНаСервере()
	 
	 ТаблицаТоваров = Объект.СвойстваХарактеристик.Выгрузить();
	 ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ВидНоменклатуры,КлючСтроки");
	 
	 Для Каждого ВремТовар Из ТаблицаТоваров Цикл
		 Если НЕ ЗначениеЗаполнено(ВремТовар.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если НЕ ЗначениеЗаполнено(ВремТовар.ХарактеристикаНоменклатуры) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Отбор = Новый Структура();
		 Отбор.Вставить("КлючСтроки",ВремТовар.КлючСтроки);
		 Отбор.Вставить("Номенклатура",ВремТовар.Номенклатура);
		 
		 ПолучитьХарактеристики = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		 КоличествоСвойств = ПолучитьХарактеристики.Количество();
		 
		 Если ПолучитьХарактеристики.Количество() > 0 Тогда	
			 
			 ОбъектХарактеристика = ВремТовар.ХарактеристикаНоменклатуры.ПолучитьОбъект();
			 
			 Для Каждого ВыборкаСтрока Из ПолучитьХарактеристики  Цикл
				 Если НЕ ЗначениеЗаполнено(ВыборкаСтрока.Значение) Тогда
					 Продолжить;
				 КонецЕсли;
				 
				 СвойствоХарактеристики = ВыборкаСтрока.Свойство;
				 ЗначениеСвойства = СокрЛП(ВыборкаСтрока.Значение);
				 
				 Если СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
					 УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ЗначениеСвойства,Истина,,СвойствоХарактеристики);
					 Если УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
						 НовоеСвойство = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						 НовоеСвойство.Владелец     = СвойствоХарактеристики;
						 НовоеСвойство.Наименование = СокрЛП(ЗначениеСвойства);
						 НовоеСвойство.Записать();
						 
						 УстановитьСвойство = НовоеСвойство.Ссылка;
					 КонецЕсли;
				 ИначеЕсли СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
					 
					 ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства," ","");
					 Если Найти(ЗначениеСвойства,".") > 0 И Найти(ЗначениеСвойства,",") > 0 Тогда
						 ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства,",","");
					 КонецЕсли;
					 
					 УстановитьСвойство = Число(ЗначениеСвойства);
				 Иначе
					 УстановитьСвойство = ЗначениеСвойства;
				 КонецЕсли;
				 
				 ДопРеквизиты = ОбъектХарактеристика.ДополнительныеРеквизиты;
				 Строка = ДопРеквизиты.Найти(СвойствоХарактеристики,"Свойство");
				 Если Строка = Неопределено Тогда
					 Строка = ОбъектХарактеристика.ДополнительныеРеквизиты.Добавить();
					 Строка.Свойство = СвойствоХарактеристики;
					 Строка.Значение = УстановитьСвойство;
				 Иначе
					 Строка.Свойство = СвойствоХарактеристики;
					 Строка.Значение = УстановитьСвойство;
				 КонецЕсли; 
			 КонецЦикла;	
			 ОбъектХарактеристика.Записать(); 
			 
		 КонецЕсли;		
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ХарактеристикиНоменклатурыИзменить(Команда)
	 
	 ХарактеристикиНоменклатурыИзменитьНаСервере();
	 
 КонецПроцедуры
 
 
 //============================================================================
 // ЗАГРУЗКА ДОПОЛНИТЕЛЬНЫХ РЕКВИЗИТОВ
 
 &НаСервере
 Процедура СинхронизироватьТаблицыСвойствИНоменклатурыСервер()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.СинхронизироватьТаблицуСвойствСНоменклатурой();
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СинхронизироватьТаблицыСвойствИНоменклатуры(Команда)
	 
	 СинхронизироватьТаблицыСвойствИНоменклатурыСервер();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура ВыполнитьЗаписатьДопРеквизитыНаСервере() Экспорт
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ВыполнитьЗаписатьДопРеквизитыНаСервере();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Результат_ВыполнитьЗаписатьДопРеквизитыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	 СообщениеВЖурналКлиент("ЗАГРУЗКА СВОЙСТВ - начало"); 
	 ВыполнитьЗаписатьДопРеквизитыНаСервере();
	 СообщениеВЖурналКлиент("ЗАГРУЗКА СВОЙСТВ - завершение - обработано строк - "+Объект.СвойстваНоменклатуры.Количество()); 
	 
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура Результат_ВыполнитьЗаписатьДопРеквизиты(Команда)
	 
	 ПоказатьВопрос(Новый ОписаниеОповещения("Результат_ВыполнитьЗаписатьДопРеквизитыЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены что хотите Создать новую номенклатуру?'"), РежимДиалогаВопрос.ДаНет); 
	 
 КонецПроцедуры
 
 //============================================================================
 // ЗАГРУЗКА ЦЕН НОМЕНКЛАТУРЫ
 
 &НаКлиенте
 Процедура ЗаполнитьТаблицуУстановкаЦенНоменклатуры()
	 
	 Объект.ТоварыУстановкаЦенНоменклатуры.Очистить();
	 
	 Для Каждого Строка из Объект.ТабличнаяЧасть Цикл	 
		 Если НЕ Строка.Пометка Тогда
			 Продолжить;
		 КонецЕсли;	 
		 Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			 Сообщить("В строке "+Строка.НомерСтроки+"  не указана номенклатура. Строка пропущена");
			 Продолжить;
		 КонецЕсли;
		 
		 НоваяСтрока = Объект.ТоварыУстановкаЦенНоменклатуры.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		 //НоваяСтрока.ЦенаЗакупкиПересчетВЕдиницу = НоваяСтрока.Поле_ЦенаЗакупки;
		 //НоваяСтрока.ЦенаПродажиПересчетВЕдиницу = НоваяСтрока.Поле_ЦенаПродажи;
		 //Если ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
		 //	КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(НоваяСтрока.Упаковка);
		 //	НоваяСтрока.ЦенаЗакупкиПересчетВЕдиницу = НоваяСтрока.ЦенаЗакупкиПересчетВЕдиницу / КоэффициентУпаковки;
		 //	НоваяСтрока.ЦенаПродажиПересчетВЕдиницу = НоваяСтрока.ЦенаПродажиПересчетВЕдиницу / КоэффициентУпаковки;
		 //КонецЕсли;
		 
		 НоваяСтрока.Пометка = Истина;
		 НоваяСтрока.ПометкаЦенаПродажи = Истина;
		 НоваяСтрока.ПометкаЦенаПродажи2 = Истина;
		 НоваяСтрока.ПометкаЦенаПродажи3 = Истина;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Результат_ВыполнитьАнализЦенНоменклатуры(Команда)
	 
	 УстановкаЦенНоменклатурыЗаполнитьТекущиеЦены();
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура УстановкаЦенНоменклатурыЗаполнитьТекущиеЦены()
	 
	 ПараметрыОтбора = Новый Структура;
	 ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
	 
	 ТаблицаНоменклатуры  = Объект.ТоварыУстановкаЦенНоменклатуры.Выгрузить();
	 
	 ТектЗапроса = 
	 "ВЫБРАТЬ
	 |	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	 |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	 |	ТаблицаНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	 |ПОМЕСТИТЬ ТаблицаНоменклатуры
	 |ИЗ
	 |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	 |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	 |	ТаблицаНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	СУММА(ТоварыНаСкладах.ВНаличииОстаток) КАК КоличествоОстаток,
	 |	МАКСИМУМ(ЦеныНоменклатурыЗакупки.Цена) КАК ТекущаяЦенаЗакупки,
	 |	МАКСИМУМ(ЦеныНоменклатурыПродажа.Цена) КАК ТекущаяЦенаПродажи,
	 |	МАКСИМУМ(ЦеныНоменклатурыПродажа2.Цена) КАК ТекущаяЦенаПродажи2,
	 |	МАКСИМУМ(ЦеныНоменклатурыПродажа3.Цена) КАК ТекущаяЦенаПродажи3
	 |ИЗ
	 |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, ) КАК ТоварыНаСкладах
	 |		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыНаСкладах.Номенклатура
	 |			И ТаблицаНоменклатуры.ХарактеристикаНоменклатуры = ТоварыНаСкладах.Характеристика
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦенЗакупочная) КАК ЦеныНоменклатурыЗакупки
	 |		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыЗакупки.Номенклатура
	 |			И ТаблицаНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатурыЗакупки.Характеристика
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦенПродажи) КАК ЦеныНоменклатурыПродажа
	 |		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыПродажа.Номенклатура
	 |			И ТаблицаНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатурыПродажа.Характеристика
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦенПродажи2) КАК ЦеныНоменклатурыПродажа2
	 |		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыПродажа2.Номенклатура
	 |			И ТаблицаНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатурыПродажа2.Характеристика
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦенПродажи3) КАК ЦеныНоменклатурыПродажа3
	 |		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыПродажа3.Номенклатура
	 |			И ТаблицаНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатурыПродажа3.Характеристика
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТаблицаНоменклатуры.НомерСтроки,
	 |	ТаблицаНоменклатуры.Номенклатура,
	 |	ТаблицаНоменклатуры.ХарактеристикаНоменклатуры
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	НомерСтроки";	
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТектЗапроса;
	 Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	 Запрос.УстановитьПараметр("ТипЦенЗакупочная", Объект.ВидЦенЗакупочная);
	 Запрос.УстановитьПараметр("ТипЦенПродажи", Объект.ВидЦенПродажи);
	 Запрос.УстановитьПараметр("ТипЦенПродажи2", Объект.ВидЦенПродажи2);
	 Запрос.УстановитьПараметр("ТипЦенПродажи3", Объект.ВидЦенПродажи3);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Выборка = РезультатЗапроса.Выбрать();	
	 Пока Выборка.Следующий() Цикл	
		 Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 ТекущаяСтрока = Объект.ТоварыУстановкаЦенНоменклатуры[Выборка.НомерСтроки-1]; 
		 
		 ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		 
		 Если ТекущаяСтрока.Поле_ЦенаЗакупки > 0 И ТекущаяСтрока.ТекущаяЦенаЗакупки > 0 Тогда
			 ТекущаяСтрока.ОтклонениеЗакупки = (ТекущаяСтрока.Поле_ЦенаЗакупки - ТекущаяСтрока.ТекущаяЦенаЗакупки)*100/ТекущаяСтрока.ТекущаяЦенаЗакупки;
		 КонецЕсли;
		 Если ТекущаяСтрока.Поле_ЦенаПродажи > 0 И ТекущаяСтрока.ТекущаяЦенаПродажи > 0 Тогда
			 ТекущаяСтрока.ОтклонениеПродажи = (ТекущаяСтрока.Поле_ЦенаПродажи - ТекущаяСтрока.ТекущаяЦенаПродажи)*100/ТекущаяСтрока.ТекущаяЦенаПродажи;
		 КонецЕсли;
		 Если ТекущаяСтрока.Поле_ЦенаПродажи2 > 0 И ТекущаяСтрока.ТекущаяЦенаПродажи2 > 0 Тогда
			 ТекущаяСтрока.ОтклонениеПродажи2 = (ТекущаяСтрока.Поле_ЦенаПродажи2 - ТекущаяСтрока.ТекущаяЦенаПродажи2)*100/ТекущаяСтрока.ТекущаяЦенаПродажи2;
		 КонецЕсли;
		 Если ТекущаяСтрока.Поле_ЦенаПродажи3 > 0 И ТекущаяСтрока.ТекущаяЦенаПродажи3 > 0 Тогда
			 ТекущаяСтрока.ОтклонениеПродажи3 = (ТекущаяСтрока.Поле_ЦенаПродажи3 - ТекущаяСтрока.ТекущаяЦенаПродажи3)*100/ТекущаяСтрока.ТекущаяЦенаПродажи3;
		 КонецЕсли;
	 КонецЦикла
	 
	 //Если ЗначениеЗаполнено(Объект.ВидЦенЗакупочная) Тогда
	 //    Запрос = Новый Запрос("ВЫБРАТЬ
	 //    |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	 //    |ИЗ
	 //    |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	 //    |			&Дата,
	 //    |			Номенклатура = &Номенклатура
	 //    |				И Характеристика = &Характеристика
	 //    |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних");
	 //    
	 //    Запрос.УстановитьПараметр("ВидЦены"       , Объект.ВидЦенЗакупочная);
	 //    Запрос.УстановитьПараметр("Дата"          , ТекущаяДата());
	 //    Запрос.УстановитьПараметр("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	 //    Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	 //    
	 //    Выборка = Запрос.Выполнить().Выбрать();
	 //    Если Выборка.Следующий() Тогда
	 //   	 Если ЗначениеЗаполнено(Выборка.Цена) Тогда
	 //   		 ТекущаяСтрока.ТекущаяЦенаЗакупки = Выборка.Цена;
	 //   	 Иначе
	 //   		 ТекущаяСтрока.ТекущаяЦенаЗакупки = 0;
	 //   	 КонецЕсли;  
	 //   	 
	 //   	 Если ТекущаяСтрока.Поле_ЦенаЗакупки > 0 И ТекущаяСтрока.ТекущаяЦенаЗакупки > 0 Тогда
	 //   		 ТекущаяСтрока.ОтклонениеЗакупки = (ТекущаяСтрока.Поле_ЦенаЗакупки - ТекущаяСтрока.ТекущаяЦенаЗакупки)*100/ТекущаяСтрока.ТекущаяЦенаЗакупки;
	 //   	 КонецЕсли;
	 //   	 
	 //    Иначе
	 //   	 ТекущаяСтрока.ТекущаяЦенаЗакупки = 0;
	 //    КонецЕсли;
	 //КонецЕсли;
	 
	 
	 //Если ЗначениеЗаполнено(Объект.ВидЦенПродажи) Тогда
	 //    Запрос = Новый Запрос("ВЫБРАТЬ
	 //    |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	 //    |ИЗ
	 //    |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	 //    |			&Дата,
	 //    |			Номенклатура = &Номенклатура
	 //    |				И Характеристика = &Характеристика
	 //    |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних");
	 //    
	 //    Запрос.УстановитьПараметр("ВидЦены"       , Объект.ВидЦенПродажи);
	 //    Запрос.УстановитьПараметр("Дата"          , ТекущаяДата());
	 //    Запрос.УстановитьПараметр("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	 //    Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	 //    
	 //    Выборка = Запрос.Выполнить().Выбрать();
	 //    Если Выборка.Следующий() Тогда
	 //   	 Если ЗначениеЗаполнено(Выборка.Цена) Тогда
	 //   		 ТекущаяСтрока.ТекущаяЦенаПродажи = Выборка.Цена;
	 //   	 Иначе
	 //   		 ТекущаяСтрока.ТекущаяЦенаПродажи = 0;
	 //   	 КонецЕсли;
	 //    Иначе
	 //   	 ТекущаяСтрока.ТекущаяЦенаПродажи = 0;
	 //    КонецЕсли;
	 //    
	 //    Если ТекущаяСтрока.Поле_ЦенаПродажи > 0 И ТекущаяСтрока.ТекущаяЦенаПродажи > 0 Тогда
	 //   	 ТекущаяСтрока.ОтклонениеПродажи = (ТекущаяСтрока.Поле_ЦенаПродажи - ТекущаяСтрока.ТекущаяЦенаПродажи)*100/ТекущаяСтрока.ТекущаяЦенаПродажи;
	 //    КонецЕсли;
	 //КонецЕсли;
	 //
	 //Если ЗначениеЗаполнено(Объект.ВидЦенПродажи2) Тогда
	 //    Запрос = Новый Запрос("ВЫБРАТЬ
	 //    |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	 //    |ИЗ
	 //    |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	 //    |			&Дата,
	 //    |			Номенклатура = &Номенклатура
	 //    |				И Характеристика = &Характеристика
	 //    |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних");
	 //    
	 //    Запрос.УстановитьПараметр("ВидЦены"       , Объект.ВидЦенПродажи2);
	 //    Запрос.УстановитьПараметр("Дата"          , ТекущаяДата());
	 //    Запрос.УстановитьПараметр("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	 //    Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	 //    
	 //    Выборка = Запрос.Выполнить().Выбрать();
	 //    Если Выборка.Следующий() Тогда
	 //   	 Если ЗначениеЗаполнено(Выборка.Цена) Тогда
	 //   		 ТекущаяСтрока.ТекущаяЦенаПродажи2 = Выборка.Цена;
	 //   	 Иначе
	 //   		 ТекущаяСтрока.ТекущаяЦенаПродажи2 = 0;
	 //   	 КонецЕсли;
	 //    Иначе
	 //   	 ТекущаяСтрока.ТекущаяЦенаПродажи2 = 0;
	 //    КонецЕсли;
	 //КонецЕсли;
	 //
	 //Если ЗначениеЗаполнено(Объект.ВидЦенПродажи3) Тогда
	 //    Запрос = Новый Запрос("ВЫБРАТЬ
	 //    |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	 //    |ИЗ
	 //    |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	 //    |			&Дата,
	 //    |			Номенклатура = &Номенклатура
	 //    |				И Характеристика = &Характеристика
	 //    |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних");
	 //    
	 //    Запрос.УстановитьПараметр("ВидЦены"       , Объект.ВидЦенПродажи3);
	 //    Запрос.УстановитьПараметр("Дата"          , ТекущаяДата());
	 //    Запрос.УстановитьПараметр("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	 //    Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	 //    
	 //    Выборка = Запрос.Выполнить().Выбрать();
	 //    Если Выборка.Следующий() Тогда
	 //   	 Если ЗначениеЗаполнено(Выборка.Цена) Тогда
	 //   		 ТекущаяСтрока.ТекущаяЦенаПродажи3 = Выборка.Цена;
	 //   	 Иначе
	 //   		 ТекущаяСтрока.ТекущаяЦенаПродажи3 = 0;
	 //   	 КонецЕсли;
	 //    Иначе
	 //   	 ТекущаяСтрока.ТекущаяЦенаПродажи3 = 0;
	 //    КонецЕсли;
	 //КонецЕсли;
	 
 КонецПроцедуры
 
 
 
 &НаСервере
 Процедура ВыполнитьУстановкаЦенНоменклатурыДокументСервер(СтруктураПараметров)
	 
	 ВидЦенНоменклатуры = СтруктураПараметров.ВидЦенНоменклатуры;
	 
	 ТекстСОобщения = "Автоматическая установка цен номенклатуры. - "+Объект.ПрайсПартнера+"  идентификатор прайса - "+Объект.ИдентификаторПрайса;
	 
	 НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();	 
	 НовыйДокумент.Дата = ТекущаяДата();
	 
	 //НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(ТекущаяДата(), НовыйДокумент.Ссылка);
	 //НовыйДокумент.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(ТекущаяДата(), НомерВПределахДня);
	 
	 НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	 НовыйДокумент.Комментарий = ТекстСОобщения;
	 НовыйДокумент.Согласован = Истина;
	 НовыйДокумент.Статус     = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	 
	 СтрокаТЧ = НовыйДокумент.ВидыЦен.Добавить();
	 СтрокаТЧ.ВидЦены = ВидЦенНоменклатуры;	
	 
	 ВалютаРезультат = ВидЦенНоменклатуры.ВалютаЦены;
	 СтруктураВалютаРезультат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРезультат, ТекущаяДата()); 
	 
	 Для Каждого Стр Из Объект.ТоварыУстановкаЦенНоменклатуры Цикл		
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли; 
		 
		 Если ВидЦенНоменклатуры = Объект.ВидЦенЗакупочная Тогда
			 Если НЕ Стр.Пометка Тогда
				 Продолжить;
			 КонецЕсли; 
			 СтрПоле_ЦенаУстановки = Стр.Поле_ЦенаЗакупки;
			 
		 ИначеЕсли ВидЦенНоменклатуры = Объект.ВидЦенПродажи Тогда
			 Если НЕ Стр.ПометкаЦенаПродажи Тогда
				 Продолжить;
			 КонецЕсли; 		 
			 СтрПоле_ЦенаУстановки = Стр.Поле_ЦенаПродажи;
			 
		 ИначеЕсли ВидЦенНоменклатуры = Объект.ВидЦенПродажи2 Тогда
			 Если НЕ Стр.ПометкаЦенаПродажи2 Тогда
				 Продолжить;
			 КонецЕсли; 
			 СтрПоле_ЦенаУстановки = Стр.Поле_ЦенаПродажи2;
			 
		 ИначеЕсли ВидЦенНоменклатуры = Объект.ВидЦенПродажи3 Тогда
			 Если НЕ Стр.ПометкаЦенаПродажи3 Тогда
				 Продолжить;
			 КонецЕсли; 
			 СтрПоле_ЦенаУстановки = Стр.Поле_ЦенаПродажи3;
			 
		 КонецЕсли;
		 
		 Если НЕ ЗначениеЗаполнено(СтрПоле_ЦенаУстановки) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если ВидЦенНоменклатуры = Объект.ВидЦенЗакупочная Тогда
			 Поле_ВалютаЦены = ?(ЗначениеЗаполнено(Стр.Поле_ВалютаЦены),Стр.Поле_ВалютаЦены,ВалютаРезультат);
			 
			 Если ЗначениеЗаполнено(Поле_ВалютаЦены) И ВалютаРезультат <> Поле_ВалютаЦены Тогда
				 СтруктураВалютаВходящая = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Поле_ВалютаЦены, ТекущаяДата());
				 СтрПоле_ЦенаУстановки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрПоле_ЦенаУстановки, СтруктураВалютаВходящая, СтруктураВалютаРезультат);
			 КонецЕсли;
		 КонецЕсли;
		 
		 Если Объект.РоботИзменитьЦеныВсехХарактеристик Тогда		 
			 СпрХарактеристики = Справочники.ХарактеристикиНоменклатуры;
			 ИспользованиеХарактеристик = Стр.Номенклатура.ИспользованиеХарактеристик;			 
			 Если ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
				 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				 СтрокаТЧ.ВидЦены          = ВидЦенНоменклатуры;
				 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
				 СтрокаТЧ.Упаковка         = Стр.Упаковка;
				 СтрокаТЧ.Цена             = СтрПоле_ЦенаУстановки;		
				 СтрокаТЧ.ЦенаИзмененаВручную = Истина;
			 Иначе
				 ВыборкаХарактеристик = СпрХарактеристики.Выбрать(,Стр.Номенклатура);
				 Пока ВыборкаХарактеристик.Следующий() Цикл
					 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
					 СтрокаТЧ.ВидЦены          = ВидЦенНоменклатуры;
					 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
					 СтрокаТЧ.Характеристика   = ВыборкаХарактеристик.Ссылка;
					 СтрокаТЧ.Упаковка         = Стр.Упаковка;
					 СтрокаТЧ.Цена             = СтрПоле_ЦенаУстановки;
					 СтрокаТЧ.ЦенаИзмененаВручную = Истина;
				 КонецЦикла;			 
			 КонецЕсли;		 
		 Иначе			 
			 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			 СтрокаТЧ.ВидЦены          = ВидЦенНоменклатуры;
			 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			 СтрокаТЧ.Упаковка         = Стр.Упаковка;
			 СтрокаТЧ.Цена             = СтрПоле_ЦенаУстановки;	
			 СтрокаТЧ.ЦенаИзмененаВручную = Истина;
		 КонецЕсли;		
	 КонецЦикла;
	 
	 Если НовыйДокумент.Товары.Количество() > 0 Тогда
		 НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);	 
		 Попытка 
			 НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			 ТекстСообщения = "УСТАНОВКА ЦЕН - "+НовыйДокумент.Ссылка+" - проведен.";
		 Исключение
			 НовыйДокумент.Записать();
			 ТекстСообщения = "УСТАНОВКА ЦЕН - "+НовыйДокумент.Ссылка+" - НЕ проведен.";
		 КонецПопытки; 
	 Иначе
		 Возврат;
	 КонецЕсли;
	 
	 СообщениеВЖурнал(ТекстСОобщения,,НовыйДокумент.Ссылка);
	 
 КонецПроцедуры
 
 &НаСервере
 Функция ВыполнитьУстановкаЦенНоменклатурыСервер()
	 
	 Если ЗначениеЗаполнено(Объект.ВидЦенЗакупочная) Тогда
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("ВидЦенНоменклатуры",Объект.ВидЦенЗакупочная);
		 ВыполнитьУстановкаЦенНоменклатурыДокументСервер(СтруктураПараметров);	 
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(Объект.ВидЦенПродажи) Тогда
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("ВидЦенНоменклатуры",Объект.ВидЦенПродажи);
		 ВыполнитьУстановкаЦенНоменклатурыДокументСервер(СтруктураПараметров);	 
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(Объект.ВидЦенПродажи2) Тогда
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("ВидЦенНоменклатуры",Объект.ВидЦенПродажи2);
		 ВыполнитьУстановкаЦенНоменклатурыДокументСервер(СтруктураПараметров);	 
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(Объект.ВидЦенПродажи3) Тогда
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("ВидЦенНоменклатуры",Объект.ВидЦенПродажи3);
		 ВыполнитьУстановкаЦенНоменклатурыДокументСервер(СтруктураПараметров);	 
	 КонецЕсли;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура Результат_ДокументУстановкаЦенНоменклатуры(Команда)
	 
	 ВыполнитьУстановкаЦенНоменклатурыСервер();
	 
	 Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ЖурналСообщений;
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыОтметитьСтроки(Команда)
	 
	 Для Каждого Строка из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Строка.Пометка = Истина;
		 Строка.ПометкаЦенаПродажи = Истина;
		 Строка.ПометкаЦенаПродажи2 = Истина;
		 Строка.ПометкаЦенаПродажи3 = Истина;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыСнятьОтметки(Команда)
	 
	 Для Каждого Строка из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Строка.Пометка = Ложь;
		 Строка.ПометкаЦенаПродажи = Ложь;
		 Строка.ПометкаЦенаПродажи2 = Ложь;
		 Строка.ПометкаЦенаПродажи3 = Ложь;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыВыделитьИзменилось(Команда)
	 
	 Для Каждого Стр Из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Если Стр.Поле_ЦенаЗакупки <> Стр.ТекущаяЦенаЗакупки Тогда
			 Стр.Пометка = Истина;
		 Иначе
			 Стр.Пометка = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи <> Стр.ТекущаяЦенаПродажи Тогда
			 Стр.ПометкаЦенаПродажи = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи2 <> Стр.ТекущаяЦенаПродажи2 Тогда
			 Стр.ПометкаЦенаПродажи2 = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи2 = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи3 <> Стр.ТекущаяЦенаПродажи3 Тогда
			 Стр.ПометкаЦенаПродажи3 = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи3 = Ложь;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыВыделитьПодорожало(Команда)
	 
	 Для Каждого Стр Из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Если Стр.Поле_ЦенаЗакупки > Стр.ТекущаяЦенаЗакупки Тогда
			 Стр.Пометка = Истина;
		 Иначе
			 Стр.Пометка = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи > Стр.ТекущаяЦенаПродажи Тогда
			 Стр.ПометкаЦенаПродажи = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи2 > Стр.ТекущаяЦенаПродажи2 Тогда
			 Стр.ПометкаЦенаПродажи2 = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи2 = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи3 > Стр.ТекущаяЦенаПродажи3 Тогда
			 Стр.ПометкаЦенаПродажи3 = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи3 = Ложь;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыВыделитьПодешевело(Команда)
	 
	 Для Каждого Стр Из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Если Стр.Поле_ЦенаЗакупки < Стр.ТекущаяЦенаЗакупки Тогда
			 Стр.Пометка = Истина;
		 Иначе
			 Стр.Пометка = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи < Стр.ТекущаяЦенаПродажи Тогда
			 Стр.ПометкаЦенаПродажи = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи2 < Стр.ТекущаяЦенаПродажи2 Тогда
			 Стр.ПометкаЦенаПродажи2 = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи2 = Ложь;
		 КонецЕсли;
		 
		 Если Стр.Поле_ЦенаПродажи3 < Стр.ТекущаяЦенаПродажи3 Тогда
			 Стр.ПометкаЦенаПродажи3 = Истина;
		 Иначе
			 Стр.ПометкаЦенаПродажи3 = Ложь;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыВыделитьЕстьВНаличии(Команда)
	 
	 Для Каждого Стр Из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Если Стр.КоличествоОстаток > 0 Тогда
			 Стр.Пометка = Истина;
			 Стр.ПометкаЦенаПродажи = Истина;
			 Стр.ПометкаЦенаПродажи2 = Истина;
			 Стр.ПометкаЦенаПродажи3 = Истина;
			 
		 Иначе
			 Стр.Пометка = Ложь;
			 Стр.ПометкаЦенаПродажи = Ложь;
			 Стр.ПометкаЦенаПродажи2 = Ложь;
			 Стр.ПометкаЦенаПродажи3 = Ложь;
		 КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановкаЦенНоменклатурыВыделитьНетВНаличии(Команда)
	 
	 Для Каждого Стр Из Объект.ТоварыУстановкаЦенНоменклатуры Цикл
		 Если Стр.КоличествоОстаток > 0 Тогда
			 Стр.Пометка = Ложь;
			 Стр.ПометкаЦенаПродажи = Ложь;
			 Стр.ПометкаЦенаПродажи2 = Ложь;
			 Стр.ПометкаЦенаПродажи3 = Ложь;
		 Иначе
			 Стр.Пометка = Истина;
			 Стр.ПометкаЦенаПродажи = Истина;
			 Стр.ПометкаЦенаПродажи2 = Истина;
			 Стр.ПометкаЦенаПродажи3 = Истина;
		 КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ТаблицаИмпортаВыделитьВсе(Команда)
	 
	 Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		 Стр.Пометка = Истина;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаИмпортаПометкаВыделенного(Команда)
	 
	 //Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
	 //    Стр.Пометка = Ложь;
	 //КонецЦикла;
	 
	 ВыделенныеСтроки = Элементы.ТабличнаяЧасть.ВыделенныеСтроки;	
	 Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		 НомерСтроки = Элементы.ТабличнаяЧасть.ДанныеСтроки(СтрВыд).НомерСтроки;
		 
		 СтрокаСоотв = Объект.ТабличнаяЧасть[НомерСтроки-1];
		 СтрокаСоотв.Пометка = Истина;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаИмпортаСнятьПометкуВыделенного(Команда)
	 
	 //Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
	 //    Стр.Пометка = Истина;
	 //КонецЦикла;
	 
	 ВыделенныеСтроки = Элементы.ТабличнаяЧасть.ВыделенныеСтроки;	
	 Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		 НомерСтроки = Элементы.ТабличнаяЧасть.ДанныеСтроки(СтрВыд).НомерСтроки;
		 
		 СтрокаСоотв = Объект.ТабличнаяЧасть[НомерСтроки-1];
		 СтрокаСоотв.Пометка = Ложь;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаИмпортаСнятьВсе(Команда)
	 
	 Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		 Стр.Пометка = Ложь;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаЛистовВыделитьВсе(Команда)
	 
	 Для Каждого Стр Из Объект.ТаблицаЛистовФайла Цикл
		 Стр.Пометка = Истина;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаЛистовСнятьВсе(Команда)
	 
	 Для Каждого Стр Из Объект.ТаблицаЛистовФайла Цикл
		 Стр.Пометка = Ложь;
	 КонецЦикла;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НастройкиКолонокЛистаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	 
	 НомерКолонки = Элементы.ПанельЛистов.ТекущаяСтраница.ПодчиненныеЭлементы[0].ТекущийЭлемент.Имя;
	 НомерКолонки = Сред(НомерКолонки, Найти(НомерКолонки,"_")+1);
	 //Сообщить(НомерКолонки);
	 Объект.НастройкиКолонокЛиста[Строка].НомерКолонки = НомерКолонки;
	 НастройкиКолонокЛистаПриОкончанииРедактирования("", Ложь, Ложь);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаЛистовФайлаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	 Элемент.ТекущиеДанные.НомерПервойСтроки = ПараметрыПеретаскивания.Значение[0].НомерСтроки;
 КонецПроцедуры
 
 
 
 &НаКлиенте
 Процедура ВидЦеныПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 //СтандартнаяОбработка = Ложь;
	 //	
	 //ПараметрыФормы = Новый Структура;
	 //ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	 //
	 //ОткрытьФорму("Справочник.ВидыЦенПоставщиков.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	 
 КонецПроцедуры
 
 
 
 
 //============================================================================
 // ДОКУМЕНТЫ
 
 &НаКлиенте
 Процедура Результат_ДокументПоступлениеТоваровУслуг(Команда)
	 
	 АдресПередаваемыхПараметров = ПоместитьДанныеВХранилище_ГлавнаяТаблица();
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	 
	 //Попытка
	 //	АдресВоВременномХранилище = ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаСоздатьПоступление",СтруктураПараметров,ЭтаФорма); 
	 //Исключение
	 //	АдресВоВременномХранилище = ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаСоздатьПоступление",СтруктураПараметров,ЭтаФорма); 
	 //КонецПопытки;
	 
	 Если Объект.ИспользоватьМегапрайс Тогда
		 АдресВоВременномХранилище = ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаСоздатьПоступление",СтруктураПараметров,ЭтаФорма); 
	 Иначе
		 АдресВоВременномХранилище = ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаСоздатьПоступление",СтруктураПараметров,ЭтаФорма); 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьЗаказПокупателя(Команда)
	 
	 АдресПередаваемыхПараметров = ПоместитьДанныеВХранилище_ГлавнаяТаблица();
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	 
	 Попытка
		 АдресВоВременномХранилище = ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаЗаявкаКлиента",СтруктураПараметров,ЭтаФорма); 
	 Исключение
		 АдресВоВременномХранилище = ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаЗаявкаКлиента",СтруктураПараметров,ЭтаФорма); 
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьЗаказПоставщику(Команда)
	 
	 АдресПередаваемыхПараметров = ПоместитьДанныеВХранилище_ГлавнаяТаблица();
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	 
	 Попытка
		 ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаСчетОтПоставщика",СтруктураПараметров,ЭтаФорма); 
	 Исключение
		 ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаСчетОтПоставщика",СтруктураПараметров,ЭтаФорма); 
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьВводОстатков(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Органиазация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументНалогообложениеНДС) Тогда
		 Сообщить("Не указано Налогооблажение НДС: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = мСоздатьВводОстатковСервер();
	 ФормаДока = ПолучитьФорму("Документ.ВводОстатков.Форма.ФормаТовары", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Результат_СоздатьПеремещение(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Органиазация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = мПеремещениеТоваровСервер();
	 ФормаДока = ПолучитьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура СоздатьЗаказНаВнутреннееПотребление(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = СоздатьЗаказНаВнутреннееПотреблениеНаСервере();
	 ФормаДока = ПолучитьФорму("Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 &НаСервере
 Функция СоздатьЗаказНаВнутреннееПотреблениеНаСервере()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПотреблениеТоваров;
	 НовыйДокумент.Организация      = Объект.ДокументОрганизация;
	 
	 НовыйДокумент.Склад            = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение    = Объект.ДокументПодразделение;
	 
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 НовыйДокумент.ДатаОтгрузки  = ТекущаяДата();
	 
	 НовыйДокумент.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	 
	 НовыйДокумент.Комментарий  = "Загружен из Excel";
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Упаковка         = Стр.Упаковка;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество / КоэффициентУпаковки;
		 
	 КонецЦикла;
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СоздатьОтчетОРозничныхПродажах(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = мОтчетОРозничныхПродажахСервер();
	 ФормаДока = ПолучитьФорму("Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция мСоздатьОприходованиеТоваровСервер(АдресХранилища)
	 
	 СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресХранилища.Адрес);
	 
	 НовыйДокумент = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.Организация   = СтруктураПараметров.ДокументОрганизация;
	 НовыйДокумент.Склад         = СтруктураПараметров.ДокументСклад;
	 // НовыйДокумент.Подразделение = СтруктураПараметров.ДокументПодразделение;
	 НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	 
	 НовыйДокумент.СтатьяДоходов = 
	 
	 НовыйДокумент.Комментарий  = "";
	 
	 Для Каждого Стр из СтруктураПараметров.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 
		 Если Стр.Поле_Сумма > 0 Тогда	
			 НеПересчитыватьСуммуЕслиНетЦены = Истина;
			 
			 СтрокаТЧ.Сумма = Стр.Поле_Сумма; 
			 СтрокаТЧ.Цена  = СтрокаТЧ.Сумма/СтрокаТЧ.Количество;
		 Иначе
			 СтрокаТЧ.Цена  = Стр.Поле_ЦенаЗакупки;		
			 СтрокаТЧ.Сумма = СтрокаТЧ.Цена*СтрокаТЧ.Количество;
		 КонецЕсли;
		 
		 СтрНомерГТД            = СокрЛП(Стр.НомерГТД);
		 СтрСтранаПроисхождения = СокрЛП(Стр.СтранаПроисхождения);
		 
		 Если ЗначениеЗаполнено(СтрНомерГТД) Тогда
			 НайденНомерГТД = Справочники.НомераГТД.ПустаяСсылка();
			 
			 Попытка
				 НайденНомерГТД = Справочники.НомераГТД.НайтиПоКоду(СтрНомерГТД);
				 Если НайденНомерГТД = Справочники.НомераГТД.ПустаяСсылка() Тогда
					 НовыйЭлемент = Справочники.НомераГТД.СоздатьЭлемент();
					 НовыйЭлемент.Код = СтрНомерГТД;
					 
					 Если ЗначениеЗаполнено(СтрСтранаПроисхождения) Тогда
						 НайденСтрана = Справочники.СтраныМира.НайтиПоНаименованию(СтрСтранаПроисхождения);
						 Если НайденСтрана = Справочники.СтраныМира.ПустаяСсылка() Тогда
							 НовыйЭлемент = Справочники.СтраныМира.СоздатьЭлемент();
							 НовыйЭлемент.НаименованиеПолное = СтрСтранаПроисхождения;
							 НовыйЭлемент.Записать();
							 
							 НайденСтрана = НовыйЭлемент.Ссылка;
						 КонецЕсли;
					 Иначе
						 НайденСтрана = Справочники.СтраныМира.ПустаяСсылка();
					 КОнецЕсли;
					 
					 НовыйЭлемент.Записать();
					 
					 НайденНомерГТД = НовыйЭлемент.Ссылка;
				 КонецЕсли;
				 
				 СтрокаТЧ.НомерГТД = НайденНомерГТД.Ссылка;
			 Исключение
				 Сообщить(ОписаниеОшибки());
			 КонецПопытки
		 КонецЕсли;
	 КонецЦикла;
	 
	 Попытка 
		 НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		 ТекстСообщения = "ОПРИХОДОВАНИЕ - "+НовыйДокумент.Ссылка+" - Документ успешно проведен.";
	 Исключение
		 НовыйДокумент.Записать();
		 ТекстСообщения = "ОПРИХОДОВАНИЕ - "+НовыйДокумент.Ссылка+" - НЕ ПРОВЕДЕН.";
	 КонецПопытки;
	 
	 //Сообщить(ТекстСообщения);
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ТекстСообщения",ТекстСообщения);
	 СтруктураПараметров.Вставить("ДокументСсылка",НовыйДокумент.Ссылка);	 
	 
	 Возврат СтруктураПараметров; //НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СоздатьОприходованиеТоваров(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Органиазация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 СообщениеВЖурналКлиент("ОПРИХОДОВАНИЕ - начало");
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",ПоместитьДанныеВХранилище_ГлавнаяТаблица());	 
	 СтруктураВозврата = мСоздатьОприходованиеТоваровСервер(СтруктураПараметров);
	 
	 //СообщениеВЖурналКлиент(ТекстСообщения,Истина);
	 СообщениеВЖурналКлиент(СтруктураВозврата.ТекстСообщения,Истина,СтруктураВозврата.ДокументСсылка);
	 //ОткрытьЗначение(ДокументСсылка); 
	 
 КонецПроцедуры
 
 
 
 
 &НаСервере
 Функция мСоздатьВводОстатковСервер()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 
	 ВалютаДокумента = Объект.ВидЦенЗакупочная.ВалютаЦены;
	 СтруктураВалютаРезультат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
	 
	 НовыйДокумент = Документы.ВводОстатков.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.ТипОперации  = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров;
	 НовыйДокумент.Организация  = Объект.ДокументОрганизация;
	 
	 НовыйДокумент.Валюта             = ВалютаДокумента;
	 НовыйДокумент.НалогообложениеНДС = Объект.ДокументНалогообложениеНДС;
	 НовыйДокумент.ЦенаВключаетНДС = Истина;
	 
	 НовыйДокумент.Склад         = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение = Объект.ДокументПодразделение;
	 
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 НовыйДокумент.Комментарий   = "";
	 
	 //Если Метаданные.Версия = "11.1.4.10" Тогда
	 //НовыйДокумент.НалогообложениеНДС = Справочники.Организации.ЗакупкаПодДеятельность(
	 //Объект.ДокументОрганизация,
	 //Объект.ДокументСклад,
	 //НовыйДокумент.Дата);
	 //КонецЕсли;
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если НЕ ЗначениеЗаполнено(Стр.Поле_Количество) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 СтрокаТЧ.КоличествоУпаковок = Стр.Поле_Количество;   
		 СтрокаТЧ.Упаковка         = Стр.Упаковка;	 
		 СтрокаТЧ.СтавкаНДС        = Стр.Номенклатура.СтавкаНДС;
		 
		 СтрПоле_ЦенаУстановки = Стр.Поле_ЦенаЗакупки;
		 Если ЗначениеЗаполнено(Стр.Поле_ВалютаЦены) И ВалютаДокумента <> Стр.Поле_ВалютаЦены Тогда
			 СтруктураВалютаВходящая = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Стр.Поле_ВалютаЦены, ТекущаяДата());
			 СтрПоле_ЦенаУстановки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрПоле_ЦенаУстановки, СтруктураВалютаВходящая, СтруктураВалютаРезультат);
		 КонецЕсли;
		 
		 Если Стр.Поле_Сумма > 0 Тогда	
			 НеПересчитыватьСуммуЕслиНетЦены = Истина;
			 
			 СтрокаТЧ.Сумма = Стр.Поле_Сумма; 
			 СтрокаТЧ.Цена  = СтрокаТЧ.Сумма/СтрокаТЧ.Количество;
		 Иначе
			 НеПересчитыватьСуммуЕслиНетЦены = Ложь;
			 
			 СтрокаТЧ.Цена  = СтрПоле_ЦенаУстановки;		
			 СтрокаТЧ.Сумма = СтрокаТЧ.Цена*СтрокаТЧ.Количество;
		 КонецЕсли;
		 
		 СтрНомерГТД            = СокрЛП(Стр.НомерГТД);
		 СтрСтранаПроисхождения = СокрЛП(Стр.СтранаПроисхождения);
		 
		 Если Стр.Номенклатура.ВестиУчетПоГТД = Ложь Тогда
			 ОбъектНоменклатура = Стр.Номенклатура.ПолучитьОбъект();
			 ОбъектНоменклатура.ВестиУчетПоГТД = Истина;
			 ОбъектНоменклатура.ОбменДанными.Загрузка = Истина;
			 ОбъектНоменклатура.Записать();
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(СтрНомерГТД) Тогда
			 НайденНомерГТД = Справочники.НомераГТД.ПустаяСсылка();
			 
			 Попытка
				 НайденНомерГТД = Справочники.НомераГТД.НайтиПоКоду(СтрНомерГТД);
				 Если НайденНомерГТД = Справочники.НомераГТД.ПустаяСсылка() Тогда
					 НовыйЭлемент = Справочники.НомераГТД.СоздатьЭлемент();
					 НовыйЭлемент.Код = СтрНомерГТД;
					 
					 Если ЗначениеЗаполнено(СтрСтранаПроисхождения) Тогда
						 НайденСтрана = Справочники.СтраныМира.НайтиПоНаименованию(СтрСтранаПроисхождения);
						 Если НайденСтрана = Справочники.СтраныМира.ПустаяСсылка() Тогда
							 НовыйЭлементСтр = Справочники.СтраныМира.СоздатьЭлемент();
							 НовыйЭлементСтр.НаименованиеПолное = СтрСтранаПроисхождения;
							 НовыйЭлементСтр.Записать();
							 
							 НайденСтрана = НовыйЭлементСтр.Ссылка;
						 КонецЕсли;
					 Иначе
						 НайденСтрана = Справочники.СтраныМира.ПустаяСсылка();
					 КОнецЕсли;
					 
					 НовыйЭлемент.СтранаПроисхождения = НайденСтрана;
					 
					 НовыйЭлемент.Записать();
					 
					 НайденНомерГТД = НовыйЭлемент.Ссылка;
				 КонецЕсли;
				 
				 СтрокаТЧ.НомерГТД = НайденНомерГТД.Ссылка;
			 Исключение
				 Сообщить(ОписаниеОшибки());
			 КонецПопытки
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	 КоэффициентПересчетаИзВалютыУпрВРегл = 1;
	 КэшированныеЗначения.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	 КэшированныеЗначения.Вставить("ПересчитатьНДСРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	 
	 Попытка
		 СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	 Исключение //СТАРЫЕ ВЕРСИИ УТ
		 СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	 КонецПопытки;
	 
	 СтруктураДействий = Новый Структура;
	 СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
	 СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(НовыйДокумент));
	 СтруктураДействий.Вставить("ПересчитатьСумму");
	 СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	 СтруктураДействий.Вставить("ПересчитатьСуммуРегл",КоэффициентПересчетаИзВалютыУпрВРегл);
	 СтруктураДействий.Вставить("ПересчитатьНДСРегл",СтруктураПересчетаСуммы);
	 
	 //СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	 //СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	 
	 СтруктураТЧ = Новый Структура;
	 СтруктураТЧ.Вставить("СтрокиТЧ" , НовыйДокумент.Товары);
	 ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий, КэшированныеЗначения);
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаСервере
 Функция мПеремещениеТоваровСервер()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	 НовыйДокумент.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	 
	 НовыйДокумент.Организация      = Объект.ДокументОрганизация;
	 
	 НовыйДокумент.СкладОтправитель = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение    = Объект.ДокументПодразделение;
	 
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 НовыйДокумент.ДатаРаспоряжения = ТекущаяДата();
	 
	 Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
		 НовыйДокумент.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	 КонецЕсли;
	 
	 НовыйДокумент.Комментарий  = "";
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Упаковка         = Стр.Упаковка;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество / КоэффициентУпаковки;
		 
	 КонецЦикла;
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 
 &НаСервере
 Функция ПолучитьКассуККМПоСкладу(ВыбСклад)
	 
	 КассаККМПоСкладу = Справочники.КассыККМ.ПустаяСсылка();
	 
	 ТекстЗапроса = "ВЫБРАТЬ
	 |	КассыККМ.Ссылка
	 |ИЗ
	 |	Справочник.КассыККМ КАК КассыККМ
	 |ГДЕ
	 |	КассыККМ.Склад = &ВыбСклад";
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТекстЗапроса;
	 Запрос.УстановитьПараметр("ВыбСклад",ВыбСклад);
	 
	 Результат = Запрос.Выполнить();
	 
	 Если НЕ Результат.Пустой() Тогда
		 ВыборкаЗапроса = Результат.Выбрать();
		 Пока ВыборкаЗапроса.Следующий() Цикл
			 КассаККМПоСкладу = ВыборкаЗапроса.Ссылка;
			 Возврат КассаККМПоСкладу;
		 КонецЦИкла;
	 КонецЕсли;
	 
	 Возврат КассаККМПоСкладу;
	 
 КонецФункции
 
 &НаСервере
 Функция мОтчетОРозничныхПродажахСервер()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.Организация   = Объект.ДокументОрганизация;
	 НовыйДокумент.Склад         = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение = Объект.ДокументПодразделение;
	 НовыйДокумент.КассаККМ      = ПолучитьКассуККМПоСкладу(НовыйДокумент.Склад);
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 НовыйДокумент.НалогообложениеНДС = Объект.ДокументНалогообложениеНДС;
	 
	 НовыйДокумент.Комментарий  = "";
	 
	 НеПересчитыватьСуммуЕслиНетЦены = Ложь;
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество / КоэффициентУпаковки;
		 СТрокаТЧ.Партнер  = Справочники.Партнеры.РозничныйПокупатель;
		 
		 Если Стр.Поле_Сумма > 0 Тогда	
			 НеПересчитыватьСуммуЕслиНетЦены = Истина;
			 
			 СтрокаТЧ.Сумма = Стр.Поле_Сумма; 
			 СтрокаТЧ.Цена  = Стр.Поле_Сумма/СтрокаТЧ.КоличествоУпаковок;
		 Иначе
			 НеПересчитыватьСуммуЕслиНетЦены = Ложь;
			 
			 СтрокаТЧ.Цена  = Стр.Поле_ЦенаПродажи;		
			 СтрокаТЧ.Сумма = Стр.Поле_ЦенаПродажи*СтрокаТЧ.КоличествоУпаковок;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Попытка
		 СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	 Исключение //СТАРЫЕ ВЕРСИИ УТ
		 СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	 КонецПопытки;
	 
	 СтруктураДействий = Новый Структура;
	 СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
	 СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	 СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	 
	 Если НЕ НеПересчитыватьСуммуЕслиНетЦены Тогда
		 СтруктураДействий.Вставить("ПересчитатьСумму");
	 КонецЕсли;
	 
	 НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 
 
 
 &НаСервере
 Функция СоздатьДокументПересчетТоваровНаСервере()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.ПересчетТоваров.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();	
	 НовыйДокумент.Склад         = Объект.ДокументСклад;
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 
	 НовыйДокумент.Комментарий  = "Загружен из Excel";
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Упаковка         = Стр.Упаковка;
		 СтрокаТЧ.КоличествоФакт       = Стр.Поле_Количество;
		 СтрокаТЧ.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоФакт / КоэффициентУпаковки;		
	 КонецЦикла;
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СоздатьДокументПересчетТоваров(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = СоздатьДокументПересчетТоваровНаСервере();
	 ФормаДока = ПолучитьФорму("Документ.ПересчетТоваров.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
	 
 КонецПроцедуры
 
 &НаСервере
 Функция СоздатьДокументСписаниеТоваровНаСервере()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.Организация      = Объект.ДокументОрганизация;
	 
	 НовыйДокумент.Склад            = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение    = Объект.ДокументПодразделение;
	 
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;	
	 
	 НовыйДокумент.Комментарий  = "Загружен из Excel";
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 //СтрокаТЧ.Упаковка         = Стр.Упаковка;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 //СтрокаТЧ.КоличествоУпаковок = Стр.Поле_Количество / КоэффициентУпаковки;
		 
	 КонецЦикла;
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СоздатьДокументСписаниеТоваров(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = СоздатьДокументСписаниеТоваровНаСервере();
	 ФормаДока = ПолучитьФорму("Документ.СписаниеНедостачТоваров.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 &НаСервере
 Функция СоздатьДокументПорчаТоваровНаСервере()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.ПорчаТоваров.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.Организация      = Объект.ДокументОрганизация;
	 
	 НовыйДокумент.Склад            = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение    = Объект.ДокументПодразделение;
	 
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 
	 НовыйДокумент.Комментарий  = "Загружен из Excel";
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;		
	 КонецЦикла;
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СоздатьДокументПорчаТоваров(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = СоздатьДокументПорчаТоваровНаСервере();
	 ФормаДока = ПолучитьФорму("Документ.ПорчаТоваров.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 &НаСервере
 Функция СоздатьДокументПересортицаТоваровНаСервере()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 НовыйДокумент = Документы.ПересортицаТоваров.СоздатьДокумент();
	 НовыйДокумент.Дата         = ТекущаяДата();
	 НовыйДокумент.Организация      = Объект.ДокументОрганизация;
	 
	 НовыйДокумент.Склад            = Объект.ДокументСклад;
	 НовыйДокумент.Подразделение    = Объект.ДокументПодразделение;
	 
	 НовыйДокумент.Ответственный = Объект.ДокументМенеджер;
	 
	 НовыйДокумент.Комментарий  = "Загружен из Excel";
	 
	 Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если Стр.Поле_Количество = 0 Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 КоэффициентУпаковки = ПолучитьКоэффициентУпаковки(Стр.Упаковка);
		 
		 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
		 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
		 СтрокаТЧ.Упаковка         = Стр.Упаковка;
		 СтрокаТЧ.Количество       = Стр.Поле_Количество;
		 СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество / КоэффициентУпаковки;
		 
	 КонецЦикла;
	 
	 НовыйДокумент.Записать();
	 
	 Возврат НовыйДокумент.Ссылка;
	 
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СоздатьДокументПересортицаТоваров(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Заполнение документов!");
		 Возврат;
	 КонецЕсли;
	 
	 ДокументОбъект = СоздатьДокументПересортицаТоваровНаСервере();
	 ФормаДока = ПолучитьФорму("Документ.ПересортицаТоваров.Форма.ФормаДокумента", Новый Структура("Ключ", ДокументОбъект));    
	 ФормаДока.Открыть();
	 
 КонецПроцедуры
 
 
 
 
 
 //============================================================================
 // МЕГАПРАЙС ПРО
 &НаКлиенте
 Процедура ОчиститьТаблицыСДаннымиКлиент()
	 
	 Объект.ТабличнаяЧасть.Очистить();
	 Объект.АвтозаменыСправочников.Очистить();
	 Объект.ТаблицаГруппНоменклатуры.Очистить();
	 Объект.СвойстваНоменклатуры.Очистить();
	 Объект.СвойстваХарактеристик.Очистить();
	 Объект.ТоварыУстановкаЦенНоменклатуры.Очистить();
	 Объект.ПоискСоответствий.Очистить();
	 
	 //УдаляемыеРеквизиты = Новый Массив();
	 //УдаляемыеЭлементы  = Новый Массив();
	 //
	 //Ном = 0;
	 //Для Каждого ТекЭлемент Из Элементы.ПанельЛистов.ПодчиненныеЭлементы Цикл
	 //    Если ТекЭлемент = Элементы.ПанельЛистов.ПодчиненныеЭлементы.ЛистБуфер Тогда
	 //   	 Продолжить;
	 //    КонецЕсли;
	 //    
	 //    УдаляемыеЭлементы.Добавить(ТекЭлемент);
	 //    УдаляемыеРеквизиты.Добавить("ТаблицаЛист"+Ном);
	 //    Ном = Ном+1;
	 //КонецЦикла;	
	 //Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
	 //    Элементы.Удалить(УдаляемыйЭлемент);
	 //КонецЦикла;
	 //
	 //ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура Мегапрайс_ПолучитьНастройкиПрофиляПрайса()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.Мегапрайс_ПолучитьНастройкиПрофиляПрайса();
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПрайсПартнераПриИзменении(Элемент)
	 
	 ОчиститьТаблицыСДаннымиКлиент();
	 
	 Мегапрайс_ПолучитьНастройкиПрофиляПрайса();
	 
	 ПартнерПриИзменении();
	 
	 ОбновитьНаборыСвойствХарактеристик();
	 ОбновитьНаборыСвойствНоменклатуры();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Функция ПоместитьВХранилище_Настройки()
	 
	 Перем СтруктураПараметров;
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);
	 СтруктураПараметров.Вставить("ВидЦенЗакупочная",Объект.ВидЦенЗакупочная);
	 СтруктураПараметров.Вставить("ВидЦенПродажи",Объект.ВидЦенПродажи);
	 СтруктураПараметров.Вставить("ВидЦенПродажи2",Объект.ВидЦенПродажи2);
	 СтруктураПараметров.Вставить("ВидЦенПродажи3",Объект.ВидЦенПродажи3);
	 
	 СтруктураПараметров.Вставить("ИспользоватьПотоковуюЗагрузку",Объект.ИспользоватьПотоковуюЗагрузку);
	 СтруктураПараметров.Вставить("ФайлМаксимальноеКоличествоСтрок",Объект.ФайлМаксимальноеКоличествоСтрок);
	 
	 СтруктураПараметров.Вставить("ВнешняяОбработкаЗагрузкиФайла",Объект.ВнешняяОбработкаЗагрузкиФайла);
	 СтруктураПараметров.Вставить("ФайлКаталогНаЛокальномДиске",Объект.ФайлКаталогНаЛокальномДиске);
	 СтруктураПараметров.Вставить("ФайлПутьКФайлу",Объект.ФайлПутьКФайлу);
	 СтруктураПараметров.Вставить("ФайлВидРасположения",Объект.ФайлВидРасположения);
	 СтруктураПараметров.Вставить("ФайлДоступЛогин",Объект.ФайлДоступЛогин);
	 СтруктураПараметров.Вставить("ФайлДоступПароль",Объект.ФайлДоступПароль);
	 СтруктураПараметров.Вставить("ФайлДоступПорт",Объект.ФайлДоступПорт);
	 СтруктураПараметров.Вставить("ФайлРазархивировать",Объект.ФайлРазархивировать);
	 
	 СтруктураПараметров.Вставить("КонтрольУникальностиНоменклатуры",Объект.КонтрольУникальностиНоменклатуры);
	 СтруктураПараметров.Вставить("ГруппаНоменклатурыПоУмолчанию",Объект.ГруппаНоменклатурыПоУмолчанию);
	 СтруктураПараметров.Вставить("ВидНоменклатурыПоУмолчанию",Объект.ВидНоменклатурыПоУмолчанию);
	 СтруктураПараметров.Вставить("ЕдиницаИзмеренияПоУмолчанию",Объект.ЕдиницаИзмеренияПоУмолчанию);
	 СтруктураПараметров.Вставить("ПроизводительПоУмолчанию",Объект.ПроизводительПоУмолчанию);
	 СтруктураПараметров.Вставить("СтавкаНДСПоУмолчанию",Объект.СтавкаНДСПоУмолчанию);
	 СтруктураПараметров.Вставить("ПроизвольноеКоличество",Объект.ПроизвольноеКоличество);
	 
	 СтруктураПараметров.Вставить("УбиратьСимволыВАртикуле",Объект.УбиратьСимволыВАртикуле);
	 СтруктураПараметров.Вставить("ВалютаНаходитсяВКолонкеСЦеной",Объект.ВалютаНаходитсяВКолонкеСЦеной);
	 СтруктураПараметров.Вставить("СпособНахожденияГрупп",Объект.СпособНахожденияГрупп);
	 
	 СтруктураПараметров.Вставить("ИндивидуальныеНастройкиЛистов",Объект.ИндивидуальныеНастройкиЛистов);
	 СтруктураПараметров.Вставить("ТаблицаЛистовФайла",Объект.ТаблицаЛистовФайла);
	 СтруктураПараметров.Вставить("НастройкаПоиска",Объект.НастройкаПоиска);
	 СтруктураПараметров.Вставить("ПравилаСкидокЦенКонтрагента",Объект.ПравилаСкидокЦенКонтрагента);
	 
	 СтруктураПараметров.Вставить("ИмпортЧерезБуфер",Объект.ИмпортЧерезБуфер);
	 Если Объект.ИмпортЧерезБуфер Тогда
		 СтруктураПараметров.Вставить("НастройкиКолонокЛиста",Объект.НастройкиКолонокЛиста);
	 КонецЕсли;
	 
	 СтруктураПараметров.Вставить("РоботСоздатьНоменклатуру",Объект.РоботСоздатьНоменклатуру);
	 СтруктураПараметров.Вставить("РоботСоздатьХарактеристики",Объект.РоботСоздатьХарактеристики);
	 СтруктураПараметров.Вставить("РоботСоздатьПроизводителей",Объект.РоботСоздатьПроизводителей);
	 СтруктураПараметров.Вставить("РоботЗагрузитьДополнительныеСвойства",Объект.РоботЗагрузитьДополнительныеСвойства);
	 СтруктураПараметров.Вставить("РоботЗагрузитьЦеныПоставщика",Объект.РоботЗагрузитьЦеныПоставщика);
	 СтруктураПараметров.Вставить("РоботЗагрузитьЦеныПоставщикаТиповая",Объект.РоботЗагрузитьЦеныПоставщикаТиповая);
	 
	 СтруктураПараметров.Вставить("РоботИзменитьЦеныДублейНоменклатуры",Объект.РоботИзменитьЦеныДублейНоменклатуры);
	 СтруктураПараметров.Вставить("РоботИзменитьЦеныВсехХарактеристик",Объект.РоботИзменитьЦеныВсехХарактеристик);
	 СтруктураПараметров.Вставить("РоботИзменитьЦеныАналоговНоменклатуры",Объект.РоботИзменитьЦеныАналоговНоменклатуры);
	 
	 СтруктураПараметров.Вставить("РоботЗагрузитьЗаказКлиента",Объект.РоботЗагрузитьЗаказКлиента);
	 
	 СтруктураПараметров.Вставить("РоботЗагрузитьЦеныНоменклатуры",Объект.РоботЗагрузитьЦеныНоменклатуры);
	 СтруктураПараметров.Вставить("РоботПрименятьПравилаРасчетаМегапрайс",Объект.РоботПрименятьПравилаРасчетаМегапрайс);
	 
	 СтруктураПараметров.Вставить("РоботАлгоритмРезультат",Объект.РоботАлгоритмРезультат);
	 СтруктураПараметров.Вставить("АлгоритмРезульт",Объект.АлгоритмРезульт);
	 
	 Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,Новый УникальныйИдентификатор);
	 Возврат Адрес; 
	 
 КонецФункции 
 
 &НаКлиенте
 Процедура АвтосохранениеНастройкиПрайса(Команда)
	 
	 СохранитьНастройкиКолонокПрофиля();
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес", ПоместитьВХранилище_Настройки());	 	 
	 МегапрайсЗаписатьПрофиль(СтруктураПараметров);
	 
	 ВнешнийКаталогНастроек_СохранитьНастройку(Новый ОписаниеОповещения("АвтосохранениеНастройкиПрайсаЗавершение", ЭтотОбъект));
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура АвтосохранениеНастройкиПрайсаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	 
	 Состояние("Сохранение завершено");
	 
	 Элементы.КомандаПрочитатьТаблицуИСинхронизировать.Доступность = Истина;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Процедура МегапрайсЗаписатьПрофиль(АдресХранилища)
	 
	 СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресХранилища.Адрес);
	 
	 Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПрайсПартнера) Тогда
		 //Сообщить("Не выбран профиль прайса!!! Продолжение обработки невозможно");
		 Возврат;
	 КонецЕсли;
	 
	 ПрайсОбъект = СтруктураПараметров.ПрайсПартнера.ПолучитьОбъект();
	 
	 ПрайсОбъект.ВнешняяОбработкаЗагрузкиФайла = СтруктураПараметров.ВнешняяОбработкаЗагрузкиФайла;  
	 
	 ПрайсОбъект.ВидЦенЗакупочная = СтруктураПараметров.ВидЦенЗакупочная;
	 ПрайсОбъект.ВидЦенПродажи = СтруктураПараметров.ВидЦенПродажи;
	 ПрайсОбъект.ВидЦенПродажи2 = СтруктураПараметров.ВидЦенПродажи2;
	 ПрайсОбъект.ВидЦенПродажи3 = СтруктураПараметров.ВидЦенПродажи3;
	 
	 ПрайсОбъект.ИспользоватьПотоковуюЗагрузку = СтруктураПараметров.ИспользоватьПотоковуюЗагрузку;  
	 ПрайсОбъект.ФайлМаксимальноеКоличествоСтрок = СтруктураПараметров.ФайлМаксимальноеКоличествоСтрок;  
	 
	 ПрайсОбъект.ФайлКаталогНаЛокальномДиске = СтруктураПараметров.ФайлКаталогНаЛокальномДиске;  
	 ПрайсОбъект.ФайлПутьКФайлу = СтруктураПараметров.ФайлПутьКФайлу;  
	 ПрайсОбъект.ФайлВидРасположения = СтруктураПараметров.ФайлВидРасположения;
	 ПрайсОбъект.ФайлДоступЛогин = СтруктураПараметров.ФайлДоступЛогин;
	 ПрайсОбъект.ФайлДоступПароль = СтруктураПараметров.ФайлДоступПароль;
	 ПрайсОбъект.ФайлДоступПорт = СтруктураПараметров.ФайлДоступПорт;
	 ПрайсОбъект.ФайлРазархивировать = СтруктураПараметров.ФайлРазархивировать;
	 
	 ПрайсОбъект.КонтрольУникальностиНоменклатуры = СтруктураПараметров.КонтрольУникальностиНоменклатуры;
	 ПрайсОбъект.ГруппаНоменклатурыПоУмолчанию = СтруктураПараметров.ГруппаНоменклатурыПоУмолчанию;
	 ПрайсОбъект.ВидНоменклатурыПоУмолчанию = СтруктураПараметров.ВидНоменклатурыПоУмолчанию;
	 ПрайсОбъект.ЕдиницаИзмеренияПоУмолчанию = СтруктураПараметров.ЕдиницаИзмеренияПоУмолчанию;
	 ПрайсОбъект.ПроизводительПоУмолчанию = СтруктураПараметров.ПроизводительПоУмолчанию;
	 ПрайсОбъект.СтавкаНДСПоУмолчанию = СтруктураПараметров.СтавкаНДСПоУмолчанию;
	 ПрайсОбъект.ПроизвольноеКоличество = СтруктураПараметров.ПроизвольноеКоличество;
	 
	 ПрайсОбъект.УбиратьСимволыВАртикуле = СтруктураПараметров.УбиратьСимволыВАртикуле;
	 ПрайсОбъект.ВалютаНаходитсяВКолонкеСЦеной = СтруктураПараметров.ВалютаНаходитсяВКолонкеСЦеной;
	 ПрайсОбъект.СпособНахожденияГрупп  = СтруктураПараметров.СпособНахожденияГрупп;
	 
	 ПрайсОбъект.ИндивидуальныеНастройкиЛистов = СтруктураПараметров.ИндивидуальныеНастройкиЛистов;
	 ПрайсОбъект.ТаблицаЛистовФайла.Загрузить(СтруктураПараметров.ТаблицаЛистовФайла.Выгрузить());
	 ПрайсОбъект.НастройкаПоиска.Загрузить(СтруктураПараметров.НастройкаПоиска.Выгрузить());
	 ПрайсОбъект.ПравилаСкидокЦенКонтрагента.Загрузить(СтруктураПараметров.ПравилаСкидокЦенКонтрагента.Выгрузить());
	 
	 ПрайсОбъект.ИмпортЧерезБуфер = СтруктураПараметров.ИмпортЧерезБуфер;
	 Если СтруктураПараметров.ИмпортЧерезБуфер Тогда
		 ПрайсОбъект.НастройкиКолонокЛиста.Загрузить(СтруктураПараметров.НастройкиКолонокЛиста.Выгрузить());
	 КонецЕсли;
	 
	 ПрайсОбъект.РоботСоздатьНоменклатуру = СтруктураПараметров.РоботСоздатьНоменклатуру;
	 ПрайсОбъект.РоботСоздатьХарактеристики = СтруктураПараметров.РоботСоздатьХарактеристики;
	 ПрайсОбъект.РоботСоздатьПроизводителей = СтруктураПараметров.РоботСоздатьПроизводителей;
	 ПрайсОбъект.РоботЗагрузитьДополнительныеСвойства = СтруктураПараметров.РоботЗагрузитьДополнительныеСвойства;
	 ПрайсОбъект.РоботИзменитьЦеныДублейНоменклатуры = СтруктураПараметров.РоботИзменитьЦеныДублейНоменклатуры;
	 ПрайсОбъект.РоботИзменитьЦеныВсехХарактеристик = СтруктураПараметров.РоботИзменитьЦеныВсехХарактеристик;
	 ПрайсОбъект.РоботИзменитьЦеныАналоговНоменклатуры = СтруктураПараметров.РоботИзменитьЦеныАналоговНоменклатуры;
	 
	 ПрайсОбъект.РоботЗагрузитьЦеныПоставщика = СтруктураПараметров.РоботЗагрузитьЦеныПоставщика;
	 ПрайсОбъект.РоботЗагрузитьЦеныПоставщикаТиповая = СтруктураПараметров.РоботЗагрузитьЦеныПоставщикаТиповая;
	 
	 ПрайсОбъект.РоботЗагрузитьЗаказКлиента = СтруктураПараметров.РоботЗагрузитьЗаказКлиента;
	 
	 ПрайсОбъект.РоботЗагрузитьЦеныНоменклатуры = СтруктураПараметров.РоботЗагрузитьЦеныНоменклатуры;
	 ПрайсОбъект.РоботПрименятьПравилаРасчетаМегапрайс = СтруктураПараметров.РоботПрименятьПравилаРасчетаМегапрайс;
	 
	 ПрайсОбъект.РоботАлгоритмРезультат = СтруктураПараметров.РоботАлгоритмРезультат;
	 ПрайсОбъект.АлгоритмРезульт = СтруктураПараметров.АлгоритмРезульт;
	 
	 ПрайсОбъект.Записать();
	 
 КонецПроцедуры
 
 //============================================================================
 // УСТАНОВКА ЦЕН НОМЕНКЛАТУРЫ КОНТРАГЕНТА
 
 &НаСервере
 Процедура Отчеты_ОтчетПоПрайсуПоставщикаСервер()
	 
	 ТаблицаОтчетПоПоставщику.Очистить();
	 
	 ПараметрыОтбора = Новый Структура;
	 //ПараметрыОтбора.Вставить("Номенклатура", ПустаяСсылка);
	 //ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
	 
	 ТаблицаПрайса  = Объект.ТабличнаяЧасть.Выгрузить();
	 
	 ТектЗапроса = 
	 "ВЫБРАТЬ
	 |	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	 |	ВременнаяДанныеПоиска.Номенклатура КАК Номенклатура,
	 |	ВременнаяДанныеПоиска.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ВременнаяДанныеПоиска.Поле_Количество КАК Поле_Количество,
	 |	ВременнаяДанныеПоиска.Поле_ЦенаЗакупки КАК Поле_ЦенаЗакупки
	 |ПОМЕСТИТЬ ВременнаяДанныеПоиска
	 |ИЗ
	 |	&ТаблицаПрайса КАК ВременнаяДанныеПоиска
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	НомерСтроки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВременнаяДанныеПоиска.НомерСтроки КАК НомерСтроки,
	 |	ВременнаяДанныеПоиска.Номенклатура КАК Номенклатура,
	 |	ВременнаяДанныеПоиска.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ВременнаяДанныеПоиска.Поле_Количество КАК Поле_Количество,
	 |	ВременнаяДанныеПоиска.Поле_ЦенаЗакупки КАК Поле_ЦенаЗакупки,
	 |	ЦеныПоставщиков.Количество КАК КоличествоВ1С,
	 |	ЦеныПоставщиков.Цена КАК ЦенаСтарая
	 |ИЗ
	 |	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	 |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, ПрайсПартнера.Партнер = &Партнер) КАК ЦеныПоставщиков
	 |		ПО ВременнаяДанныеПоиска.Номенклатура = ЦеныПоставщиков.Номенклатура
	 |			И ВременнаяДанныеПоиска.ХарактеристикаНоменклатуры = ЦеныПоставщиков.ХарактеристикаНоменклатуры";	
	 Если ТаблицаОтчетПоПоставщикуТолькоОтличия Тогда
		 ТектЗапроса = ТектЗапроса + "
		 | И ВременнаяДанныеПоиска.Поле_ЦенаЗакупки <> ЦеныПоставщиков.Цена";
	 КонецЕсли;
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТектЗапроса;
	 Запрос.УстановитьПараметр("ТаблицаПрайса", ТаблицаПрайса);
	 Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ТаблицаОтчетПоПоставщику.Загрузить(РезультатЗапроса.Выгрузить());
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Кнопки_ОтчетПоПрайсуПоставщика(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		 Сообщить("Данный функционал возможен только в Мегапрайс ПРО");
	 КонецЕсли;
	 
	 Отчеты_ОтчетПоПрайсуПоставщикаСервер();
	 
 КОнецПроцедуры
 
 
 //============================================================================
 //РЕГИСТРАЦИЯ ТИПОВАЯ
 
 &НаСервереБезКонтекста
 Функция Результат_ДокументРегистрацияЦенПоставщикаСервер(АдресХранилища) Экспорт
	 
	 СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресХранилища.Адрес);
	 
	 НовыйДокумент = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
	 НовыйДокумент.Дата        = ТекущаяДата();
	 НовыйДокумент.Партнер     = СтруктураПараметров.Партнер;
	 //НовыйДокумент.Соглашение  = Объект.СоглашениеСПоставщиком;
	 НовыйДокумент.Комментарий   = СтруктураПараметров.Комментарий;
	 НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	 
	 НовыйДокумент.Записать();
	 
	 Попытка
		 НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(УстановкаЦенКлиентСервер.ДатаДокумента(НовыйДокумент.Дата), НовыйДокумент.Ссылка);
		 НовыйДокумент.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(УстановкаЦенКлиентСервер.ДатаДокумента(НовыйДокумент.Дата), НомерВПределахДня);
	 Исключение
	 КонецПопытки;
	 
	 СпрХарактеристикиНоменклатуры = Справочники.ХарактеристикиНоменклатуры;
	 ПустаяХарактеристика          = СпрХарактеристикиНоменклатуры.ПустаяСсылка();
	 
	 КонтрольУникальностиНоменклатуры = СтруктураПараметров.КонтрольУникальностиНоменклатуры;	 
	 ВидЦеныПоставщика = СтруктураПараметров.ВидЦеныПоставщика;
	 
	 СтруктураВыборкаТаблицы = СтруктураПараметров.ТабличнаяЧасть;
	 
	 
	 ПараметрыОтбора = Новый Структура;
	 ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
	 ПараметрыОтбора.Вставить("Пометка", Истина);
	 ДанныеПоиска = СтруктураВыборкаТаблицы.Выгрузить(ПараметрыОтбора);
	 
	 ПустаяСсылка  = Справочники.Номенклатура.ПустаяСсылка();
	 
	 ТектЗапроса = 
	 "ВЫБРАТЬ
	 |	ВременнаяДанныеПоиска.Номенклатура КАК Номенклатура,
	 |	ВременнаяДанныеПоиска.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ВременнаяДанныеПоиска.Упаковка КАК Упаковка,
	 |	ВременнаяДанныеПоиска.НоменклатураПоставщика КАК НоменклатураПоставщика,
	 |	ВременнаяДанныеПоиска.Поле_ЦенаЗакупки КАК Поле_ЦенаЗакупки,
	 |	ВременнаяДанныеПоиска.Поле_ВалютаЦены КАК Поле_ВалютаЦены,
	 |	ВременнаяДанныеПоиска.Поле_Количество КАК Поле_Количество,
	 |	ВременнаяДанныеПоиска.Поле_Производитель КАК Поле_Производитель,
	 |	ВременнаяДанныеПоиска.ПовторноеСовпадение КАК ПовторноеСовпадение
	 |ПОМЕСТИТЬ ВременнаяДанныеПоиска
	 |ИЗ
	 |	&ДанныеПоиска КАК ВременнаяДанныеПоиска
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВременнаяДанныеПоиска.Номенклатура КАК Номенклатура,
	 |	ВременнаяДанныеПоиска.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	 |	ВременнаяДанныеПоиска.Упаковка КАК Упаковка,
	 |	ВременнаяДанныеПоиска.НоменклатураПоставщика КАК НоменклатураПоставщика,
	 |	МАКСИМУМ(ВременнаяДанныеПоиска.Поле_ЦенаЗакупки) КАК Поле_ЦенаЗакупки,
	 |	ЕСТЬNULL(ВременнаяДанныеПоиска.Поле_ВалютаЦены, &ПрайсПартнераВалюта) КАК Валюта,
	 |	ВременнаяДанныеПоиска.Поле_Количество КАК Количество,
	 |	ВременнаяДанныеПоиска.Поле_Производитель КАК Поле_Производитель,
	 |	ВременнаяДанныеПоиска.ПовторноеСовпадение КАК ПовторноеСовпадение,
	 |	&ТекущаяДата КАК Период
	 |ИЗ
	 |	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВременнаяДанныеПоиска.Номенклатура,
	 |	ВременнаяДанныеПоиска.ХарактеристикаНоменклатуры,
	 |	ВременнаяДанныеПоиска.Упаковка,
	 |	ВременнаяДанныеПоиска.НоменклатураПоставщика,
	 |	ВременнаяДанныеПоиска.Поле_Количество,
	 |	ВременнаяДанныеПоиска.Поле_Производитель,
	 |	ВременнаяДанныеПоиска.ПовторноеСовпадение,
	 |	ЕСТЬNULL(ВременнаяДанныеПоиска.Поле_ВалютаЦены, &ПрайсПартнераВалюта)";	
	 
	 Запрос = Новый Запрос();
	 Запрос.Текст = ТектЗапроса;
	 Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
	 Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	 Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	 Запрос.УстановитьПараметр("ПрайсПартнераВалюта", СтруктураПараметров.ВидЦеныПоставщика.Валюта);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Стр = РезультатЗапроса.Выбрать();	 
	 
	 Пока Стр.Следующий() Цикл	
		 Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если НЕ ЗначениеЗаполнено(Стр.Поле_ЦенаЗакупки) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 Если СтруктураПараметров.РоботИзменитьЦеныДублейНоменклатуры Тогда		 
			 ТекстЗапроса =
			 "ВЫБРАТЬ
			 |	СпрНоменклатура.Ссылка КАК Номенклатура
			 |ИЗ
			 |	Справочник.Номенклатура КАК СпрНоменклатура
			 //|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			 //|		ПО СпрНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
			 |ГДЕ
			 |	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
			 |	И СпрНоменклатура.ПометкаУдаления = ЛОЖЬ";
			 Если КонтрольУникальностиНоменклатуры = "Артикул" Тогда
				 ТекстЗапроса = ТекстЗапроса + "
				 | И	СпрНоменклатура.Артикул = &Поле_Артикул";
			 ИначеЕсли КонтрольУникальностиНоменклатуры = "АртикулНаименование" Тогда
				 ТекстЗапроса = ТекстЗапроса + "
				 | И	СпрНоменклатура.Артикул   = &Поле_Артикул
				 | И СпрНоменклатура.Наименование = &НаименованиеДляПоиска";
			 ИначеЕсли КонтрольУникальностиНоменклатуры = "АртикулПроизводитель" Тогда
				 ТекстЗапроса = ТекстЗапроса + "
				 | И	СпрНоменклатура.Артикул    = &Поле_Артикул
				 | И СпрНоменклатура.Производитель = &Поле_Производитель";
			 Иначе
				 ТекстЗапроса = ТекстЗапроса + "
				 | И	СпрНоменклатура.Артикул   = &Поле_Артикул
				 | И СпрНоменклатура.Наименование = &НаименованиеДляПоиска";
			 КонецЕсли;
			 
			 Запрос = Новый Запрос();
			 Запрос.Текст = ТекстЗапроса;
			 Запрос.УстановитьПараметр("Поле_Артикул", СокрЛП(Стр.Номенклатура.Артикул));
			 Запрос.УстановитьПараметр("НаименованиеДляПоиска", СокрЛП(Стр.Номенклатура.Наименование));
			 Запрос.УстановитьПараметр("Поле_Производитель", Стр.Поле_Производитель);
			 
			 РезультатЗапроса = Запрос.Выполнить();
			 
			 Если НЕ РезультатЗапроса.Пустой() Тогда
				 Выборка = РезультатЗапроса.Выбрать();
				 Пока Выборка.Следующий() Цикл
					 
					 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
					 СтрокаТЧ.НоменклатураПоставщика = Стр.НоменклатураПоставщика;
					 СтрокаТЧ.ВидЦеныПоставщика = СтруктураПараметров.ВидЦеныПоставщика;
					 СтрокаТЧ.Номенклатура     = Выборка.Номенклатура;
					 СтрокаТЧ.Упаковка         = Стр.Упаковка;
					 СтрокаТЧ.Цена             = Стр.Поле_ЦенаЗакупки;				
				 КонецЦикла;
			 КонецЕсли;						
			 
		 ИначеЕсли СтруктураПараметров.РоботИзменитьЦеныВсехХарактеристик Тогда
			 
			 СпрХарактеристики = Справочники.ХарактеристикиНоменклатуры;
			 ИспользованиеХарактеристик = Стр.Номенклатура.ИспользованиеХарактеристик;
			 
			 Если ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
				 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
				 СтрокаТЧ.НоменклатураПоставщика = Стр.НоменклатураПоставщика;
				 СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
				 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
				 СтрокаТЧ.Упаковка         = Стр.Упаковка;
				 СтрокаТЧ.Цена             = Стр.Поле_ЦенаЗакупки;
				 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			 Иначе
				 ВыборкаХарактеристик = СпрХарактеристики.Выбрать(,Стр.Номенклатура);
				 Пока ВыборкаХарактеристик.Следующий() Цикл
					 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
					 СтрокаТЧ.НоменклатураПоставщика = Стр.НоменклатураПоставщика;
					 СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
					 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
					 СтрокаТЧ.Упаковка         = Стр.Упаковка;
					 СтрокаТЧ.Цена             = Стр.Поле_ЦенаЗакупки;
					 СтрокаТЧ.Характеристика   = ВыборкаХарактеристик.Ссылка;
				 КонецЦикла;			 
			 КонецЕсли;
			 
		 Иначе			 
			 СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			 СтрокаТЧ.НоменклатураПоставщика = Стр.НоменклатураПоставщика;
			 СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
			 СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			 СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			 СтрокаТЧ.Упаковка         = Стр.Упаковка;
			 СтрокаТЧ.Цена             = Стр.Поле_ЦенаЗакупки;			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 //
	 //СтруктураДействий = Новый Структура;
	 //СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	 
	 //СтруктураТЧ = Новый Структура;
	 //СтруктураТЧ.Вставить("СтрокиТЧ" , НовыйДокумент.Товары);
	 //ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий, Неопределено);
	 
	 Попытка 
		 НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		 ТекстСообщения = "РЕГИСТРАЦИЯ ЦЕН - "+НовыйДокумент.Ссылка+" - Документ успешно проведен.";
	 Исключение
		 НовыйДокумент.Записать();
		 ТекстСообщения = "РЕГИСТРАЦИЯ ЦЕН - "+НовыйДокумент.Ссылка+" - НЕ ПРОВЕДЕН.";
	 КонецПопытки;
	 
	 //Сообщить(ТекстСообщения);
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ТекстСообщения",ТекстСообщения);
	 СтруктураПараметров.Вставить("ДокументСсылка",НовыйДокумент.Ссылка);	 
	 
	 Возврат СтруктураПараметров; //НовыйДокумент.Ссылка;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура Результат_ДокументРегистрацияЦенПоставщика(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ДокументОрганизация) Тогда
		 Сообщить("Не указана Организация: Настройки -> Профили загрузки!");
		 Возврат;
	 КонецЕсли;	 
	 Если НЕ ЗначениеЗаполнено(Объект.ВидЦеныПоставщика) Тогда
		 Сообщить("Не указан Вид цены партнера!");
		 Возврат;
	 КонецЕсли;
	 
	 СообщениеВЖурналКлиент("РЕГИСТРАЦИЯ ЦЕН (типовая) - начало");
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",ПоместитьДанныеВХранилище_ГлавнаяТаблица());	 
	 СтруктураВозврата = Результат_ДокументРегистрацияЦенПоставщикаСервер(СтруктураПараметров);
	 
	 //СообщениеВЖурналКлиент(ТекстСообщения,Истина);
	 СообщениеВЖурналКлиент(СтруктураВозврата.ТекстСообщения,Истина,СтруктураВозврата.ДокументСсылка);
	 //ОткрытьЗначение(ДокументСсылка); 
	 
 КонецПроцедуры
 
 
 //============================================================================
 //МЕГАПРАЙС РЕГИСТРАЦИЯ
 
 &НаСервере
 Процедура МегапрайсТрансформироватьПрайсНаСервере()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.ТрансформацияПрайса();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура МегапрайсТрансформироватьПрайс(Команда)
	 
	 МегапрайсТрансформироватьПрайсНаСервере();
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура Результат_РегистрацияЦенПоставщикаМегапрайсСервер() 
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.Результат_РегистрацияЦенПоставщикаМегапрайс();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Результат_СоздатьМегапрайсРегистрацияЦен(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		 Сообщить("Не указан ПРОФИЛЬ прайса партнера!");
		 Возврат;
	 КонецЕсли;
	 
	 СообщениеВЖурналКлиент("РЕГИСТРАЦИЯ ПРАЙСА - начало");
	 
	 Результат_РегистрацияЦенПоставщикаМегапрайсСервер();
	 
	 СообщениеВЖурналКлиент("РЕГИСТРАЦИЯ ПРАЙСА - завершение - обработано строк - "+Объект.ТабличнаяЧасть.Количество(),Истина);
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура МегапрайсПроверкаЗагрузкиЗаказаКлиентаНаСервере()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.Результат_ДокументЗаказПокупателя();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура МегапрайсПроверкаЗагрузкиЗаказаКлиента(Команда)
	 МегапрайсПроверкаЗагрузкиЗаказаКлиентаНаСервере();
 КонецПроцедуры
 
 
 //============================================================================
 //НОВАЯ ВЕРСИЯ БЕЗ СОРТИРОВКИ 
 
 &НаСервере
 Процедура ИспользоватьВерсионностьПриИзмененииНаСервере()
	 Константы.ИспользоватьВерсионированиеОбъектов.Установить(Объект.ИспользоватьВерсионность);
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ИспользоватьВерсионностьПриИзменении(Элемент)
	 ИспользоватьВерсионностьПриИзмененииНаСервере();
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НастройкаДополнительныхРеквизитов(Команда)
	 
	 ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.Форма.ФормаСписка",,ЭтаФорма); 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ФайлКаталогНаЛокальномДискеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	 ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь'");
	 
	 ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ФайлКаталогНаЛокальномДискеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));		
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ФайлКаталогНаЛокальномДискеНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	 
	 ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	 
	 Если (ВыбранныеФайлы <> Неопределено) Тогда
		 Объект.ФайлКаталогНаЛокальномДиске = ДиалогОткрытияФайла.Каталог;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура Автозамены_ОтрытьРегистрАвтозамен(Команда)
	 
	 ОткрытьФорму("РегистрСведений.мегапрайсАвтозаменыСправочников.ФормаСписка");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьНоменклатуруПоставщиков(Команда)
	 
	 СтруктураПараметров = Новый Структура;
	 Попытка
		 ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаНоменклатураПоставщиков",СтруктураПараметров,ЭтаФорма); 
	 Исключение
		 ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.ФормаНоменклатураПоставщиков",СтруктураПараметров,ЭтаФорма);  
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура Автозамены_ПоказатьПустые(Команда)
	 
	 Элементы.АвтозаменыСправочников.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка",Истина);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 
	 СтандартанаяОбработка = Ложь;
	 
	 ТекущиеДанные = Элементы.ТаблицаСообщений.ТекущиеДанные;
	 Попытка
		 ПоказатьЗначение(,ТекущиеДанные.ОбъектСсылка); 
	 Исключение
	 КонецПопытки;
	 
 КонецПроцедуры
 
 
 //АНАЛИЗАТОР (НОВОЕ)
 
 &НаКлиенте
 Процедура МегапрайсОткрытьАнализатор(Команда)
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ПрайсПартнера", Объект.ПрайсПартнера);		
	 
	 ОткрытьФорму("Обработка.мегапрайсАнализаторПрайсов.Форма.Форма",СтруктураПараметров,ЭтаФорма);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомадаЗаписатьИУстановитьЗаменыГруппы(Команда)
	 
	 КомадаЗаписатьИУстановитьЗаменыГруппыНаСервере();
	 
	 Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе;
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ВыполнитьСоздатьНовыхПроизводителейИзГрупп()
	 
	 УстановитьПривилегированныйРежим(Истина);
	 
	 спрПроизводители = Справочники.Производители;
	 
	 Для Каждого ВыборкаЗамена Из Объект.ТаблицаГруппНоменклатуры Цикл	
		 Если НЕ ЗначениеЗаполнено(ВыборкаЗамена.Поле_Родитель1) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 НашлиСсылку = спрПроизводители.НайтиПоНаименованию(ВыборкаЗамена.Поле_Родитель1,Истина);
		 
		 Если НашлиСсылку = спрПроизводители.ПустаяСсылка() Тогда
			 НовыйЭлемент = спрПроизводители.СоздатьЭлемент();
			 НовыйЭлемент.Наименование = ВыборкаЗамена.Поле_Родитель1;
			 НовыйЭлемент.Записать();
			 НашлиСсылку = НовыйЭлемент.Ссылка;
		 КонецЕсли;
		 
		 ВыборкаЗамена.НазначитьПроизводителя = НашлиСсылку.Ссылка;
	 КонецЦикла;						
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура СоздатьНовыхПроизводителейИзГрупп(Команда)
	 
	 ВыполнитьСоздатьНовыхПроизводителейИзГрупп();
	 Состояние("Завершено");
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура КомадаЗаписатьИУстановитьЗаменыГруппыНаСервере()
	 
	 Если ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда 
		 ПрайсОбъект = Объект.ПрайсПартнера.ПолучитьОбъект();	
		 ПрайсОбъект.ТаблицаГруппНоменклатуры.Загрузить(Объект.ТаблицаГруппНоменклатуры.Выгрузить());
		 ПрайсОбъект.Записать();
	 КонецЕсли;
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	 
	 ОбработкаОбъект.Заполнение_ДополнитьТаблицуГруппаНоменклатуры();	 
	 ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьЖурналУстановкиЦен(Команда)
	 
	 ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаСписка");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьЖурналМегапрайс(Команда)
	 
	 ОткрытьФорму("РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.ФормаСписка");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьСправочникНоменклатуры(Команда)
	 
	 ОткрытьФорму("Справочник.Номенклатура.ФормаСписка");
	 
 КонецПроцедуры
 
 
 
 
 &НаСервере
 Процедура ЗагрузитьТаблицуИзВнешнейПрограммыИнтерактивно(РезультатЗакрытия,Параметры)
	 
	 Если РезультатЗакрытия = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Объект.АдресДанныхВХранилище = РезультатЗакрытия.АдресДанныхВХранилище;
	 ЗаполнитьТаблицыВОбработке(Объект.АдресДанныхВХранилище);
	 
	 Элементы.Страницы.ТекущаяСтраница = Элементы.ИсходнаяТаблица;
	 
 КонецПроцедуры 
 
 &НаКлиенте
 Процедура ОткрытьДополнительнуюПрограммуЗагрузки(Команда)
	 
	 Если НЕ ЗначениеЗаполнено(Объект.ВнешняяОбработкаЗагрузкиФайла) Тогда
		 Сообщить("Внешняя обработка не подключена или не выбрана. 
		 |Если вы не видите поля выбора обработки - необходимо в настройках УТ включить использование внешних отчетов и обработок.
		 |Администрирование -> Печатные формы, отчеты и обработки -> галка Дополнительные отчеты и обработки.");
		 Возврат;
	 КонецЕсли;
	 
	 ОписаниеОповещение = Новый ОписаниеОповещения("ЗагрузитьТаблицуИзВнешнейПрограммыИнтерактивно", ЭтаФорма);
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);
	 
	 ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(Объект.ВнешняяОбработкаЗагрузкиФайла);
	 ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещение);
	 
 КонецПроцедуры
 
 
 
 &НаКлиенте
 Процедура Результат_ВыполнитьЗагрузитьКартинки(Команда)
	 
	 АдресПередаваемыхПараметров = ПоместитьДанныеВХранилище_ЗагрузкаКартинок();
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	 
	 Попытка
		 АдресВоВременномХранилище = ОткрытьФорму("Обработка.мегапрайсЗагрузкаКартинок.Форма.ФормаОбработки",СтруктураПараметров,ЭтаФорма); 
	 Исключение
		 АдресВоВременномХранилище = ОткрытьФорму("ВнешняяОбработка.мегапрайсЗагрузкаКартинок.Форма.ФормаОбработки",СтруктураПараметров,ЭтаФорма);  
	 КонецПопытки;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	 
	 Если НЕ ЗакрытьОбработку Тогда
		 Отказ = Истина;
		 ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Работа будет завершена, все введенные данные будут потеряны. Закрыть?'"), РежимДиалогаВопрос.ДаНет);
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	 
	 Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 ЗакрытьОбработку = Истина;
		 Закрыть();
	 КонецЕсли;
	 
 КонецПроцедуры
 
 
 
 //============================================================================
 // НОВАЯ ВЕРСИЯ 2019
 
 &НаКлиенте
 Процедура ЗаполнитьНастройкиХарактеристикКоманда(Команда)
	 
	 ИнициализироватьНастройкиХарактеристикСервер();
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);
	 
	 Объект.НастройкиКолонокХарактеристики.Сортировать("Сортировка,НаборСвойств");
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЗаполнитьНастройкиСвойстваНоменклатурыКоманда(Команда)
	 
	 ИнициализироватьНастройкиСвойствСервер();
	 
	 ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);	 
	 УстановитьУсловноеОформлениеТаблицы(ИндексТекущейСтраницы);
	 
	 Объект.НастройкиКолонокДополнительныеРеквизиты.Сортировать("Сортировка,НаборСвойств");
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ОбновитьНаборыВариантовПоиска()
	 
	 //////////////////////////////////////////////
	 
	 НаборыВариантовПоиска.Очистить();
	 
	 СверткаТабл = Объект.НастройкаПоиска.Выгрузить(,"ГруппаПоиска"); 
	 СверткаТабл.Свернуть("ГруппаПоиска");
	 //СверткаТабл.Сортировать("ГруппаПоиска");
	 Для Каждого Стр Из СверткаТабл Цикл
		 НоваяСтрока = НаборыВариантовПоиска.Добавить();
		 НоваяСтрока.Наименование = Стр.ГруппаПоиска;
		 НоваяСтрока.Ссылка = Стр.ГруппаПоиска;
	 КонецЦикла;
	 //НаборыВариантовПоиска.Сортировать("Наименование");
	 
	 НоваяСтрока = НаборыВариантовПоиска.Вставить(0);
	 НоваяСтрока.Наименование = "[Все наборы]";
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ОбновитьНаборыКолонок()
	 
	 //////////////////////////////////////////////
	 
	 НаборыКолонок.Очистить();
	 
	 СверткаТабл = Объект.НастройкиКолонокЛиста.Выгрузить(,"ГруппаПолей"); 
	 СверткаТабл.Свернуть("ГруппаПолей");
	 //СверткаТабл.Сортировать("ГруппаПолей");
	 Для Каждого Стр Из СверткаТабл Цикл
		 НоваяСтрока = НаборыКолонок.Добавить();
		 НоваяСтрока.Наименование = Стр.ГруппаПолей;
		 НоваяСтрока.Ссылка = Стр.ГруппаПолей;
	 КонецЦикла;
	 
	 НоваяСтрока = НаборыКолонок.Вставить(0);
	 НоваяСтрока.Наименование = "[Все наборы]";
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ОбновитьНаборыСвойствХарактеристик()
	 
	 //////////////////////////////////////////////
	 
	 НаборыСвойствХарактеристик.Очистить();
	 
	 СверткаТабл = Объект.НастройкиКолонокХарактеристики.Выгрузить(,"НаборСвойств"); 
	 СверткаТабл.Свернуть("НаборСвойств");
	 СверткаТабл.Сортировать("НаборСвойств");
	 Для Каждого Стр Из СверткаТабл Цикл
		 НоваяСтрока = НаборыСвойствХарактеристик.Добавить();
		 НоваяСтрока.Наименование = Стр.НаборСвойств;
		 НоваяСтрока.Ссылка = Стр.НаборСвойств;
	 КонецЦикла;
	 НаборыСвойствХарактеристик.Сортировать("Наименование");
	 
	 НоваяСтрока = НаборыСвойствХарактеристик.Вставить(0);
	 НоваяСтрока.Наименование = "[Все наборы]";
	 
 КонецПроцедуры
 
 &НаСервере
 Процедура ОбновитьНаборыСвойствНоменклатуры()
	 
	 //////////////////////////////////////////////
	 
	 НаборыСвойствРеквизитов.Очистить();
	 
	 СверткаТабл = Объект.НастройкиКолонокДополнительныеРеквизиты.Выгрузить(,"НаборСвойств"); 
	 СверткаТабл.Свернуть("НаборСвойств");
	 СверткаТабл.Сортировать("НаборСвойств");
	 Для Каждого Стр Из СверткаТабл Цикл
		 НоваяСтрока = НаборыСвойствРеквизитов.Добавить();
		 НоваяСтрока.Наименование = Стр.НаборСвойств;
		 НоваяСтрока.Ссылка = Стр.НаборСвойств;
	 КонецЦикла;
	 НаборыСвойствРеквизитов.Сортировать("Наименование");
	 
	 НоваяСтрока = НаборыСвойствРеквизитов.Вставить(0);
	 НоваяСтрока.Наименование = "[Все наборы]";
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура НавигацияНаборыВариантовПоискаПриАктивизацииСтроки(Элемент)
	 
	 ТекущиеДанные = Элементы.НаборыВариантовПоиска.ТекущиеДанные;
	 
	 Если НЕ ТекущиеДанные = Неопределено Тогда
		 Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			 Элементы.НастройкаПоиска.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПоиска",ТекущиеДанные.Ссылка);
		 Иначе
			 Элементы.НастройкаПоиска.ОтборСтрок = Неопределено;
		 КонецЕсли;
	 Иначе
		 Элементы.НастройкаПоиска.ОтборСтрок = Неопределено;	
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НавигацияНаборыКолонокПриАктивизацииСтроки(Элемент)
	 
	 ТекущиеДанные = Элементы.НаборыКолонок.ТекущиеДанные;
	 
	 Если НЕ ТекущиеДанные = Неопределено Тогда
		 Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			 Элементы.НастройкиКолонокЛиста.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолей",ТекущиеДанные.Ссылка);
		 Иначе
			 Элементы.НастройкиКолонокЛиста.ОтборСтрок = Неопределено;
		 КонецЕсли;
	 Иначе
		 Элементы.НастройкиКолонокЛиста.ОтборСтрок = Неопределено;	
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НавигацияНаборыСвойствХарактеристикиПриАктивизацииСтроки(Элемент)
	 
	 ТекущиеДанные = Элементы.НаборыСвойствХарактеристик.ТекущиеДанные;
	 
	 Если НЕ ТекущиеДанные = Неопределено Тогда
		 Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			 Элементы.НастройкиКолонокХарактеристики.ОтборСтрок = Новый ФиксированнаяСтруктура("НаборСвойств",ТекущиеДанные.Ссылка);
		 Иначе
			 Элементы.НастройкиКолонокХарактеристики.ОтборСтрок = Неопределено;
		 КонецЕсли;
	 Иначе
		 Элементы.НастройкиКолонокХарактеристики.ОтборСтрок = Неопределено;	
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НавигацияНаборыСвойствРеквизитыПриАктивизацииСтроки(Элемент)
	 
	 ТекущиеДанные = Элементы.НаборыСвойствРеквизитов.ТекущиеДанные;
	 
	 Если НЕ ТекущиеДанные = Неопределено Тогда
		 Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			 Элементы.НастройкиКолонокДополнительныеРеквизиты.ОтборСтрок = Новый ФиксированнаяСтруктура("НаборСвойств",ТекущиеДанные.Ссылка);
		 Иначе
			 Элементы.НастройкиКолонокДополнительныеРеквизиты.ОтборСтрок = Неопределено;
		 КонецЕсли;
	 Иначе
		 Элементы.НастройкиКолонокДополнительныеРеквизиты.ОтборСтрок = Неопределено;	
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура НастройкиКолонокНомерКолонкиПриИзменении(Элемент)
	 
	 Если Элементы.ГлавныеСтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНастройкаКолонок Тогда
		 ТекущаяСтрока = Элементы.НастройкиКолонокЛиста.ТекущиеДанные;
		 
	 ИначеЕсли Элементы.ГлавныеСтраницыНастроек.ТекущаяСтраница = Элементы.НастройкиЗагрузкиХарактеристик Тогда   
		 ТекущаяСтрока = Элементы.НастройкиКолонокХарактеристики.ТекущиеДанные;
		 
	 ИначеЕсли Элементы.ГлавныеСтраницыНастроек.ТекущаяСтраница = Элементы.НастройкиЗагрузкиДопРеквизитов Тогда
		 ТекущаяСтрока = Элементы.НастройкиКолонокДополнительныеРеквизиты.ТекущиеДанные;		 
	 Иначе
		 Возврат;
	 КонецЕсли;
	 
	 Если ТекущаяСтрока.НомерКолонки = 0 Тогда
		 ТекущаяСтрока.Пометка = Ложь;
		 ТекущаяСтрока.Сортировка = 999;
	 Иначе
		 ТекущаяСтрока.Пометка = Истина;
		 ТекущаяСтрока.Сортировка = ТекущаяСтрока.НомерКолонки;
	 КонецЕсли;
	 
	 //Объект.НастройкиКолонокЛиста.Сортировать("Сортировка,ГруппаПолей");
	 //Объект.НастройкиКолонокХарактеристики.Сортировать("Сортировка,НаборСвойств");
	 //Объект.НастройкиКолонокДополнительныеРеквизиты.Сортировать("Сортировка,НаборСвойств");
	 
 КонецПроцедуры
 
 
 //ЗАБОР ФАЙЛОВ ИЗ ПОЧТЫ
 
 Процедура ЗагрузитьФайлыЭлектроннойПочты()
	 
	 Профиль = Новый ИнтернетПочтовыйПрофиль;
	 Профиль.АдресСервераSMTP = Объект.УчетнаяЗапись.СерверИсходящейПочты;
	 Профиль.АдресСервераPOP3 = Объект.УчетнаяЗапись.СерверВходящейПочты;
	 Профиль.ПортSMTP = Объект.УчетнаяЗапись.ПортСервераИсходящейПочты;
	 Профиль.ПортPOP3 = Объект.УчетнаяЗапись.ПортСервераВходящейПочты;
	 Профиль.АутентификацияSMTP = Объект.УчетнаяЗапись.СпособSMTPАутентификации;
	 ПРофиль.АутентификацияPOP3 = Объект.УчетнаяЗапись.СпособPOP3Аутентификации;
	 Профиль.Пользователь = Объект.УчетнаяЗапись.ПользовательSMTP;
	 Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.УчетнаяЗапись, "Пароль, ПарольSMTP");
	 Профиль.Пароль = Пароли.Пароль;
	 Профиль.ПарольSMTP = Пароли.ПарольSMTP;
	 
	 Почта = Новый ИнтернетПочта;
	 Почта.Подключиться(Профиль, "");
	 
	 МассивСообщений = Почта.Выбрать(Ложь);	 
	 Для Каждого Сообщение из МассивСообщений Цикл
		 Для Каждого Вложение из Сообщение.Вложения Цикл
			 Сообщить(Вложение.Имя);        
			 //ПутьДоФайла = "E:\Users\username01\Desktop\" + Вложение.Имя;
			 //Вложение.Данные.Записать(ПутьДоФайла);
		 КонецЦикла;
	 КонецЦикла;
	 
	 Почта.Отключиться();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОткрытьПотоковаяЗагрузка(Команда)
	 
	 ОткрытьФорму("Обработка.мегапрайсРедактор.Форма",, ЭтаФорма);
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура Результат_ПроизвольныйАлгоритм()
	 
	 ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	 ОбработкаОбъект.Результат_ПроизвольныйАлгоритм();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаАлгоритмРезультат(Команда)
	 
	 Результат_ПроизвольныйАлгоритм();
	 
 КонецПроцедуры

 
 
 
 
 
 
 
 ЗакрытьОбработку = Ложь;
 
 мЖирныйШрифт = Новый Шрифт(, , Истина);
 
 
 
 
 
 
 
