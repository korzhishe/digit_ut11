/////////////////////////////////////////////////////////////////////////////
Функция ВнестиДокументВБазу(Об,СтрокаОшибок) Экспорт
	
	Если Об.Шаблон.ГрупповаяРабота тогда
		Если НЕ ПеренестиДанныеПоДокументуВСправочник(Об,СтрокаОшибок) тогда
			Возврат Неопределено; 
		КонецЕсли;	
	КонецЕсли;
	ЭтоНовыйДокумент = Ложь;

	ПараметрыДокумента=СобратьПараметры();
	Если Об.Шаблон.ПользовательДляАвтозаполнения.Пустая() тогда
		ПараметрыДокумента.Вставить("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Иначе	
		ПараметрыДокумента.Вставить("Пользователь",Об.Шаблон.ПользовательДляАвтозаполнения);
	КонецЕсли;	
	ПараметрыДокумента.Вставить("Об",Об);
	
//	НачатьТранзакцию();
	
	ЭтоОтборРазмещениеТоваров = Ложь; 
	Попытка
	Док=Об.ИсходныйДокумент.ПолучитьОбъект();
	Если Док.Метаданные().Имя="ОтборРазмещениеТоваров" и Об.Шаблон.ПроверкаОтборРазмещение тогда
		СтатусПослеЗагрузки = ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(Об,Док);
		ЭтоОтборРазмещениеТоваров = Истина;
	КонецЕсли;
	Исключение
	КонецПопытки;
	
	ИсходныеДанныеПодбор = Неопределено;
	
	Если СокрЛП(Об.Шаблон.ВидДокументаНового)="" тогда//старая схема
		ПараметрыДокумента.Вставить("ИмяТЧПодбор",Об.Шаблон.ИмяТабличнойЧастиПодбор);
		ПараметрыДокумента.Вставить("ИмяТЧПриемка",Об.Шаблон.ИмяТабличнойЧастиПриемка);
		Попытка
			Док=Об.ИсходныйДокумент.ПолучитьОбъект();
			ПараметрыДокумента.Вставить("Док",Док);
		Исключение
			Док=Документы[Об.Шаблон.ВидДокумента].СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
			ПараметрыДокумента.Вставить("Док",Док);
		КонецПопытки;
		
		Попытка
			Если Об.Шаблон.ИспользоватьПодбор тогда
				Если Об.Шаблон.Егаис Тогда
					Возврат ПолучитьДокументЕГАИС(Док, Об, ЭтоНовыйДокумент);
				КонецЕсли;
				Если Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=2 И (НЕ Об.Шаблон.ПроверкаОтборРазмещение ИЛИ СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) тогда	
					ИсходныеДанныеПодбор=Док[ПараметрыДокумента.ИмяТЧПодбор].Выгрузить();
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);
					Попытка ОчиститьТабличнуюЧасть(Док["Серии"]); Исключение КонецПопытки; 
					Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
						ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПодбор>0);
					КонецЕсли;	
				ИначеЕсли Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=1 тогда
					Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
						Если Док[ПараметрыДокумента.ИмяТЧПодбор].Количество()=0 тогда
							ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПодбор>0);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			Если Об.Шаблон.ИспользоватьПриемку тогда
				Если Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка=2 И (НЕ Об.Шаблон.ПроверкаОтборРазмещение ИЛИ СтатусПослеЗагрузки = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок) тогда
					ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);
					Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
						ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПриемка>0);
					КонецЕсли;	
				ИначеЕсли Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда
					Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
						Если Док[ПараметрыДокумента.ИмяТЧПриемка].Количество()=0 тогда
							ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПриемка>0);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		Исключение
			СтрокаОшибок="Ошибка начального заполнения документа:"+ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;
	Иначе//новая схема	
		ПараметрыДокумента.Вставить("ИмяТЧПодбор",Об.Шаблон.ИмяТабличнойЧастиНовойПодбор);
		ПараметрыДокумента.Вставить("ИмяТЧПриемка",Об.Шаблон.ИмяТабличнойЧастиНовойПриемка);
		ПараметрыДокумента.Вставить("ИсходныйДокумент",Об.ИсходныйДокумент);
		
		Попытка
			Док=Об.НовыйДокумент.ПолучитьОбъект();
			ПараметрыДокумента.Вставить("Док",Док);
		Исключение
			Док=Документы[Об.Шаблон.ВидДокументаНового].СоздатьДокумент();
			ЭтоНовыйДокумент = Истина;
			ПараметрыДокумента.Вставить("Док",Док);
		КонецПопытки;
		
		Попытка
			ЗаполнитьНаОсновании(ПараметрыДокумента);
		Исключение
			Док.Заполнить(Об.ИсходныйДокумент);
		КонецПопытки;

		Если Об.Шаблон.ИспользоватьПодбор тогда
			Если Об.Шаблон.Егаис Тогда
				Возврат ПолучитьДокументЕГАИС(Док, Об, ЭтоНовыйДокумент);
			КонецЕсли;
		КонецЕсли;	

		//Попытка
		//	Если Об.Шаблон.ВидДокументаНового <> "" Тогда 
		//		Док.Номер = Об.ИсходныйДокумент.Номер;
		//	КонецЕсли;
		//Исключение
		//КонецПопытки;

		
		Если Об.Шаблон.ИспользоватьПодбор тогда
			Если Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=2 тогда
				ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПодбор]);
				Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
					ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПодбор>0);
				КонецЕсли;	
			ИначеЕсли Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=1 тогда
				Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
					Если Док[ПараметрыДокумента.ИмяТЧПодбор].Количество()=0 тогда
						ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПодбор>0);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		Если Об.Шаблон.ИспользоватьПриемку тогда
			Если Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка=2 тогда
				ОчиститьТабличнуюЧасть(Док[ПараметрыДокумента.ИмяТЧПриемка]);
				Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
					ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПриемка>0);
				КонецЕсли;	
			ИначеЕсли Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка=1 тогда
				Если Док.Метаданные().Имя="ПересчетТоваров" и НЕ Об.Шаблон.ЗаполнениеТЧТолькоСобраннымиПозициямиПодбор Тогда
					Если Док[ПараметрыДокумента.ИмяТЧПриемка].Количество()=0 тогда
						ЗаполнитьПересчетТоваров(Док,Об.Шаблон.ИспользованиеЯчеекПриемка>0);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	
	Если ЭтоНовыйДокумент  тогда
		ЗаполнитьШапку(ПараметрыДокумента);	
	КонецЕсли;
	
	Если Об.Шаблон.СоздаватьДокументыУпаковочныхЛистов  тогда
		Попытка ЗаполнитьУпаковочныеЛисты(Об); Исключение КонецПопытки;	
	КонецЕсли;	
			

	КомментДока = ?(Об.ИсходныйДокумент = Неопределено, "", Об.ИсходныйДокумент.Комментарий);	
	Если СтрЧислоВхождений(КомментДока, "DataMobile") = 0 Тогда
		Док.Комментарий=" Выполнено в DataMobile ("+ТекущаяДата()+"). "+КомментДока+" ";
	КонецЕсли;

	
	Если Док.Метаданные().Имя="ОтборРазмещениеТоваров"  И СтатусПослеЗагрузки<>Неопределено тогда
		Док.Статус = СтатусПослеЗагрузки;
	КонецЕсли;
	
	Для Каждого НовЗнач из Об.Шаблон.НовыеЗначенияРеквизитов цикл
			Док[НовЗнач.ИмяРеквизита]=НовЗнач.ЗначениеРеквизита;
	КонецЦикла;	
		
	
	
	
	Если Об.Шаблон.ИспользоватьПодбор тогда
		Для Каждого СтрТЧ из Об.СобранныеДанныеПодбор цикл
			УстановитьАвтора(Док,СтрТЧ.Пользователь);
			УстановитьЕдиницу(СтрТЧ,Док);
		КонецЦИкла;	
		ТабТСД=Об.СобранныеДанныеПодбор.Выгрузить();
		ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,ЯчейкаСсылка,ШтрихКод,УпаковочныйЛист","Количество");

		Если Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0 тогда
			
							Если ЭтоОтборРазмещениеТоваров и Об.Шаблон.ПроверкаОтборРазмещение тогда
								Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда
									
									Для каждого СтрокаОчисткиПодбор из док[ПараметрыДокумента.ИмяТЧПодбор] цикл
										СтрокаОчисткиПодбор.КоличествоУпаковокОтобрано = 0;
										СтрокаОчисткиПодбор.КоличествоОтобрано = 0;
									КонецЦикла;
								КонецЕсли;	
							КонецЕсли;	
							
			Для Каждого СтрТЧ из ТабТСД цикл
				Если СтрТЧ.Номенклатура.Пустая() Тогда
					СтрокаОшибок="Не выбрана номенклатура!!!";
					Возврат Неопределено;
				КонецЕсли;
				
				Если СтрТЧ.Количество = 0 и НЕ Док.Метаданные().Имя="ПересчетТоваров" Тогда
					Продолжить;
				КонецЕсли;	

				
				лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика",СтрТЧ.Номенклатура,СтрТЧ.ХарактеристикаНоменклатуры);
				
					лЕстьЯчейка=(Об.Шаблон.ИспользованиеЯчеекПодбор>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Ячейка")<>Неопределено));
					лЕстьСерия=(Об.Шаблон.ИспользованиеСерийниковПодбор>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Серия")<>Неопределено) и (Док.метаданные().ТабличныеЧасти.Найти("Серии")=Неопределено));
					лЕстьУпаковка=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка")<>Неопределено);
					
					Если лЕстьЯчейка тогда
						лСтруктураПоиска.Вставить("Ячейка",СтрТЧ.ЯчейкаСсылка);
					КонецЕсли;
					Если лЕстьСерия тогда
						лСтруктураПоиска.Вставить("Серия",СтрТЧ.СерияСсылка);
					КонецЕсли;
					Если лЕстьУпаковка и не Об.Шаблон.БазовыеЕдиницыПриЗагрузке тогда
						Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
							Если Док.Склад.ИспользоватьАдресноеХранение тогда
								лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
							КонецЕсли;	
						Иначе
							лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
						КонецЕсли;	
					КонецЕсли;	
					
					Если Об.Шаблон.ИспользоватьТиповыеУпаковочныеЛисты и СтрТЧ.УпаковочныйЛист<>"" и Лев(СтрТЧ.УпаковочныйЛист,3)="UPL" тогда
						НомерУпакЛиста= СтрЗаменить(СтрТЧ.УпаковочныйЛист,"////","");
						НомерУпакЛиста = Прав(НомерУпакЛиста,СтрДлина(НомерУпакЛиста)-3);
						ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);
						ДокументТиповогоУпакЛиста = ДокументУпакЛиста.ТиповойУпаковочныйЛист;
						лСтруктураПоиска.Вставить("УпаковочныйЛистРодитель",ДокументТиповогоУпакЛиста);
					КонецЕсли;
					
					СтрокиПоиска=док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество()=0 тогда
						СтрокаТабличнойЧасти=док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
						СтрокаТабличнойЧасти.Номенклатура=СтрТЧ.Номенклатура;
						СтрокаТабличнойЧасти.Характеристика=СтрТЧ.ХарактеристикаНоменклатуры;
						Если лЕстьЯчейка тогда
							СтрокаТабличнойЧасти.Ячейка=СтрТЧ.ЯчейкаСсылка;
						КонецЕсли;
						Если лЕстьСерия тогда
							СтрокаТабличнойЧасти.Серия=СтрТЧ.СерияСсылка;
						КонецЕсли;
						Если лЕстьУпаковка и не Об.Шаблон.БазовыеЕдиницыПриЗагрузке тогда
							Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
								Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение тогда
									СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
								КонецЕсли;	
							Иначе
								СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
							КонецЕсли;
						КонецЕсли;
						Если Док.Метаданные().Имя="ДатаМобайл_УпаковочныйЛист" ТОгда
							СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
						КонецЕсли;
						
						Если Об.Шаблон.ИспользоватьТиповыеУпаковочныеЛисты и СтрТЧ.УпаковочныйЛист<>"" и Лев(СтрТЧ.УпаковочныйЛист,3)="UPL" тогда
							СтрокаТабличнойЧасти.УпаковочныйЛистРодитель = ДокументТиповогоУпакЛиста;
							
							лСтруктураПоискаУпакЛистов = Новый Структура("УпаковочныйЛист",ДокументТиповогоУпакЛиста);
							СтрокиПоискаУпаковочныхЛистов = док[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(лСтруктураПоискаУпакЛистов);
							Если СтрокиПоискаУпаковочныхЛистов.Количество()=0 и НЕ ДокументТиповогоУпакЛиста.Пустая() тогда
								СтрокаТабличнойЧастиУпакЛиста = док[ПараметрыДокумента.ИмяТЧПодбор].Добавить();
								СтрокаТабличнойЧастиУпакЛиста.УпаковочныйЛист = ДокументТиповогоУпакЛиста;
								СтрокаТабличнойЧастиУпакЛиста.ЭтоУпаковочныйЛист = Истина;
								СтрокаТабличнойЧастиУпакЛиста.Количество  =  1;
								СтрокаТабличнойЧастиУпакЛиста.КоличествоУпаковок = 1;
								ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧастиУпакЛиста);
							КонецЕсли;	
						КонецЕсли;

						ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента,Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти,ИсходныеДанныеПодбор);
	
					Иначе	
						СтрокаТабличнойЧасти=СтрокиПоиска[0];
					КонецЕсли;
					
						Попытка 
							КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
							КоэффициентУпаковки = ?(КоэффициентУпаковки=0,1,КоэффициентУпаковки);
						Исключение
							КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель=0,1,СтрТЧ.ЕдиницаИзмерения.Числитель);
						Конецпопытки;
						
				Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
					Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение и НЕ Об.Шаблон.БазовыеЕдиницыПриЗагрузке тогда
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт*КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+СтрТЧ.Количество*КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт;
					КонецЕсли;
				ИначеЕсли ЭтоОтборРазмещениеТоваров и Об.Шаблон.ПроверкаОтборРазмещение Тогда
	                Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда								
						СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано*КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоУпаковокОтобрано=СтрокаТабличнойЧасти.КоличествоУпаковок;
						СтрокаТабличнойЧасти.КоличествоОтобрано=СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				Иначе
					Если НЕ Об.Шаблон.БазовыеЕдиницыПриЗагрузке тогда
						Попытка
							СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;  
							СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
						Исключение
							СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество;
						КонецПопытки;
					Иначе
						Попытка
							СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество*КоэффициентУпаковки;  
							СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок;
						Исключение
							СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+СтрТЧ.Количество*КоэффициентУпаковки;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТабличнойЧасти <> Неопределено  тогда
					ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти);
					
					//Серии в отдельной ТЧ
					Если Док.метаданные().ТабличныеЧасти.Найти("Серии")<>Неопределено и НЕ СтрТЧ.СерияСсылка.Пустая() тогда
						Если Док.Метаданные().Имя="ПоступлениеТоваровУслуг" или Док.Метаданные().Имя="ПриобретениеТоваровУслуг" или (СтрокаТабличнойЧасти.СтатусУказанияСерий<>13 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>14 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>9 и СтрокаТабличнойЧасти.СтатусУказанияСерий<>10  и СтрокаТабличнойЧасти.СтатусУказанияСерий<>0) тогда
							лСтруктураПоискаСерий=Новый Структура("Номенклатура,Характеристика,Серия",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика,СтрТЧ.СерияСсылка);
							СтрокиПоискаСерий=док["Серии"].НайтиСтроки(лСтруктураПоискаСерий);
							Если СтрокиПоискаСерий.Количество()=0 тогда
								СтрокаТабличнойЧастиСерии=док["Серии"].Добавить();
								СтрокаТабличнойЧастиСерии.Номенклатура=СтрокаТабличнойЧасти.Номенклатура;
								СтрокаТабличнойЧастиСерии.Характеристика=СтрокаТабличнойЧасти.Характеристика;
								СтрокаТабличнойЧастиСерии.Серия=СтрТЧ.СерияСсылка;
								Попытка СтрокаТабличнойЧастиСерии.Склад=СтрокаТабличнойЧасти.Склад; Исключение КонецПопытки;
								Попытка СтрокаТабличнойЧастиСерии.Назначение=СтрокаТабличнойЧасти.Назначение; Исключение КонецПопытки;
							Иначе	
								СтрокаТабличнойЧастиСерии=СтрокиПоискаСерий[0];
							КонецЕсли;
							
							СтрокаТабличнойЧастиСерии.Количество=СтрокаТабличнойЧастиСерии.Количество+СтрТЧ.Количество*КоэффициентУпаковки;
						КонецЕсли;
					КонецЕсли;	
					//Серии в отдельной ТЧ

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Об.Шаблон.ИспользоватьПриемку тогда
		Для Каждого СтрТЧ из Об.СобранныеДанныеПриемка цикл
			УстановитьАвтора(Док,СтрТЧ.Пользователь);
			УстановитьЕдиницу(СтрТЧ,Док);
		КонецЦИкла;	
		ТабТСД=Об.СобранныеДанныеПриемка.Выгрузить();
		ТабТСД.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЯчейкаСсылка,СерияСсылка,ШтрихКод","Количество");
		
		Если Об.Шаблон.ТабличнуюЧастьПриЗагрузкеПриемка<>0 тогда
			
							Если ЭтоОтборРазмещениеТоваров и Об.Шаблон.ПроверкаОтборРазмещение тогда
								Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда
									
									Для каждого СтрокаОчисткиРазмещение из док[ПараметрыДокумента.ИмяТЧПриемка] цикл
										СтрокаОчисткиРазмещение.КоличествоУпаковокРазмещено = 0;
										СтрокаОчисткиРазмещение.КоличествоРазмещено = 0;
									КонецЦикла;
								КонецЕсли;	
							КонецЕсли;	

				
			Для Каждого СтрТЧ из ТабТСД цикл
				Если СтрТЧ.Номенклатура.Пустая() Тогда
					СтрокаОшибок="Не выбрана номенклатура!!!";
					Возврат Неопределено;
				КонецЕсли;	
				
				Если СтрТЧ.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;	

	
				лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика",СтрТЧ.Номенклатура,СтрТЧ.ХарактеристикаНоменклатуры);
				
					лЕстьЯчейка=(Об.Шаблон.ИспользованиеЯчеекПриемка>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Ячейка")<>Неопределено));
					лЕстьСерия=(Об.Шаблон.ИспользованиеСерийниковПриемка>0 и (Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Серия")<>Неопределено));
					лЕстьУпаковка=(Док.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПриемка].Реквизиты.Найти("Упаковка")<>Неопределено);
					
					Если лЕстьЯчейка тогда
						лСтруктураПоиска.Вставить("Ячейка",СтрТЧ.ЯчейкаСсылка);
					КонецЕсли;
					Если лЕстьСерия тогда
						лСтруктураПоиска.Вставить("Серия",СтрТЧ.СерияСсылка);
					КонецЕсли;
					Если лЕстьУпаковка тогда
						лСтруктураПоиска.Вставить("Упаковка",СтрТЧ.ЕдиницаИзмерения);
					КонецЕсли;	
					
					СтрокиПоиска=док[ПараметрыДокумента.ИмяТЧПриемка].НайтиСтроки(лСтруктураПоиска);
					Если СтрокиПоиска.Количество()=0 тогда
						СтрокаТабличнойЧасти=док[ПараметрыДокумента.ИмяТЧПриемка].Добавить();
						СтрокаТабличнойЧасти.Номенклатура=СтрТЧ.Номенклатура;
						СтрокаТабличнойЧасти.Характеристика=СтрТЧ.ХарактеристикаНоменклатуры;
						Если лЕстьЯчейка тогда
							СтрокаТабличнойЧасти.Ячейка=СтрТЧ.ЯчейкаСсылка;
						КонецЕсли;
						Если лЕстьСерия тогда
							СтрокаТабличнойЧасти.Серия=СтрТЧ.СерияСсылка;
						КонецЕсли;
						Если лЕстьУпаковка тогда
							СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
						КонецЕсли;
						Если Док.Метаданные().Имя="ДатаМобайл_УпаковочныйЛист" ТОгда
							СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.ШтрихКод;	
						КонецЕсли;

						ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента,Док,ПараметрыДокумента.ИмяТЧПриемка,СтрокаТабличнойЧасти);
					Иначе	
						СтрокаТабличнойЧасти=СтрокиПоиска[0];
					КонецЕсли;
					
						Попытка 
							КоэффициентУпаковки = СтрТЧ.ЕдиницаИзмерения.Числитель/СтрТЧ.ЕдиницаИзмерения.Знаменатель;
							КоэффициентУпаковки = ?(КоэффициентУпаковки=0,1,КоэффициентУпаковки);
						Исключение
							КоэффициентУпаковки = ?(СтрТЧ.ЕдиницаИзмерения.Числитель=0,1,СтрТЧ.ЕдиницаИзмерения.Числитель);
						Конецпопытки;
						
				Если Док.Метаданные().Имя="ПересчетТоваров" Тогда
					СтрокаТабличнойЧасти.КоличествоУпаковокФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт+СтрТЧ.Количество;
					СтрокаТабличнойЧасти.КоличествоФакт=СтрокаТабличнойЧасти.КоличествоУпаковокФакт*КоэффициентУпаковки;
				ИначеЕсли ЭтоОтборРазмещениеТоваров и Об.Шаблон.ПроверкаОтборРазмещение Тогда
					Если Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками тогда
						СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено=СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.КоличествоРазмещено=СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено*КоэффициентУпаковки;
					Иначе
						СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;
						СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
						СтрокаТабличнойЧасти.КоличествоУпаковокРазмещено=СтрокаТабличнойЧасти.КоличествоУпаковок;
						СтрокаТабличнойЧасти.КоличествоРазмещено=СтрокаТабличнойЧасти.Количество;	
					КонецЕсли;	
				Иначе	
					СтрокаТабличнойЧасти.КоличествоУпаковок=СтрокаТабличнойЧасти.КоличествоУпаковок+СтрТЧ.Количество;
					СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоУпаковок*КоэффициентУпаковки;
				КонецЕсли;
				Если СтрокаТабличнойЧасти <> Неопределено  тогда
					ОбработатьСтрокуТЧ(Док,ПараметрыДокумента.ИмяТЧПриемка,СтрокаТабличнойЧасти);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьСерииВдокументе(Док);
	ВыполнитьДополнительнуюОбработкуДокумента(Док,ПараметрыДокумента);
	
	Док.Записать(РежимЗаписиДокумента.Запись);
	  Попытка
			Если Об.Шаблон.ПроводитьРоботом тогда
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
		КонецПопытки;
	

	
	Об.ДатаЗавершения=ТекущаяДата();
	Если СокрЛП(Об.Шаблон.ВидДокументаНового)="" тогда//старая схема
		Об.ИсходныйДокумент=Док.Ссылка;
	Иначе	
		Об.НовыйДокумент=Док.Ссылка;
	КонецЕсли;	
	
	Об.Записать();
	//ЗафиксироватьТранзакцию();
	Возврат Док.Ссылка;
КонецФункции
Функция ПеренестиДанныеПоДокументуВСправочник(Объект,СтрокаОшибок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДок", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	*
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
	               |ГДЕ
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &ССылкаНаДок
				   |	И НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена";
				   
				   
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
			Если Рез.ИмяТаблицы = "Select" тогда
				НоваяСтрока = Объект.СобранныеДанныеПодбор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Рез);			
			Иначе
				НоваяСтрока = Объект.СобранныеДанныеПриемка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Рез);	
			КонецЕсли;	
	КонецЦикла;
	
	Попытка
		 Объект.Записать();
	 Исключение
		 СтрокаОшибок="Ошибка записи групповых данных: "+ОписаниеОшибки();
		 Возврат Ложь;
	КонецПопытки;
	
	ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиГрупповогоДокумента(Объект.Ссылка);
	Возврат Истина;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
Процедура ОчиститьТабличнуюЧасть(ТабличнаяЧасть) Экспорт
	ТабличнаяЧасть.очистить();
КонецПроцедуры	
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Номенклатура");

	КонецЕсли;

	Суффикс = Неопределено;
	
Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
  Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
  СтруктураПолейТЧ.Вставить("Упаковка");
  СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
  СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
  СтруктураПолейТЧ.Вставить("Номенклатура");
  СтруктураПолейТЧ.Вставить("Характеристика");
  СтруктураПолейТЧ.Вставить("Упаковка");


 КонецЕсли;

	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("УсловиеЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи") Тогда
		СтруктураПолейТЧ.Вставить("ЕстьНедобор");
		СтруктураПолейТЧ.Вставить("ЕстьНеотгружаемые");
		СтруктураПолейТЧ.Вставить("ЕстьИзлишки");
		СтруктураПолейТЧ.Вставить("ЕстьНедостачи");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить("Количество");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПередачуВЭксплуатацию") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("ПередачаВЭксплуатацию");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПриемка") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ,ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции
Процедура ОбработатьСтрокуТЧ(Док,ИмяТЧ,СтрокаТабличнойЧасти) Экспорт
	Если Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ПриобретениеТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			СтруктураДействий.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда
		Если ИмяТЧ="ТоварыОтбор" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ="ТоварыРазмещение" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ЧекККМ" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Док.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Пользователи.ТекущийПользователь()));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
			
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);		
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);		
		КонецЕсли;	

	ИначеЕсли Док.Метаданные().Имя="ЧекЕГАИС" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтруктураДействий = Новый Структура;
			УстановитьЦенуТовара(ТекущаяСтрока);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Пользователи.ТекущийПользователь()));

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			КэшированныеЗначения = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруКэшируемыеЗначения();

			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ЗаказКлиента" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="РасходныйОрдерНаТовары" тогда
		Если ИмяТЧ="ОтгружаемыеТовары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
		КонецЕсли;	
	КонецЕсли;
	
Попытка УстановитьСерииВдокументе(Док); Исключение КонецПопытки;

КонецПроцедуры	
Процедура ОбработатьНовуюСтрокуТЧ(ПараметрыДокумента,Док,ИмяТЧ,СтрокаТабличнойЧасти, ИсходныеДанные = Неопределено) Экспорт
	Если Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			//Если СтрокаТабличнойЧасти.Номенклатура.ИспользоватьУпаковки тогда
			//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			//КонецЕсли;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			Если ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
			КонецЕсли;
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			 Если ПараметрыДокумента.Об.Шаблон.ВидДокументаНового = "РеализацияТоваровУслуг" И ПараметрыДокумента.Об.Шаблон.ВидДокумента  = "ЗаказКлиента" Тогда
			    Если НЕ ПараметрыДокумента.Об.ИсходныйДокумент.Пустая() тогда
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
					СтрокиПоиска = ПараметрыДокумента.Об.ИсходныйДокумент.Товары.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоиска.Количество() >0 тогда
						 СтрокаТабличнойЧасти.Цена = СтрокиПоиска[0].цена;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			

			попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказКлиента.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			исключение
			конецпопытки;	

			
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ПриобретениеТоваровУслуг" или Док.Метаданные().Имя="ПоступлениеТоваровУслуг" тогда
		Если ИмяТЧ="Товары" тогда
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Док.Склад);
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;
		
			СтруктураДействий = Новый Структура;		
			СтруктураДействий.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);		
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Док, СкладГруппа));
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Док.Партнер);
			СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Док,
			Истина
			)
			);
			//Если СтрокаТабличнойЧасти.Номенклатура.ИспользоватьУпаковки тогда
			//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			//КонецЕсли;

			СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Док));
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			Если ИсходныеДанные <> Неопределено тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокиПоиска[0],,"Упаковка,Серия,Количество,КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
			Если (ПараметрыДокумента.Об.Шаблон.ВидДокументаНового = "ПриобретениеТоваровУслуг" ИЛИ ПараметрыДокумента.Об.Шаблон.ВидДокументаНового = "ПоступлениеТоваровУслуг") И ПараметрыДокумента.Об.Шаблон.ВидДокумента  = "ЗаказПоставщику" Тогда
			    Если НЕ ПараметрыДокумента.Об.ИсходныйДокумент.Пустая() тогда
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
					СтрокиПоиска = ПараметрыДокумента.Об.ИсходныйДокумент.Товары.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоиска.Количество() >0 тогда
						 СтрокаТабличнойЧасти.Цена = СтрокиПоиска[0].цена;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказПоставщику.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					 СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			исключение
			конецпопытки;

		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда
		Если ИмяТЧ="ТоварыОтбор" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			//Если СтрокаТабличнойЧасти.Номенклатура.ИспользоватьУпаковки тогда
			//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			//КонецЕсли;

			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Отобрано");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		ИначеЕсли ИмяТЧ="ТоварыРазмещение" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			//Если СтрокаТабличнойЧасти.Номенклатура.ИспользоватьУпаковки тогда
			//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			//КонецЕсли;

			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	 		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","Размещено");
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ЧекККМ" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Док));
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Док.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Пользователи.ТекущийПользователь()));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
			
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;

			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);		
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));

			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);		
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);		
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		КонецЕсли;		

	ИначеЕсли Док.Метаданные().Имя="ЗаказКлиента" тогда
		Если ИмяТЧ="Товары" тогда
			ТекущаяСтрока = СтрокаТабличнойЧасти;
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента));
			
			Попытка
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			Исключение
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Док);
			КонецПопытки;

			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			//Если СтрокаТабличнойЧасти.Номенклатура.ИспользоватьУпаковки тогда
			//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			//КонецЕсли;

			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			Если ЗначениеЗаполнено(Док.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Док));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док));
			КонецЕсли;
			//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Док.НалогообложениеНДС, Док.Дата));
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
			Попытка
				СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Новый Структура("ХозяйственнаяОперация", Док.ХозяйственнаяОперация), Ложь));
			Исключение
				СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Док, Ложь));
			КонецПопытки;	
			СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Док.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			
			ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
			
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
			ТекущаяСтрока.Склад =  Док.Склад;
			
			//заполнить изначальные данные в документе
			Если ИсходныеДанные <> Неопределено тогда
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокиПоиска[0],,"Упаковка,Серия,Количество,КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;	
	ИначеЕсли Док.Метаданные().Имя="ПеремещениеТоваров" тогда
		Если ИмяТЧ="Товары" тогда

			попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаПеремещение.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					 СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			исключение
			конецпопытки;
		КонецЕсли;
	ИначеЕсли Док.Метаданные().Имя="ВнутреннееПотреблениеТоваров" тогда
		Если ИмяТЧ="Товары" тогда

			попытка
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика",СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Характеристика);
				СтрокиПоиска = Док.ЗаказНаВнутреннееПотребление.Товары.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоиска.Количество() >0 тогда
					 СтрокаТабличнойЧасти.КодСтроки = СтрокиПоиска[0].КодСтроки;
				КонецЕсли;
			исключение
			конецпопытки;
		КонецЕсли;	
	
	КонецЕсли;	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////
Функция СобратьПараметры()
	СтруктураПараметров=Новый Структура();
	Возврат СтруктураПараметров;
КонецФункции		
Процедура ЗаполнитьШапку(ПараметрыДокумента)
	Док=ПараметрыДокумента.Док;
	Док.Дата=ТекущаяДата();
	Клиент = ПараметрыДокумента.Об.Клиент;
	ТСД = ПараметрыДокумента.Об.ТСД; 
	
	
	Если ПараметрыДокумента.Об.Шаблон.ВидДокументаНового = "РеализацияТоваровУслуг" И ПараметрыДокумента.Об.Шаблон.ВидДокумента  = "ЗаказКлиента" Тогда
		Док.АдресДоставки = ПараметрыДокумента.Об.ИсходныйДокумент.АдресДоставки;
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(Клиент) Тогда
			Док.Партнер = Клиент;
			Если ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Док.ЗаполнитьУсловияПродажПоУмолчанию();
			ИначеЕсли ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Или ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Док.ЗаполнитьУсловияЗакупокПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда 
		СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Док.КассаККМ);
		Если Док.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			Док.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
			Попытка
				Док.НомерЧекаККМ = НомерПоследнегоЧека() + 1;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Док.ссылка) = Тип("ДокументСсылка.ДатаМобайл_УпаковочныйЛист") Тогда
		Док.ТСД = ТСД;
	КонецЕсли;
	
КонецПроцедуры	
Процедура ЗаполнитьНаОсновании(ПараметрыДокумента)
		
	Док=ПараметрыДокумента.Док;
	ИсходныйДокумент=ПараметрыДокумента.ИсходныйДокумент;
	
	Если Док.Метаданные().Имя="ПриходныйОрдерНаТовары" тогда

		ДанныеЗаполнения = Новый Структура;

		Если ТипЗнч(ИсходныйДокумент)=Тип("ДокументСсылка.ЗаказПоставщику") или ТипЗнч(ИсходныйДокумент)=Тип("ДокументСсылка.ВозвратТоваровОтКлиента") тогда
			ДанныеЗаполнения.Вставить("Склад", 						ИсходныйДокумент.Склад);
			ДанныеЗаполнения.Вставить("Отправитель",                ИсходныйДокумент.Партнер);			
		ИначеЕсли ТипЗнч(ИсходныйДокумент)=Тип("ДокументСсылка.ЗаказНаПеремещение") тогда
			ДанныеЗаполнения.Вставить("Склад", 						ИсходныйДокумент.СкладПолучатель);
			ДанныеЗаполнения.Вставить("Отправитель",                ИсходныйДокумент.СкладОтправитель);			
		КонецЕсли;
		
			ДанныеЗаполнения.Вставить("Распоряжение", 				ИсходныйДокумент);
			ДанныеЗаполнения.Вставить("ДатаПоступления", 			ТекущаяДата());
			ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента",     ИсходныйДокумент.Дата);
			ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",    ИсходныйДокумент.Номер);
			
		Док.Заполнить(ДанныеЗаполнения);
		
	Иначе
			
		Док.Заполнить(ИсходныйДокумент);

	КонецЕсли;

КонецПроцедуры
Процедура  ВыполнитьДополнительнуюОбработкуДокумента(Док,ПараметрыДокумента)
	
    Если Док.Метаданные().Имя="РасходныйОрдерНаТовары" тогда
		Если ПараметрыДокумента.ИмяТЧПодбор="ОтгружаемыеТовары" и Док.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен  тогда
			Для каждого СтрокаТабличнойЧасти из Док[ПараметрыДокумента.ИмяТЧПодбор] цикл
			     ТекущаяСтрока = СтрокаТабличнойЧасти;
			     ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			КонецЦикла;
	    КонецЕсли;
	КонецЕсли;	
	
	
КонецПроцедуры
Функция НомерПоследнегоЧека()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЧекККМ.НомерЧекаККМ) КАК НомерЧекаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерЧекаККМ;
	Иначе
		Возврат 0;
	КонецЕсли; 
КонецФункции // НомерПоследнегоЧека()
Функция ЗаполнитьПересчетТоваров(Док,ПоЯчейкам=Ложь)
	Если ПоЯчейкам тогда
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	ТоварыВЯчейках.Номенклатура КАК Номенклатура,
		                    |	ТоварыВЯчейках.Характеристика КАК Характеристика,
		                    |	ТоварыВЯчейках.Упаковка КАК Упаковка,
		                    |	ТоварыВЯчейках.Ячейка КАК Ячейка,
		                    |	ЕСТЬNULL(ТоварыВЯчейках.ВНаличииОстаток,0) КАК КоличествоУпаковок,
		                    |	ЕСТЬNULL(ТоварыВЯчейках.ВНаличииОстаток,0) * 
							|	ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Числитель,1) КОНЕЦ/ 
				 		 	|	         ВЫБОР КОГДА ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(ТоварыВЯчейках.Упаковка.Знаменатель,1) КОНЕЦ, 1) КАК Количество,
		                    |	ТоварыВЯчейках.Серия,
		                    |	ВЫБОР
		                    |		КОГДА НЕ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
		                    |				И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		                    |			ТОГДА 4
		                    |		ИНАЧЕ 0
		                    |	КОНЕЦ КАК СтатусУказанияСерий
		                    |ИЗ
		                    |	РегистрНакопления.ТоварыВЯчейках.Остатки(
		                    |			&ДатаОстатков,
		                    |			Ячейка.Владелец = &Склад
		                    |				И Ячейка.Помещение = &Помещение) КАК ТоварыВЯчейках
		                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК СкладыПолитикиУчетаСерий
		                    |		ПО ТоварыВЯчейках.Номенклатура.ВидНоменклатуры = СкладыПолитикиУчетаСерий.Ссылка
		                    |			И (СкладыПолитикиУчетаСерий.Склад = &Склад)
		                    |ГДЕ
		                    |	ЕСТЬNULL(ТоварыВЯчейках.ВНаличииОстаток,0)  <> 0");
	Иначе
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                    |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) КАК Количество,
		                    |	ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) КАК КоличествоУпаковок,
		                    |	ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
		                    |	Товары.Номенклатура,
		                    |	Товары.Характеристика,
		                    |	Товары.СтатусУказанияСерий
		                    |ИЗ
		                    |	(ВЫБРАТЬ
		                    |		СпрНоменклатура.Ссылка КАК Номенклатура,
		                    |		ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		                    |		ВЫБОР
		                    |			КОГДА НЕ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
		                    |					И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		                    |				ТОГДА 4
		                    |			ИНАЧЕ 0
		                    |		КОНЕЦ КАК СтатусУказанияСерий
		                    |	ИЗ
		                    |		Справочник.Номенклатура КАК СпрНоменклатура
		                    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		                    |			ПО (СпрХарактеристики.Владелец = ВЫБОР
		                    |					КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		                    |						ТОГДА СпрНоменклатура.ВидНоменклатуры
		                    |					КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		                    |						ТОГДА СпрНоменклатура.Ссылка
		                    |					ИНАЧЕ ЛОЖЬ
		                    |				КОНЕЦ)
		                    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК СкладыПолитикиУчетаСерий
		                    |			ПО СпрНоменклатура.ВидНоменклатуры = СкладыПолитикиУчетаСерий.Ссылка
		                    |				И (СкладыПолитикиУчетаСерий.Склад = &Склад)
		                    |	ГДЕ
		                    |		НЕ СпрНоменклатура.ПометкаУдаления
		                    |		И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		                    |		И НЕ СпрНоменклатура.ЭтоГруппа
		                    |		И НЕ ЕСТЬNULL(СпрХарактеристики.ПометкаУдаления, ЛОЖЬ)) КАК Товары
		                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		                    |				&ДатаОстатков,
		                    |				Склад = &Склад
		                    |					И Помещение = &Помещение) КАК ТоварыНаСкладах
		                    |		ПО Товары.Номенклатура = ТоварыНаСкладах.Номенклатура
		                    |			И Товары.Характеристика = ТоварыНаСкладах.Характеристика
		                    |ГДЕ
		                    |	(Товары.СтатусУказанияСерий = 0
		                    |			ИЛИ ЕСТЬNULL(ТоварыНаСкладах.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
		                    |	И ЕСТЬNULL(ТоварыНаСкладах.ВНаличииОстаток, 0) <> 0");
	КонецЕсли;	
	Запрос.УстановитьПараметр("ДатаОстатков",ТекущаяДата());
	Запрос.УстановитьПараметр("Склад",Док.Склад);
	Запрос.УстановитьПараметр("Помещение",Док.Помещение);
	Док.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	//ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	//	Док.Товары,
	//	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	//		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
	//	)
	//);
	Возврат Истина;
КонецФункции	
Функция УстановитьЦенуТовара(СтрокаТЧ)
	зпр=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	                 |ИЗ
	                 |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ВидЦены = &ВидЦены И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних");
		
	зпр.УстановитьПараметр("ВидЦены",Справочники.ВидыЦен.НайтиПоРеквизиту("ИспользоватьПриПродаже",Истина));	
	зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
	
	рез=зпр.Выполнить().Выгрузить();
	Если Рез.Количество()>0 тогда
		СтрокаТЧ.Цена= Рез[0].Цена;	
	КонецЕсли;

КонецФункции	
Функция УстановитьАвтора(Док,Авт) Экспорт
	Попытка
		Док.Ответственный=Справочники.Пользователи.НайтиПоНаименованию(авт,Ложь);
	Исключение
	КонецПопытки;
	
	Попытка
		Док.Кассир=Справочники.Пользователи.НайтиПоНаименованию(авт,Ложь);
	Исключение
	КонецПопытки;	
КонецФункции		
Функция УстановитьЕдиницу(СтрокаТЧ,Док=Неопределено) Экспорт
	зпр=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	ВЫБОР
	                 |		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
	                 |			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
	                 |		ИНАЧЕ Штрихкоды.Упаковка
	                 |	КОНЕЦ КАК ЕИ,
	                 |	Штрихкоды.Номенклатура,
	                 |	Штрихкоды.Характеристика
	                 |ПОМЕСТИТЬ тШтрихкоды
	                 |ИЗ
	                 |	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	                 |ГДЕ
	                 |	Штрихкоды.Штрихкод = &код
	                 |	И (&ВсяНоменклатура
	                 |			ИЛИ Штрихкоды.Номенклатура = &Номенклатура)
	                 |	И (&ВсеХарактеристики
	                 |			ИЛИ Штрихкоды.Характеристика = &Характеристика)
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	тШтрихкоды.ЕИ,
	                 |	тШтрихкоды.Номенклатура,
	                 |	тШтрихкоды.Характеристика
	                 |ИЗ
	                 |	тШтрихкоды КАК тШтрихкоды");

	
	зпр.УстановитьПараметр("Код",СтрокаТЧ.Штрихкод);
	зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
	зпр.УстановитьПараметр("Характеристика",СтрокаТЧ.ХарактеристикаНоменклатуры);
	зпр.УстановитьПараметр("ВсяНоменклатура",СтрокаТЧ.Номенклатура.Пустая());
	зпр.УстановитьПараметр("ВсеХарактеристики",СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая());
	рез=зпр.Выполнить().Выгрузить();
	Если Рез.Количество()>0 тогда
		СтрокаТЧ.ЕдиницаИзмерения=Рез[0].ЕИ;
		Если СтрокаТЧ.Номенклатура.Пустая() тогда
			СтрокаТЧ.Номенклатура=Рез[0].Номенклатура;
		КонецЕсли;	
		Если СтрокаТЧ.ХарактеристикаНоменклатуры.Пустая() тогда
			СтрокаТЧ.ХарактеристикаНоменклатуры=Рез[0].Характеристика;
		КонецЕсли;	
	КонецЕсли;
	
	
	//УПАКОВКИ ДЛЯ АДРЕСНЫХ СКЛАДОВ И ВВОДА ТМЦ ВРУЧНУЮ
	Если СтрокаТЧ.ЕдиницаИзмерения.Пустая() и СтрокаТЧ.Штрихкод="" и (НЕ СтрокаТЧ.Номенклатура.Пустая())  и (НЕ Док = Неопределено) тогда
		АдресныйСклад = Ложь;
		Попытка
			Если Док.Склад.ИспользоватьАдресноеХранение или Док.Помещение.ИспользоватьАдресноеХранение тогда
				АдресныйСклад = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;

		Если АдресныйСклад тогда
				зпр=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				                 |	ВЫБОР
				                 |		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
				                 |			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
				                 |		ИНАЧЕ Штрихкоды.Упаковка
				                 |	КОНЕЦ КАК ЕИ,
				                 |	Штрихкоды.Номенклатура,
				                 |	Штрихкоды.Характеристика,
								 |	Минимум(ЕстьNull(Штрихкоды.Упаковка.Числитель,1)) КАК КФ
				                 |ПОМЕСТИТЬ тШтрихкоды
				                 |ИЗ
				                 |	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
				                 |ГДЕ
				                 |	(Штрихкоды.Номенклатура = &Номенклатура)
				                 |	И (Штрихкоды.Характеристика = &Характеристика)
								 |СГРУППИРОВАТЬ ПО
								 |	ВЫБОР
				                 |		КОГДА Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)
				                 |			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения
				                 |		ИНАЧЕ Штрихкоды.Упаковка
				                 |	КОНЕЦ,
				                 |	Штрихкоды.Номенклатура,
				                 |	Штрихкоды.Характеристика
				                 |;
				                 |
				                 |////////////////////////////////////////////////////////////////////////////////
				                 |ВЫБРАТЬ
				                 |	тШтрихкоды.ЕИ,
								 |	тШтрихкоды.КФ,
				                 |	тШтрихкоды.Номенклатура,
				                 |	тШтрихкоды.Характеристика
				                 |ИЗ
				                 |	тШтрихкоды КАК тШтрихкоды");

				
				зпр.УстановитьПараметр("Номенклатура",СтрокаТЧ.Номенклатура);
				зпр.УстановитьПараметр("Характеристика",СтрокаТЧ.ХарактеристикаНоменклатуры);
				рез=зпр.Выполнить().Выгрузить();
				Если Рез.Количество()>0 тогда
					СтрокаТЧ.ЕдиницаИзмерения=Рез[0].ЕИ;
					Попытка
						СтрокаТЧ.Количество=СтрокаТЧ.Количество/?(Рез[0].КФ=0,1,Рез[0].КФ);
					Исключение
					КонецПопытки;
				КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	
Функция ВернутьКоэффициент(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товар", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИЗмерения", ЕдиницаИзмерения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
				   |		КОГДА УпаковкиНоменклатуры.Знаменатель=0 ИЛИ УпаковкиНоменклатуры.Числитель=0 ТОГДА 1
				   |		ИНАЧЕ
				   |				ЕСТЬNULL(УпаковкиНоменклатуры.Числитель/УпаковкиНоменклатуры.Знаменатель,1)
				   |		КОНЕЦ КАК Коэффициент	 
	               |ИЗ
	               |	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	               |ГДЕ
	               |	УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	               |	И УпаковкиНоменклатуры.Владелец = &Товар";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Коэффициент;
		
	КонецЦикла;
	
	    Возврат 1;
		
КонецФУнкции
Функция УстановитьСерииВдокументе(Док);
	Если Док.Метаданные().Имя="РасходныйОрдерНаТовары" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РасходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ТоварыПоРаспоряжениям); 	
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ОтгружаемыеТовары); 			
	ИначеЕсли Док.Метаданные().Имя="ПриходныйОрдерНаТовары" тогда			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПриходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли Док.Метаданные().Имя="ОтборРазмещениеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ОтборРазмещениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Отбор); 	
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Размещение);
	ИначеЕсли Док.Метаданные().Имя="УпаковочныйЛист" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.УпаковочныйЛист));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	
	ИначеЕсли Док.Метаданные().Имя="ПрочееОприходованиеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПрочееОприходованиеТоваров));
		Попытка
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);	 
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.Серии);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий.ВидыЗапасов);
		Исключение
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
		КонецПопытки;
	ИначеЕсли Док.Метаданные().Имя="РеализацияТоваровУслуг" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.РеализацияТоваровУслуг));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли Док.Метаданные().Имя="ПоступлениеТоваровУслуг" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПоступлениеТоваровУслуг));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий);
	ИначеЕсли Док.Метаданные().Имя="ПеремещениеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПеремещениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 
	ИначеЕсли Док.Метаданные().Имя="ВнутреннееПотреблениеТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ВнутреннееПотреблениеТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	ИначеЕсли Док.Метаданные().Имя="ПересчетТоваров" тогда	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ПересчетТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий); 	
	КонецЕсли;

	
КонецФункции	
Функция ПолучитьСтатусОтбораРазмещенияТоваровПослеЗагрузки(ДокументТСД,ДокументБД)
	
	ЕстьРасхождения = Ложь;
	
	Если ДокументБД.ТоварыОтбор.Количество()>0 тогда  // есть задание на отбор
		ТЗДокументБД = ДокументБД.ТоварыОтбор.Выгрузить();
		ТЗДокументБД.Свернуть("Ячейка,Номенклатура,Характеристика","КоличествоУпаковок");
		
		ТЗДанныеТСД = ДокументТСД.СобранныеДанныеПодбор.Выгрузить();
		ТЗДанныеТСД.Свернуть("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры","Количество");
		
		Если ТЗДокументБД.Количество()<> ТЗДанныеТСД.Количество() тогда
			ЕстьРасхождения = Истина;	
		Иначе 
			Для каждого СтрокаДанныеТСД из ТЗДанныеТСД цикл
				СтрокиПоиска = ТЗДокументБД.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика",СтрокаДанныеТСД.ЯчейкаСсылка,СтрокаДанныеТСД.Номенклатура,СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
				Если СтрокиПоиска.Количество() = 0 тогда
					ЕстьРасхождения = Истина;	
				Иначе 
					ОбщееБазовоеКоличествоВДокументе = 0;
					ОбщееБазовоеКоличествоВПодборе = 0;
					
					СтрокиПоискаКоличествоВДокументе = ДокументБД.ТоварыОтбор.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика",СтрокаДанныеТСД.ЯчейкаСсылка,СтрокаДанныеТСД.Номенклатура,СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВДокументе из СтрокиПоискаКоличествоВДокументе цикл
							ОбщееБазовоеКоличествоВДокументе = ОбщееБазовоеКоличествоВДокументе + СтрокаКоличествоВДокументе.КоличествоУпаковок * ?(СтрокаКоличествоВДокументе.Упаковка.Числитель=0,1,СтрокаКоличествоВДокументе.Упаковка.Числитель);		
					КонецЦикла;	
						
					СтрокиПоискаКоличествоВПодборе = ДокументТСД.СобранныеДанныеПодбор.НайтиСтроки(Новый Структура("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры",СтрокаДанныеТСД.ЯчейкаСсылка,СтрокаДанныеТСД.Номенклатура,СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВПодборе из СтрокиПоискаКоличествоВПодборе цикл
							ОбщееБазовоеКоличествоВПодборе = ОбщееБазовоеКоличествоВПодборе + СтрокаКоличествоВПодборе.Количество * ?(СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель=0,1,СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель);		
					КонецЦикла;	

						
					Если ОбщееБазовоеКоличествоВДокументе<>ОбщееБазовоеКоличествоВПодборе тогда
						ЕстьРасхождения = Истина;
					Иначе 
						//нет расхождений
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументБД.ТоварыРазмещение.Количество()>0 тогда  // есть задание на размещение
		ТЗДокументБД = ДокументБД.ТоварыРазмещение.Выгрузить();
		ТЗДокументБД.Свернуть("Ячейка,Номенклатура,Характеристика","КоличествоУпаковок");
		
		ТЗДанныеТСД = ДокументТСД.СобранныеДанныеПриемка.Выгрузить();
		ТЗДанныеТСД.Свернуть("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры","Количество");
		
		Если ТЗДокументБД.Количество()<> ТЗДанныеТСД.Количество() тогда
			ЕстьРасхождения = Истина;	
		Иначе 
			Для каждого СтрокаДанныеТСД из ТЗДанныеТСД цикл
				СтрокиПоиска = ТЗДокументБД.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика",СтрокаДанныеТСД.ЯчейкаСсылка,СтрокаДанныеТСД.Номенклатура,СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
				Если СтрокиПоиска.Количество() = 0 тогда
					ЕстьРасхождения = Истина;	
				Иначе 
					
					ОбщееБазовоеКоличествоВДокументе = 0;
					ОбщееБазовоеКоличествоВПодборе = 0;
					
					СтрокиПоискаКоличествоВДокументе = ДокументБД.ТоварыРазмещение.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Характеристика",СтрокаДанныеТСД.ЯчейкаСсылка,СтрокаДанныеТСД.Номенклатура,СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВДокументе из СтрокиПоискаКоличествоВДокументе цикл
							ОбщееБазовоеКоличествоВДокументе = ОбщееБазовоеКоличествоВДокументе + СтрокаКоличествоВДокументе.КоличествоУпаковок * ?(СтрокаКоличествоВДокументе.Упаковка.Числитель=0,1,СтрокаКоличествоВДокументе.Упаковка.Числитель);		
					КонецЦикла;	
						
					СтрокиПоискаКоличествоВПодборе = ДокументТСД.СобранныеДанныеПриемка.НайтиСтроки(Новый Структура("ЯчейкаСсылка,Номенклатура,ХарактеристикаНоменклатуры",СтрокаДанныеТСД.ЯчейкаСсылка,СтрокаДанныеТСД.Номенклатура,СтрокаДанныеТСД.ХарактеристикаНоменклатуры));
					Для каждого СтрокаКоличествоВПодборе из СтрокиПоискаКоличествоВПодборе цикл
							ОбщееБазовоеКоличествоВПодборе = ОбщееБазовоеКоличествоВПодборе + СтрокаКоличествоВПодборе.Количество * ?(СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель=0,1,СтрокаКоличествоВПодборе.ЕдиницаИзмерения.Числитель);		
					КонецЦикла;	

						
					Если ОбщееБазовоеКоличествоВДокументе<>ОбщееБазовоеКоличествоВПодборе тогда
						ЕстьРасхождения = Истина;
					Иначе 
						//нет расхождений
					КонецЕсли;

								
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;


	
	Если ЕстьРасхождения тогда
		Возврат Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
	Иначе
		Возврат Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
	КонецЕсли;	
КонецФункции
Функция ЗаполнитьУпаковочныеЛисты(Об)

	//Запишем и проведем все упак листы по документу
	ТЗОбщая = Об.СобранныеДанныеПодбор.Выгрузить();
	ТЗОбщая.Свернуть("УпаковочныйЛист");
	Для каждого СтрокаОбщей ИЗ ТЗОбщая Цикл
		Если СтрокаОбщей.УпаковочныйЛист<>"" тогда
			НомерУпакЛиста= СтрЗаменить(СтрокаОбщей.УпаковочныйЛист,"////","");
	
			Если  Лев(СтрокаОбщей.УпаковочныйЛист,3)="UPL" тогда 
				НомерУпакЛиста = Прав(НомерУпакЛиста,СтрДлина(НомерУпакЛиста)-3);
			КонецЕсли;	
			
			ДокументУпакЛиста = Документы.ДатаМобайл_УпаковочныйЛист.НайтиПоНомеру(НомерУпакЛиста);	

			Если ДокументУпакЛиста.Пустая() тогда
				ДокументУпаковочногоЛиста=Документы.ДатаМобайл_УпаковочныйЛист.СоздатьДокумент();
				ДокументУпаковочногоЛиста.Дата = ТекущаяДата();
				ДокументУпаковочногоЛиста.Основание = Об.ИсходныйДокумент;
				ДокументУпаковочногоЛиста.ТСД = Об.ТСД;
				ДокументУпаковочногоЛиста.Записать();
				
				ДокументУпакЛиста = ДокументУпаковочногоЛиста.Ссылка;
				Попытка
					Если Об.Шаблон.ИспользоватьТиповыеУпаковочныеЛисты тогда
						ДокументУпаковочногоЛистаТиповой = Документы.УпаковочныйЛист.СоздатьДокумент();	
						ДокументУпаковочногоЛистаТиповой.Дата = ТекущаяДата();
						ДокументУпаковочногоЛистаТиповой.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
						ДокументУпаковочногоЛистаТиповой.Код = НомерУпакЛиста;
						ДокументУпаковочногоЛистаТиповой.СкладУпаковки = Об.ИсходныйДокумент.Склад;
						ДокументУпаковочногоЛистаТиповой.Записать();	
						
						ДокументУпаковочногоЛиста.ТиповойУпаковочныйЛист = ДокументУпаковочногоЛистаТиповой.Ссылка;
						ДокументУпаковочногоЛиста.Записать();
					КонецЕсли;	
				Исключение
				КонецПопытки;
			КонецЕсли;

			ТЗ = Об.СобранныеДанныеПодбор.Выгрузить();
			ТЗ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияСсылка,ЕдиницаИзмерения,УпаковочныйЛист,ШтрихКод,Пользователь","Количество");
			СтруктураПоискаУпЛист = Новый Структура("УпаковочныйЛист", СтрокаОбщей.УпаковочныйЛист);			
			ДанныеУпакЛиста = ТЗ.НайтиСтроки(СтруктураПоискаУпЛист);
			
			Если ДанныеУпакЛиста.Количество()<>0 тогда
				ДокументУпакЛистаОбъект = ДокументУпакЛиста.ПолучитьОбъект();
				Если ДокументУпакЛиста.Товары.Количество() = 0 тогда
					Для Каждого СтрокаТЧ ИЗ ДанныеУпакЛиста  Цикл
						Если СтрокаТЧ.Количество = 0 тогда
							Продолжить;
						КонецЕсли;
						
						лСтруктураПоиска=Новый Структура("Номенклатура,Характеристика,Серия,Упаковка,Штрихкод",СтрокаТЧ.Номенклатура,СтрокаТЧ.ХарактеристикаНоменклатуры,СтрокаТЧ.СерияСсылка,СтрокаТЧ.ЕдиницаИзмерения,СтрокаТЧ.ШтрихКод);
						СтрокиПоиска=ДокументУпакЛистаОбъект.Товары.НайтиСтроки(лСтруктураПоиска);
						Если СтрокиПоиска.Количество()=0 тогда
							
							СтрокаТабличнойЧасти = ДокументУпакЛистаОбъект.Товары.Добавить();
							СтрокаТабличнойЧасти.Штрихкод = СтрокаТЧ.ШтрихКод;
							СтрокаТабличнойЧасти.Номенклатура = СтрокаТЧ.Номенклатура;
							СтрокаТабличнойЧасти.Характеристика = СтрокаТЧ.ХарактеристикаНоменклатуры;
							
							СтрокаТабличнойЧасти.Упаковка = СтрокаТЧ.ЕдиницаИзмерения;
							СтрокаТабличнойЧасти.Серия = СтрокаТЧ.СерияСсылка;
							СтрокаТабличнойЧасти.Коэффициент = ВернутьКоэффициент(СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения);
						Иначе	
							СтрокаТабличнойЧасти=СтрокиПоиска[0];
						КонецЕсли;	
						
							СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок + СтрокаТЧ.Количество;
							СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок*СтрокаТабличнойЧасти.Коэффициент;
						
					КонецЦикла;
				КонецЕсли;
				ДокументУпакЛистаОбъект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЧ.Пользователь,Ложь);
				ДокументУпакЛистаОбъект.Записать();
				Попытка ДокументУпакЛистаОбъект.Записать(РежимЗаписиДокумента.Проведение); Исключение КонецПопытки;
				
				Если Об.Шаблон.ИспользоватьТиповыеУпаковочныеЛисты тогда
					ДокументУпаковочногоЛистаТиповой = ДокументУпакЛистаОбъект.ТиповойУпаковочныйЛист.ПолучитьОбъект();
					Если ДокументУпаковочногоЛистаТиповой.Товары.Количество() = 0 тогда
						Для Каждого СтрТЧ из ДокументУпакЛистаОбъект.Товары цикл
							  СтрокаТабличнойЧастиТиповойЛист = ДокументУпаковочногоЛистаТиповой.Товары.Добавить();
							  ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТиповойЛист,СтрТЧ);		  
						  КонецЦикла;
						 ДокументУпаковочногоЛистаТиповой.Упаковал = ДокументУпаковочногоЛистаТиповой.Ответственный;
						 ДокументУпаковочногоЛистаТиповой.Записать();
						 УстановитьСерииВдокументе(ДокументУпаковочногоЛистаТиповой);
						 ДокументУпаковочногоЛистаТиповой.Записать();
						 Попытка ДокументУпаковочногоЛистаТиповой.Записать(РежимЗаписиДокумента.Проведение); Исключение КонецПопытки;
					 КонецЕсли;
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	//
КонецФункции

/////////////////////////////////////////////////////////////////////////////
Функция ПолучитьДокументЕГАИС(ДокументЕГАИС, Задание, ЭтоНовыйДокумент)
	
	ЕстьРасхождения = ЛОЖЬ;
	
	Если ДокументЕГАИС = Неопределено Тогда
		ДокументЕГАИС = Документы[Задание.Шаблон.ВидДокумента].СоздатьДокумент();
		ЭтоНовыйДокумент = Истина;
	КонецЕсли;
		
	ПараметрыДокумента = СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание);
		
	Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=2 И НЕ ПараметрыДокумента.ЭтоВходящееНаправление тогда
		ОчиститьТабличнуюЧасть(ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор]);
	КонецЕсли;
	
	Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор=2 И ПараметрыДокумента.ЕстьТЧМарок тогда
		ОчиститьТабличнуюЧасть(ДокументЕГАИС["АкцизныеМарки"]);
	КонецЕсли;
	
	Если ПараметрыДокумента.ЭтоВходящееНаправление тогда
		ТЗМарок = ДатаМобайл_ОбщийМодуль.ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументЕГАИС.Ссылка);
	КонецЕсли;
	
	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт и Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0 Тогда
		Для Каждого СтрокаИсходного ИЗ ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
			СтрокаИсходного.КоличествоФакт = 0;
		КонецЦикла;		
	КонецЕсли;
	
	ДокументЕГАИС.Комментарий=" Выполнено в DataMobile  "+ТекущаяДата();
		
	РеквизитМагазин = Неопределено;
	ВидЦены = Неопределено;
	Если Не ПараметрыДокумента.ЕстьРеквизитМагазин Тогда
		Если ПараметрыДокумента.ЕстьРеквизитСклад Тогда
			РеквизитМагазин = ДокументЕгаис.Склад.Магазин;
		КонецЕсли;
	Иначе
		РеквизитМагазин = ДокументЕгаис.Магазин;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РеквизитМагазин) Тогда
		Если ЗначениеЗаполнено(РеквизитМагазин.ПравилоЦенообразования) Тогда
			Если ЗначениеЗаполнено(РеквизитМагазин.ПравилоЦенообразования.ВидЦен) Тогда
				ВидЦены = РеквизитМагазин.ПравилоЦенообразования.ВидЦен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Задание.Шаблон.ИспользоватьПодбор тогда

		Для Каждого СтрТЧ из Задание.СобранныеДанныеПодбор цикл
			//УстановитьАвтора(Док,СтрТЧ.Пользователь);
			УстановитьЕдиницу(СтрТЧ);
			УстановитьАвтораЕгаис(ДокументЕГАИС,СтрТЧ.Пользователь);
			Если Задание.Шаблон.СопоставлениеЕГАИС Тогда
				
					
				Если ПараметрыДокумента.КодыНепроверяемыхМарок.НайтиПоЗНачению(СтрТЧ.НоменклатураЕГАИС) = Неопределено Тогда						
					НоменклатураЕГАИС = СтрТЧ.НоменклатураЕГАИС;
					Если НоменклатураЕГАИС = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
					ИначеЕсли СтрТЧ.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Иначе		
						
						ЗапросСопоставления = Новый Запрос;
						ЗапросСопоставления.УстановитьПараметр("Номенклатура", СтрТЧ.Номенклатура);
						ЗапросСопоставления.УстановитьПараметр("ЕГАИС_Номенклатура", НоменклатураЕГАИС);
						ЗапросСопоставления.УстановитьПараметр("ЕдиницаИзмерения", СтрТЧ.ЕдиницаИзмерения);
						ЗапросСопоставления.Текст = "ВЫБРАТЬ
						|	ИСТИНА КАК Сопоставлен
						|ИЗ
						|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК ЕГАИС_СоответствиеНоменклатуры
						|ГДЕ
						|	ЕГАИС_СоответствиеНоменклатуры.АлкогольнаяПродукция = &ЕГАИС_Номенклатура
						|	И ЕГАИС_СоответствиеНоменклатуры.Номенклатура = &Номенклатура";
						
						
						Если ЗапросСопоставления.Выполнить().Пустой() Тогда
							
							МенеджерЗаписиЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
							МенеджерЗаписиЕГАИС.АлкогольнаяПродукция = НоменклатураЕГАИС;
							МенеджерЗаписиЕГАИС.Номенклатура = стрТЧ.Номенклатура;
							МенеджерЗаписиЕГАИС.Записать();													
							
						КонецЕсли;	
					КонецЕсли;
					
					
				КонецЕсли;
				
				НоменклатураЕГАИС = Неопределено;
				
			КонецЕсли;
		КонецЦИкла;	
		
		
		ТабТСДЗагрузка=Задание.СобранныеДанныеПодбор.Выгрузить();
		ТабТСДЗагрузка.Свернуть("Номенклатура,ШтрихКод,НоменклатураЕГАИС,PDF,ЕдиницаИзмерения,ЕгаисДатаРозлива,ЕгаисМарка,ЕгаисПолныйКод","Количество");

		Если Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0 тогда
			Для Каждого СтрТЧ из ТабТСДЗагрузка цикл
				Если СтрТЧ.Количество = 0 тогда
					Продолжить;
				КонецЕсли;	
				//Поиск строк сначала по маркам затем по ЕГАИС номенклатуре и реквизитам
					ПоискПоМарке = Ложь;
					ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",СтрТЧ.ЕгаисПолныйКод);
					Если ТекущаяАкцизнаяМарка.Пустая() и СтрТЧ.ЕгаисПолныйКод <>"" тогда
						   НоваяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
						   НоваяАкцизнаяМарка.ЗначениеШтрихкода = СтрТЧ.ЕгаисПолныйКод;
						   НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
						   НоваяАкцизнаяМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						   НоваяАкцизнаяМарка.Номенклатура = СтрТЧ.Номенклатура;
						   НоваяАкцизнаяМарка.ДатаУпаковки = ТекущаяДата();
						   Попытка НоваяАкцизнаяМарка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(СтрТЧ.Пользователь,Ложь); Исключение КонецПопытки;
						   НоваяАкцизнаяМарка.Количество = 1;
						   НоваяАкцизнаяМарка.Записать();
						   ТекущаяАкцизнаяМарка = НоваяАкцизнаяМарка.Ссылка;
					КонецЕсли;

					Если НЕ ТекущаяАкцизнаяМарка.Пустая() тогда
						Если ПараметрыДокумента.ЭтоВходящееНаправление тогда
							СтруктураПоискаМарокТТН = Новый Структура("Марка",СтрТЧ.ЕгаисПолныйКод);
							СтрокиПоискаМарокТТН = ТЗМарок.НайтиСтроки(СтруктураПоискаМарокТТН);	
							Если СтрокиПоискаМарокТТН.Количество()>0 Тогда
								ТекущаяСправка2 = СтрокиПоискаМарокТТН[0].Справка2;
								ПоискПоМарке = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
	
				НоменклатураЕГАИС = СтрТЧ.НоменклатураЕГАИС;
				
					Если ПоискПоМарке Тогда
						СтрокиПоиска=ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2",НоменклатураЕГАИС, ТекущаяСправка2));	
					ИначеЕсли ПараметрыДокумента.ЕстьРеквизитДатаРозлива И ЗначениеЗаполнено(СтрТч.ЕгаисДатаРозлива) Тогда
						СтрокиПоиска=ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция, ДатаРозлива",НоменклатураЕГАИС, СтрТч.ЕгаисДатаРозлива));
					Иначе
						СтрокиПоиска=ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("АлкогольнаяПродукция",НоменклатураЕГАИС));
					КонецЕсли;

				//Для пива
				Если НоменклатураЕГАИС.Пустая() тогда
					СтрокиПоиска=ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].НайтиСтроки(Новый Структура("Номенклатура",СтрТЧ.Номенклатура));					
				КонецЕсли;
				
				
				Если СтрокиПоиска.Количество()=0 тогда
					Если ДокументЕГАИС.Метаданные().Имя="ТТНВходящаяЕГАИС" Тогда
						ЕстьРасхождения = ИСТИНА;
						Продолжить;
					КонецЕсли;

					СтрокаТабличнойЧасти=ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].Добавить();					
					
					Если ПараметрыДокумента.ЕстьРеквизитАлкогольнаяПродукция Тогда
						СтрокаТабличнойЧасти.АлкогольнаяПродукция=НоменклатураЕГАИС;
					КонецЕсли;

					Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					КонецЕсли;

				Если ЗначениеЗаполнено(ВидЦены) и ПараметрыДокумента.ЕстьРеквизитЦена Тогда
					Попытка
						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти["Номенклатура"]) Тогда
							ЦенаЗаУпаковку = ЗапасыСервер.ПолучитьЦенуПоВидуЦен(ВидЦены,
							?(ЗначениеЗаполнено(ДокументЕГАИС.Дата),ДокументЕГАИС.Дата,ТекущаяДата()),
							СтрокаТабличнойЧасти["Номенклатура"],
							СтрокаТабличнойЧасти["Характеристика"],
							СтрокаТабличнойЧасти["Упаковка"]);
							Если ЦенаЗаУпаковку <> 0 Тогда
								СтрокаТабличнойЧасти["Цена"]= ЦенаЗаУпаковку; 
								СтруктураДействий = Новый Структура;
								Если ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
									СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Ложь, ДокументЕГАИС.Дата));
									
									Попытка СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",ДокументЕГАИС["ЦенаВключаетНДС"]); Исключение Конецпопытки;
									Попытка СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументЕГАИС)); Исключение Конецпопытки;
								КонецЕсли;	
								СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
								СтруктураДействий.Вставить("ПересчитатьСумму");
								Попытка ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧасти, СтруктураДействий,Неопределено); Исключение Конецпопытки;

							КонецЕсли;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
	

					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,СтрТЧ.Количество);
				
				ИначеЕсли СтрокиПоиска.Количество()=1 тогда
					СтрокаТабличнойЧасти=СтрокиПоиска[0];
					
					ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,СтрТЧ.Количество);
				Иначе // несколько строк, надо распределить
					
					Если ДокументЕГАИС.Метаданные().Имя="ТТНВходящаяЕГАИС" Тогда											

						n=0;
						КоличествоДляВнесения = СтрТЧ.Количество;    
						Для каждого СтрокаТабличнойЧасти из  СтрокиПоиска цикл
							n=n+1;
						
							КоличествоВСтрокеЗадание = СтрокаТабличнойЧасти.Количество; 
							КоличествоВСтрокеФакт = СтрокаТабличнойЧасти.КоличествоФакт; 
							ОсталосьВнести =  КоличествоВСтрокеЗадание  - КоличествоВСтрокеФакт;
							Если ОсталосьВнести>= КоличествоДляВнесения тогда
								ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,КоличествоДляВнесения);
								Прервать;
							Иначе
								Если СтрокиПоиска.Количество()=n тогда
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,КоличествоДляВнесения);
									Прервать;
								Иначе
									Если ОсталосьВнести = 0 тогда
										Продолжить;
									КонецЕсли;
									ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,ОсталосьВнести); 
									КоличествоДляВнесения=КоличествоДляВнесения-ОсталосьВнести;  
									Если КоличествоДляВнесения = 0 тогда
										Прервать;
									Иначе
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла
					//	
					Иначе //пока нет партий
						СтрокаТабличнойЧасти=СтрокиПоиска[0];

						ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,СтрТЧ.Количество);
					КонецЕсли;

				КонецЕсли;	
				
			КонецЦикла; //Каждого СтрТЧ из ТабТСДЗагрузка
			
		КонецЕсли;//Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0
		
	КонецЕсли;//Задание.Шаблон.ИспользоватьПодбор


	
	Если ЕстьРасхождения Тогда
		Сообщить("Загружены не все данные в документ. Расхождения смотрите на вкладке ""Анализ"" ", СтатусСообщения.Важное);
	КонецЕсли;
	
 	Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт и Задание.Шаблон.ТабличнуюЧастьПриЗагрузкеПодбор<>0 Тогда
		Для Каждого СтрокаИсходного ИЗ ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор] Цикл
			Если ЭтоНовыйДокумент тогда
				Если СтрокаИсходного.Количество= 0 тогда
					СтрокаИсходного.Количество = СтрокаИсходного.КоличествоФакт;
				КонецЕсли;	
			Иначе	
				Если СтрокаИсходного.КоличествоФакт <> СтрокаИсходного.Количество тогда
					ДокументЕГАИС.ЕстьРасхождения = Истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументЕГАИС.Метаданные().Имя="ТТНВходящаяЕГАИС"  тогда	
		ДокументЕГАИС.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено;	
		ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
		ПараметрыОбновленияСтатуса.ДокументОбъект    = ДокументЕГАИС;		
		Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(
		ДокументЕГАИС.Ссылка, Перечисления.ВидыДокументовЕГАИС.ТТН, ПараметрыОбновленияСтатуса);
	ИначеЕсли ДокументЕГАИС.Метаданные().Имя="ТТНИсходящаяЕГАИС" тогда
		ДокументЕГАИС.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено;		
	КонецЕсли;



	Попытка 
		ДокументЕГАИС.Записать(РежимЗаписиДокумента.Запись);
		Задание.ДатаЗавершения=ТекущаяДата();
		Если СокрЛП(Задание.Шаблон.ВидДокументаНового)="" тогда//старая схема
			Задание.ИсходныйДокумент=ДокументЕГАИС.Ссылка;
		Иначе	
			Задание.НовыйДокумент=ДокументЕГАИС.Ссылка;
		КонецЕсли;	
		Задание.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Задание.ОбменДанными.Получатели.Заполнить();
		
		Задание.Записать();
			
	Исключение
		
	КонецПопытки;
	
	Возврат ДокументЕГАИС.ССылка;
	
КонецФункции
Процедура ОбработатьСтрокуТЧ_ЕГАИС(СтрокаТабличнойЧасти,ДокументЕГАИС,ПараметрыДокумента,Задание,СтрТЧ,Количество)

				Если ПараметрыДокумента.ЕстьРеквизитНоменклатура Тогда
					Если НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)) Тогда
						СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					КонецЕсли;	
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки Тогда
					Если НЕ (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки)) Тогда
						СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор();
					КонецЕсли;	
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитКлючСвязи Тогда
					Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
						ЗначениеМаксимальногоЭлемента = 0; // Значение, заведомо меньшее любого элемента в массиве.
							СписокКлючей = ДокументЕГАИС[ПараметрыДокумента.ИмяТЧПодбор].ВыгрузитьКолонку("КлючСвязи");
							Для Индекс = 0 По СписокКлючей.Количество() - 1 Цикл
								Если СписокКлючей[Индекс] > ЗначениеМаксимальногоЭлемента Тогда
									ЗначениеМаксимальногоЭлемента = СписокКлючей[Индекс];
								КонецЕсли;
								КонецЦикла;
							СтрокаТабличнойЧасти.КлючСвязи = ЗначениеМаксимальногоЭлемента + 1;
					КонецЕсли;	
				КонецЕсли;

				Если ПараметрыДокумента.ЕстьРеквизитНеобходимостьВводаАкцизнойМарки и СтрТЧ.ЕгаисПолныйКод <>"" Тогда
					СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = Истина;	
				КонецЕсли;

				
				Если ПараметрыДокумента.ЕстьРеквизитУпаковка И ЗначениеЗаполнено(СтрТЧ.ЕдиницаИзмерения) Тогда
					Если НЕ(ЗНачениеЗаполнено(СтрокаТабличнойЧасти.Упаковка)) и ТипЗнч(СтрТЧ.ЕдиницаИзмерения)=Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
						СтрокаТабличнойЧасти.Упаковка=СтрТЧ.ЕдиницаИзмерения;
					КонецЕсли;
				КонецЕсли;
				
				Если ПараметрыДокумента.ЕстьРеквизитДатаРозлива И Задание.Шаблон.ЕГАИСИспользоватьДатуРозлива Тогда
					Если НЕ(ЗНачениеЗаполнено(СтрокаТабличнойЧасти.ДатаРозлива)) Тогда
						СтрокаТабличнойЧасти.ДатаРозлива=СтрТЧ.ЕгаисДатаРозлива;
					КонецЕсли;	
				КонецЕсли;
								
				
				Если ПараметрыДокумента.ЕстьРеквизитЕГАИС и ПараметрыДокумента.ЕстьРеквизитЕГАИС_Номенклатура и ПараметрыДокумента.ЕстьРеквизитМарка Тогда // Упаклист
					ДокументЕГАИС.ЕГАИС = Истина;
					СтрокаТабличнойЧасти.Марка = СтрТЧ.ЕгаисПолныйКод;
					СтрокаТабличнойЧасти.ЕГАИС_Номенклатура = СтрТЧ.НоменклатураЕГАИС;	
					СтрокаТабличнойЧасти.Номенклатура = СтрТЧ.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрТЧ.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.Штрихкод = СтрТЧ.Штрихкод;
				КонецЕсли;	

				   ТекущаяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",СтрТЧ.ЕгаисПолныйКод);
				
		
				//МАРКИ
				Если ПараметрыДокумента.ЕстьТЧМарок И (ПараметрыДокумента.ЕстьРеквизитИдентификаторСтроки или ПараметрыДокумента.ЕстьРеквизитКлючСвязи) Тогда
					
					ЕстьРеквизитИдентификаторСтрокиМарок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено; 
					ЕстьРеквизитКлючСвязиМарок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("КлючСвязи") <> Неопределено; 
					ЕстьРеквизитКоличествоМарок = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("Количество") <> Неопределено; 
					ЕстьРеквизитСправка2 = ДокументЕгаис.метаданные().ТабличныеЧасти["АкцизныеМарки"].Реквизиты.Найти("Справка2") <> Неопределено; 
					
						Если  НЕ ТекущаяАкцизнаяМарка.Пустая()  Тогда  
							СтрокиПоискаМарок=ДокументЕГАИС.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка",ТекущаяАкцизнаяМарка));
							Если СтрокиПоискаМарок.Количество()=0 тогда
								СтрокаМарки = ДокументЕГАИС.АкцизныеМарки.Добавить();
								СтрокаМарки.АкцизнаяМарка = ТекущаяАкцизнаяМарка;
								
								Если ЕстьРеквизитИдентификаторСтрокиМарок тогда
									СтрокаМарки.ИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторСтроки;
								КонецЕсли;
								
								Если ЕстьРеквизитКлючСвязиМарок тогда
									СтрокаМарки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи; 
								КонецЕсли;

								Если ЕстьРеквизитКоличествоМарок тогда
									СтрокаМарки.Количество = 1; 
								КонецЕсли;
								
								Если ЕстьРеквизитСправка2 тогда
									Если ПараметрыДокумента.ЭтоВходящееНаправление тогда
										СтрокаМарки.Справка2 = СтрокаТабличнойЧасти.Справка2; 
									КонецЕсли;	
								КонецЕсли;
								
								
							Иначе
								СтрокаМарки=СтрокиПоискаМарок[0];
							КонецЕсли;

						КонецЕсли;
				КонецЕсли;

				//МАРКИ
				
				
				Если ПараметрыДокумента.ЕстьРеквизитКоличествоУпаковок Тогда		
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок+Количество;	
				КонецЕсли;
				
				Попытка
					лКоэффициент = ?(СтрТЧ.ЕдиницаИзмерения.Коэффициент=0,1,СтрТЧ.ЕдиницаИзмерения.Коэффициент);
				Исключение
					лКоэффициент = 1;
				КонецПопытки;
				
				Попытка
				СтрокаМарки.Количество = Количество*лКоэффициент;
				Исключение
				КонецПопытки;
				

				Если ПараметрыДокумента.ЕстьРеквизитКоличествоФакт Тогда
					СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт+Количество*лКоэффициент;
				ИначеЕсли ПараметрыДокумента.ЕстьРеквизитКоличество Тогда		
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество+Количество*лКоэффициент;	
				КонецЕсли;
				
				ОбработатьСтрокуТЧ(ДокументЕГАИС,ПараметрыДокумента.ИмяТЧПодбор,СтрокаТабличнойЧасти);					
			
				
КонецПроцедуры
Функция СобратьПараметрыЕГАИС(ДокументЕГАИС, Задание)
	
	ПараметрыДокумента=Новый Структура();
	
		ПараметрыДокумента.Вставить("ИмяТЧПодбор",Задание.Шаблон.ИмяТабличнойЧастиПодбор);
		//ПараметрыДокумента.Вставить("ИмяТЧПриемка",Задание.Шаблон.ИмяТабличнойЧастиПриемка);	
		ПараметрыДокумента.Вставить("КодыНепроверяемыхМарок",СформироватьСписокНепроверяемыхМарокЕГАИС());
		ПараметрыДокумента.Вставить("ЕстьРеквизитИдентификаторСтроки",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКлючСвязи",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КлючСвязи") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитНеобходимостьВводаАкцизнойМарки",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("НеобходимостьВводаАкцизнойМарки") <> Неопределено);
		
		ЭтоВходящееНаправление = Ложь;
		Если Задание.Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС" тогда
				ЭтоВходящееНаправление = Истина;
		КонецЕсли;
		ПараметрыДокумента.Вставить("ЭтоВходящееНаправление",ЭтоВходящееНаправление);
		
		ПараметрыДокумента.Вставить("ЕстьТЧМарок",ДокументЕгаис.метаданные().ТабличныеЧасти.Найти("АкцизныеМарки") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитДатаРозлива",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ДатаРозлива") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитУпаковка",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Упаковка") <> Неопределено);
		
		ПараметрыДокумента.Вставить("ЕстьРеквизитАлкогольнаяПродукция",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("АлкогольнаяПродукция") <> Неопределено);
		
		ПараметрыДокумента.Вставить("ЕстьРеквизитНоменклатура",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Номенклатура") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитХарактеристика",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Характеристика") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоУпаковок",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоУпаковок") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКоличество",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Количество") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитКоличествоФакт",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("КоличествоФакт") <> Неопределено);

		
		ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС",ДокументЕгаис.метаданные().Реквизиты.Найти("ЕГАИС") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитМарка",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Марка") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитЕГАИС_Номенклатура",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("ЕГАИС_Номенклатура") <> Неопределено);		

		ПараметрыДокумента.Вставить("ЕстьРеквизитМагазин",ДокументЕгаис.метаданные().Реквизиты.Найти("Магазин") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитСклад",ДокументЕгаис.метаданные().Реквизиты.Найти("Склад") <> Неопределено);
		ПараметрыДокумента.Вставить("ЕстьРеквизитЦена",ДокументЕгаис.метаданные().ТабличныеЧасти[ПараметрыДокумента.ИмяТЧПодбор].Реквизиты.Найти("Цена") <> Неопределено);		


	Возврат ПараметрыДокумента;
КонецФункции
Функция СформироватьСписокНепроверяемыхМарокЕГАИС()
	
	СписокМарок = Новый СписокЗначений();
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива                                                                               
	
	Возврат СписокМарок;
	
КонецФункции
Функция УстановитьАвтораЕгаис(Док,Авт)
	Попытка
		Док.Автор=Справочники.Пользователи.НайтиПоНаименованию(авт,Ложь);
	Исключение
	КонецПопытки;	
КонецФункции		


