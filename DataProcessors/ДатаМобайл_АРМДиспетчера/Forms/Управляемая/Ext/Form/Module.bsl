&НаКлиенте
Перем ФРМ;

//ФОРМА
&НаКлиенте
Процедура ПриОткрытии(Отказ)
ТипАналитика = 1;
ДатаДо=ТекущаяДата();
ДатаС=НачалоГода(ТекущаяДата()); 
ОбновитьДанныеПроверки();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлементОтбора = СписокТСД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Код");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.ПравоеЗначение = "";
	
	Попытка
		Хранилище=Константы.ДатаМобайл_ОрганизацияПроверкиМарок.Получить();	
		ИННРАР= Хранилище.Получить()[0];	
		ПарольРАР = Хранилище.Получить()[1];
		AntiCaptcha = Хранилище.Получить()[2];
	Исключение
	КонецПопытки;	   
	ПроверятьDataMatrix = Константы.ДатаМобайл_ПроверятьDataMatrix.Получить();	
	

	
КонецПроцедуры

&НаКлиенте
Процедура грЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
		Если ТекущаяСтраница.Имя = "грТерминалы" Тогда
		этаформа.ПоследнийПакЛист = ВернутьПакЛистГлавногоУзла();
	КонецЕсли;
КонецПроцедуры



//ДОКУМЕНТЫ
&НаКлиенте
Процедура СписокДокументовПриАктивизацииЯчейки(Элемент)
		
	ТД=Элементы.СписокДокументов.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	
	Попытка
		ЗаменитьЗапрос(ТД.Ссылка);
	Исключение
		Сообщить("Ошибка отображения данных: "+ОписаниеОшибки());
	КонецПопытки;
	
	Если ТД.ДатаЗавершенияСбора=Дата(1,1,1) тогда
		Элементы.ГруппаВидаДанных.ТекущаяСтраница=Элементы.грДанные;
	Иначе	
		Элементы.ГруппаВидаДанных.ТекущаяСтраница=Элементы.грАнализ;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	СписокДокументовПередУдалениемНаСервере(Элемент.ТекущиеДанные.ССылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокДокументовПередУдалениемНаСервере(Документ)
	ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиГрупповогоДокумента(Документ);
	ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиТСДГрупповогоДокумента(Документ);

КонецПроцедуры

&НаСервере                                                             	
Процедура ЗаменитьЗапрос(Элемент)

	
	ТабДокумента.ТекстЗапроса="ВЫБРАТЬ
	|	""Подбор    "" КАК Операция,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.СерийныйНомер,	
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ячейка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Пользователь,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НомерСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.КодТовара,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.НазваниеТовара
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Размещение"",
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ШтрихКод,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Номенклатура,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Количество,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЕдиницаИзмерения,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.СерийныйНомер,	
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ячейка,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.УпаковочныйЛист,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Пользователь,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.НомерСтроки,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.КодТовара,
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.НазваниеТовара
	|ИЗ
	|	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка
	|ГДЕ
	|	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выбор когда ДатаМобайл_РегистрСведений.ИмяТаблицы = ""Select"" Тогда ""Подбор"" Иначе ""Размещение"" Конец КАК Операция,
	|	ДатаМобайл_РегистрСведений.ДокументТСД,
	|	ДатаМобайл_РегистрСведений.ШтрихКод,
	|	ДатаМобайл_РегистрСведений.Номенклатура,
	|	ДатаМобайл_РегистрСведений.ХарактеристикаНоменклатуры,
	|	ДатаМобайл_РегистрСведений.Количество,
	|	ДатаМобайл_РегистрСведений.ЕдиницаИзмерения,
	|	ДатаМобайл_РегистрСведений.СерийныйНомер,	
	|	ДатаМобайл_РегистрСведений.Ячейка,
	|	ДатаМобайл_РегистрСведений.УпаковочныйЛист,
	|	ДатаМобайл_РегистрСведений.Пользователь,
	|	ДатаМобайл_РегистрСведений.ИдентификаторСтроки,
	|	ДатаМобайл_РегистрСведений.КодТовара,
	|	ДатаМобайл_РегистрСведений.НазваниеТовара
	|ИЗ
	|	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_РегистрСведений
	|ГДЕ
	|	ДатаМобайл_РегистрСведений.ДокументТСД = &Ссылка
	|	И НЕ ДатаМобайл_РегистрСведений.ДляОбмена";
		
	ТабДокумента.Параметры.УстановитьЗначениеПараметра("Ссылка",Элемент);
	
	Если Элемент.Шаблон.ЕГАИС Тогда
		ТабАнализа.ТекстЗапроса=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВложенныйЗапрос.План) КАК План,
		|	СУММА(ВложенныйЗапрос.Факт) КАК Факт,
		|	СУММА(-ВложенныйЗапрос.План + ВложенныйЗапрос.Факт) КАК Расхождения,
		|	ВложенныйЗапрос.ТипСтроки,
		|	ВложенныйЗапрос.Название
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПодбор.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПодбор.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура
		|			ИНАЧЕ СобранныеДанныеПодбор.НоменклатураЕГАИС
		|		КОНЕЦ КАК Номенклатура,
		|		СобранныеДанныеПодбор.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		0 КАК План,
		|		СобранныеДанныеПодбор.Количество КАК Факт,
		|		""Подбор"" КАК ТипСтроки,
		|		"""" КАК Название
		|	ИЗ
		|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
		|			ИЗ
		|				РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|			ПО (Товары.АлкогольнаяПродукция = СобранныеДанныеПодбор.НоменклатураЕГАИС)
		|	ГДЕ
		|		СобранныеДанныеПодбор.Ссылка = &Ссылка
		|		И &УсловиеЕстьПодбор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СобранныеДанныеПриемка.НоменклатураЕГАИС ЕСТЬ NULL
		|					ИЛИ СобранныеДанныеПриемка.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА Товары.Номенклатура
		|			ИНАЧЕ СобранныеДанныеПриемка.НоменклатураЕГАИС
		|		КОНЕЦ,
		|		СобранныеДанныеПриемка.ХарактеристикаНоменклатуры,
		|		0,
		|		СобранныеДанныеПриемка.Количество,
		|		""Размещение"",
		|		""""
		|	ИЗ
		|		Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК СобранныеДанныеПриемка
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|				МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
		|			ИЗ
		|				РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК Товары
		|			ПО (Товары.АлкогольнаяПродукция = СобранныеДанныеПриемка.НоменклатураЕГАИС)
		|	ГДЕ
		|		СобранныеДанныеПриемка.Ссылка = &Ссылка
		|		И &УсловиеЕстьПриемка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента1СПодбор.АлкогольнаяПродукция ЕСТЬ NULL
		|					ИЛИ ТаблицаДокумента1СПодбор.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА ТаблицаДокумента1СПодбор.Номенклатура
		|			ИНАЧЕ ТаблицаДокумента1СПодбор.АлкогольнаяПродукция
		|		КОНЕЦ,
		|		ТаблицаДокумента1СПодбор.Характеристика,
		|		ТаблицаДокумента1СПодбор.КоличествоУпаковок,
		|		0,
		|		""Подбор"",
		|		""""
		|	ИЗ
		|		Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПодбор 
		|			
		|	ГДЕ
		|		&УсловиеЕстьПодбор
		|		И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента1СПриемка.АлкогольнаяПродукция ЕСТЬ NULL
		|					ИЛИ ТаблицаДокумента1СПриемка.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|				ТОГДА ТаблицаДокумента1СПриемка.Номенклатура
		|			ИНАЧЕ ТаблицаДокумента1СПриемка.АлкогольнаяПродукция
		|		КОНЕЦ,
		|		ТаблицаДокумента1СПриемка.Характеристика,
		|		ТаблицаДокумента1СПриемка.КоличествоУпаковок,
		|		0,
		|		""Подбор"",
		|		""""
		|	ИЗ
		|		Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПриемка
		|	ГДЕ
		|		&УсловиеЕстьПриемка
		|		И ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТипСтроки,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Название
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.ТипСтроки,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|"; 
				
	Иначе
		ТабАнализа.ТекстЗапроса=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
		|	ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ИтоговаяТаблица.План) КАК План,
		|	СУММА(ИтоговаяТаблица.Факт) КАК Факт,
		|	СУММА(ИтоговаяТаблица.Расхождения) КАК Расхождения,
		|	ИтоговаяТаблица.ТипСтроки,
		|	ИтоговаяТаблица.Название
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ЕСТЬNULL(ВложенныйЗапрос.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|		СУММА(ВложенныйЗапрос.План) КАК План,
		|		СУММА(ВложенныйЗапрос.Факт) КАК Факт,
		|		СУММА(-ВложенныйЗапрос.План + ВложенныйЗапрос.Факт) КАК Расхождения,
		|		ВложенныйЗапрос.ТипСтроки КАК ТипСтроки,
		|		ВложенныйЗапрос.Название КАК Название
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СобранныеДанныеПодбор.Номенклатура КАК Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПодбор.ХарактеристикаНоменклатуры, """") КАК ХарактеристикаНоменклатуры,
		|			0 КАК План,
		|			СобранныеДанныеПодбор.Количество * ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Числитель,1) КОНЕЦ/ 
		|	         		   									ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПодбор.ЕдиницаИзмерения.Знаменатель,1) КОНЕЦ, 1) КАК Факт,
		|			""Подбор"" КАК ТипСтроки,
		|			"""" КАК Название
		|		ИЗ
		|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК СобранныеДанныеПодбор
		|		ГДЕ
		|			СобранныеДанныеПодбор.Ссылка = &Ссылка
		|			И &УсловиеЕстьПодбор
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СобранныеДанныеПриемка.Номенклатура,
		|			ЕСТЬNULL(СобранныеДанныеПриемка.ХарактеристикаНоменклатуры, """"),
		|			0,
		|			СобранныеДанныеПриемка.Количество * ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Числитель,1) КОНЕЦ/ 
		|	         		   									ВЫБОР КОГДА ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(СобранныеДанныеПриемка.ЕдиницаИзмерения.Знаменатель,1) КОНЕЦ, 1),
		|			""Размещение"",
		|			""""
		|		ИЗ
		|			Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК СобранныеДанныеПриемка
		|		ГДЕ
		|			СобранныеДанныеПриемка.Ссылка = &Ссылка
		|			И &УсловиеЕстьПриемка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаДокумента1СПодбор.Номенклатура,
		|			ЕСТЬNULL(ТаблицаДокумента1СПодбор.Характеристика, """"),
		|			ТаблицаДокумента1СПодбор.Количество,
		|			0,
		|			""Подбор"",
		|			""""
		|		ИЗ
		|			Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПодбор
		|		ГДЕ
		|			&УсловиеЕстьПодбор
		|			И ТаблицаДокумента1СПодбор.Ссылка = &ИсходныйДокумент
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТаблицаДокумента1СПриемка.Номенклатура,
		|			ТаблицаДокумента1СПриемка.Характеристика,
		|			ТаблицаДокумента1СПриемка.Количество,
		|			0,
		|			""Размещение"",
		|			""""
		|		ИЗ
		|			Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПриемка
		|		ГДЕ
		|			&УсловиеЕстьПриемка
		|			И ТаблицаДокумента1СПриемка.Ссылка = &ИсходныйДокумент) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.ТипСтроки,
		|		ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.Название) КАК ИтоговаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговаяТаблица.ТипСтроки,
		|	ИтоговаяТаблица.ХарактеристикаНоменклатуры,
		|	ИтоговаяТаблица.Номенклатура,
		|	ИтоговаяТаблица.Название"; 
		
	КонецЕсли;
	
	ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"&УсловиеЕстьПриемка",?(Элемент.Шаблон.ИспользоватьПриемку,"Истина","Ложь"));
	ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"&УсловиеЕстьПодбор",?(Элемент.Шаблон.ИспользоватьПодбор,"Истина","Ложь"));
	
	Если Элемент.Шаблон.ИспользоватьПодбор тогда
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПодбор","Документ."+Элемент.Шаблон.ВидДокумента+"."+Элемент.Шаблон.ИмяТабличнойЧастиПодбор+" КАК ТаблицаДокумента1СПодбор");
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПодбор","Документ."+Элемент.Шаблон.ВидДокумента+"."+Элемент.Шаблон.ИмяТабличнойЧастиПодбор+" КАК ТаблицаДокумента1СПодбор");
	КонецЕсли;
	
	Если Элемент.Шаблон.ИспользоватьПриемку тогда
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаДокумента1СПриемка","Документ."+Элемент.Шаблон.ВидДокумента+"."+Элемент.Шаблон.ИмяТабличнойЧастиПриемка+" КАК ТаблицаДокумента1СПриемка");
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаДокумента1СПриемка","Документ."+Элемент.Шаблон.ВидДокумента+"."+Элемент.Шаблон.ИмяТабличнойЧастиПриемка+" КАК ТаблицаДокумента1СПриемка");
	КонецЕсли;
	
	
	Если Элемент.Шаблон.ВидДокумента = "ОстаткиЕГАИС"  ИЛИ Элемент.Шаблон.ВидДокумента = "ТТНВходящаяЕГАИС"  ИЛИ Элемент.Шаблон.ВидДокумента = "ТТНИсходящаяЕГАИС" Тогда
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");	
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.Номенклатура", "ТаблицаДокумента1СПодбор.АлкогольнаяПродукция");	
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.Номенклатура", "ТаблицаДокумента1СПриемка.АлкогольнаяПродукция");
	ИначеЕсли Элемент.Шаблон.ВидДокумента = "ОприходованиеИзлишковТоваров" Тогда
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПодбор.КоличествоУпаковок", "ТаблицаДокумента1СПодбор.Количество");	
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса, "ТаблицаДокумента1СПриемка.КоличествоУпаковок", "ТаблицаДокумента1СПриемка.Количество");
	ИначеЕсли Элемент.Шаблон.ВидДокумента ="УстановкаЦенНоменклатуры" или Элемент.Шаблон.ВидДокумента ="ПрименениеЦенНоменклатуры" тогда
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"ТаблицаДокумента1СПодбор.КоличествоУпаковок",999);
	    ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"ТаблицаДокумента1СПриемка.КоличествоУпаковок",999);
	КонецЕсли;
	
	Если Элемент.Шаблон.ГрупповаяРабота И Элемент.ДатаЗавершения=Дата(1,1,1) тогда
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор","РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов");
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"СобранныеДанныеПодбор.Ссылка = &Ссылка","СобранныеДанныеПодбор.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПодбор.ДляОбмена И  СобранныеДанныеПодбор.ИмяТаблицы = ""Select""");
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка","РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов");
		ТабАнализа.ТекстЗапроса=СтрЗаменить(ТабАнализа.ТекстЗапроса,"СобранныеДанныеПриемка.Ссылка = &Ссылка","СобранныеДанныеПриемка.ДокументТСД = &Ссылка И НЕ СобранныеДанныеПриемка.ДляОбмена И  СобранныеДанныеПриемка.ИмяТаблицы = ""Insert""");
	КонецЕсли;
	
	ТабАнализа.Параметры.УстановитьЗначениеПараметра("Ссылка",Элемент);
	ТабАнализа.Параметры.УстановитьЗначениеПараметра("ИсходныйДокумент",Элемент.ИсходныйДокумент);
	
КонецПроцедуры         	

&НаСервереБезКонтекста
Функция ЗаблокироватьДокументПоСтроке(Элемент,СтрокаОшибок)
	Об=Элемент.ПолучитьОбъект();
	Если Об.ДатаЗавершения<>Дата(1,1,1) тогда
		СтрокаОшибок="Документ уже закрыт!!";
		Возврат Ложь;
	КонецЕсли;	
	Если Об.ДатаЗавершенияСбора=Дата(1,1,1) тогда
		СтрокаОшибок="Документ не завершен на ТСД!!";
		Возврат Ложь;
	КонецЕсли;	
	Об.ДатаПриемкиОператором=ТекущаяДата();
	Об.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Об.ОбменДанными.Получатели.Очистить();
	Для Каждого СтрТЧ из Об.СобранныеДанныеПодбор цикл
		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьЕдиницу(СтрТЧ);
	КонецЦИкла;	
	Для Каждого СтрТЧ из Об.СобранныеДанныеПриемка цикл
		Обработки.ДатаМобайл_АРМДиспетчера.УстановитьЕдиницу(СтрТЧ);
	КонецЦИкла;	
	Об.Записать();
	Возврат Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция РазблокироватьДокументПоСтроке(Элемент,СтрокаОшибок)
	Об=Элемент.ПолучитьОбъект();
	Если Об.ДатаЗавершения<>Дата(1,1,1) тогда
		СтрокаОшибок="Документ уже закрыт!!";
		Возврат Ложь;
	КонецЕсли;	
	Об.ДатаПриемкиОператором="";
	Об.ДатаЗавершенияСбора="";
	Об.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Об.ОбменДанными.Получатели.Очистить();
	Об.ОбменДанными.Получатели.Добавить(Об.ТСД);
	Об.Записать();
	Возврат Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция СоздатьДокументПоСтроке(Элемент,СтрокаОшибок)
	Об=Элемент.ПолучитьОбъект();
	Если Об.ДатаПриемкиОператором=Дата(1,1,1) тогда
		СтрокаОшибок="Документ надо сначала заблокировать!!";
		Возврат Неопределено;
	КонецЕсли;	
	Если Об.ДатаЗавершения<>Дата(1,1,1) тогда
		СтрокаОшибок="Документ уже закрыт!!";
		Возврат Неопределено;
	КонецЕсли;	
	Возврат Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Об,СтрокаОшибок);
КонецФункции

&НаКлиенте
Процедура ПанельДокументовДобавитьНесколько(Команда)
ФормаВыбора = ПолучитьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.Форма1"); 
ФормаВыбора.Открыть()			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъекта(Элемент)
	Если СокрЛП(Элемент.Шаблон.ВидДокументаНового)="" тогда//старая схема
		Возврат Элемент.Шаблон.ВидДокумента;
	Иначе//новая схема	
		Возврат Элемент.Шаблон.ВидДокументаНового;
	КонецЕсли;	
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяОбъектаВЗапросе(Элемент)
	Возврат Элемент.Шаблон.ВидДокумента+"."+Элемент.Шаблон.ИмяТабличнойЧасти;
КонецФункции	

&НаКлиенте
Процедура ЗаблокироватьДокумент(Команда)
	ТД=Элементы.СписокДокументов.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ЗаблокироватьДокументПоСтроке(ТД.ССылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;
	ОповеститьобИзменении(ТД.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьДокумент(Команда)
	ТД=Элементы.СписокДокументов.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не РазблокироватьДокументПоСтроке(ТД.ССылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
	ОповеститьобИзменении(ТД.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВнестиВБазу(Команда)
	ТД=Элементы.СписокДокументов.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Док=СоздатьДокументПоСтроке(ТД.Ссылка,СтрокаОшибок);
	Если Док=Неопределено тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
	ОповеститьобИзменении(ТД.Ссылка);
	фр=ПолучитьФорму("Документ."+ИмяОбъекта(ТД.Ссылка)+".ФормаОбъекта",Новый Структура("Ключ",Док),ЭтаФорма);
	фр.Открыть();
	
	ДатаМобайл_ОбщийМодуль.ОчиститьЗаписиТСДГрупповогоДокумента(ТД.Ссылка);
	
КонецПроцедуры


//НОВЫЕ ТОВАРЫ
&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере() 
	
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	ДатаМобайл_НовыеТовары.Ссылка
		                    |ИЗ
		                    |	Справочник.ДатаМобайл_НовыеТовары КАК ДатаМобайл_НовыеТовары
		                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
		                    |		ПО ДатаМобайл_НовыеШтрихкоды.Номенклатура = ДатаМобайл_НовыеТовары.Ссылка
		                    |ГДЕ
		                    |	ДатаМобайл_НовыеТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                    |	И ДатаМобайл_НовыеШтрихкоды.ШтрихКод ЕСТЬ NULL ");
		Рез=Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() цикл
			об=Рез.Ссылка.ПолучитьОбъект();
			об.Удалить();
		КонецЦикла;	

	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	СправочникВидов.Ссылка КАК видноменклатурыНужный
	                    |ПОМЕСТИТЬ МойВид
	                    |ИЗ
	                    |	Справочник.ВидыНоменклатуры КАК СправочникВидов
	                    |ГДЕ
	                    |	СправочникВидов.Наименование ПОДОБНО ""%Товар""
	                    |	И НЕ СправочникВидов.Ссылка.ЭтоГруппа
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Ссылка, ДатаМобайл_НовыеШтрихкоды.Номенклатура) КАК Ссылка,
	                    |	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Наименование, ДатаМобайл_НовыеШтрихкоды.Номенклатура.Наименование) КАК Наименование,
	                    |	ДатаМобайл_НовыеТовары.Пользователь КАК АвторТовара,
	                    |	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Номенклатура, ДатаМобайл_НовыеШтрихкоды.Номенклатура) КАК Номенклатура,
	                    |	ЕСТЬNULL(ДатаМобайл_НовыеТовары.ХарактеристикаНоменклатуры, ДатаМобайл_НовыеШтрихкоды.Характеристика) КАК Характеристика,
	                    |	ДатаМобайл_НовыеТовары.Номенклатура.ВидНоменклатуры КАК ВИД,
	                    |	ЕСТЬNULL(ДатаМобайл_НовыеТовары.Номенклатура.ВидНоменклатуры, МойВид.видноменклатурыНужный) КАК ВидНоменклатуры,
	                    |	ДатаМобайл_НовыеШтрихкоды.ШтрихКод КАК ШтрихКод,
	                    |	ДатаМобайл_НовыеШтрихкоды.Коэффициент КАК Коэффициент,
	                    |	ДатаМобайл_НовыеШтрихкоды.Наименование КАК НаименованиеУпаковки,
	                    |	ДатаМобайл_НовыеШтрихкоды.Пользователь КАК АвторШтрихкода
	                    |ПОМЕСТИТЬ СписокОбъектов
	                    |ИЗ
	                    |	РегистрСведений.ДатаМобайл_НовыеШтрихкоды КАК ДатаМобайл_НовыеШтрихкоды
	                    |		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_НовыеТовары КАК ДатаМобайл_НовыеТовары
	                    |		ПО ДатаМобайл_НовыеШтрихкоды.Номенклатура = ДатаМобайл_НовыеТовары.Ссылка,
	                    |	МойВид КАК МойВид
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	СписокОбъектов.Ссылка КАК Ссылка,
	                    |	СписокОбъектов.Наименование КАК Наименование,
	                    |	СписокОбъектов.АвторТовара КАК АвторТовара,
	                    |	СписокОбъектов.Номенклатура КАК Номенклатура,
	                    |	СписокОбъектов.Характеристика КАК Характеристика,
	                    |	СписокОбъектов.ВидНоменклатуры КАК ВидНоменклатуры,
	                    |	СписокОбъектов.ШтрихКод КАК ШтрихКод,
	                    |	СписокОбъектов.Коэффициент КАК Коэффициент,
	                    |	СписокОбъектов.НаименованиеУпаковки КАК НаименованиеУпаковки,
	                    |	СписокОбъектов.АвторШтрихкода КАК АвторШтрихкода,
	                    |	ВЫБОР
	                    |		КОГДА ТИПЗНАЧЕНИЯ(СписокОбъектов.Ссылка) = ТИП(Справочник.номенклатура)
	                    |			ТОГДА СписокОбъектов.Номенклатура.ЕдиницаИзмерения
	                    |		ИНАЧЕ ЕдиницыИзмеренияБазовые.Ссылка
	                    |	КОНЕЦ КАК ЕдиницаИзмерения,
	                    |	ЕдиницыИзмеренияБазовые.Ссылка КАК Упаковка,
	                    |	ЕСТЬNULL(ЕдиницыИзмеренияБазовые.ЕдиницаИзмерения, ЕдиницыИзмеренияБазовые.Ссылка) КАК ЕдиницаУпаковки
	                    |ИЗ
	                    |	СписокОбъектов КАК СписокОбъектов
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмеренияБазовые
	                    |		ПО СписокОбъектов.НаименованиеУпаковки = ЕдиницыИзмеренияБазовые.Наименование
	                    |			И (ВЫБОР
	                    |				КОГДА СписокОбъектов.Ссылка ССЫЛКА Справочник.Номенклатура
	                    |					ТОГДА СписокОбъектов.Ссылка = ЕдиницыИзмеренияБазовые.Владелец
	                    |							ИЛИ СписокОбъектов.Ссылка.НаборУпаковок = ЕдиницыИзмеренияБазовые.Владелец
	                    |				ИНАЧЕ ЕдиницыИзмеренияБазовые.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	                    |						И ЕдиницыИзмеренияБазовые.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	                    |			КОНЕЦ)");

	

	НовыеТоварыШтрихкоды.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеТоварыШтрихкодыУпаковкаПриИзменении(Элемент)
	ТД=Элементы.НовыеТоварыШтрихкоды.ТекущиеДанные;
	ТД.ЕдиницаУпаковки=ВернутьЕдиницуПоУпаковке(ТД.Упаковка);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНовыеТоварыШтрихкоды(Команда)
	ВыделитьНовыеТоварыШтрихкодыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыделитьНовыеТоварыШтрихкодыНаСервере()
	Для каждого СтрокаТовара ИЗ НовыеТоварыШтрихкоды Цикл	
		строкаТовара.Обрабатывать = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеНовыеТоварыШтрихкоды(Команда)
	СнятьВыделениеНовыеТоварыШтрихкодыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СнятьВыделениеНовыеТоварыШтрихкодыНаСервере()
	Для каждого СтрокаТовара ИЗ НовыеТоварыШтрихкоды Цикл	
		строкаТовара.Обрабатывать = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьЕдиницуПоУпаковке(Упаковка)
	Возврат Упаковка.ЕдиницаИзмерения;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьНовыйТоварВСправочник(лНовыйТовар,Ссылка,СсылкаХарактеристики=Неопределено)
	Об=лНовыйТовар.ПолучитьОбъект();
	Об.Номенклатура=Ссылка;
	Об.ХарактеристикаНоменклатуры=СсылкаХарактеристики;

	Об.Записать();
	Возврат Об.Ссылка;
КонецФункции

&НаКлиенте
Процедура ОбработатьСозданиеТовара(лРезультатЗакрытия,лПараметр)Экспорт
	ТД=Элементы.НовыеТоварыШтрихкоды.ТекущиеДанные;
	Если ТД=Неопределено тогда
		Возврат;
	КонецЕсли;
	Если ФРМ=Неопределено тогда
		Возврат;
	КонецЕсли;	
	Если ФРМ.Объект.Ссылка.Пустая() тогда
		Возврат;
	КонецЕслИ;	
	Если лПараметр=Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписатьНовыйТоварВСправочник(лПараметр,ФРМ.Объект.Ссылка);
	

	ЗаполнитьНаСервере();
	ФРМ=Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТовар(Команда)
	ТД=Элементы.НовыеТоварыШтрихкоды.ТекущиеДанные;
	Если Не ТД.Номенклатура.Пустая() тогда
		Если Не ТД.Ссылка.Пустая() тогда
			ЗаписатьНовыйТоварВСправочник(ТД.Ссылка,ТД.Номенклатура,ТД.Характеристика);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если ТД=Неопределено тогда
		Возврат;
	КонецЕсли;
	Если ТД.ВидНоменклатуры.Пустая() тогда
		Возврат;
	КонецЕсли;
	Если ТД.ЕдиницаИзмерения.Пустая() тогда
		Возврат;
	КонецЕсли;
	лСтруктураРеквизитов=Новый Структура("Наименование,ВидНоменклатуры,ЕдиницаИзмерения",ТД.Наименование,ТД.ВидНоменклатуры,ТД.ЕдиницаИзмерения);
	лПараметры=Новый Структура("ЗначенияЗаполнения",лСтруктураРеквизитов);
	ФРМ=ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",лПараметры,ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработатьСозданиеТовара",ЭтаФорма,ТД.Ссылка),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФРМ.Объект.ВидНоменклатуры=ТД.ВидНоменклатуры;
	ФРМ.Объект.Наименование = ТД.Наименование;
	ФРМ.Объект.ЕдиницаИзмерения = ТД.ЕдиницаИзмерения;

	ФРМ.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНовыеТовары(Команда)
	УдалитьНовыеТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьНовыеТоварыНаСервере()
	Для каждого СтрокаТовара ИЗ НовыеТоварыШтрихкоды Цикл
		
		Если НЕ строкаТовара.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТовара.Ссылка.Пустая() Тогда
			НовыйТоварОбъект = СтрокаТовара.Ссылка.ПолучитьОбъект();
			Попытка
				новыйТоварОбъект.Удалить();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить товар "+НовыйТоварОбъект +" "+ОписаниеОшибки());
			Конецпопытки;
			ВыборкаШК = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
			//ВыборкаШК.Отбор.Номенклатура.Установить(СтрокаТовара.Номенклатура);
			ВыборкаШК.Отбор.ШтрихКод.Установить(СтрокаТовара.ШтрихКод);
			ВыборкаШК.Прочитать();
			ВыборкаШК.Очистить();
			ВыборкаШК.Записать(Истина);
		КонецЕсли;
		
		Если ЗНачениеЗАполнено(СтрокаТовара.Номенклатура) Тогда
			ВыборкаШК = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
			//ВыборкаШК.Отбор.Номенклатура.Установить(СтрокаТовара.Номенклатура);
			ВыборкаШК.Отбор.ШтрихКод.Установить(СтрокаТовара.ШтрихКод);
			ВыборкаШК.Прочитать();
			ВыборкаШК.Очистить();
			ВыборкаШК.Записать(Истина);
		КонецЕсли;
					
		Если ЗНачениеЗАполнено(СтрокаТовара.Номенклатура) Тогда
			ВыборкаШК = РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
			//ВыборкаШК.Отбор.Номенклатура.Установить(СтрокаТовара.Ссылка);
			ВыборкаШК.Отбор.ШтрихКод.Установить(СтрокаТовара.ШтрихКод);
			ВыборкаШК.Прочитать();
			ВыборкаШК.Очистить();
			ВыборкаШК.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	ЗаполнитьНаСервере();

Конецпроцедуры

&НаКлиенте
Процедура ПривязатьШтрихкоды(Команда)
	ПривязатьШтрихкодыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПривязатьШтрихкодыНаСервере()
	попытка
		начатьтранзакцию();
		Для Каждого лСтрТаб из НовыеТоварыШтрихкоды цикл
			Если лСтрТаб.Обрабатывать тогда
				Если СокрЛП(лСтрТаб.Штрихкод)="" тогда
					лС=Новый СообщениеПользователю;
					лС.Текст="Для строки "+лСтрТаб.Наименование+" ну пустой штрихкод";
					лС.Сообщить();
					продолжить;
				КонецЕсли;	
				Если лСтрТаб.Номенклатура.Пустая() тогда
					лС=Новый СообщениеПользователю;
					лС.Текст="Для строки "+лСтрТаб.Наименование+"не выбрана номенклатура.";
					лС.Сообщить();
					продолжить;
				КонецЕсли;	
				Если лСтрТаб.Упаковка.Пустая() тогда
					Если лСтрТаб.Номенклатура.ИспользоватьУпаковки тогда
										
						ЗапросУпаковок = Новый Запрос;
						ЗапросУпаковок.УстановитьПараметр("Номенклатура", лСтрТаб.Номенклатура);
						ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокНоменклатура", лСтрТаб.Номенклатура.НаборУпаковок);
						ЗапросУпаковок.УстановитьПараметр("НаборыУпаковокВидНоменклатуры", лСтрТаб.Номенклатура.ВидНоменклатуры.НаборУпаковок);
						ЗапросУпаковок.УстановитьПараметр("Коэффициент", лСтрТаб.Коэффициент);	
						ЗапросУпаковок.Текст = "ВЫБРАТЬ
						|	УпаковкиНоменклатуры.Ссылка
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
						|ГДЕ
						|	УпаковкиНоменклатуры.Владелец = &Номенклатура
						|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
						|ОБЪЕДИНИТЬ
						|ВЫБРАТЬ
						|	УпаковкиНоменклатуры.Ссылка
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
						|ГДЕ
						|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокНоменклатура
						|	И УпаковкиНоменклатуры.Числитель = &Коэффициент
						|ОБЪЕДИНИТЬ
						|ВЫБРАТЬ
						|	УпаковкиНоменклатуры.Ссылка
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
						|ГДЕ
						|	УпаковкиНоменклатуры.Владелец = &НаборыУпаковокВидНоменклатуры
						|	И УпаковкиНоменклатуры.Числитель = &Коэффициент";

							
						ВыборкаУпаковок = ЗапросУпаковок.Выполнить().Выбрать();                               
						
						лУпак = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();	   
						Пока ВыборкаУпаковок.Следующий() Цикл
							лУпак = ВыборкаУпаковок.ССылка;
							Прервать;
						КонецЦикла;
						
						Если  лУпак.Пустая() Тогда
							лС=Новый СообщениеПользователю;
							лС.Текст="Для номенклатуры "+лСтрТаб.Номенклатура+" Не найдена упаковка с коэффициентом "+ лСтрТаб.Коэффициент;
							лС.Сообщить();
							продолжить;
						КонецЕсли;
					Иначе
						лУпак = лСтрТаб.Номенклатура.ЕдиницаИзмерения;
					КонецЕсли;	
				КонецЕсли;
				
				лСтрТаб.Упаковка = лУпак;
				
				ШК=РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				ШК.Штрихкод=лСтрТаб.Штрихкод;
				ШК.Номенклатура=лСтрТаб.Номенклатура;
				ШК.Характеристика=лСтрТаб.Характеристика;
				ШК.Упаковка=лСтрТаб.Упаковка;
				старНЗ=РегистрыСведений.ДатаМобайл_НовыеШтрихкоды.СоздатьНаборЗаписей();
				старНЗ.Отбор.ШтрихКод.Установить(лСтрТаб.ШтрихКод);
				старНЗ.Прочитать();
				старНЗ.Очистить();
				старНЗ.Записать(Истина);
				ШК.Записать(Истина);
			КонецЕсли;	
		КонецЦикла;	
		
		зафиксироватьтранзакцию();
	исключение	
		отменитьтранзакцию();
	конецпопытки;	
	ЗаполнитьНаСервере();
КонецПроцедуры


//ТЕРМИНАЛЫ
&НаКлиенте
Процедура СоздатьТСД(Команда)
	СоздатьНовыйУзел();
	ЭтаФорма.ПодчиненныеЭлементы.грЗакладки.ТекущаяСтраница.ПодчиненныеЭлементы.СписокТСД.Обновить();
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйУзел()
Планы=ПланыОбмена.ДатаМобайл_СписокТСД.Выбрать();
n=0;
Пока Планы.Следующий() цикл
	n=n+1;
КонецЦикла;

НовыйУзел=ПланыОбмена.ДатаМобайл_СписокТСД.СоздатьУзел();
		НовыйУзел.Код=n+1;
		НовыйУзел.Наименование="Новый терминал"+НовыйУзел.Код;
НовыйУзел.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ПоследнийПакЛистОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		ОбновитьПоследнийПакЛистНаГлавномУзле(Текст);     
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ОбновитьПоследнийПакЛистНаГлавномУзле(Текст)
	
	ГлавныйУзел = ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду("").ПолучитьОбъект();
	ГлавныйУзел.ПоследнийПакЛист = Число(Текст);  
	ГлавныйУзел.Записать();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПакЛистГлавногоУзла()
	
	ГлавныйУзел = ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду("");
	Если ГлавныйУзел <> Неопределено Тогда 
		Возврат ГлавныйУзел.ПоследнийПакЛист;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьТоварыЕГАИСПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьТоварыЕГАИС=Истина;
		Узел.Записать();    
		ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.КлассификаторАлкогольнойПродукцииЕГАИС);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьТоварыПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьТовары=Истина;
		Узел.Записать();    
		//ПланыОбмена.ЗарегистрироватьИзменения(Элемент, Метаданные.Справочники.Номенклатура);

	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДокументыПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьДокументы=Истина;
		Узел.Записать();    
		ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.ДатаМобайл_ДокументыТСД);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьШаблоныПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьШаблоны=Истина;
		Узел.Записать();    
		ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.ДатаМобайл_ШаблоныДокументов);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьПользователейПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьПользователей=Истина;
		Узел.Записать();    
		ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.Пользователи);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьКлиентовПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьКлиентов=Истина;
		Узел.Записать();    
		ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.Партнеры);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьЯчейкиПоСтроке(Элемент,СтрокаОшибок)
	попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьЯчейки=Истина;
		Узел.Записать();    
		ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.СкладскиеЯчейки);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьЕдиницыПоСтроке(Элемент,СтрокаОшибок)
	Попытка
		Узел=Элемент.ПолучитьОбъект();
		Узел.ОчиститьЕдиницыИзмерения = Истина;
		Узел.Записать();    
		//ПланыОбмена.ЗарегистрироватьИзменения(Элемент,Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	Исключение
		СтрокаОшибок=ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВсеТоварыЕГАИС(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьТоварыЕГАИСПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеТовары(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьТоварыПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеШаблоны(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьШаблоныПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеДокументы(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьДокументыПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсехПользователей(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьПользователейПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсехКлиентов(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьКлиентовПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеЯчейки(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьЯчейкиПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеЕдиницы(Команда)
	ТД=Элементы.СписокТСД.ТекущиеДанные;
	Если ТД=Неопределено тогда
		возврат;
	КонецЕсли;
	СтрокаОшибок="";
	Если не ВыгрузитьЕдиницыПоСтроке(ТД.Ссылка,СтрокаОшибок) тогда
		Сообщить("Не удалось:"+СтрокаОшибок);
		Возврат;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсёНажатие(Команда)
	      ВыгрузитьВсеДокументы(Команда);
		  ВыгрузитьВсеТовары(Команда);
		  ВыгрузитьВсехКлиентов(Команда);
		  ВыгрузитьВсехПользователей(Команда);
		  ВыгрузитьВсеШаблоны(Команда);
		  ВыгрузитьВсеЯчейки(Команда);
КонецПроцедуры


//ШАБЛОНЫ
&НаКлиенте
Процедура ДобавитьШаблоныПоУмолчанию()
	Если ДобавитьШаблон() = Истина Тогда
		Сообщить("Шаблоны по-умолчанию созданы", СтатусСообщения.ОченьВажное);
		ОбновитьИнтерфейс();
	Иначе 
		Сообщить("Ошибка. Шаблоны по-умолчанию не созданы", СтатусСообщения.ОченьВажное);
    КонецЕсли;

	
	
КонецПроцедуры	 
	
&НаСервере	
Функция ДобавитьШаблон()
	Попытка
		возвр_знач = Ложь;
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("[ЕГАИС] Исходящая ТТН").Пустая() Тогда 	
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "[ЕГАИС] Исходящая ТТН";
		НовыйШаблон.ВидДокумента = "ТТНИсходящаяЕГАИС";		
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 2;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ВсеШтрихкодыТовара= Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ТТНИсходящаяЕГАИС.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 1;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ВерсияЕГАИС = 1;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.ЕГАИС = Истина;
		НовыйШаблон.СопоставлениеЕГАИС = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("[ЕГАИС] Входящая ТТН").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "[ЕГАИС] Входящая ТТН";
		НовыйШаблон.ВидДокумента = "ТТНВходящаяЕГАИС";		
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 2;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ВсеШтрихкодыТовара= Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ТТНВходящаяЕГАИС.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 1;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		НовыйШаблон.ВерсияЕГАИС = 1;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.ЕГАИС = Истина;
		НовыйШаблон.СопоставлениеЕГАИС = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
	
		//НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		//НовыйШаблон.Наименование = "[ЕГАИС_DM] Акт постановки";
		//НовыйШаблон.ВидДокумента = "ДатаМобайл_АктПостановкиНаБаланс";		
		//НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		//НовыйШаблон.ПриСканированииНовогоТовара = 0;
		//НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
		//
		//НовыйШаблон.ИспользоватьПодбор = Истина;
		//НовыйШаблон.ВсеШтрихкодыТовара= Истина;
		//НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ЕГАИС_АктПостановкиНаБаланс.ТабличныеЧасти.Товары.Имя;
		//НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		//НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		//НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		//НовыйШаблон.ПриСканированииТовараПодбор = 2;
		//НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		//НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		//НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		//НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		//НовыйШаблон.ЕГАИС = Истина;
		//НовыйШаблон.СопоставлениеЕГАИС = Истина;
		//НовыйШаблон.ЕГАИСИспользоватьДатуРозлива = ИСТИНА;
		//НовыйШаблон.ЕГАИСРежимВВодаPDF417 = 0;
		//НовыйШаблон.ЕгаисИспользоватьМарку = 1;
		//НовыйШаблон.Записать();
		//
		//НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		//НовыйШаблон.Наименование = "[ЕГАИС] Пересчет алкоголя";
		//НовыйШаблон.ВидДокумента = "ЕГАИС_ПересчетАлкогольнойПродукции";		
		//НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		//НовыйШаблон.ПриСканированииНовогоТовара = 0;
		//НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
		//НовыйШаблон.ИспользоватьПодбор = Истина;
		//НовыйШаблон.ВсеШтрихкодыТовара= Истина;
		//НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ЕГАИС_ПересчетАлкогольнойПродукции.ТабличныеЧасти.Товары.Имя;
		//НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		//НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		//НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		//НовыйШаблон.ПриСканированииТовараПодбор = 2;
		//НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		//НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		//НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		//НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		//НовыйШаблон.ВерсияЕГАИС = 1;		
		//НовыйШаблон.ЕГАИС = Истина;
		//НовыйШаблон.СопоставлениеЕГАИС = Истина;
		//НовыйШаблон.ЕГАИСИспользоватьДатуРозлива = ИСТИНА;
		//НовыйШаблон.ЕГАИСРежимВВодаPDF417 = 0;
		//НовыйШаблон.ЕгаисИспользоватьМарку = 1;
		//НовыйШаблон.Записать();
		//
		//
		//НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		//НовыйШаблон.Наименование = "[ЕГАИС] Акт списания";
		//НовыйШаблон.ВидДокумента = "ЕГАИС_АктСписания";		
		//НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		//НовыйШаблон.ПриСканированииНовогоТовара = 0;
		//НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		//
		//НовыйШаблон.ИспользоватьПодбор = Истина;
		//НовыйШаблон.ВсеШтрихкодыТовара= Истина;
		//НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ЕГАИС_АктСписания.ТабличныеЧасти.Товары.Имя;
		//НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		//НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		//НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		//НовыйШаблон.ПриСканированииТовараПодбор = 2;
		//НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		//НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		//НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		//НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		//НовыйШаблон.ЕГАИС = Истина;
		//НовыйШаблон.СопоставлениеЕГАИС = Истина;
		//НовыйШаблон.Записать();
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Перемещение по ячейкам").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Перемещение по ячейкам";
		НовыйШаблон.ВидДокумента = "ОтборРазмещениеТоваров";

		НовыйШаблон.ПриСканированииНовогоТовара = 2;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ОтборРазмещениеТоваров.ТабличныеЧасти.ТоварыОтбор.Имя;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 0;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.ИспользованиеЯчеекПодбор = 2;
		НовыйШаблон.УчитыватьЯчеекВЗаданииПодбор = Истина;
		
		НовыйШаблон.ИспользоватьПриемку = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПриемка = Метаданные.Документы.ОтборРазмещениеТоваров.ТабличныеЧасти.ТоварыРазмещение.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПриемка = Истина;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПриемка = 2;
		НовыйШаблон.ПечатьЭтикеткиПриПриемке = 0;
		НовыйШаблон.ПриСканированииТовараПриемка = 2;
		НовыйШаблон.ПриПревышенииЗаданияПриемка = 1;
		НовыйШаблон.ПриПревышенииЛимитаПриемка = 0;
		НовыйШаблон.РучнойВводКоличестваПриемка = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПриемка = Истина;	
		НовыйШаблон.ИспользованиеЯчеекПриемка = 2;
		НовыйШаблон.УчитыватьЯчеекВЗаданииПриемка = Истина;

		НовыйШаблон.Записать();
		КонецЕсли;

		
		
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Инвентаризация").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Инвентаризация";
		НовыйШаблон.ВидДокумента = "ПересчетТоваров";		
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 0;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПересортицаТоваров.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 1;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
		
		
		
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Заказ клиента").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Заказ клиента";
		НовыйШаблон.ВидДокумента = "ЗаказКлиента";
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.РезервироватьТовар = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 0;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;		
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;		
		НовыйШаблон.Записать();
		КонецЕсли;
		
		
		
		
		
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Проверка отгрузки").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Проверка отгрузки";
		НовыйШаблон.ВидДокумента = "РеализацияТоваровУслуг";
		НовыйШаблон.ПриСканированииНовогоТовара = 2;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
		
		
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Расходный ордер").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Расходный ордер";
		НовыйШаблон.ВидДокумента = "РасходныйОрдерНаТовары";
		НовыйШаблон.ПриСканированииНовогоТовара = 0;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.РасходныйОрдерНаТовары.ТабличныеЧасти.ОтгружаемыеТовары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
		
		
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Возврат от клиента").Пустая() Тогда 

		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Возврат от клиента";
		НовыйШаблон.ВидДокумента = "ВозвратТоваровОтКлиента";
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 0;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 0;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ВозвратТоваровОтКлиента.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ТабличнуюЧастьПриЗагрузкеПодбор = 2;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 0;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 0;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
		
		
		

	 	Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Поступление товаров").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		
		Попытка 
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПриобретениеТоваровУслуг.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.Наименование = "Поступление товаров";
		НовыйШаблон.ВидДокумента = "ПриобретениеТоваровУслуг";
		Исключение
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПоступлениеТоваровУслуг.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.Наименование = "Поступление товаров";
		НовыйШаблон.ВидДокумента = "ПоступлениеТоваровУслуг";
		КонецПопытки;
	
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ОбновлятьПриКаждомОткрытии = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 0;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
		
		
		
		
		
		
		Если Справочники.ДатаМобайл_ШаблоныДокументов.НайтиПоНаименованию("Приходный ордер").Пустая() Тогда 
		НовыйШаблон = Справочники.ДатаМобайл_ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Наименование = "Приходный ордер";
		НовыйШаблон.ВидДокумента = "ПриходныйОрдерНаТовары";      
		НовыйШаблон.РазрешеноСозданиеНаТСД = Истина;
		НовыйШаблон.ОбновлятьПриКаждомОткрытии = Истина;
		НовыйШаблон.ПриСканированииНовогоТовара = 0;
		НовыйШаблон.ВсеШтрихкодыТовара = Истина;
		НовыйШаблон.ШтрихкодыТолькоПоШаблонам = Истина;
		НовыйШаблон.РазрешитьВыгрузкуНеполногоДокумента = 1;
		НовыйШаблон.ИспользоватьПодбор = Истина;
		НовыйШаблон.ИмяТабличнойЧастиПодбор = Метаданные.Документы.ПриходныйОрдерНаТовары.ТабличныеЧасти.Товары.Имя;
		НовыйШаблон.ОтсылатьГотовуюЗаписьНаСерверПодбор = Истина;
		НовыйШаблон.ПечатьЭтикеткиПриПодборе = 0;
		НовыйШаблон.ПриСканированииТовараПодбор = 2;
		НовыйШаблон.ПриПревышенииЗаданияПодбор = 1;
		НовыйШаблон.ПриПревышенииЛимитаПодбор = 1;
		НовыйШаблон.РучнойВводКоличестваПодбор = Истина;
		НовыйШаблон.ПодтверждатьЭнтеромПодбор = Истина;
		НовыйШаблон.Записать();
		КонецЕсли;
		
	
		
		возвр_знач = Истина;
	Исключение
		возвр_знач = ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

		
		
		
		 Возврат возвр_знач;           

	КонецФункции

&НаКлиенте
Процедура ОткрытьРасписание(Команда)
	
	РасписаниеЗадания=Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРегламентноеЗаданиеОбновленияМарок());
	ПараметрыПередачи = Новый Структура("Расписание", РасписаниеЗадания);
	ОписаниеОповещенияЗакрытияРасписания = Новый ОписаниеОповещения("ЗакрытиеФормыРасписания", ЭтотОбъект, ПараметрыПередачи);
	РасписаниеЗадания.Показать(ОписаниеОповещенияЗакрытияРасписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыРасписания(Параметр, ДопПараметры) Экспорт 
	
	Если Параметр <> Неопределено Тогда
		УстановитьРасписаниеРегламентногоЗадания(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРасписаниеРегламентногоЗадания(Расписание)
	
	Регл = РегламентныеЗадания.НайтиПредопределенное("ДатаМобайл_ПроверкаМарок");
	Регл.Расписание = Расписание;
	Регл.Записать();
	
КонецПроцедуры

	 
//ВЫГРУЗКА ОФФЛАЙН
&НаКлиенте
Процедура ВыгрузитьТовары(Команда)
	
	АдресДанныхТовары=ЗаполнитьТаблицуТовары();	
	АдресДанныхШтрихкоды=ЗаполнитьТаблицуШтрихкоды();	

	МассивТСД = ПолучитьМассивТСД();

	индикатортсд = 0;
	этаформа.Элементы.индикатортсд.МаксимальноеЗначение = МассивТСД.Количество();
	
Для Н = 0 По МассивТСД.Количество() - 1 Цикл
	ИДТСД = СокрЛП(МассивТСД[Н]);	

	
	Если НЕ КаталогиДоступны(ИДТСД)тогда
		Возврат
	КонецЕсли;	
	//Атрибут1="";
	//Атрибут2="";
	//Для каждого стр из Реквизиты Цикл
	//	Если стр.Выгружать="-" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если Атрибут1="" тогда
	//		Атрибут1=Стр.Реквизит;
	//	Иначе
	//		Атрибут2=Стр.Реквизит;
	//	КонецЕсли;
	//КонецЦикла;
	
	
	Если Товары.Количество()=0 тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Нет номенклатуры для выгрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	   
	
	КоличествоЭлементов=Товары.Количество()+Штрихкоды.Количество();
	ИндикаторТовары=0;
   	тхт_тв = Новый ТекстовыйДокумент;
	ТекстФайлаТовары = ""+?(ОчиститьТовары,"-","+")+Символы.ПС;
	ТекстФайлаТовары=ТекстФайлаТовары+""+Атрибут1+";"+Атрибут2+";"+Атрибут3+";"+Атрибут4+";"+Атрибут5+";"+Атрибут6+";"+Атрибут7+";"+Атрибут8+";"+Атрибут9+";"+Атрибут10+";"+Символы.ПС;
	   
  	КоличествоТовары = Товары.Количество();
	Если КоличествоТовары<100 тогда
		РазмерШагаТовары=5
	ИначеЕсли КоличествоТовары<1000 тогда
		РазмерШагаТовары=10
	ИначеЕсли КоличествоТовары<10000 тогда
		РазмерШагаТовары=100
	ИначеЕсли КоличествоТовары<100000 тогда
		РазмерШагаТовары=1000
	Иначе 
		РазмерШагаТовары=10000
	КонецЕсли;
	
    КоличествоШаговТовары = Цел(КоличествоТовары / РазмерШагаТовары);
    КоличествоЦелТовары   = КоличествоШаговТовары * РазмерШагаТовары;

    Если КоличествоЦелТовары < КоличествоТовары Тогда
        МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары + 1;
    Иначе
        МаксимальноеЗначениеИндикатораТовары = КоличествоШаговТовары;
    КонецЕсли;

	
	тхт_шк = Новый ТекстовыйДокумент;
	ТекстФайлаШтрихкоды = ""+?(ОчиститьТовары,"-","+")+Символы.ПС;
	   
  	КоличествоШтрихкоды = Штрихкоды.Количество();
	Если КоличествоШтрихкоды<100 тогда
		РазмерШагаШтрихкоды=5
	ИначеЕсли КоличествоШтрихкоды<1000 тогда
		РазмерШагаШтрихкоды=10
	ИначеЕсли КоличествоШтрихкоды<10000 тогда
		РазмерШагаШтрихкоды=100
	ИначеЕсли КоличествоШтрихкоды<100000 тогда
		РазмерШагаШтрихкоды=1000
	Иначе 
		РазмерШагаШтрихкоды=10000
	КонецЕсли;
	
    КоличествоШаговШтрихкоды = Цел(КоличествоШтрихкоды / РазмерШагаШтрихкоды);
    КоличествоЦелШтрихкоды   = КоличествоШаговШтрихкоды * РазмерШагаШтрихкоды;

    Если КоличествоЦелШтрихкоды < КоличествоШтрихкоды Тогда
        МаксимальноеЗначениеИндикатораШтрихкоды = КоличествоШаговШтрихкоды + 1;
    Иначе
        МаксимальноеЗначениеИндикатораШтрихкоды = КоличествоШаговШтрихкоды;
    КонецЕсли;
	
	
	Элементы.ИндикаторТовары.МаксимальноеЗначение = МаксимальноеЗначениеИндикатораТовары+МаксимальноеЗначениеИндикатораШтрихкоды;
	
	
	
    Для Счетчик = 1 По КоличествоШаговТовары Цикл

        ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,РазмерШагаТовары * (Счетчик - 1) + 1, РазмерШагаТовары * Счетчик, АдресДанныхТовары,АртикулВставитьВНазвание);

		ИндикаторТовары = Счетчик;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
		
    КонецЦикла;
    Если КоличествоЦелТовары < КоличествоТовары Тогда

        ТекстФайлаТовары=ТекстФайлаТовары+ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,КоличествоШаговТовары * РазмерШагаТовары + 1, КоличествоТовары, АдресДанныхТовары,АртикулВставитьВНазвание);

		ИндикаторТовары = ИндикаторТовары + 1;

    КонецЕсли;
    тхт_тв.УстановитьТекст(ТекстФайлаТовары);
	тхт_тв.ВставитьСтроку(0,""+Формат(тхт_тв.КоличествоСтрок(),"ЧГ=0"));
    тхт_тв.Записать(лКаталогОбмена+"\DataMobile\"+ИДТСД+"\IN\"+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_Arts.dm",КодировкаТекста.UTF8);
 
 	
    Для Счетчик = 1 По КоличествоШаговШтрихкоды Цикл

        ТекстФайлаШтрихкоды=ТекстФайлаШтрихкоды+ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,РазмерШагаШтрихкоды * (Счетчик - 1) + 1, РазмерШагаШтрихкоды * Счетчик, АдресДанныхШтрихкоды);
		ИндикаторТовары = ИндикаторТовары+1;
        ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();
    КонецЦикла;

    Если КоличествоЦелШтрихкоды < КоличествоШтрихкоды Тогда

        ТекстФайлаШтрихкоды=ТекстФайлаШтрихкоды+ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,КоличествоШаговШтрихкоды * РазмерШагаШтрихкоды + 1, КоличествоШтрихкоды, АдресДанныхШтрихкоды);
		ИндикаторТовары = ИндикаторТовары + 1;

    КонецЕсли;
    тхт_шк.УстановитьТекст(ТекстФайлаШтрихкоды);
	тхт_шк.ВставитьСтроку(0,""+Формат(тхт_шк.КоличествоСтрок(),"ЧГ=0"));
    тхт_шк.Записать(лКаталогОбмена+"\DataMobile\"+ИДТСД+"\IN\"+Формат(Текущаядата(),"ДФ=ddMMyyyyHHmmss")+"_v83_BarCodes.dm",КодировкаТекста.UTF8);

	индикатортсд = ИндикаторТСД + 1; 
КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура АтрибутАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    Список = Новый СписокЗначений();
    Список.ЗагрузитьЗначения(СобратьСписокИменАтрибута().ВыгрузитьЗначения());
    ДанныеВыбора=Список;
КонецПроцедуры

&НаСервере
Функция СобратьСписокИменАтрибута()
	СписокОтвета=Новый СписокЗначений();
	СписокОтвета.Добавить("!!! Ячейки !!!");
	//СписокОтвета.Добавить("!!! Остатки !!!");
	Для Каждого Реквизит из Метаданные.Справочники.Номенклатура.Реквизиты цикл
		СписокОтвета.Добавить(Реквизит.Имя);
	КонецЦикла;	
	Возврат СписокОтвета;
КонецФункции

&НаКлиенте
Процедура лКаталогОбменаПриИзменении(Элемент)
	
	Если лКаталогОбмена<>"" тогда
		лКаталогОбмена=СокрЛП(лКаталогОбмена)+?(пРАВ(СокрЛП(лКаталогОбмена),1)="\","","\"); 
	КонецЕсли;	
	ФайлыТСД=НайтиФайлы(лКаталогОбмена+"DataMobile","*");//поиск подпапок терминалов для обмена и составления списка 
	n=0;
	Для Каждого файлТСД из ФайлыТСД цикл
		Если файлТСД.ЭтоКаталог()  Тогда
			Если НРег(файлТСД.Имя)="in" тогда
				продолжить;
			КонецЕсли;	
			Если НРег(файлТСД.Имя)="out" тогда
				продолжить;
			КонецЕсли;	
			Если НРег(файлТСД.Имя)="log" тогда
				продолжить;
			КонецЕсли;
			n=n+1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура лКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Диалог.Выбрать() Тогда
		лКаталогОбмена=Диалог.Каталог;
	КонецЕсли;	
	лКаталогОбмена=СокрЛП(лКаталогОбмена)+?(пРАВ(СокрЛП(лКаталогОбмена),1)="\","","\");
	лКаталогОбменаПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуТовары()
	//	Для каждого мд из Метаданные.Справочники.Номенклатура.Реквизиты Цикл //поиск имени по синониму
	//			Если мд.Синоним=Атрибут1 тогда
	//				Атрибут1=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//			Если мд.Синоним=Атрибут2 тогда
	//				Атрибут2=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//КонецЦикла;
	
	ЗапросТоваров=Новый Запрос();
	ЗапросТоваров.УстановитьПараметр("Товар",ВыбраннаяГруппаТовара);
	ЗапросТоваров.УстановитьПараметр("ВсеТовары",Ложь);
	Если ВыбраннаяГруппаТовара.Пустая() тогда
		ЗапросТоваров.УстановитьПараметр("ВсеТовары",Истина);
	КонецЕсли;	
	ТекстЗапроса="ВЫБРАТЬ
	             |	Товары.Ссылка КАК Ссылка,
	             |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, &Пустая) КАК СсылкаХарактеристика,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(Товары.ПометкаУдаления, ЛОЖЬ)
	             |				ИЛИ ЕСТЬNULL(ХарактеристикиНоменклатуры.ПометкаУдаления, ЛОЖЬ)
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК Удалить,
	             |	ВЫБОР
	             |		КОГДА НЕ Товары.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL 
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ КАК ЭтоХарактеристика,
	             |	Товары.Наименование + "" "" + ВЫБОР
	             |		КОГДА НЕ Товары.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА """"
	             |		ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """")
	             |	КОНЕЦ КАК Товар,
	             |	&Атрибут1 КАК Атрибут1,
	             |	&Атрибут2 КАК Атрибут2,
	             |	&Атрибут3 КАК Атрибут3,
	             |	&Атрибут4 КАК Атрибут4,
	             |	&Атрибут5 КАК Атрибут5,
	             |	&Атрибут6 КАК Атрибут6,
	             |	&Атрибут7 КАК Атрибут7,
	             |	&Атрибут8 КАК Атрибут8,
	             |	&Атрибут9 КАК Атрибут9,
	             |	&Атрибут0 КАК Атрибут10,
	             |	ЕСТЬNULL(ОстаткиНоменклатуры.ВНаличииОстаток, 0) КАК Остаток,
	             |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	             |	ВидыНоменклатуры.ИспользоватьСерии
	             |ИЗ
	             |	Справочник.Номенклатура КАК Товары
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	             |		ПО (ВЫБОР
	             |				КОГДА Товары.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	             |					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.Ссылка
	             |				КОГДА Товары.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	             |					ТОГДА ХарактеристикиНоменклатуры.Владелец = Товары.ВидНоменклатуры
	             |				ИНАЧЕ ЛОЖЬ
	             |			КОНЕЦ)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	             |		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = Товары.Ссылка)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ОстаткиНоменклатуры
	             |		ПО (ВЫБОР
	             |				КОГДА &ИгнорироватьХарактеристики
	             |					ТОГДА ОстаткиНоменклатуры.Номенклатура = Товары.Ссылка
	             |				ИНАЧЕ ОстаткиНоменклатуры.Номенклатура = Товары.Ссылка
	             |						И ОстаткиНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	             |			КОНЕЦ)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	             |		ПО Товары.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	             |ГДЕ
	             |	НЕ Товары.ЭтоГруппа
	             |	И (Товары.Ссылка В ИЕРАРХИИ (&Товар)
	             |			ИЛИ &ВсеТовары)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Товары.Ссылка,
	             |	ХарактеристикиНоменклатуры.Ссылка,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(Товары.ПометкаУдаления, ЛОЖЬ)
	             |				ИЛИ ЕСТЬNULL(ХарактеристикиНоменклатуры.ПометкаУдаления, ЛОЖЬ)
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ,
	             |	Товары.Наименование + "" "" + ВЫБОР
	             |		КОГДА НЕ Товары.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА """"
	             |		ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """")
	             |	КОНЕЦ,
	             |	ВЫБОР
	             |		КОГДА НЕ Товары.ИспользованиеХарактеристик <> &НеИспользовать
	             |				ИЛИ &ИгнорироватьХарактеристики
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ВЫБОР
	             |				КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL 
	             |					ТОГДА ЛОЖЬ
	             |				ИНАЧЕ ИСТИНА
	             |			КОНЕЦ
	             |	КОНЕЦ,
	             |	ОстаткиНоменклатуры.ВНаличииОстаток,
	             |	ВидыНоменклатуры.ИспользоватьСерии
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Товар";

	ЗапросТоваров.Текст=ТекстЗапроса;
	ЗапросТоваров.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	ЗапросТоваров.УстановитьПараметр("Пустая",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	//ЗапросТоваров.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	
	Если (Атрибут1<>"")И(Атрибут1<>"!!! Ячейки !!!")И(Атрибут1<>"!!! Остатки !!!")  тогда
		Если (Атрибут1="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут1="НаименованиеПолное") ИЛИ (Атрибут1="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","ВЫРАЗИТЬ (Товары."+Атрибут1+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","Товары."+Атрибут1);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут1","""""");
	КонецЕсли;	
	Если (Атрибут2<>"")И(Атрибут2<>"!!! Ячейки !!!")И(Атрибут2<>"!!! Остатки !!!")  тогда
		Если (Атрибут2="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут2="НаименованиеПолное") ИЛИ (Атрибут2="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","ВЫРАЗИТЬ (Товары."+Атрибут2+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","Товары."+Атрибут2);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут2","""""");
	КонецЕсли;	
	Если (Атрибут3<>"")И(Атрибут3<>"!!! Ячейки !!!")И(Атрибут3<>"!!! Остатки !!!")  тогда
		Если (Атрибут3="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут3="НаименованиеПолное") ИЛИ (Атрибут3="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","ВЫРАЗИТЬ (Товары."+Атрибут3+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","Товары."+Атрибут3);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут3","""""");
	КонецЕсли;	
	Если (Атрибут4<>"")И(Атрибут4<>"!!! Ячейки !!!")И(Атрибут4<>"!!! Остатки !!!")  тогда
		Если (Атрибут4="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут4="НаименованиеПолное") ИЛИ (Атрибут4="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","ВЫРАЗИТЬ (Товары."+Атрибут4+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","Товары."+Атрибут4);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут4","""""");
	КонецЕсли;	
	
	Если (Атрибут5<>"")И(Атрибут5<>"!!! Ячейки !!!")И(Атрибут5<>"!!! Остатки !!!")  тогда
		Если (Атрибут5="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут5="НаименованиеПолное") ИЛИ (Атрибут5="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","ВЫРАЗИТЬ (Товары."+Атрибут5+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","Товары."+Атрибут5);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут5","""""");
	КонецЕсли;	
	
	Если (Атрибут6<>"")И(Атрибут6<>"!!! Ячейки !!!")И(Атрибут6<>"!!! Остатки !!!")  тогда
		Если (Атрибут6="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут6="НаименованиеПолное") ИЛИ (Атрибут6="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","ВЫРАЗИТЬ (Товары."+Атрибут6+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","Товары."+Атрибут6);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут6","""""");
	КонецЕсли;	
	
	Если (Атрибут7<>"")И(Атрибут7<>"!!! Ячейки !!!")И(Атрибут7<>"!!! Остатки !!!")  тогда
		Если (Атрибут7="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут7="НаименованиеПолное") ИЛИ (Атрибут7="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","ВЫРАЗИТЬ (Товары."+Атрибут7+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","Товары."+Атрибут7);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут7","""""");
	КонецЕсли;	
	
	Если (Атрибут8<>"")И(Атрибут8<>"!!! Ячейки !!!")И(Атрибут8<>"!!! Остатки !!!")  тогда
		Если (Атрибут8="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут8="НаименованиеПолное") ИЛИ (Атрибут8="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","ВЫРАЗИТЬ (Товары."+Атрибут8+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","Товары."+Атрибут8);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут8","""""");
	КонецЕсли;	
	
	Если (Атрибут9<>"")И(Атрибут9<>"!!! Ячейки !!!")И(Атрибут9<>"!!! Остатки !!!")  тогда
		Если (Атрибут9="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут9="НаименованиеПолное") ИЛИ (Атрибут9="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","ВЫРАЗИТЬ (Товары."+Атрибут9+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","Товары."+Атрибут9);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут9","""""");
	КонецЕсли;	
	
	Если (Атрибут10<>"")И(Атрибут10<>"!!! Ячейки !!!")И(Атрибут10<>"!!! Остатки !!!")  тогда
		Если (Атрибут10="ДополнительноеОписаниеНоменклатуры") ИЛИ (Атрибут10="НаименованиеПолное") ИЛИ (Атрибут10="Комментарий") тогда //неограниченные строки
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","ВЫРАЗИТЬ (Товары."+Атрибут10+" КАК СТРОКА(100))");
		Иначе
			ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","Товары."+Атрибут10);
		КонецЕсли;
	Иначе	
		ЗапросТоваров.Текст=СтрЗаменить(ЗапросТоваров.Текст,"&Атрибут0","""""");
	КонецЕсли;	
	
	ЗапросТоваров.УстановитьПараметр("ТипЦен",ВыбранныйТипЦен);
	
	ДанныеТовары = ЗапросТоваров.Выполнить().Выгрузить();
    АдресДанныхТовары = ПоместитьВоВременноеХранилище(ДанныеТовары, УникальныйИдентификатор);
	Товары.Загрузить(ДанныеТовары);
	Возврат АдресДанныхТовары;
КонецФункции  

&НаСервере
Функция ЗаполнитьТаблицуШтрихкоды()
	//Для каждого мд из Метаданные.Справочники.Номенклатура.Реквизиты Цикл //поиск имени по синониму
	//			Если мд.Синоним=Атрибут1 тогда
	//				Атрибут1=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//			Если мд.Синоним=Атрибут2 тогда
	//				Атрибут2=ЧистаяСтрока(мд.Имя);
	//			КонецЕсли;
	//КонецЦикла;
	
	ЗапросШтрихкодов=Новый Запрос();
	ЗапросШтрихкодов.УстановитьПараметр("Товар",ВыбраннаяГруппаТовара);
	ЗапросШтрихкодов.УстановитьПараметр("ВсеТовары",Ложь);
	Если ВыбраннаяГруппаТовара.Пустая() тогда
		ЗапросШтрихкодов.УстановитьПараметр("ВсеТовары",Истина);
	КонецЕсли;	
	ТекстЗапроса="ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК ШтрихКод,
	|	Штрихкоды.Упаковка.Ссылка КАК Ссылка,				 
	|	ВЫБОР
	|		КОГДА 
	|					НЕ (Штрихкоды.Номенклатура.ИспользованиеХарактеристик<>&НеИспользовать) ИЛИ 
	|				&ИгнорироватьХарактеристики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Числитель,1) КОНЕЦ/ 
	|	         		   ВЫБОР КОГДА ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) = 0 ТОГДА 1 ИНАЧЕ ЕСТЬNULL(Штрихкоды.Упаковка.Знаменатель,1) КОНЕЦ, 1)
	|	КОНЕЦ  КАК КФ,
	|	Штрихкоды.Номенклатура КАК СсылкаПапЫ,
	|	Штрихкоды.Характеристика КАК СсылкаХарактеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Штрихкоды.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Штрихкоды.Упаковка.Наименование 
	|	КОНЕЦ  КАК ЕИ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Упаковка.Ссылка ЕСТЬ NULL
	|			ТОГДА Ложь
	|		ИНАЧЕ Штрихкоды.Упаковка.ПометкаУдаления 
	|	КОНЕЦ  КАК Удалить
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	(Штрихкоды.Номенклатура В ИЕРАРХИИ (&Товар)
	|			ИЛИ &ВсеТовары)
	|";
	ЗапросШтрихКодов.Текст=ТекстЗапроса;
	ЗапросШтрихКодов.УстановитьПараметр("ИгнорироватьХарактеристики",ИгнорироватьХарактеристики);
	ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	//ЗапросШтрихКодов.УстановитьПараметр("НеИспользовать",Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
	
	ДанныеШтрихкоды      = ЗапросШтрихкодов.Выполнить().Выгрузить();
    АдресДанныхШтрихкоды = ПоместитьВоВременноеХранилище(ДанныеШтрихкоды, УникальныйИдентификатор);	
	ШтрихКоды.Загрузить(ДанныеШтрихкоды);
	Возврат АдресДанныхШтрихкоды;
КонецФункции  

&НаСервереБезКонтекста
Функция ВыгрузитьПорциюТоваров(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,начало,конец,АдресДанных,АртикулВставитьВНазвание)	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		        n=Счетчик+1;
				СтрокаТовара=""+n+";";
    			СтрокаТовара=СтрокаТовара+(?(Данные[Счетчик].Удалить,"-","+"))+";";
    			//СтрокаТовара=СтрокаТовара+?(Данные[Счетчик].ЭтоХарактеристика,"8h-","8a-")+СокрЛП(Данные[Счетчик].ссылка.УникальныйИдентификатор())+";";
				СтрокаТовара=СтрокаТовара+"8U-"+СокрЛП(Данные[Счетчик].ссылка.УникальныйИдентификатор())+СокрЛП(Данные[Счетчик].ссылкаХарактеристика.УникальныйИдентификатор())+";";
				Если АртикулВставитьВНазвание тогда
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(?(Данные[Счетчик].ЭтоХарактеристика,Данные[Счетчик].Ссылка.Владелец.Артикул,Данные[Счетчик].Ссылка.Артикул)+"-"+СокрЛП(Данные[Счетчик].Товар))+";";
    			Иначе	
    				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Товар)+";";
    			КонецЕсли;	
    			СтрокаТовара=СтрокаТовара+Формат(Данные[Счетчик].Цена,"ЧРД=.; ЧН=0; ЧГ=0")+";";
    			СтрокаТовара=СтрокаТовара+Формат(Данные[Счетчик].Цена,"ЧРД=.; ЧН=0; ЧГ=0")+";";
    			СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут1)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут2)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут3)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут4)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут5)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут6)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут7)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут8)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут9)+";";
				СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Атрибут10)+";";
    			СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Данные[Счетчик].Остаток)+";";
    			СтрокаТовара=СтрокаТовара+ЧистаяСтрока(Формат(Данные[Счетчик].ИспользоватьСерии,"БЛ=0; БИ=1"))+";";
				
     			ТекстФайла=ТекстФайла+СтрокаТовара+Символы.ПС;	
    КонецЦикла;

    Возврат ТекстФайла; 		   
	 
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьПорциюШтрихкодов(Атрибут1,Атрибут2,Атрибут3,Атрибут4,Атрибут5,Атрибут6,Атрибут7,Атрибут8,Атрибут9,Атрибут10,ИДТСД,начало,конец,АдресДанных)	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);
	ТекстФайла="";
	n=0;
	Для Счетчик = Начало - 1 По Конец - 1 Цикл
		n=Счетчик+1;			
		СтрокаШтрихкода=""+n+";";
		СтрокаШтрихкода=СтрокаШтрихкода+(?(Данные[Счетчик].Удалить,"-","+"))+";";
		Если Лев(Данные[Счетчик].ШтрихКод,2)="2_" тогда    //весовые
		СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Сред(Данные[Счетчик].ШтрихКод,3,5))+";";	
		Иначе	
	 	СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Данные[Счетчик].ШтрихКод)+";";
		КонецЕсли;
		СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Данные[Счетчик].ЕИ)+";";
		СтрокаШтрихкода=СтрокаШтрихкода+ЧистаяСтрока(Формат(Данные[Счетчик].кф,"ЧРД=.; ЧН=0; ЧГ=0"))+";";
		//СтрокаШтрихкода=СтрокаШтрихкода+?(Данные[Счетчик].ЭтоХарактеристика,"8h-","8a-")+СокрЛП(Данные[Счетчик].СсылкаПапы.УникальныйИдентификатор());
		СтрокаШтрихкода=СтрокаШтрихкода+"8U-"+СокрЛП(Данные[Счетчик].СсылкаПапы.УникальныйИдентификатор())+СокрЛП(Данные[Счетчик].ссылкаХарактеристика.УникальныйИдентификатор())+";";
		ТекстФайла=ТекстФайла+СтрокаШтрихкода+Символы.ПС;
    КонецЦикла;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЧистаяСтрока(Знач ГрязнаяСтрока)
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"'","-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ВК," ");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ПС,"-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,";","");
	ЧистаяСтрока=СокрЛП(ГрязнаяСтрока);
	Возврат ЧистаяСтрока;
КонецФункции	

&НаКлиенте
Функция КаталогиДоступны(ИДТСД)
	Если (лКаталогОбмена = "")Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указан каталог обмена!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если лКаталогОбмена = "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст="Не указан каталог обмена с ТСД!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	
	ИмяКаталогаIN=лКаталогОбмена+"DataMobile\"+ИДТСД+"\IN\";
	КаталогНаДискеIN= Новый Файл(ИмяКаталогаIN);
	
	ИмяКаталогаOUT=лКаталогОбмена+"DataMobile\"+ИДТСД+"\OUT\";
	КаталогНаДискеOUT= Новый Файл(ИмяКаталогаOUT);

	ИмяКаталогаLOG=лКаталогОбмена+"DataMobile\"+ИДТСД+"\LOG\";
	КаталогНаДискеLOG= Новый Файл(ИмяКаталогаLOG);

	Если НЕ КаталогНаДискеIN.Существует() или НЕ КаталогНаДискеOUT.Существует() 
		или НЕ КаталогНаДискеLOG.Существует() Тогда
			Попытка
				СоздатьКаталог(ИмяКаталогаIN);
				СоздатьКаталог(ИмяКаталогаOUT);
				СоздатьКаталог(ИмяКаталогаLOG);
				Возврат Истина;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст="Не удалось создать необходимые папки обмена, попробуйте создать их вручную!";
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецПопытки
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПолучитьМассивТСД()
	
	Терминалы = Новый Массив;
	СтрАйди = "ID";      
	Если ЗНачениеЗаполнено(ТерминалВыгрузки) И ТерминалВыгрузки.Код<>"" Тогда
		Терминалы.Добавить(СтрАЙди+ТерминалВыгрузки.Код);
	Иначе

		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	""ID"" + ДатаМобайл_СписокТСД.Код КАК КОД
		                      |ИЗ
		                      |	ПланОбмена.ДатаМобайл_СписокТСД КАК ДатаМобайл_СписокТСД
		                      |ГДЕ
		                      |	ДатаМобайл_СписокТСД.Код <> """"");
							  
		Терминалы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
		
	КонецЕсли;
	
	Возврат Терминалы;
	
КонецФункции


//АНАЛИТИКА
&НаСервере
Функция ПолучитьМойМакет()
	ЭтотОбъект1=РеквизитФормыВЗначение("Объект");
	Макет = ЭтотОбъект1.ПолучитьМакет("МакетОтчёт"); 
	Возврат Макет
КонецФункции

&НаСервере
Функция Формирование() Экспорт
	

	
	СхемаКомпоновкиДанных = ПолучитьМойМакет();


	//Макет компоновки
	// Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	           

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	СхемаКомпоновкиДанных.Параметры.МояДатаС.Значение = ДатаС;
	СхемаКомпоновкиДанных.Параметры.МояДатаДо.Значение = ДатаДо;

	//СхемаКомпоновкиДанных.Параметры[1].Значение = ДатаДо;

	Если (ТипАналитика = 1) Тогда
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Пользователи").Настройки);
	Иначе
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ТСД").Настройки);

	КонецЕсли;
	Настройки = КомпоновщикНастроек.Настройки;
	
	             
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);

	//Компоновка данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	//Вывод результата
	ДокументРезультат =  Новый ТабличныйДокумент;
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	возврат ДокументРезультат;
	
	 КонецФункции

&НаКлиенте
Процедура АналитикаСформировать(Команда)
	Если ((ТипАналитика = 1 или ТипАналитика = 2) и (ДатаС <> Дата(1,1,1) И ДатаДо <> Дата(1,1,1))) Тогда
		Формирование().Показать();
	Иначе 
		Сообщить("Данные не заполнены!", СтатусСообщения.ОченьВажное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеТипАналитикаПриИзменении(Элемент)
КонецПроцедуры


//ПЕЧАТЬ ЭТИКЕТОК
&НаКлиенте
Процедура ОтправитьНаПечать(Команда)
	
	ТД=Элементы.СписокДокументов.ТекущиеДанные;
	Если ТД=Неопределено тогда
		Предупреждение("Выберите документ!");
		возврат;
	КонецЕсли;
	
	ФормаПечати = ПолучитьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары");
	ОбъектФормы = ФормаПечати.Объект;
	ЗаполнитьФормуЦенников(ОбъектФормы, ТД.Ссылка);
	КопироватьДанныеФормы(ОбъектФормы, ФормаПечати.Объект);
	ФормаПечати.Открыть();	
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФормуЦенников(ОбъектФормы, Ссылка)
	
	ЗапросТоваров = Новый Запрос;
	      ЗапросТоваров.Текст =    "ВЫБРАТЬ
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Номенклатура,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ХарактеристикаНоменклатуры,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ЕдиницаИзмерения,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.ШтрихКод,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Количество
	                             |ИЗ
	                             |	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПодбор КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор
	                             |ГДЕ
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПодбор.Ссылка = &Ссылка
	                             |
	                             |ОБЪЕДИНИТЬ ВСЕ
	                             |
	                             |ВЫБРАТЬ
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Номенклатура,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ХарактеристикаНоменклатуры,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ЕдиницаИзмерения,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.ШтрихКод,
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Количество
	                             |ИЗ
	                             |	Справочник.ДатаМобайл_ДокументыТСД.СобранныеДанныеПриемка КАК ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка
	                             |ГДЕ
	                             |	ДатаМобайл_ДокументыТСДСобранныеДанныеПриемка.Ссылка = &Ссылка";
	
	ЗапросТоваров.УстановитьПараметр("Ссылка", Ссылка);
	Рез = ЗапросТоваров.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Товар = ОбъектФормы.Товары.Добавить();
		Товар.Номенклатура = Рез.Номенклатура;
		Товар.Характеристика = Рез.ХарактеристикаНоменклатуры;
		Товар.Упаковка = Рез.ЕдиницаИзмерения;
		Товар.ШтрихКод = Рез.ШтрихКод;
		Товар.КоличествоЭтикеток = Рез.Количество;
		Товар.КоличествоЦенников = Рез.Количество;
	КонецЦикла;
	
КонецФункции


//ПРОВЕРКА МАРОК
&НаКлиенте
Процедура ОбновитьСписокМарок(Отказ)
	
	ОбновитьДанныеПроверки();

КонецПроцедуры

&НаКлиенте
Процедура ДокументыПроверкиМарокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДокументыПроверкиМарок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Н = 0 По ДетализацияМарокПроверки.Отбор.Элементы.Количество() - 1 Цикл
		Если ДетализацияМарокПроверки.Отбор.Элементы[Н].ИдентификаторПользовательскойНастройки = "ФильтрЗадание" Тогда
			ЭлементОтбораСтатус = ДетализацияМарокПроверки.Отбор.Элементы[Н];
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбораСтатус = Неопределено Тогда
		ЭлементОтбораСтатус = ДетализацияМарокПроверки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
		ЭлементОтбораСтатус.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданиеТСД");
		ЭлементОтбораСтатус.ПравоеЗначение = Элементы.ДокументыПроверкиМарок.ТекущиеДанные.Задание;
		ЭлементОтбораСтатус.ИдентификаторПользовательскойНастройки = "ФильтрЗадание";
		ЭлементОтбораСтатус.Использование = Истина;
	Иначе
		ЭлементОтбораСтатус.ПравоеЗначение = Элементы.ДокументыПроверкиМарок.ТекущиеДанные.Задание;
		ЭлементОтбораСтатус.Использование = Истина;
	КонецЕсли;
	
	//ЭлементОтбораПоЗаданию.Использование = Истина;
	////ЭлементОтбораПоЗаданию.ПутьКДанным = "ЗаданиеТСД";
	//ЭлементОтбораПоЗаданию.Значение = ЭлементыФормы.ДокументыПроверкиМарок.ТекущиеДанные.Ссылка;
	//ЭлементОтбораПоЗаданию.ВидСравнения = ВидСравнения.Равно;

	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКЛК(Команда)
	
	СтруктураОшибок = Новый Структура();
	СтруктураОшибок.Вставить("ЕстьОшибки", Ложь);
	СтруктураОшибок.Вставить("СодержанияОшибок", Новый Массив);

	ВыполнитьПодключениеКЛичномуКабинетуНаСервере(ИННРАР, ПарольРАР, СтруктураОшибок);
	
	Если Не СтруктураОшибок.ЕстьОшибки Тогда
		ПоказатьПредупреждение(,"Подключение выполнено успешно", 10, "Подключение выполнено");
	Иначе
		Для Н = 0 По СтруктураОшибок.СодержанияОшибок.Количество() - 1 Цикл
			Сообщить(СтруктураОшибок.СодержанияОшибок[Н]);
			ПоказатьПредупреждение(,"Подключение не выполнено", 10, "Подключение не выполнено");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗаданиеОбновленияМарок()
	
	Регл = РегламентныеЗадания.НайтиПредопределенное("ДатаМобайл_ПроверкаМарок");

	Возврат Регл.Расписание;	
	
КонецФункции

&НаКлиенте
Процедура ПроверятьDataMatrixПриИзменении(Элемент)
	
	УстановитьЗначениеКонстанты(ПроверятьDataMatrix);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеКонстанты(Значение)
	
		Константы.ДатаМобайл_ПроверятьDataMatrix.Установить(Значение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроверкуМарок(Команда)
	
	ДанныеСтроки = Элементы.ДокументыПроверкиМарок.ТекущиеДанные; 
	Если ДанныеСтроки = Неопределено Тогда
		Сообщить("Не выбран документ для проверки");
		Возврат;
	КонецЕсли;
		
		Если ПроверятьDataMatrix Тогда
			ДатаМобайл_МодульПроверкиМарок.ВыполнитьПроверкуСерий(ИННРАР, ПарольРАР, AntiCaptcha,ДанныеСтроки.Задание);
		Иначе	
			ДатаМобайл_МодульПроверкиМарок.ВыполнитьПроверкуМарок(ИННРАР, ПарольРАР, AntiCaptcha,Ложь,ДанныеСтроки.Задание);
		КонецЕсли;		

	ОбновитьДанныеПроверки();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБалансАнтиКапчи(Команда)
	
	СтруктураОшибок = Новый Структура();
	СтруктураОшибок.Вставить("ЕстьОшибки", Ложь);
	СтруктураОшибок.Вставить("СодержанияОшибок", Новый Массив);

	Balance = ДатаМобайл_МодульПроверкиМарок.ПроверкаБалансаАнтикапчи(AntiCaptcha,СтруктураОшибок);

		Если Не СтруктураОшибок.ЕстьОшибки Тогда
			ПоказатьПредупреждение(,"Баланс: " + Balance + " $", 10, "Баланс AntiCapcha");
		Иначе
			Для Н = 0 По СтруктураОшибок.СодержанияОшибок.Количество() - 1 Цикл
				Сообщить(СтруктураОшибок.СодержанияОшибок[Н]);
				ПоказатьПредупреждение(,"Не удалось подключиться к сервису", 10, "Баланс AntiCapcha");
			КонецЦикла;
		КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ИННРАРПриИзменении(Элемент)
	УстановитьЗначениеКонстантыСервер(ИННРАР,ПарольРАР,AntiCaptcha);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПодключениеКЛичномуКабинетуНаСервере(ИННРАР, ПарольРАР,СтруктураОшибок)
		ДатаМобайл_МодульПроверкиМарок.ВыполнитьПодключениеКЛичномуКабинетуКлиент(ИННРАР, ПарольРАР, СтруктураОшибок);
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроверкиДляФильтраПриИзменении(Элемент)
	
	Для Н = 0 По ДетализацияМарокПроверки.Отбор.Элементы.Количество() - 1 Цикл
		Если ДетализацияМарокПроверки.Отбор.Элементы[Н].ИдентификаторПользовательскойНастройки = "ФильтрСтатус" Тогда
			ЭлементОтбораСтатус = ДетализацияМарокПроверки.Отбор.Элементы[Н];
		КонецЕсли;
	КонецЦикла;
	
	Если СтатусПроверкиДляФильтра.Пустая() Тогда
		Если ЭлементОтбораСтатус <> Неопределено Тогда
			ЭлементОтбораСтатус.Использование = Ложь;
		КонецЕсли;
	Иначе
		Если ЭлементОтбораСтатус = Неопределено Тогда
			ЭлементОтбораСтатус = ДетализацияМарокПроверки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			ЭлементОтбораСтатус.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
			ЭлементОтбораСтатус.ПравоеЗначение = СтатусПроверкиДляФильтра;
			ЭлементОтбораСтатус.ИдентификаторПользовательскойНастройки = "ФильтрСтатус";
			ЭлементОтбораСтатус.Использование = Истина;
		Иначе
			ЭлементОтбораСтатус.ПравоеЗначение = СтатусПроверкиДляФильтра;
			ЭлементОтбораСтатус.Использование=Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроданныеПриИзменении(Элемент)
	
	
	Для Н = 0 По ДетализацияМарокПроверки.Отбор.Элементы.Количество() - 1 Цикл
		Если ДетализацияМарокПроверки.Отбор.Элементы[Н].ИдентификаторПользовательскойНастройки = "ФильтрЕстьПродажи" Тогда
			ЭлементОтбораЕстьПродажи = ДетализацияМарокПроверки.Отбор.Элементы[Н];
		КонецЕсли;
	КонецЦикла;

	Если ЭлементОтбораЕстьПродажи <> Неопределено Тогда
		ЭлементОтбораЕстьПродажи.Использование = Ложь;
	КонецЕсли;
		
	Если ОтображатьТолькоПроданные Тогда
			ЭлементОтбораЕстьПродажи = ДетализацияМарокПроверки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			ЭлементОтбораЕстьПродажи.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьПродажи");
			ЭлементОтбораЕстьПродажи.ПравоеЗначение = ОтображатьТолькоПроданные;
			ЭлементОтбораЕстьПродажи.ИдентификаторПользовательскойНастройки = "ФильтрЕстьПродажи";
			ЭлементОтбораЕстьПродажи.Использование = ОтображатьТолькоПроданные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДанныхМарки(Команда)
	
	ДанныеСтроки = Элементы.ДетализацияМарокПроверки.ТекущиеДанные; 
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДанныхХТМЛ = Новый Структура();
	ПараметрыДанныхХТМЛ.Вставить("ДанныеHTML",ПолучитьДанныеПечатиМарки(ДанныеСтроки.Марка)); 
	ОткрытьФорму("Обработка.ДатаМобайл_АРМДиспетчера.Форма.ФормаПечатиМарки", ПараметрыДанныхХТМЛ, Объект,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсеДокументы(Команда)
	
	Если ПроверятьDataMatrix Тогда
		ДатаМобайл_МодульПроверкиМарок.ВыполнитьПроверкуСерий(ИННРАР, ПарольРАР, AntiCaptcha);
	Иначе
		ДатаМобайл_МодульПроверкиМарок.ВыполнитьПроверкуМарок(ИННРАР, ПарольРАР, AntiCaptcha, Ложь);
	КонецЕсли;

	ОбновитьДанныеПроверки();
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПечатиМарки(Марка)
	Если Марка <> Неопределено Тогда
		
		ЗапросДанныхПечати = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                                  |	ДатаМобайл_МаркиДляПроверки.ДанныеПечати
		                                  |ИЗ
		                                  |	РегистрСведений.ДатаМобайл_МаркиДляПроверки КАК ДатаМобайл_МаркиДляПроверки
		                                  |ГДЕ
		                                  |	ДатаМобайл_МаркиДляПроверки.Марка = &Марка");
		ЗапросДанныхПечати.УстановитьПараметр("Марка", Марка);
		ВыборкаДанных = ЗапросДанныхПечати.Выполнить().Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			HTML = ВыборкаДанных.ДанныеПечати.Получить();
		КонецЦикла;
		
		Возврат HTML;
	КонецЕсли;
	Возврат "";
КонецФункции

&Насервере
Процедура ОбновитьДанныеПроверки() 
	
	ЗапросДокументовПроверки = Новый Запрос();
	ЗапросДокументовПроверки.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                 |	ДатаМобайл_МаркиДляПроверки.ЗаданиеТСД КАК Задание,
									 |	ДатаМобайл_МаркиДляПроверки.ЗаданиеТСД.ИсходныйДокумент КАК Документ,
	                                 |	ДатаМобайл_МаркиДляПроверки.ЗаданиеТСД.Шаблон КАК Шаблон,
	                                 |	ДатаМобайл_МаркиДляПроверки.ЗаданиеТСД.ТСД КАК ТСД,
	                                 |	ДатаМобайл_МаркиДляПроверки.ЗаданиеТСД.ИсходныйДокумент.ДатаОтгрузки КАК Дата
	                                 |ИЗ
	                                 |	РегистрСведений.ДатаМобайл_МаркиДляПроверки КАК ДатаМобайл_МаркиДляПроверки";
									 
	ДокументыПроверкиМарок.Загрузить(ЗапросДокументовПроверки.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеКонстантыСервер(ИННРАР,ПарольРАР,AntiCaptcha)
	
	Массив=Новый Массив;
	Массив.Добавить(ИННРАР); //0
	Массив.Добавить(ПарольРАР);  //1
	Массив.Добавить(AntiCaptcha);  //2

	Сжатие = Новый СжатиеДанных(9);
	Хранилище = Новый ХранилищеЗначения (Массив,Сжатие);
	Константы.ДатаМобайл_ОрганизацияПроверкиМарок.Установить(Хранилище);

КонецПроцедуры



