
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступления", СостояниеПоступления);
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораПоСостояниям();
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление, 
		"Организация",
		Организация,
		СтруктураБыстрогоОтбора);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеПоступления", 
		?(ЗначениеЗаполнено(СостояниеПоступления), Число(СостояниеПоступления), СостояниеПоступления),
		СтруктураБыстрогоОтбора,,,
		Истина);
		
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(
		СписокРаспоряженияНаОформление,
		"Склад",
		ОтборСклады,
		СтруктураБыстрогоОтбора,
		ОтборСклады.Количество() > 0,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
	ИспользоватьПоступлениеПоНесколькимЗаказам			= ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ИспользоватьЗаказыПоставщикам						= ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	
	ПравоДобавлятьПоступление = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	
	Элементы.СписокРаспоряженияНаОформлениеСоздатьПриобретениеТоваровУслуг.Видимость = ПравоДобавлятьПоступление;
	Элементы.СписокРаспоряженияНаОформлениеВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
			Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		Настройки.Удалить("Организация");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступления", СостояниеПоступления);
		Настройки.Удалить("СостояниеПоступления");
	Иначе
		Склад = Настройки.Получить("Склад");
		Организация = Настройки.Получить("Организация");
		СостояниеПоступления = Настройки.Получить("СостояниеПоступления");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"Организация",
		Организация,
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(Организация));
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеПоступления",
		?(ЗначениеЗаполнено(СостояниеПоступления), Число(СостояниеПоступления), СостояниеПоступления),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПоступления),
		,
		Истина);
		
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(
		СписокРаспоряженияНаОформление,
		"Склад",
		ОтборСклады,
		СтруктураБыстрогоОтбора,
		Настройки,
		ОтборСклады.Количество() > 0,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоступленияПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеПоступления), Число(СостояниеПоступления), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеПоступления",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Состояние));
		
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала("Накладные"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	
	ЭлементСписокРаспоряжения = Элементы.СписокРаспоряженияНаОформление;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(
				ЭлементСписокРаспоряжения.ТекущиеДанные,
				ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
		
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров
	ПараметрыСозданныхДокументов = ОформитьНакладныеПоЗаказамНаСервере();
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
			ПараметрыСозданныхДокументов.Параметры.Удалить("СозданныеДокументы");
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	//
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", "СписокРаспоряженияНаОформлениеДата");
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Ссылка;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваров


#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСпискиВыбораПоСостояниям()
	
	СписокВыбора = Элементы.СостояниеПоступления.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("1",НСтр("ru='Создать накладную'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2",НСтр("ru='Дооформить накладную'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала(КлючНазначенияИспользования)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста","ЖурналДокументовЗакупки");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Документы закупки'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ОформитьНакладныеПоЗаказамНаСервере()
	
	Перем СписокОшибок;
	
	СтруктураСозданныеНакладные = Новый Структура("СозданныеНакладные, ИмяФормы, ПараметрыФормы, Ошибки");
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок);
	ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если ВсегоТаблиц > 0 Тогда
		
		// При оформлении по заказам всегда создается новая накладная
		
		// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет функциональная опция
		// В ином случае открывается форма со списком созданных накладных
		
		Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
			// Пакетно
			ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок);
		ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
			// Индивидуально
			ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, СписокОшибок);
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	Иначе 
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовЗакупки.Форма.ФормаСозданныеДокументы");
	
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеПоступления > 0 Тогда
						
			ПолноеИмяРаспоряжения = ПерваяСтрока.Ссылка.Метаданные().ПолноеИмя();
			ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ПерваяСтрока.ХозяйственнаяОперация);
			
			МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
			МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
			
			Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
			
			РеквизитыШапки = Новый Структура;
			Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
				Отказ = Истина;
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("СкладПоступления",  Неопределено);
			
			ДанныеЗаполнения.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ДанныеЗаполнения.Вставить("ДокументОснование", Заказы);
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				// Добавить запись в историю работы пользователя.
				ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
				СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецПопытки;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеНакладной.Синоним, Заказы[0]);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пользователи.АвторизованныйПользователь(),
														СозданныеДокументы.ВыгрузитьЗначения(),
														"ФормаСозданныеДокументыЗакупки");
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыФормы = Новый Структура("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ПолноеИмяРаспоряжения = ВыделеннаяСтрока.Ссылка.Метаданные().ПолноеИмя();
	ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(ВыделеннаяСтрока.ХозяйственнаяОперация);
	МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНакладной);
	МетаданныеНакладной = Метаданные.НайтиПоПолномуИмени(ПолноеИмяНакладной);
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ПолныеИменаНакладных.НайтиПоЗначению(Распоряжение.Метаданные().ПолноеИмя()) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
		
	РеквизитыШапки = Новый Структура;
	Если НЕ ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкладПоступления",  Неопределено);
	
	ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
	ПараметрыФормы.Вставить("ДокументОснование", Заказы);
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	
	//ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок) 
	КлючевыеПоля = "Подразделение,Партнер,Контрагент,Договор,Организация,Склад,Соглашение,"
		+"ХозяйственнаяОперация,ВалютаВзаиморасчетов,НалогообложениеНДС,ЦенаВключаетНДС,"
		+"ПорядокРасчетов,ВернутьМногооборотнуюТару,НаправлениеДеятельности";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("ПолноеИмяНакладной");
	ТекущиеКлючи.Вставить("СостояниеПоступления");
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеПоступления", Новый ОписаниеТипов("Число"));
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеПоступления");
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ПолноеИмяРаспоряжения = Строка.Ссылка.Метаданные().ПолноеИмя();
		ПолноеИмяНакладной = ПолноеИмяНакладнойПоХозОперации(Строка.ХозяйственнаяОперация);
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ПолноеИмяНакладной = ПолноеИмяРаспоряжения Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		Иначе // оформление по заказам
			
			Если Строка.СостояниеПоступления = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать 
		//	в одну накладную заказы у которых разные склады)
		
		Если РазделеннаяТаблица = Неопределено 
			Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
			//Или Строка.СостояниеПоступления = 4
			Или ПолноеИмяНакладной <> ТекущиеКлючи.ПолноеИмяНакладной 
			Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи,Строка,КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ПолноеИмяНакладной = ПолноеИмяНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Функция ПолноеИмяНакладнойПоХозОперации(ХозяйственнаяОперация)
	
	ПолноеИмяНакладной = Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя();
	
	Возврат ПолноеИмяНакладной;
	
КонецФункции

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
		
КонецПроцедуры

#КонецОбласти
