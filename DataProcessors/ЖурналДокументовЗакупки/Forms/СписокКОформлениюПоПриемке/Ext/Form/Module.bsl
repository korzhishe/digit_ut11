
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступления", СостояниеПоступления);
		СтруктураБыстрогоОтбора.Свойство("ХозяйственнаяоперацияПриемки", ХозяйственнаяоперацияПриемки);
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораПоСостояниям();
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку, "Организация", Организация, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера", 
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,,,
		Истина);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку,
		"СостояниеПоступления", 
		?(ЗначениеЗаполнено(СостояниеПоступления), Число(СостояниеПоступления), СостояниеПоступления),
		СтруктураБыстрогоОтбора,,,
		Истина);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаПриемку,
		"ХозяйственнаяОперацияПриемки",
		ХозяйственнаяОперацияПриемки,
		СтруктураБыстрогоОтбора,
		ЗначениеЗаполнено(ХозяйственнаяОперацияПриемки),
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьОтветственноеХранениеВПроцессеЗакупки = Ложь;
	
	УстановитьПараметрыДинСписка();
	
	ПравоДобавлятьПоступление = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг)
		ИЛИ ПравоДоступа("Добавление",Метаданные.Документы.ПоступлениеТоваров);
	
	Элементы.СписокРаспоряженияНаПриемкуОформитьАктОРасхождениях.Видимость =
		ПравоДоступа("Добавление", Метаданные.Документы.АктОРасхожденияхПослеПриемки);
	Элементы.СписокРаспоряженияНаПриемкуОформитьПриемТоваровНаХранение.Видимость =
		ИспользоватьОтветственноеХранениеВПроцессеЗакупки;
	Элементы.СписокРаспоряженияНаПриемкуОформитьПоступлениеТоваров.Видимость =
		ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	Элементы.СписокРаспоряженияНаПриемкуСостояниеОрдера.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	
	НастроитьФормуПоСкладу();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ПоступлениеТоваров"
		Или ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
		Элементы.СписокРаспоряженияНаПриемку.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		Настройки.Удалить("Организация");
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		Настройки.Удалить("СостояниеОрдера");
		СтруктураБыстрогоОтбора.Свойство("СостояниеПоступления", СостояниеПоступления);
		Настройки.Удалить("СостояниеПоступления");
	Иначе
		Склад = Настройки.Получить("Склад");
		Организация = Настройки.Получить("Организация");
		СостояниеОрдера = Настройки.Получить("СостояниеОрдера");
		СостояниеПоступления = Настройки.Получить("СостояниеПоступления");
	КонецЕсли;
	
	НастроитьФормуПоСкладу();
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПриемку,
		"Организация",
		Организация,
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(Организация));
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера",
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеОрдера),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаПриемку,
		"СостояниеПоступления",
		?(ЗначениеЗаполнено(СостояниеПоступления), Число(СостояниеПоступления), СостояниеПоступления),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеПоступления),
		,
		Истина);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	НастроитьФормуПоСкладу();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаПриемкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПриемку,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПриемку,
		"СостояниеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеОрдера));
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПоступленияПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеПоступления), Число(СостояниеПоступления), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаПриемку,
		"СостояниеПоступления",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеПоступления));
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала("Накладные"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьАктОРасхождениях(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("АктОРасхожденияхПослеПриемки")) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственныеОперацииРаздельнойЗакупки = Новый Массив;
	ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
	ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
	ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Тогда
		
		Если ИспользоватьОтветственноеХранениеВПроцессеЗакупки Тогда
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!
				|Выберите строку с типом распоряжения ""Приобретение товаров и услуг"" или ""Приемка товаров на хранение"".'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!
				|Выберите строку с типом распоряжения ""Приобретение товаров и услуг"".'");
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли ХозяйственныеОперацииРаздельнойЗакупки.Найти(ТекущиеДанные.ХозяйственнаяОперация) <> Неопределено Тогда
		
		НаименованиеАкта = ?(ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"),
			НСтр("ru='поступления'"),
			НСтр("ru='приемки'"));
		
		ШаблонСтроки = НСтр("ru='Невозможно оформить документ ""Акт о расхождениях после %1"" на основании распоряжения %2 с операцией ""%3"".'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
			НаименованиеАкта,
			Строка(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.ХозяйственнаяОперация));
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("ДокументОснование", ТекущиеДанные.Ссылка);
	ПараметрыЗаполнения = Новый Структура("Основание, ПерезаполнитьПоПриемке", СтруктураЗаполнения, Истина);
	ОткрытьФорму("Документ.АктОРасхожденияхПослеПриемки.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПриемка(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", Новый Структура("ВходящиеДокументы", СписокДокументов));
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоПриемке(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи") Тогда
		ШаблонСтроки		= НСтр("ru='Невозможно оформить документ ""Приобретение товаров и услуг"" на основании распоряжения ""%1"" с операцией ""%2"".'");
		ТекстПредупреждения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтроки,
			Строка(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.ХозяйственнаяОперация));
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеОрдера = 1 Тогда
		ТекстПредупреждения = НСтр("ru = 'Перезаполнение приобретения товаров по приемке не требуется, так как нет ни одного ордера.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеОрдера = 4 Тогда
		ТекстПредупреждения = НСтр("ru = 'Перезаполнение приобретения товаров не требуется, так как ордерная схема не используется.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	ИмяФормыПоступление = "Документ.ПриобретениеТоваровУслуг.ФормаОбъекта";
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если ОпределитьНаличиеОформленныхНакладных(ТекущиеДанные.Ссылка, ТекущиеДанные.Склад, ТекущиеДанные.ХозяйственнаяОперация) Тогда
			ОткрытьФормуПереоформлениеНакладных(ТекущиеДанные.Ссылка, ТекущиеДанные.Склад, ТекущиеДанные.ХозяйственнаяОперация);
		Иначе
			Основание = Новый Структура;
			Основание.Вставить("ДокументОснование",				ТекущиеДанные.Ссылка);
			Основание.Вставить("СкладПоступления",				ТекущиеДанные.Склад);
			Основание.Вставить("ХозяйственнаяОперацияПриемки",	ТекущиеДанные.ХозяйственнаяОперацияПриемки);
			Основание.Вставить("ИмяРегистраЗаполнения",			"ТоварыКОформлениюПоступления");
			
			ПараметрыЗаполнения = Новый Структура("Основание, ЗаполнятьПоОрдеру", Основание, Истина);
			ОткрытьФорму(ИмяФормыПоступление, ПараметрыЗаполнения, ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ПараметрыЗаполнения = Новый Структура("Ключ, ЗаполнятьПоОрдеру", ТекущиеДанные.Ссылка, Истина);
		ОткрытьФорму(ИмяФормыПоступление, ПараметрыЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриемТоваровНаХранение(Команда)
	
	Если Не ИспользоватьОтветственноеХранениеВПроцессеЗакупки Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоступлениеТоваров(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаПриемку.ТекущиеДанные;
	
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	СписокХозопераций = Новый Массив;
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути"));
	СписокХозопераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	
	ОформлятьПоступление = СписокХозопераций.Найти(ТекущиеДанные.ХозяйственнаяОперацияПриемки)<>Неопределено;
	ОформлятьПоступлениеПоПриемке = Истина;
	ИмяФормыПоступление = "Документ.ПоступлениеТоваров.ФормаОбъекта";
	
	Если НЕ ОформлятьПоступление Тогда
		ТекстПредупреждения = НСтр("ru = 'Оформление документа ""Поступление товаров"" не требуется'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеОрдера = 1 Тогда
		ТекстПредупреждения = НСтр("ru = 'Создание поступления товаров по приемке не требуется, так как нет ни одного ордера.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеОрдера = 4 Тогда
		//Если не ордерная схема, оформляем по данным приобретений товаров.
		ОформлятьПоступлениеПоПриемке = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Основание = Новый Структура;
		Основание.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		Основание.Вставить("СкладПоступления", ТекущиеДанные.Склад);
		Основание.Вставить("ХозяйственнаяОперацияПриемки", ТекущиеДанные.ХозяйственнаяОперацияПриемки);
		Если ОформлятьПоступлениеПоПриемке Тогда
			Основание.Вставить("ИмяРегистраЗаполнения", "ТоварыКОформлениюПоступления");
		Иначе
			Основание.Вставить("ИмяРегистраЗаполнения", "ТоварыКПоступлению");
		КонецЕсли;
		ПараметрыЗаполнения = Новый Структура("Основание", Основание);
		
		ОткрытьФорму(ИмяФормыПоступление, ПараметрыЗаполнения, ЭтаФорма);
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ПараметрыЗаполнения = Новый Структура("Ключ, ЗаполнятьПоОрдеру, ИмяРегистраЗаполнения", ТекущиеДанные.Ссылка, Истина, "ТоварыКОформлениюПоступления");
		ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", ПараметрыЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элементы.СписокРаспоряженияНаПриемку.ТекущаяСтрока = Ссылка;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваров

&НаСервере
Функция ОпределитьНаличиеОформленныхНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику КАК Заказ,
	|	ЗаказыПоставщикамОстаткиИОбороты.Регистратор КАК Накладная
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
	|			,
	|			,
	|			Регистратор,
	|			,
	|			Склад = &Склад И
	|			ЗаказПоставщику = &РаспоряжениеСсылка
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыПоставщикамОстаткиИОбороты
	|ГДЕ
	|	ЗаказыПоставщикамОстаткиИОбороты.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументПоступленияТовары.Ссылка.Соглашение,
	|	ДокументПоступленияТовары.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ДокументПоступленияТовары
	|	
	|ГДЕ
	|	ДокументПоступленияТовары.Ссылка.Соглашение = &РаспоряжениеСсылка
	|	И ДокументПоступленияТовары.Склад = &Склад
	|	И ДокументПоступленияТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлениюПоступленияОстатки.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлениюПоступленияОстатки.КОформлениюОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления.Остатки(,Склад = &Склад И ДокументПоступления = &РаспоряжениеСсылка) КАК ТоварыКОформлениюПоступленияОстатки
	|ГДЕ
	|	ТоварыКОформлениюПоступленияОстатки.КОформлениюОстаток<>0");
	
	Запрос.УстановитьПараметр("РаспоряжениеСсылка", РаспоряжениеСсылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОформленныеНакладные = РезультатыЗапроса[0].Выгрузить();
	
	АдресТаблицаНакладныхВоВременномХранилище = ПоместитьВоВременноеХранилище(ОформленныеНакладные);
	НастройкиФормыПереоформленияНакладных = НастройкиФормыПереоформленияНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация);
	Возврат НЕ РезультатыЗапроса[1].Пустой() И ОформленныеНакладные.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПереоформлениеНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация)
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(РаспоряжениеСсылка);
	
	РеквизитыШапки = Новый Структура();
	Если ТипЗнч(РаспоряжениеСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи") Тогда
			ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(МассивСсылок, "ПриемкаТоваровНаХранение", РеквизитыШапки);
		Иначе
			ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(МассивСсылок, "ПриобретениеТоваровУслуг", РеквизитыШапки);
		КонецЕсли;
	Иначе
		РеквизитыШапки = ЗакупкиВызовСервера.ПолучитьУсловияЗакупок(РаспоряжениеСсылка);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы",
		МассивСсылок, Склад, РеквизитыШапки, НастройкиФормыПереоформленияНакладных);
	
	ОткрытьФорму("ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыПереоформленияНакладных(РаспоряжениеСсылка, Склад, ХозяйственнаяОперация)
	
	НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru = 'Переоформление документов закупки по выбранным распоряжениям'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента";
	НастройкиФормы.НакладнаяНаПриемку = Истина;
	НастройкиФормы.НакладнаяНаОтгрузку = Истина;
	НастройкиФормы.ИспользоватьНакладныеПоНесколькимЗаказам = ИспользоватьПоступлениеПоНесколькимЗаказам;
	Если ТипЗнч(РаспоряжениеСсылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		НастройкиФормы.ДанныеЗаполнения =  Новый Структура("ДокументОснование, Склад", РаспоряжениеСсылка, Склад);
	КонецЕсли;
	Возврат НастройкиФормы;
	
КонецФункции


#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьСпискиВыбораПоСостояниям()
	
	СписокВыбора = Элементы.СостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Соответствуют накладным'"),    Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	СписокВыбора.Добавить("4", НСтр("ru='Не используется'"),            Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
	СписокВыбора = Элементы.СостояниеПоступления.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Все оформлено'"),          Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1", НСтр("ru='Создать поступление'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить поступление'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	СписокВыбора.Добавить("4", НСтр("ru='Не используется'"),       Ложь, БиблиотекаКартинок.ПустаяКартинка);
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСкладу()
	
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаПриемку,
		"Склад",
		ОтборСклады,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборСклады.Количество() > 0);
		
	ЕстьОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад(Склад,ТекущаяДатаСеанса());
	ПравоНаЧтениеОстатковТоварыКОформлениюПоступления = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюПоступления);
	ПравоНаЧтениеОстатковТоваровКПоступлению = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
	ДоступностьПриемки = ЕстьОрдерныйНаПоступлениеСклад И ПравоНаЧтениеОстатковТоваровКПоступлению;
	ДоступностьПоступлений = ПравоНаЧтениеОстатковТоварыКОформлениюПоступления 
		И (ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков"));
		
	Элементы.СостояниеОрдера.Видимость = ДоступностьПриемки;
	Элементы.СостояниеПоступления.Видимость = ДоступностьПоступлений;
	Элементы.СписокРаспоряженияНаПриемкуСостояниеПоступления.Видимость = ДоступностьПоступлений;
	Элементы.СписокРаспоряженияНаПриемкуОформитьПоПриемке.Видимость = ПравоДобавлятьПоступление;
	Элементы.СписокРаспоряженияНаПриемкуВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала(КлючНазначенияИспользования)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста","ЖурналДокументовЗакупки");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Документы закупки'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыДинСписка()
	СписокХозОпераций = Новый Массив;
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	СписокХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	
	СписокРаспоряженияНаПриемку.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	СписокРаспоряженияНаПриемку.Параметры.УстановитьЗначениеПараметра("СписокХозОпераций", СписокХозОпераций);
КонецПроцедуры


#КонецОбласти

#КонецОбласти
