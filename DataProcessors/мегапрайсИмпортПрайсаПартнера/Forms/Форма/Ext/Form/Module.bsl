
//============================================================================
// АВТОР

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры


&НаСервере
Процедура УстановитьЗаголовок() Экспорт
	
	Попытка
		ЭтаФорма.Заголовок = "Мегапрайс: Импорт прайса партнера. SubSystems.ru 2009-2013г."+Константы.мегапрайсРегОрганизация.Получить().ИНН;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРегДанные() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РегОрганизация",Объект.РегОрганизация.Ссылка);
	Настройки.Вставить("РегКлюч",Объект.РегКлюч);
	ХранилищеСистемныхНастроек.Сохранить("Subsystems","Регистрация",Настройки,"Регистрационные данные","Пользователь");
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьРегДанные() Экспорт
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Subsystems","Регистрация","Регистрационные данные","Пользователь");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//============================================================================
// СЛУЖЕБНЫЕ

&НаСервере
Функция ПоместитьДанныеВоВременноеХранилищеПоискСоответствий()
	
	Перем СтруктураПараметров;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);
	СтруктураПараметров.Вставить("ТабличнаяЧасть",Объект.ТабличнаяЧасть.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,Новый УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

//============================================================================
// ФОРМА

&НаСервере
Процедура ЗаполнитьНастройки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ЗаполнитьНастройки(Объект.НастройкиКолонокЛиста,Объект.ТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПрайсПартнера") Тогда
		Объект.ПрайсПартнера = Параметры.ПрайсПартнера;		
	КонецЕсли;
	
	ЗаполнитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаголовокПриложения = ПолучитьЗаголовокПриложения();
	УстановитьЗаголовок();
	УстановитьЗаголовокПриложения(ЭтаФорма.Заголовок);
	
	Если ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		ПрайсПартнераПриИзменении("");
	КонецЕсли;
	
	НастройкиКолонокЛистаВсе("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	#Если Клиент Тогда
		Ответ = Вопрос("Вы хотите закрыть обработку?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да, "Дополнительный вопрос");		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()	
	
	УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсПартнераПриИзменении(Элемент)
	
	ЗаполнитьНастройкиПрайсаСервер();
	
КонецПроцедуры

//============================================================================
// НАСТРОЙКИ ПРАЙСА

&НаСервере
Функция ПолучитьПустуюСсылку()
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ПрочитатьЗаполнитьНастройкиВариантовПоиска()
	
	ТаблицаВариантовПоиска = Мегапрайс.глПрочитатьЗаполнитьНастройкиВариантовПоиска(Объект.ПрайсПартнера);
	
	Для Каждого СтрокаВыборка Из ТаблицаВариантовПоиска Цикл
		СтрокаТЧ = НастройкаПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаВыборка);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПрайсаСервер()
	
	ОбъектПрайсПартнера = Объект.ПрайсПартнера;
	
	Объект.ФайлПутьКФайлу       = ОбъектПрайсПартнера.ФайлПутьКФайлу;
	
	Объект.Валюта               = ОбъектПрайсПартнера.Валюта;
	Объект.СрокПоставки         = ОбъектПрайсПартнера.СрокПоставки;
	Объект.ПроцентСкидкиНаценки = ОбъектПрайсПартнера.ПроцентСкидкиНаценки;
	
	Объект.ГруппаНоменклатурыПоУмолчанию = ОбъектПрайсПартнера.ГруппаНоменклатурыПоУмолчанию;
	Объект.ВидНоменклатурыПоУмолчанию    = ОбъектПрайсПартнера.ВидНоменклатурыПоУмолчанию;
	Объект.ЕдиницаИзмеренияПоУмолчанию   = ОбъектПрайсПартнера.ЕдиницаИзмеренияПоУмолчанию;
	Объект.ПроизводительПоУмолчанию      = ОбъектПрайсПартнера.ПроизводительПоУмолчанию;
	Объект.СтавкаНДСПоУмолчанию          = ОбъектПрайсПартнера.СтавкаНДСПоУмолчанию;
	Объект.ПроизвольноеКоличество        = ОбъектПрайсПартнера.ПроизвольноеКоличество;
	
	Объект.ГруппыВКолонкеСНоменклатурой  = ОбъектПрайсПартнера.ГруппыВКолонкеСНоменклатурой;
	Объект.ВалютаНаходитсяВКолонкеСЦеной = ОбъектПрайсПартнера.ВалютаНаходитсяВКолонкеСЦеной;
	
	Объект.ИндивидуальныеНастройкиЛистов = ОбъектПрайсПартнера.ИндивидуальныеНастройкиЛистов;
	Объект.ТаблицаЛистовФайла.Загрузить(ОбъектПрайсПартнера.ТаблицаЛистовФайла.Выгрузить());
	
	НастройкаПоиска.Очистить();
	ПрочитатьЗаполнитьНастройкиВариантовПоиска();
	
КонецПроцедуры

&НаСервере
Процедура АвтосохранениеНастройкиПрайса()
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		Сообщить("Не выбран профиль прайса!!! Продолжение обработки невозможно");
		Возврат;
	КонецЕсли;
	
	ПрайсОбъект = Объект.ПрайсПартнера.ПолучитьОбъект();
	
	ПрайсОбъект.ФайлПутьКФайлу    = Объект.ФайлПутьКФайлу;	
	ПрайсОбъект.Валюта            = Объект.Валюта;
	ПрайсОбъект.СрокПоставки      = Объект.СрокПоставки;
	ПрайсОбъект.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
	
	ПрайсОбъект.ГруппаНоменклатурыПоУмолчанию = Объект.ГруппаНоменклатурыПоУмолчанию;
	ПрайсОбъект.ВидНоменклатурыПоУмолчанию    = Объект.ВидНоменклатурыПоУмолчанию;
	ПрайсОбъект.ЕдиницаИзмеренияПоУмолчанию   = Объект.ЕдиницаИзмеренияПоУмолчанию;
	ПрайсОбъект.ПроизводительПоУмолчанию      = Объект.ПроизводительПоУмолчанию;
	ПрайсОбъект.СтавкаНДСПоУмолчанию          = Объект.СтавкаНДСПоУмолчанию;
	ПрайсОбъект.ПроизвольноеКоличество        = Объект.ПроизвольноеКоличество;
	
	ПрайсОбъект.ВалютаНаходитсяВКолонкеСЦеной = Объект.ВалютаНаходитсяВКолонкеСЦеной;
	ПрайсОбъект.ГруппыВКолонкеСНоменклатурой  = Объект.ГруппыВКолонкеСНоменклатурой;
	
	ПрайсОбъект.ИндивидуальныеНастройкиЛистов = Объект.ИндивидуальныеНастройкиЛистов;
	ПрайсОбъект.Записать();
	
	Мегапрайс.ЗаписьНастроекПрайсаПартнера(Объект.ПрайсПартнера,Объект.ТаблицаЛистовФайла,НастройкаПоиска);
	
КонецПроцедуры

//============================================================================
// СЧИТЫВАНИЕ

&НаСервере
Процедура АвтонастройкаИмпортаСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Элементы.ПанельЛистов.ТекущаяСтраница = Элементы.ЛистБуфер Тогда
		ОбработкаОбъект.мАвтонастройкаКолонокИмпортаБуфер(Объект.ТабличныйДокумент,Объект.НастройкиКолонокЛиста,НомерСтрокиШапка);
	Иначе
		ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);
		
		ТаблицаИмпорта = РеквизитФормыВЗначение("ТаблицаЛист"+(ИндексТекущейСтраницы-1));	
		
		ОбработкаОбъект.мАвтонастройкаИмпортаТаблица(ТаблицаИмпорта,Объект.НастройкиКолонокЛиста,НомерСтрокиШапка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАвтонастройкаСчитыванияКолонок(Команда)
	
	Состояние("Выполняется автонастройка колонок импорта...");
	
	АвтонастройкаИмпортаСервер();
	ОбновитьНастройкиИмпортаЛистов();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОбработкиСервер()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	//Выполним автосохранение параметров прайса 
	АвтосохранениеНастройкиПрайса();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПрайсПартнера",Объект.ПрайсПартнера);
	ПараметрыОбработки.Вставить("ПроизводительПоУмолчанию",Объект.ПроизводительПоУмолчанию);
	ПараметрыОбработки.Вставить("ПроизвольноеКоличество",Объект.ПроизвольноеКоличество);
	
	Объект.ТабличнаяЧасть.Очистить();
	
	Если Элементы.ПанельЛистов.ТекущаяСтраница = Элементы.ЛистБуфер Тогда
		ОбработкаОбъект.мПрочитатьТабличныйДокумент(Объект.ТабличныйДокумент,Объект.ТабличнаяЧасть,Объект.НастройкиКолонокЛиста,Объект.СвойстваХарактеристик,ПараметрыОбработки);
	Иначе
		Для Каждого СтрокаЛиста Из Объект.ТаблицаЛистовФайла Цикл
			Если НЕ СтрокаЛиста.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаИмпорта = РеквизитФормыВЗначение("ТаблицаЛист"+(СтрокаЛиста.НомерЛиста-1));	
			
			ОбработкаОбъект.глПрочитатьТаблицуИмпорта(СтрокаЛиста,ТаблицаИмпорта,Объект.ТабличнаяЧасть,Объект.СвойстваХарактеристик,ПараметрыОбработки);
		КонецЦикла;
	КОнецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьТаблицуБезСинхронизации(Команда)	
	
	ЗаполнитьТаблицуОбработкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьТаблицуИСинхронизировать(Команда)	
	
	Состояние("Выполняется чтение и синхронизация данных...");
	
	ЗаполнитьТаблицуОбработкиСервер();
	
	КомандаСинхронизировать("");
	
КонецПроцедуры

//============================================================================
// СЧИТЫВАНИЕ ФАЙЛОВ

&НаСервере
Процедура мПрочитатьТабличныйДокумент(ПолноеИмяФайла,ТабличныйДокумент)
	
	Объект.ТабличныйДокумент.Очистить();
	Объект.ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
	
КонецПроцедуры

&НаСервере
Процедура мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент,ПолноеИмяФайла)
	
	ВыбФайл = Новый Файл(ПолноеИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат;
	КонецПопытки;
	
	Объект.ТабличныйДокумент.Очистить();
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из РеквизитФормыВЗначение("Объект").глРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),Объект.РазделительКолонокТекстовогоФайла) Цикл  //Символы.Таб
			ТекущаяКолонка = ТекущаяКолонка + 1;
			Объект.ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ПолноеИмяФайла)
	
	РеквизитФормыВЗначение("Объект").мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьНедопустимыеСимволыXML(Стр)
	
	Позиция = НайтиНедопустимыеСимволыXML(Стр, , );
	
	Пока Позиция <> 0 Цикл
		Стр = Лев(Стр, Позиция-1) + Сред(Стр, Позиция+1);
		Позиция = НайтиНедопустимыеСимволыXML(Стр, , );
	КонецЦикла; 
	
	Возврат Стр;
	
КонецФункции 

&НаКлиенте
Процедура ПрочитатьФайлТабличногоДокументаСервер(ПолноеИмяФайла)
	
	ТабличныйДокумент = Объект.ТабличныйДокумент;   
	//ТабличныйДокумент.Очистить();
	
	ФайлНаДиске    = Новый Файл(ПолноеИмяФайла);	
	ФайлНаДискеРасширение = ФайлНаДиске.Расширение;
	
	Если нРег(ФайлНаДискеРасширение) = ".mxl" Тогда
		
		мПрочитатьТабличныйДокумент(ПолноеИмяФайла,ТабличныйДокумент);
		
	ИначеЕсли нРег(ФайлНаДискеРасширение) = ".txt" Тогда
		
		мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент,ПолноеИмяФайла);
		
	ИначеЕсли нРег(ФайлНаДискеРасширение) = ".dbf" Тогда
		
		мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ПолноеИмяФайла);
		
	Иначе
		
		Если ПоместитьФайл(АдресФайлаХранилище, ПолноеИмяФайла, ПолноеИмяФайла, Ложь, УникальныйИдентификатор) Тогда
			ПрочитатьТабличныйДокументИзExcelСервер(ПолноеИмяФайла,ФайлНаДискеРасширение);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлТабличногоДокумента()
	
	ПолноеИмяФайла = "";
	
	Если ТипЗнч(Объект.ФайлПутьКФайлу) = Тип("Строка") Тогда
		ПолноеИмяФайла = Объект.ФайлПутьКФайлу;
		ПрочитатьФайлТабличногоДокументаСервер(ПолноеИмяФайла);
	Иначе
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Объект.ФайлПутьКФайлу, Неопределено, УникальныйИдентификатор);
		
		Состояние("Загрузка данных...");
		
		ДополнительныеПараметры = Новый Структура("ОткрытьФайл", Истина);
		Результат = РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор, ДополнительныеПараметры);
		Если Результат Тогда
			ПрочитатьФайлТабличногоДокументаСервер(ПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФайлИмпорта(Кнопка)
	
	ОткрытьНовый = Истина;
	
	Если ЗначениеЗаполнено(Объект.ФайлПутьКФайлу) Тогда
		#Если Клиент Тогда
			Ответ = Вопрос("Загрузить новый файл?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
			Если Ответ = КодВозвратаДиалога.Нет Тогда				
				ОткрытьНовый = Ложь;				
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Если ОткрытьНовый Тогда
		
		//Объект.ТаблицаЛистовФайла.Очистить();
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр    = "(*.mxl;*.xls;*.xlsx;*.ODS;*.CSV;*.txt;*.dbf)|*.mxl;*.xls;*.xlsx;*.ods;*.csv;*.txt;*.dbf";
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ФайлПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлПутьКФайлу) Тогда
		Состояние("Выполняется загрузка данных файла в 1С...");
		
		ПрочитатьФайлТабличногоДокумента();
	Иначе
		Сообщить("Не указан файл импорта");
		Возврат;
	КОнецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаЛистовФайла;
	//ОбновитьНастройкиИмпортаЛистов();
	ВизуальноеПолучениеНастроекЛиста();
	
КонецПроцедуры

//============================================================================
// СИНХРОНИЗАЦИЯ

&НаСервере
Процедура мСинхронизироватьСервер()
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ПрайсПартнера", Объект.ПрайсПартнера);
	
	РеквизитФормыВЗначение("Объект").мСинхронизироватьСервер(Объект.ТабличнаяЧасть,Объект.СвойстваХарактеристик,ПараметрыОбработки);
	
	ПроверкаДублейНоменклатурыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСинхронизировать(Команда)
	
	мСинхронизироватьУчетныеСправочникиСервер();
	
	Элементы.СтраницаИерархия.Заголовок = "Иерархия ("+Объект.СоответствияИерархии.Количество()+")";	
	Элементы.СтраницаПроизводители.Заголовок = "Производители ("+Объект.СоответствияПроизводителей.Количество()+")";	
	Элементы.СтраницаЕдиницыИзмерений.Заголовок = "Единицы измерения ("+Объект.СоответствияЕдиницИзмерения.Количество()+")";	
	Элементы.СтраницаВалюты.Заголовок = "Валюты ("+Объект.СоответствияВалют.Количество()+")";
	Элементы.СтраницаМеткиКоличества.Заголовок = "Остатки ("+Объект.СоответствияСимволовНаличияТовара.Количество()+")";
	
	СоответствияСправочниковУстановитьСервер();
	
	мСинхронизироватьСервер();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТабличнаяЧасть;
	
	Состояние("Обработка завершена");	
	
КонецПроцедуры

&НаСервере
Процедура мСинхронизироватьУчетныеСправочникиСервер()
	
	Объект.СоответствияСимволовНаличияТовара.Очистить();
	Объект.СоответствияИерархии.Очистить();
	Объект.СоответствияВалют.Очистить();
	Объект.СоответствияПроизводителей.Очистить();
	Объект.СоответствияЕдиницИзмерения.Очистить();
	
	ЕстьНесоответствия = Ложь;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	
	ПолучитьТабСКолонкой = Объект.ТабличнаяЧасть.Выгрузить(,"Поле_Производитель,Поле_Марка");
	ПолучитьТабСКолонкой.Свернуть("Поле_Производитель,Поле_Марка");	
	Если ПолучитьТабСКолонкой.Количество() > 0 Тогда
		Для Каждого Стр Из ПолучитьТабСКолонкой Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Поле_Производитель) Тогда
				Продолжить;
			КонецЕсли; 
			
			ДобавитьСтроку = Объект.СоответствияПроизводителей.Добавить();
			ДобавитьСтроку.Поле_Производитель = Стр.Поле_Производитель;	
			ДобавитьСтроку.Поле_Марка = Стр.Поле_Марка;
		КонецЦикла;
		
		ЕстьНесоответствия1 = ОбработкаОбъект.ПроверитьСоответствияПроизводителей(Объект.СоответствияПроизводителей);
		
		ЕстьНесоответствия = ?(ЕстьНесоответствия = Ложь,ЕстьНесоответствия1,Истина);
	КонецЕсли;

	ПолучитьТабСКолонкой = Объект.ТабличнаяЧасть.Выгрузить(,"Поле_Количество,Количество");
	ПолучитьТабСКолонкой.Свернуть("Поле_Количество","Количество");	
	Если ПолучитьТабСКолонкой.Количество() > 0 Тогда
		Для Каждого Стр Из ПолучитьТабСКолонкой Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Поле_Количество) Тогда
				Продолжить;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Стр.Количество) Тогда
				Продолжить;
			КонецЕсли; 
			
			ДобавитьСтроку = Объект.СоответствияСимволовНаличияТовара.Добавить();
			ДобавитьСтроку.Поле_Количество = Стр.Поле_Количество;	
		КонецЦикла;
		
		ЕстьНесоответствия = ОбработкаОбъект.ПроверитьСоответствияСимволовНаличияТовара(Объект.СоответствияСимволовНаличияТовара);
		Если ЕстьНесоответствия Тогда
			Сообщить("Не определилось количество. Посмотрите страницу автозамен");
		КонецЕсли;
	КонецЕсли;
		
	ПолучитьТабСКолонкой = Объект.ТабличнаяЧасть.Выгрузить(,"Поле_БазоваяЕдиница");
	ПолучитьТабСКолонкой.Свернуть("Поле_БазоваяЕдиница");	
	Если ПолучитьТабСКолонкой.Количество() > 0 Тогда
		Для Каждого Стр Из ПолучитьТабСКолонкой Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Поле_БазоваяЕдиница) Тогда
				Продолжить;
			КонецЕсли; 
			
			ДобавитьСтроку = Объект.СоответствияЕдиницИзмерения.Добавить();
			ДобавитьСтроку.Поле_БазоваяЕдиница = Стр.Поле_БазоваяЕдиница;	
		КонецЦикла;
		
		ЕстьНесоответствия = ОбработкаОбъект.ПроверитьСоответствияЕдиницИзмерения(Объект.СоответствияЕдиницИзмерения);
		Если ЕстьНесоответствия Тогда
			Сообщить("Не определилась единица. Посмотрите страницу автозамен");
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьТабСКолонкой = Объект.ТабличнаяЧасть.Выгрузить(,"Поле_ВалютаЦены");
	ПолучитьТабСКолонкой.Свернуть("Поле_ВалютаЦены");	
	Если ПолучитьТабСКолонкой.Количество() > 0 Тогда
		Для Каждого Стр Из ПолучитьТабСКолонкой Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Поле_ВалютаЦены) Тогда
				Продолжить;
			КонецЕсли; 
			
			ДобавитьСтроку = Объект.СоответствияВалют.Добавить();
			ДобавитьСтроку.Поле_ВалютаЦены = Стр.Поле_ВалютаЦены;	
		КонецЦикла;
		
		ЕстьНесоответствия = ОбработкаОбъект.ПроверитьСоответствияВалют(Объект.СоответствияВалют);
		Если ЕстьНесоответствия Тогда
			Сообщить("Не определилась валюта. Посмотрите страницу автозамен");
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьТабСКолонкой = Объект.ТабличнаяЧасть.Выгрузить(,"Поле_Родитель1,Поле_Родитель2,Поле_Родитель3,Поле_Родитель4,Поле_Родитель5");
	ПолучитьТабСКолонкой.Свернуть("Поле_Родитель1,Поле_Родитель2,Поле_Родитель3,Поле_Родитель4,Поле_Родитель5");	
	Если ПолучитьТабСКолонкой.Количество() > 0 Тогда
		Для Каждого Стр Из ПолучитьТабСКолонкой Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Поле_Родитель1) И НЕ ЗначениеЗаполнено(Стр.Поле_Родитель2) И НЕ ЗначениеЗаполнено(Стр.Поле_Родитель3) И НЕ ЗначениеЗаполнено(Стр.Поле_Родитель4) И НЕ ЗначениеЗаполнено(Стр.Поле_Родитель5) Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьСтроку = Объект.СоответствияИерархии.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавитьСтроку,Стр);	
		КонецЦикла;
		
		ЕстьНесоответствия = ОбработкаОбъект.ПроверитьСоответствияИерархии(Объект.СоответствияИерархии);
		Если ЕстьНесоответствия Тогда
			Сообщить("Не определилась Иерархия. Посмотрите страницу автозамен");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоответствияСправочниковУстановитьСервер()
	
	Если Объект.СоответствияПроизводителей.Количество() > 0 Тогда
		Для Каждого Стр Из Объект.СоответствияПроизводителей Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Поле_Производитель",Стр.Поле_Производитель);
			Отбор.Вставить("Поле_Марка",Стр.Поле_Марка);
			НайтиСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.ПроизводительСсылка = Стр.ПроизводительСсылка;
					СтрТаблицы.МаркаНоменклатурыСсылка = Стр.МаркаНоменклатурыСсылка;
					СтрТаблицы.Пометка  = Стр.ЗагрузитьИсключить;
				КонецЦикла;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;

	Если Объект.СоответствияСимволовНаличияТовара.Количество() > 0 Тогда
		
		Для Каждого Стр Из Объект.СоответствияСимволовНаличияТовара Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Поле_Количество",Стр.Поле_Количество);
			НайтиСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.Количество = Стр.Количество;
				КонецЦикла;
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
		
	Если Объект.СоответствияЕдиницИзмерения.Количество() > 0 Тогда
		
		Для Каждого Стр Из Объект.СоответствияЕдиницИзмерения Цикл
			
			Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмеренияСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Поле_БазоваяЕдиница",Стр.Поле_БазоваяЕдиница);
			НайтиСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.ЕдиницаИзмеренияСсылка = Стр.ЕдиницаИзмеренияСсылка;
				КонецЦикла;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.СоответствияВалют.Количество() > 0 Тогда
		
		Для Каждого Стр Из Объект.СоответствияВалют Цикл
			
			Если НЕ ЗначениеЗаполнено(Стр.ВалютаСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Поле_ВалютаЦены",Стр.Поле_ВалютаЦены);
			НайтиСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.ВалютаСсылка = Стр.ВалютаСсылка;
				КонецЦикла;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если Объект.СоответствияИерархии.Количество() > 0 Тогда
		
		ПустаяСсылкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		
		Для Каждого Стр Из Объект.СоответствияИерархии Цикл		
			
			ГруппаЗаполнения   = ПустаяСсылкаНоменклатура;
			
			Поле_Родитель1 = СокрЛП(Стр.Поле_Родитель1);
			Поле_Родитель2 = СокрЛП(Стр.Поле_Родитель2);
			Поле_Родитель3 = СокрЛП(Стр.Поле_Родитель3);
			Поле_Родитель4 = СокрЛП(Стр.Поле_Родитель4);
			Поле_Родитель5 = СокрЛП(Стр.Поле_Родитель5);
			
			СтрокаПолныйПуть = ""+Поле_Родитель1+""+Поле_Родитель2+""+Поле_Родитель3+""+Поле_Родитель4+""+Поле_Родитель5;
			Если ПустаяСтрока(СтрокаПолныйПуть) Тогда
				Продолжить;
			КонецЕсли;
			
			Родитель1Ссылка = Стр.Родитель1Ссылка;
			Родитель2Ссылка = Стр.Родитель2Ссылка;
			Родитель3Ссылка = Стр.Родитель3Ссылка;
			Родитель4Ссылка = Стр.Родитель4Ссылка;
			Родитель5Ссылка = Стр.Родитель5Ссылка;
			
			Если ЗначениеЗаполнено(Родитель5Ссылка) Тогда
				ГруппаЗаполнения = Родитель5Ссылка;
				
			ИначеЕсли ЗначениеЗаполнено(Родитель4Ссылка) Тогда
				ГруппаЗаполнения = Родитель4Ссылка;
				
			ИначеЕсли ЗначениеЗаполнено(Родитель3Ссылка) Тогда
				ГруппаЗаполнения = Родитель3Ссылка;
				
			ИначеЕсли ЗначениеЗаполнено(Родитель2Ссылка) Тогда
				ГруппаЗаполнения = Родитель2Ссылка;
				
			ИначеЕсли ЗначениеЗаполнено(Родитель1Ссылка) Тогда
				ГруппаЗаполнения = Родитель1Ссылка;
				
			КонецЕсли;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Поле_Родитель1",Поле_Родитель1);
			Отбор.Вставить("Поле_Родитель2",Поле_Родитель2);
			Отбор.Вставить("Поле_Родитель3",Поле_Родитель3);
			Отбор.Вставить("Поле_Родитель4",Поле_Родитель4);
			Отбор.Вставить("Поле_Родитель5",Поле_Родитель5);
			НайтиСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.ГруппаСправочника = ГруппаЗаполнения.Ссылка;
					СтрТаблицы.Пометка  = Стр.ЗагрузитьИсключить;
				КонецЦикла;
			КонецЕсли;		
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияСправочниковУстановить(Команда)
	
	СоответствияСправочниковУстановитьСервер();
	
	мСинхронизироватьСервер();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТабличнаяЧасть;
	
КонецПроцедуры

//============================================================================
// СООТВЕТСТВИЯ СПРАВОЧНИКОВ

&НаСервере
Процедура ВыполнитьСоздатьНовыхПроизводителей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьТабСКолонкой = Объект.СоответствияПроизводителей.Выгрузить(,"ПроизводительСсылка,Поле_Производитель");
	ПолучитьТабСКолонкой.Свернуть("ПроизводительСсылка,Поле_Производитель");	
	Если ПолучитьТабСКолонкой.Количество() > 0 Тогда
		Для Каждого Стр Из ПолучитьТабСКолонкой Цикл
			Если ЗначениеЗаполнено(Стр.ПроизводительСсылка) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.Поле_Производитель) Тогда
				Продолжить;
			КонецЕсли; 
			
			НовыйПроизводитель = Справочники.Производители.СоздатьЭлемент();
			НовыйПроизводитель.Наименование = СокрЛП(Стр.Поле_Производитель);
			НовыйПроизводитель.Записать();
			
			Отбор = Новый Структура();
			Отбор.Вставить("Поле_Производитель",Стр.Поле_Производитель);
			НайтиСтроки = Объект.СоответствияПроизводителей.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.ПроизводительСсылка = НовыйПроизводитель.Ссылка;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.СоответствияПроизводителей Цикл		
		Если ЗначениеЗаполнено(Стр.МаркаНоменклатурыСсылка) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Стр.Поле_Марка) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Справочники.Марки.СоздатьЭлемент();
		НовыйЭлемент.Наименование = СокрЛП(Стр.Поле_Марка);
		НовыйЭлемент.Производитель = Стр.ПроизводительСсылка;
		НовыйЭлемент.Записать();
		
		Стр.МаркаНоменклатурыСсылка = НовыйЭлемент.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыхПроизводителей(Команда)
	
	ВыполнитьСоздатьНовыхПроизводителей();
	
КонецПроцедуры

&НаСервере
Функция глНайтиИерархию(Поле_Родитель,РодительРодителя)
	
	ПустаяСсылкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();	
	НайтиГруппу1 = ПустаяСсылкаНоменклатура;
	
	Если НЕ ЗначениеЗаполнено(Поле_Родитель) Тогда		
		Возврат ПустаяСсылкаНоменклатура;
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(РодительРодителя) Тогда
		НайтиГруппу1 = Справочники.Номенклатура.НайтиПоНаименованию(Поле_Родитель,Истина,РодительРодителя);
	//Иначе
	//	НайтиГруппу1 = Справочники.Номенклатура.НайтиПоНаименованию(Поле_Родитель,Истина);
	//КонецЕсли;
	
	Если Объект.ИспользоватьМегапрайс Тогда							 
		Если НайтиГруппу1 = Справочники.Номенклатура.ПустаяСсылка() Тогда
			НайтиСоответствие = Справочники.мегапрайсСоответствияИерархии.НайтиПоНаименованию(Поле_Родитель,Истина);
			Если НЕ НайтиСоответствие = Справочники.мегапрайсСоответствияИерархии.ПустаяСсылка() Тогда
				НайтиГруппу1 = НайтиСоответствие.ГруппаИерархииСсылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайтиГруппу1;
	
КонецФункции

&НаСервере
Процедура СоздатьГруппыНоменклатурыСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустаяСсылкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();	
	
	Для Каждого Стр Из Объект.СоответствияИерархии Цикл
		
		Поле_Родитель1 = СокрЛП(Стр.Поле_Родитель1);
		Поле_Родитель2 = СокрЛП(Стр.Поле_Родитель2);
		Поле_Родитель3 = СокрЛП(Стр.Поле_Родитель3);
		Поле_Родитель4 = СокрЛП(Стр.Поле_Родитель4);
		Поле_Родитель5 = СокрЛП(Стр.Поле_Родитель5);
		
		СтрокаПолныйПуть = ""+Поле_Родитель1+""+Поле_Родитель2+""+Поле_Родитель3+""+Поле_Родитель4+""+Поле_Родитель5;
		Если ПустаяСтрока(СтрокаПолныйПуть) Тогда
			Продолжить;
		КонецЕсли;
		
		НайтиГруппу1 = глНайтиИерархию(Поле_Родитель1,ПустаяСсылкаНоменклатура);		
		Если ЗначениеЗаполнено(Поле_Родитель1) И НЕ ЗначениеЗаполнено(Стр.Родитель1Ссылка) Тогда
			Если НайтиГруппу1 = ПустаяСсылкаНоменклатура Тогда
				НайтиГруппу1 = Справочники.Номенклатура.СоздатьГруппу();
				НайтиГруппу1.Наименование = Поле_Родитель1;
				НайтиГруппу1.Родитель     = Объект.УстановитьГруппу;
				НайтиГруппу1.Записать();
			КонецЕсли;
			
			Стр.Родитель1Ссылка = НайтиГруппу1.Ссылка;
		КонецЕсли;
		
		НайтиГруппу2 = глНайтиИерархию(Поле_Родитель2,Стр.Родитель1Ссылка);
		Если ЗначениеЗаполнено(Поле_Родитель2) И НЕ ЗначениеЗаполнено(Стр.Родитель2Ссылка) Тогда
			Если НайтиГруппу2 = ПустаяСсылкаНоменклатура Тогда
				НайтиГруппу2 = Справочники.Номенклатура.СоздатьГруппу();
				НайтиГруппу2.Родитель     = Стр.Родитель1Ссылка;
				НайтиГруппу2.Наименование = Поле_Родитель2;
				НайтиГруппу2.Записать();
			КонецЕсли;
			
			Стр.Родитель2Ссылка = НайтиГруппу2.Ссылка;
		КонецЕсли;
		
		НайтиГруппу3 = глНайтиИерархию(Поле_Родитель3,Стр.Родитель2Ссылка);
		Если ЗначениеЗаполнено(Поле_Родитель3) И НЕ ЗначениеЗаполнено(Стр.Родитель3Ссылка) Тогда
			Если НайтиГруппу3 = ПустаяСсылкаНоменклатура Тогда
				НайтиГруппу3 = Справочники.Номенклатура.СоздатьГруппу();
				НайтиГруппу3.Родитель     = Стр.Родитель2Ссылка;
				НайтиГруппу3.Наименование = Поле_Родитель3;
				НайтиГруппу3.Записать();
			КонецЕсли;
			
			Стр.Родитель3Ссылка = НайтиГруппу3.Ссылка;
		КонецЕсли;
		
		НайтиГруппу4 = глНайтиИерархию(Поле_Родитель4,Стр.Родитель3Ссылка);
		Если ЗначениеЗаполнено(Поле_Родитель4) И НЕ ЗначениеЗаполнено(Стр.Родитель4Ссылка) Тогда
			Если НайтиГруппу4 = ПустаяСсылкаНоменклатура Тогда
				НайтиГруппу4 = Справочники.Номенклатура.СоздатьГруппу();
				НайтиГруппу4.Родитель     = Стр.Родитель3Ссылка;
				НайтиГруппу4.Наименование = Поле_Родитель4;
				НайтиГруппу4.Записать();
			КонецЕсли;
			
			Стр.Родитель4Ссылка = НайтиГруппу4.Ссылка;
		КонецЕсли;
		
		НайтиГруппу5 = глНайтиИерархию(Поле_Родитель5,Стр.Родитель4Ссылка);
		Если ЗначениеЗаполнено(Поле_Родитель5) И НЕ ЗначениеЗаполнено(Стр.Родитель5Ссылка) Тогда
			Если НайтиГруппу5 = ПустаяСсылкаНоменклатура Тогда
				НайтиГруппу5 = Справочники.Номенклатура.СоздатьГруппу();
				НайтиГруппу5.Родитель     = Стр.Родитель4Ссылка;
				НайтиГруппу5.Наименование = Поле_Родитель5;
				НайтиГруппу5.Записать();
			КонецЕсли;
			
			Стр.Родитель5Ссылка = НайтиГруппу5.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппыНоменклатуры(Команда)
	
	СоздатьГруппыНоменклатурыСервер();
	
КонецПроцедуры

&НаСервере
Процедура СоответствияСправочниковЗаписатьСервер()
		
	ПрайсПартнераПартнер = Объект.ПрайсПартнера.Партнер;
	
	Если Объект.СоответствияСимволовНаличияТовара.Количество() > 0 Тогда
		
		СпрСоответствия = Справочники.мегапрайсСоответствияНаличияУПоставщика;
		Для Каждого Стр Из Объект.СоответствияСимволовНаличияТовара Цикл
			НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Количество,Истина,,ПрайсПартнераПартнер);
			Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
				Если НайтиЭлемент.Количество = Стр.Количество Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
			НовыйЭлемент.Владелец     = ПрайсПартнераПартнер;
			НовыйЭлемент.Наименование = Стр.Поле_Количество;
			НовыйЭлемент.Количество   = Стр.Количество;
			НовыйЭлемент.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.СоответствияПроизводителей.Количество() > 0 Тогда
		
		СпрСоответствия = Справочники.мегапрайсСоответствияПроизводителей;
		Для Каждого Стр Из Объект.СоответствияПроизводителей Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ПроизводительСсылка) Тогда
				Продолжить;
			КонецЕсли;
			НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Производитель,Истина,,ПрайсПартнераПартнер);
			Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
				Если НайтиЭлемент.Производитель = Стр.ПроизводительСсылка Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
			НовыйЭлемент.Владелец           = ПрайсПартнераПартнер;
			НовыйЭлемент.Наименование       = Стр.Поле_Производитель;
			НовыйЭлемент.Производитель      = Стр.ПроизводительСсылка;
			НовыйЭлемент.ЗагрузитьИсключить = Стр.ЗагрузитьИсключить;
			НовыйЭлемент.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.СоответствияЕдиницИзмерения.Количество() > 0 Тогда
		
		СпрСоответствия = Справочники.мегапрайсСоответствияЕдиницИзмерения;
		Для Каждого Стр Из Объект.СоответствияЕдиницИзмерения Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмеренияСсылка) Тогда
				Продолжить;
			КонецЕсли;
			НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_БазоваяЕдиница,Истина);
			Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
				Если НайтиЭлемент.ЕдиницаИзмерения = Стр.ЕдиницаИзмеренияСсылка Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
			НовыйЭлемент.Наименование     = Стр.Поле_БазоваяЕдиница;
			НовыйЭлемент.ЕдиницаИзмерения = Стр.ЕдиницаИзмеренияСсылка;
			НовыйЭлемент.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.СоответствияВалют.Количество() > 0 Тогда
		
		СпрСоответствия = Справочники.мегапрайсСоответствияВалют;
		Для Каждого Стр Из Объект.СоответствияВалют Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ВалютаСсылка) Тогда
				Продолжить;
			КонецЕсли;
			НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_ВалютаЦены,Истина);
			Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
				Если НайтиЭлемент.Валюта = Стр.ВалютаСсылка Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
			НовыйЭлемент.Наименование = Стр.Поле_ВалютаЦены;
			НовыйЭлемент.Валюта = Стр.ВалютаСсылка;
			НовыйЭлемент.Записать();
		КонецЦикла;
		
	КонецЕсли;	
	
	Если Объект.СоответствияИерархии.Количество() > 0 Тогда
		
		СпрСоответствия = Справочники.мегапрайсСоответствияИерархии;
		Для Каждого Стр Из Объект.СоответствияИерархии Цикл
			
			Если ЗначениеЗаполнено(Стр.Родитель1Ссылка) Тогда
				НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Родитель1,Истина,,ПрайсПартнераПартнер);
				Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
					Если НайтиЭлемент.ГруппаИерархииСсылка = Стр.Родитель1Ссылка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
				НовыйЭлемент.Владелец             = ПрайсПартнераПартнер;
				НовыйЭлемент.Наименование         = Стр.Поле_Родитель1;
				НовыйЭлемент.ГруппаИерархииСсылка = Стр.Родитель1Ссылка;
				НовыйЭлемент.ЗагрузитьИсключить   = Стр.ЗагрузитьИсключить;
				НовыйЭлемент.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.Родитель2Ссылка) Тогда  
				НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Родитель2,Истина,,ПрайсПартнераПартнер);
				Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
					Если НайтиЭлемент.ГруппаИерархииСсылка = Стр.Родитель2Ссылка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
				НовыйЭлемент.Владелец             = ПрайсПартнераПартнер;
				НовыйЭлемент.Наименование         = Стр.Поле_Родитель2;
				НовыйЭлемент.ГруппаИерархииСсылка = Стр.Родитель2Ссылка;
				НовыйЭлемент.ЗагрузитьИсключить   = Стр.ЗагрузитьИсключить;
				НовыйЭлемент.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.Родитель3Ссылка) Тогда
				НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Родитель3,Истина,,ПрайсПартнераПартнер);
				Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
					Если НайтиЭлемент.ГруппаИерархииСсылка = Стр.Родитель3Ссылка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
				НовыйЭлемент.Владелец             = ПрайсПартнераПартнер;
				НовыйЭлемент.Наименование         = Стр.Поле_Родитель3;
				НовыйЭлемент.ГруппаИерархииСсылка = Стр.Родитель3Ссылка;
				НовыйЭлемент.ЗагрузитьИсключить   = Стр.ЗагрузитьИсключить;
				НовыйЭлемент.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.Родитель4Ссылка) Тогда
				НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Родитель4,Истина,,ПрайсПартнераПартнер);
				Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
					Если НайтиЭлемент.ГруппаИерархииСсылка = Стр.Родитель4Ссылка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
				НовыйЭлемент.Владелец             = ПрайсПартнераПартнер;
				НовыйЭлемент.Наименование         = Стр.Поле_Родитель4;
				НовыйЭлемент.ГруппаИерархииСсылка = Стр.Родитель4Ссылка;
				НовыйЭлемент.ЗагрузитьИсключить   = Стр.ЗагрузитьИсключить;
				НовыйЭлемент.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.Родитель5Ссылка) Тогда
				НайтиЭлемент = СпрСоответствия.НайтиПоНаименованию(Стр.Поле_Родитель5,Истина,,ПрайсПартнераПартнер);
				Если НЕ НайтиЭлемент = СпрСоответствия.ПустаяСсылка() Тогда
					Если НайтиЭлемент.ГруппаИерархииСсылка = Стр.Родитель5Ссылка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НовыйЭлемент = СпрСоответствия.СоздатьЭлемент();
				НовыйЭлемент.Владелец             = ПрайсПартнераПартнер;
				НовыйЭлемент.Наименование         = Стр.Поле_Родитель5;
				НовыйЭлемент.ГруппаИерархииСсылка = Стр.Родитель5Ссылка;
				НовыйЭлемент.ЗагрузитьИсключить   = Стр.ЗагрузитьИсключить;
				НовыйЭлемент.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияСправочниковЗаписать(Команда)
		
	СоответствияСправочниковЗаписатьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияПроизводителейПроизвидительСсылкаПриИзменении(Элемент)
	
	Строка = Элементы.СоответствияПроизводителей.ТекущиеДанные;
	
	Строка.ЗагрузитьИсключить = ЗначениеЗаполнено(Строка.ПроизводительСсылка);
	
КонецПроцедуры

//============================================================================
// ОБРАБОТКИ

&НаСервере
Процедура ЗаписатьСоответствияСервер()
	
	РеквизитФормыВЗначение("Объект").мЗаписатьСоответствияНоменклатуры(Объект.ТабличнаяЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьСоответствия(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		Сообщить("Не указан Партнер!");
		Возврат;
	КонецЕсли;
	
	ЗаписатьСоответствияСервер();
	
	Состояние("Обработка завершена");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствияНаСервере(АдресВоВременномХранилище)
	
	ТаблицаСоответствия = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ТаблицаСоответствия Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСтроки", ТекСтрока.КлючСтроки);
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
				СтрокаСинхронизации.Номенклатура           = ТекСтрока.Номенклатура;
				СтрокаСинхронизации.ЕдиницаИзмеренияСсылка = ТекСтрока.Номенклатура.ЕдиницаИзмерения;
				СтрокаСинхронизации.ГруппаСправочника      = ТекСтрока.Номенклатура.Родитель;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаПоискСоответствий(Команда)
	
	АдресПередаваемыхПараметров = ПоместитьДанныеВоВременноеХранилищеПоискСоответствий();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.мегапрайсПоискИУстановкаСоответствий.Форма.ФормаСоответствияИмпортСправочник",СтруктураПараметров,ЭтаФорма); 
	
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ЗаполнитьСоответствияНаСервере(АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры



//============================================================================
// 
&НаКлиенте
Процедура ТаблицыОбработокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе Тогда
		
		Элементы.ТабличнаяЧасть.ОтборСтрок = Неопределено;

	ИначеЕсли Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаНовые Тогда
		
		Элементы.ТабличнаяЧастьНовые.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура",ПолучитьПустуюСсылку());
		
	ИначеЕсли Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаЗагрузкаХарактеристик Тогда
		
		ЗаполнитьТаблицуЗагрузкиХарактеристик();
	
	КонецЕсли;
	
КонецПроцедуры

//============================================================================
// ОБРАБОТКА НОМЕНКЛАТУРЫ

&НаСервере
Процедура ПроверкаДублейНоменклатурыСервер()
	
	
	мегапрайсКонтрольУникальностиНоменклатуры = Константы.мегапрайсКонтрольУникальностиНоменклатуры.Получить();
	Если мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.БезКонтроля Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки    = Ложь;
	ПустаяСсылка  = Справочники.Номенклатура.ПустаяСсылка();
	ДанныеПоиска  = Объект.ТабличнаяЧасть.Выгрузить();
	
	Если мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.Артикул Тогда
		
		ТектЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул
		|ПОМЕСТИТЬ ВременнаяДанныеПоиска
		|ИЗ
		|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поле_Артикул
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул
		|ИЗ
		|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска";
				
		Запрос = Новый Запрос();
		Запрос.Текст = ТектЗапроса;
		Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();	
		Пока Выборка.Следующий() Цикл			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Поле_Артикул", Выборка.Поле_Артикул);
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				КолСовпадений = 0;
				Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
					КолСовпадений = КолСовпадений + 1;
					
					Если КолСовпадений > 1  Тогда
						СтрокаСинхронизации.ПовторноеСовпадение = Истина;
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;				
		КонецЦикла;
		
	ИначеЕсли мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.АртикулНаименование Тогда
		
		ТектЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул,
		|	ВременнаяДанныеПоиска.Поле_Наименование КАК Поле_Наименование
		|ПОМЕСТИТЬ ВременнаяДанныеПоиска
		|ИЗ
		|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поле_Артикул,
		|	Поле_Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул,
		|	ВременнаяДанныеПоиска.Поле_Наименование КАК Поле_Наименование
		|ИЗ
		|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска";
		
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТектЗапроса;
		Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();	
		Пока Выборка.Следующий() Цикл			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Поле_Артикул", Выборка.Поле_Артикул);
			ПараметрыОтбора.Вставить("Поле_Наименование", Выборка.Поле_Наименование);
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				КолСовпадений = 0;
				Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
					КолСовпадений = КолСовпадений + 1;
					
					Если КолСовпадений > 1  Тогда
						СтрокаСинхронизации.ПовторноеСовпадение = Истина;
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;				
		КонецЦикла;
		
		
	ИначеЕсли мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.АртикулПроизводитель Тогда
		
		ТектЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул,
		|	ВременнаяДанныеПоиска.Поле_Производитель КАК Поле_Производитель
		|ПОМЕСТИТЬ ВременнаяДанныеПоиска
		|ИЗ
		|	&ДанныеПоиска КАК ВременнаяДанныеПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поле_Артикул,
		|	Поле_Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяДанныеПоиска.Поле_Артикул КАК Поле_Артикул,
		|	ВременнаяДанныеПоиска.Поле_Производитель КАК Поле_Производитель
		|ИЗ
		|	ВременнаяДанныеПоиска КАК ВременнаяДанныеПоиска";
		
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТектЗапроса;
		Запрос.УстановитьПараметр("ДанныеПоиска", ДанныеПоиска);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();	
		Пока Выборка.Следующий() Цикл			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Поле_Артикул", Выборка.Поле_Артикул);
			ПараметрыОтбора.Вставить("Поле_Производитель", Выборка.Поле_Производитель);
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				КолСовпадений = 0;
				Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
					КолСовпадений = КолСовпадений + 1;
					
					Если КолСовпадений > 1  Тогда
						СтрокаСинхронизации.ПовторноеСовпадение = Истина;
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;				
		КонецЦикла;
		
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Сообщить("При проверке были обнаружены дубли номенклатуры");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверкаДублей(Команда)
	
	ПроверкаДублейНоменклатурыСервер()
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуТаблицы()
	
	ПустойВид = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	ПустаяЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
	
	Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл
		
		Если ПустаяСтрока(Строка.Поле_Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Поле_ВидНоменклатуры) Тогда
			НайтиВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(Строка.Поле_ВидНоменклатуры);
			
			Строка.обВидНоменклатуры = НайтиВидНоменклатуры;
			
			Если НайтиВидНоменклатуры = ПустойВид Тогда
				Сообщить("Не найден вид номенклатуры");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Поле_ЦеноваяГруппа) Тогда
			НайтиЦеноваяГруппа = Справочники.ЦеновыеГруппы.НайтиПоНаименованию(Строка.Поле_ЦеноваяГруппа);
			
			Строка.обЦеноваяГруппа = НайтиЦеноваяГруппа;
			
			Если НайтиЦеноваяГруппа = ПустаяЦеноваяГруппа Тогда
				Сообщить("Не найден вид номенклатуры");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюНоменклатуруСервер()
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Константы.мегапрайсВидНоменклатуры.Получить()) Тогда
		Сообщить("КОНСТАНТЫ: Не указан Вид номенклатуры. Заполните");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.мегапрайсЕдиницаИзмеренияПоУмолчанию.Получить()) Тогда
		Сообщить("КОНСТАНТЫ: Не указана Единица измерения! Но приоритет единица по строке, если не указана в строке берется общая.");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.мегапрайсСтавкаНДС.Получить()) Тогда
		Сообщить("КОНСТАНТЫ: Не указана Ставка НДС!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мегапрайсКонтрольУникальностиНоменклатуры       = Константы.мегапрайсКонтрольУникальностиНоменклатуры.Получить();
	мегапрайсСоздаватьШтрихкодыДляНовойНоменклатуры = Константы.мегапрайсСоздаватьШтрихкодыДляНовойНоменклатуры.Получить();
	
	Если ЗначениеЗаполнено(Объект.ПрайсПартнера.ГруппаНоменклатурыПоУмолчанию) Тогда
		мегапрайсГруппаНоменклатурыПоУмолчанию = Объект.ПрайсПартнера.ГруппаНоменклатурыПоУмолчанию; 
	Иначе
		мегапрайсГруппаНоменклатурыПоУмолчанию = Константы.мегапрайсГруппаНоменклатурыПоУмолчанию.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПрайсПартнера.ВидНоменклатурыПоУмолчанию) Тогда
		ВидНоменклатурыПоУмолчанию = Объект.ПрайсПартнера.ВидНоменклатурыПоУмолчанию; 
		ТипНоменклатурыПоУмолчанию = ВидНоменклатурыПоУмолчанию.ТипНоменклатуры;
		ИспользованиеХарактеристикПоУмолчанию = ВидНоменклатурыПоУмолчанию.ИспользованиеХарактеристик;
		ИспользоватьУпаковкиПоУмолчанию = ВидНоменклатурыПоУмолчанию.ИспользоватьУпаковки;
	Иначе
		ВидНоменклатурыПоУмолчанию = Константы.мегапрайсВидНоменклатуры.Получить();
		ТипНоменклатурыПоУмолчанию = ВидНоменклатурыПоУмолчанию.ТипНоменклатуры;
		ИспользованиеХарактеристикПоУмолчанию = ВидНоменклатурыПоУмолчанию.ИспользованиеХарактеристик;
		ИспользоватьУпаковкиПоУмолчанию = ВидНоменклатурыПоУмолчанию.ИспользоватьУпаковки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПрайсПартнера.ЕдиницаИзмеренияПоУмолчанию) Тогда
		ЕдиницаИзмеренияПоУмолчанию = Объект.ПрайсПартнера.ЕдиницаИзмеренияПоУмолчанию; 
	Иначе
		ЕдиницаИзмеренияПоУмолчанию = Константы.мегапрайсЕдиницаИзмеренияПоУмолчанию.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПрайсПартнера.СтавкаНДСПоУмолчанию) Тогда
		мегапрайсСтавкаНДС = Объект.ПрайсПартнера.СтавкаНДСПоУмолчанию; 
	Иначе
		мегапрайсСтавкаНДС = Константы.мегапрайсСтавкаНДС.Получить();
	КонецЕсли;
	
	ПроизводительПоУмолчанию = Объект.ПрайсПартнера.ПроизводительПоУмолчанию;
	
	ПроверкаДублейНоменклатурыСервер();	
	
	//НачатьТранзакцию();
	КоличествоОбработанных = 0;
	
	Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл	
		
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.Поле_Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
		СоздатьНоменклатуру = Ложь;		
		НайденнаяСсылка = Справочники.Номенклатура.ПустаяСсылка();	
		
		Если Стр.ПовторноеСовпадение = Истина Тогда	
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СпрНоменклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК СпрНоменклатура
			|ГДЕ
			|	СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
			|	И СпрНоменклатура.ПометкаУдаления = ЛОЖЬ";
			Если мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.Артикул Тогда
				ТекстЗапроса = ТекстЗапроса + "
				| И	СпрНоменклатура.Артикул      = &Поле_Артикул";
			ИначеЕсли мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.АртикулНаименование Тогда
				ТекстЗапроса = ТекстЗапроса + "
				| И	СпрНоменклатура.Артикул      = &Поле_Артикул
				| И СпрНоменклатура.Наименование = &НаименованиеДляПоиска";
			ИначеЕсли мегапрайсКонтрольУникальностиНоменклатуры = Перечисления.мегапрайсКонтрольУникальностиНоменклатуры.АртикулПроизводитель Тогда
				ТекстЗапроса = ТекстЗапроса + "
				| И	СпрНоменклатура.Артикул      = &Поле_Артикул
				| И СпрНоменклатура.Производитель = &ПроизводительСсылка";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				| И	СпрНоменклатура.Артикул        = &Поле_Артикул
				| И СпрНоменклатура.Наименование = &НаименованиеДляПоиска";
			КонецЕсли;
			
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Поле_Артикул", Стр.Поле_Артикул);
			Запрос.УстановитьПараметр("НаименованиеДляПоиска", СокрЛП(Стр.Поле_Наименование));
			Запрос.УстановитьПараметр("ПроизводительСсылка", Стр.ПроизводительСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НайденнаяСсылка = Выборка.Ссылка;
				КонецЦикла;
			КонецЕсли;						
		КонецЕсли;
		
		Если НайденнаяСсылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
			СоздатьНоменклатуру = Истина;
		Иначе
			Стр.Номенклатура = НайденнаяСсылка.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			СоздатьНоменклатуру = Ложь; //однозначно нельзя создавать
		КонецЕсли;
		
		Если СоздатьНоменклатуру Тогда
			НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			
			НоваяНоменклатура.мегапрайсДатаРегистрации = ТекущаяДата();
			
			НоваяНоменклатура.Наименование       = Стр.Поле_Наименование;
			НоваяНоменклатура.НаименованиеПолное = ?(ПустаяСтрока(Стр.Поле_НаименованиеПолное),Стр.Поле_Наименование,Стр.Поле_НаименованиеПолное);
			
			Если НЕ ПустаяСтрока(Стр.Поле_Артикул) Тогда
				НоваяНоменклатура.Артикул = Стр.Поле_Артикул;
			КонецЕсли;
			
			НоваяНоменклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			НоваяНоменклатура.Качество           = Перечисления.ГрадацииКачества.Новый;
			НоваяНоменклатура.НаборУпаковок      = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
			НоваяНоменклатура.ВестиУчетПоГТД     = Истина;
			НоваяНоменклатура.СрокГодности       = 1;
			
			НоваяНоменклатура.СтавкаНДС          = ?(ЗначениеЗаполнено(Стр.СтавкаНДС),Стр.СтавкаНДС,мегапрайсСтавкаНДС);
			
			Если ЗначениеЗаполнено(Стр.обВидНоменклатуры) Тогда
				НоваяНоменклатура.ВидНоменклатуры = Стр.обВидНоменклатуры;			
				НоваяНоменклатура.ТипНоменклатуры = Стр.обВидНоменклатуры.ТипНоменклатуры;
				НоваяНоменклатура.ИспользованиеХарактеристик = Стр.обВидНоменклатуры.ИспользованиеХарактеристик;
				НоваяНоменклатура.ИспользоватьУпаковки       = Стр.обВидНоменклатуры.ИспользоватьУпаковки;
			Иначе
				НоваяНоменклатура.ВидНоменклатуры    = ВидНоменклатурыПоУмолчанию;
				НоваяНоменклатура.ТипНоменклатуры    = ТипНоменклатурыПоУмолчанию;
				НоваяНоменклатура.ИспользованиеХарактеристик = ИспользованиеХарактеристикПоУмолчанию;
				НоваяНоменклатура.ИспользоватьУпаковки       = ИспользоватьУпаковкиПоУмолчанию;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.обЦеноваяГруппа) Тогда
				НоваяНоменклатура.ЦеноваяГруппа = Стр.обЦеноваяГруппа;			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.ЕдиницаИзмеренияСсылка) Тогда
				НоваяНоменклатура.ЕдиницаИзмерения = Стр.ЕдиницаИзмеренияСсылка;
			Иначе
				НоваяНоменклатура.ЕдиницаИзмерения = ЕдиницаИзмеренияПоУмолчанию;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.ПроизводительСсылка) Тогда
				НоваяНоменклатура.Производитель = Стр.ПроизводительСсылка;
			ИначеЕсли ЗначениеЗаполнено(ПроизводительПоУмолчанию) Тогда
				НоваяНоменклатура.Производитель = ПроизводительПоУмолчанию;				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.МаркаНоменклатурыСсылка) Тогда	
				НоваяНоменклатура.Марка = Стр.МаркаНоменклатурыСсылка;			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.Поле_Описание) Тогда
				НоваяНоменклатура.Описание = СокрЛП(Стр.Поле_Описание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.ГруппаСправочника) Тогда
				НоваяНоменклатура.Родитель = Стр.ГруппаСправочника;	
			Иначе
				НоваяНоменклатура.Родитель = мегапрайсГруппаНоменклатурыПоУмолчанию;
			КонецЕсли;
			
			НоваяНоменклатура.Записать();
			
			НайденнаяСсылка = НоваяНоменклатура.Ссылка;
		КонецЕсли;
		
		Стр.Номенклатура           = НайденнаяСсылка.Ссылка;
		Стр.ЕдиницаИзмеренияСсылка = Стр.Номенклатура.ЕдиницаИзмерения;
		Стр.ГруппаСправочника      = Стр.Номенклатура.Родитель;		
		
		Если мегапрайсСоздаватьШтрихкодыДляНовойНоменклатуры Тогда
			ТекЗаписьШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			
			ТекЗаписьШтрихкода.Номенклатура = Стр.Номенклатура;
			
			ПрефиксВнутреннегоШтрихкода = Формат(Константы.ПрефиксШтучногоШтрихкода.Получить(),"ЧЦ=2; ЧН=; ЧВН=");
			ТекЗаписьШтрихкода.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксШтучногоТовара(),ПрефиксВнутреннегоШтрихкода);	
			
			Попытка
				ТекЗаписьШтрихкода.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КОнецЕсли;
		
		//Если КоличествоОбработанных = 100 Тогда
		//	
		//	// промежуточную транзакцию закрываем и открываем новую
		//	ЗафиксироватьТранзакцию();
		//	НачатьТранзакцию();
		//	
		//	КоличествоОбработанных = 0;
		//КонецЕсли;
		
	КонецЦикла;	
	
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	#Если Клиент Тогда
		Ответ = Вопрос("Создать новую номенклатуру ? Номенклатура будет введена по пустым строкам", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Состояние("Создание новой номенклатуры...");
	
	СоздатьНовуюНоменклатуруСервер();
	
	Состояние("Обработка завершена");
	
КонецПроцедуры


//============================================================================
// ЗАГРУЗКА ХАРАКТЕРИСТИК

&НаСервере
Процедура ЗаполнитьТаблицуЗагрузкиХарактеристик()

	Для Каждого Строка Из Объект.ТабличнаяЧасть Цикл		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка.Поле_Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСтроки",Строка.КлючСтроки);
		НайтиСтроки = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		Для Каждого Выборка Из НайтиСтроки Цикл
			Выборка.Поле_ШтрихКод = Строка.Поле_ШтрихКод;
			Выборка.Номенклатура  = Строка.Номенклатура;
			Выборка.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидНоменклатуры) Тогда
				Выборка.ВидНоменклатуры = Строка.Номенклатура.ВидНоменклатуры;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КОнецПроцедуры


&НаСервере
Функция НаименованиеПоФормуле(ДанныеДляФормированияНаименования, ВидНоменклатуры, ЗначениеНаименования = "") Экспорт
	
	Наименование = "";
	Если ЗначениеЗаполнено(ДанныеДляФормированияНаименования.ФормулаНаименования) Тогда
		
		МассивЗначенийРеквизитов = ДанныеДляФормированияНаименования.МассивЗначенийРеквизитов;
		
		Для Каждого Индекс из ДанныеДляФормированияНаименования.ИндексыНаименованияВМассивеЗначенийРеквизитов Цикл
			МассивЗначенийРеквизитов[Индекс] = ЗначениеНаименования;
		КонецЦикла;
		
		Попытка
			
			Выполнить("Наименование = """" + " + ДанныеДляФормированияНаименования.ФормулаНаименования);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьНаименованиеПоШаблонуКлиент(ВариантФормирования,ВидНоменклатуры,НоваяХарактеристика)
	
	ХарактеристикаОбъект = НоваяХарактеристика.ПолучитьОбъект();
	
	ФормулыНаименования = ФормулыНаименования(ВидНоменклатуры,ХарактеристикаОбъект);
	
	Если ВариантФормирования = "Рабочее" Тогда
		ХарактеристикаОбъект.Наименование = НаименованиеПоФормуле(
		ФормулыНаименования.ФормулаРабочегоНаименования,
		ВидНоменклатуры);
	ИначеЕсли ВариантФормирования = "ДляПечати" Тогда 
		ХарактеристикаОбъект.НаименованиеПолное = НаименованиеПоФормуле(
		ФормулыНаименования.ФормулаНаименованияДляПечати,
		ВидНоменклатуры,
		ХарактеристикаОбъект.Наименование);
	ИначеЕсли ВариантФормирования = "Оба" Тогда
		ХарактеристикаОбъект.Наименование = НаименованиеПоФормуле(
		ФормулыНаименования.ФормулаРабочегоНаименования,
		ВидНоменклатуры);
		ХарактеристикаОбъект.НаименованиеПолное = НаименованиеПоФормуле(
		ФормулыНаименования.ФормулаНаименованияДляПечати,
		ВидНоменклатуры,
		ХарактеристикаОбъект.Наименование);
	КонецЕсли;
	
	ХарактеристикаОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция ФормулыНаименования(ВидНоменклатуры,ХарактеристикаОбъект)
	
	ШаблонРабочегоНаименования = ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
	ШаблонНаименованияДляПечати = ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики;

	
	Результат = Новый Структура;
	Результат.Вставить("ФормулаРабочегоНаименования", НоменклатураСервер.ФормулаНаименования(ШаблонРабочегоНаименования, ХарактеристикаОбъект)); 
	Результат.Вставить("ФормулаНаименованияДляПечати", НоменклатураСервер.ФормулаНаименования(ШаблонНаименованияДляПечати, ХарактеристикаОбъект));
	//В старых релизах Справочники.ВидыНоменклатуры.НаименованиеПоШаблону
	
	Возврат Результат; 
		
КонецФункции

&НаСервере
Процедура СформироватьНаименованиеХарактеристики(ВидНоменклатуры,ХарактеристикаОбъект)
	
	ФормироватьРабочееНаименование = Ложь;
	ФормироватьНаименованиеДляПечати = Ложь;
	
	ШаблонРабочегоНаименования = ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
	ШаблонНаименованияДляПечати = ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики;
	ЗапретРедактированияНаименованияДляПечати = ВидНоменклатуры.ЗапретРедактированияНаименованияХарактеристикиДляПечати;
	ЗапретРедактированияРабочегоНаименования = ВидНоменклатуры.ЗапретРедактированияРабочегоНаименованияХарактеристики;
	
	Если (Не ЗначениеЗаполнено(ХарактеристикаОбъект.Наименование)
		И ЗначениеЗаполнено(ШаблонРабочегоНаименования))
		Или ЗапретРедактированияРабочегоНаименования Тогда
		
		ФормироватьРабочееНаименование = Истина;
		
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ХарактеристикаОбъект.НаименованиеПолное)
		И ЗначениеЗаполнено(ШаблонНаименованияДляПечати))
		Или ЗапретРедактированияНаименованияДляПечати Тогда
		
		ФормироватьНаименованиеДляПечати = Истина;
		
	КонецЕсли;
	
	Если ФормироватьРабочееНаименование
		И ФормироватьНаименованиеДляПечати Тогда
		
		ЗаполнитьНаименованиеПоШаблонуКлиент("Оба",ВидНоменклатуры,ХарактеристикаОбъект);
		
	ИначеЕсли ФормироватьРабочееНаименование Тогда
		
		ЗаполнитьНаименованиеПоШаблонуКлиент("Рабочее",ВидНоменклатуры,ХарактеристикаОбъект);
		
	ИначеЕсли ФормироватьНаименованиеДляПечати Тогда
		
		ЗаполнитьНаименованиеПоШаблонуКлиент("ДляПечати",ВидНоменклатуры,ХарактеристикаОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Функция ЗаполнитьПоШаблонуСервер(ШаблонДляПечати = Истина,ВидНоменклатуры,ХарактеристикаОбъект)
	
	Шаблон = "";
	Результат = "не указан шаблон";
	
	Если ШаблонДляПечати Тогда
		Шаблон = ВидНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики;
	Иначе
		Шаблон = ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Результат = Справочники.ВидыНоменклатуры.НаименованиеПоШаблону(Шаблон, ХарактеристикаОбъект);
	Иначе
		Сообщить("Внимание не указан ШАБЛОН формирования наименования характеристики!");
	КОнецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьХарактеристикиСервер()
	
	//СИНХРОНИЗАЦИЯ ХАРАКТЕРИСТИК	
	ТаблицаТоваров = Объект.СвойстваХарактеристик.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура,КлючСтроки");
	
	Для Каждого ВремТовар Из ТаблицаТоваров Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСтроки",ВремТовар.КлючСтроки);
		Отбор.Вставить("Номенклатура",ВремТовар.Номенклатура);
		
		ПолучитьХарактеристики = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		КоличествоСвойств = ПолучитьХарактеристики.Количество();
		
		Если ПолучитьХарактеристики.Количество() > 0 Тогда
			ПрерватьПоискПоЭтойПозиции = Ложь;
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗначенияСвойствОбъектов.Ссылка.Владелец КАК Номенклатура,
			|	ЗначенияСвойствОбъектов.Ссылка КАК Характеристика
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Ссылка.Владелец = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", ВремТовар.Номенклатура);
			
			МассивСвойств = Новый Массив();
			МассивЗначенийСвойств = Новый Массив();
			
			НомСвойства = 0;
			Для Каждого ЗначенияСвойства Из ПолучитьХарактеристики  Цикл
				Если НЕ ЗначениеЗаполнено(ЗначенияСвойства.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				НомСвойства = НомСвойства+1;
				
				СвойствоХарактеристики = ЗначенияСвойства.Свойство;
				ЗначениеСвойства = СокрЛП(ЗначенияСвойства.Значение);
				
				Если СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
					УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ЗначениеСвойства,Истина,,СвойствоХарактеристики);
					
					Если УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
						ПрерватьПоискПоЭтойПозиции = Истина;
						Продолжить;
					КонецЕсли;
				ИначеЕсли СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
					ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства," ","");
					Если Найти(ЗначениеСвойства,".") > 0 И Найти(ЗначениеСвойства,",") > 0 Тогда
						ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства,",","");
					КонецЕсли;
					
					УстановитьСвойство = Число(ЗначениеСвойства);
				Иначе
					УстановитьСвойство = ЗначениеСвойства;
				КонецЕсли;
				
				Если СвойствоХарактеристики.ЭтоДополнительноеСведение Тогда
					ЭтоДополнительноеСведение = Истина;
				Иначе
					ЭтоДополнительноеСведение = Ложь;
				КонецЕсли;
				
				//Сообщить(""+СвойствоХарактеристики+"  "+УстановитьСвойство);
				
				МассивСвойств.Добавить(СвойствоХарактеристики);
				МассивЗначенийСвойств.Добавить(УстановитьСвойство);
				
				//Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Свойство = &СвойствоХарактеристики"+Строка(НомСвойства);
				//Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Значение = &УстановитьСвойство"+Строка(НомСвойства);
				//
				//Запрос.УстановитьПараметр("СвойствоХарактеристики"+Строка(НомСвойства), СвойствоХарактеристики);	
				//Запрос.УстановитьПараметр("УстановитьСвойство"+Строка(НомСвойства), УстановитьСвойство);
			КонецЦикла;
			
			Если ПрерватьПоискПоЭтойПозиции Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Свойство В (&МассивСвойств)";
			Запрос.Текст = Запрос.Текст + " И ЗначенияСвойствОбъектов.Значение В (&МассивЗначенийСвойств)";
			
			Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);	
			Запрос.УстановитьПараметр("МассивЗначенийСвойств", МассивЗначенийСвойств);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл	
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
					НайденныеСтроки = Объект.СвойстваХарактеристик.НайтиСтроки(ПараметрыОтбора); 
					
					Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
						СтрокаСинхронизации.ХарактеристикаНоменклатуры = Выборка.Характеристика;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьХарактеристики(Команда)
	
	ПроверитьХарактеристикиСервер();
	
КонецПроцедуры



&НаСервере
Процедура ВыполнитьЗагрузитьХарактеристикиНаСервере()
	
	ТаблицаТоваров = Объект.СвойстваХарактеристик.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ВидНоменклатуры,КлючСтроки");
	
	НачатьТранзакцию();
	КоличествоОбработанных = 0;
	
	Для Каждого ВремТовар Из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(ВремТовар.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВремТовар.ХарактеристикаНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСтроки",ВремТовар.КлючСтроки);
		Отбор.Вставить("Номенклатура",ВремТовар.Номенклатура);
		
		ПолучитьХарактеристики = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		КоличествоСвойств = ПолучитьХарактеристики.Количество();
		
		Если ПолучитьХарактеристики.Количество() > 0 Тогда
			НоменклатураВыборка           = ВремТовар.Номенклатура; 
			ВладелецХарактеристики        = ВремТовар.Номенклатура;	
			Индивидуальные                = Ложь;
			ЭтоХарактеристикаСоСвойствами = Ложь;
			ЭтоНоваяХарактеристика        = Истина;
			
			НазваниеХарактеристики = "";
			
			Для Каждого СтрокаВыборка Из ПолучитьХарактеристики  Цикл
				ВидНоменклатуры        = СтрокаВыборка.ВидНоменклатуры;
				Индивидуальные         = СтрокаВыборка.Индивидуальные;
				НаборСвойств           = СтрокаВыборка.НаборСвойств;
				СвойствоХарактеристики = СтрокаВыборка.Свойство;
				ЗначЗначениеСвойства   = СокрЛП(СтрокаВыборка.Значение);
				
				Если НЕ ЗначениеЗаполнено(ЗначЗначениеСвойства) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Индивидуальные = Ложь Тогда
					ВладелецХарактеристики = ВидНоменклатуры;
				Иначе
					ВладелецХарактеристики = НоменклатураВыборка;					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвойствоХарактеристики) Тогда
					ЭтоХарактеристикаСоСвойствами = Истина;
				Иначе
					ЭтоХарактеристикаСоСвойствами = Ложь;
					НазваниеХарактеристики = ЗначЗначениеСвойства;
				Конецесли;
			КонецЦикла;
			
			Если ЭтоХарактеристикаСоСвойствами = Ложь Тогда
				
				//Всегда повторно ищем.
				НайдемХарактеристику = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ЗначЗначениеСвойства,Истина,,ВладелецХарактеристики);
				Если НайдемХарактеристику = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
					
					НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
					НоваяХарактеристика.Владелец     = ВладелецХарактеристики;
					НоваяХарактеристика.Наименование = ?(ЗначениеЗаполнено(СтрокаВыборка.Поле_Характеристика),СтрокаВыборка.Поле_Характеристика,НазваниеХарактеристики);
					НоваяХарактеристика.Записать();
					
					НайдемХарактеристику = НоваяХарактеристика.Ссылка;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
				НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
						СтрокаСинхронизации.ХарактеристикаНоменклатуры = НайдемХарактеристику;	
					КонецЦикла;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если ЭтоХарактеристикаСоСвойствами Тогда
				НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				НоваяХарактеристика.Владелец     = ВладелецХарактеристики;
				//НоваяХарактеристика.Наименование = "новая";
				
				НазваниеХарактеристики = "";
				КолСчетчик = 0;
				Для Каждого ЗначенияСвойства Из ПолучитьХарактеристики  Цикл
					Если НЕ ЗначениеЗаполнено(ЗначенияСвойства.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					КолСчетчик = КолСчетчик+1;
					
					СвойствоХарактеристики = ЗначенияСвойства.Свойство;
					ЗначениеСвойства = СокрЛП(ЗначенияСвойства.Значение);
					
					Если СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
						УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ЗначениеСвойства,Истина,,СвойствоХарактеристики);
						Если УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
							НовоеСвойство = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
							НовоеСвойство.Владелец     = СвойствоХарактеристики;
							НовоеСвойство.Наименование = СокрЛП(ЗначениеСвойства);
							НовоеСвойство.Записать();
							
							УстановитьСвойство = НовоеСвойство.Ссылка;
						КонецЕсли;
					ИначеЕсли СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
						
						ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства," ","");
						Если Найти(ЗначениеСвойства,".") > 0 И Найти(ЗначениеСвойства,",") > 0 Тогда
							ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства,",","");
						КонецЕсли;
						
						УстановитьСвойство = Число(ЗначениеСвойства);
					Иначе
						УстановитьСвойство = ЗначениеСвойства;
					КонецЕсли;
					
					ДопРеквизиты = НоваяХарактеристика.ДополнительныеРеквизиты;
					Строка = ДопРеквизиты.Найти(СвойствоХарактеристики,"Свойство");
					Если Строка = Неопределено Тогда
						Строка = ДопРеквизиты.Добавить();
						Строка.Свойство = СвойствоХарактеристики;
						Строка.Значение = УстановитьСвойство;
					Иначе
						Строка.Свойство = СвойствоХарактеристики;
						Строка.Значение = УстановитьСвойство;
					КонецЕсли;
					
					НазваниеХарактеристики = НазваниеХарактеристики + УстановитьСвойство + ?(КолСчетчик < КоличествоСвойств,", "," ");
				КонецЦикла;
				
				Если ЭтоНоваяХарактеристика Тогда
					ШаблонРабочегоНаименованияХарактеристики = ВремТовар.ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики;
					Если ЗначениеЗаполнено(ШаблонРабочегоНаименованияХарактеристики) Тогда
						НоваяХарактеристика.Записать();
						СформироватьНаименованиеХарактеристики(ВремТовар.ВидНоменклатуры,НоваяХарактеристика.Ссылка);
					Иначе
						НоваяХарактеристика.Наименование = ?(ЗначениеЗаполнено(СтрокаВыборка.Поле_Характеристика),СтрокаВыборка.Поле_Характеристика,НазваниеХарактеристики); 
						НоваяХарактеристика.Записать();	
					КонецЕсли;
				КонецЕсли;
				
				ВремТовар.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
				НайденныеСтроки = Объект.СвойстваХарактеристик.НайтиСтроки(ПараметрыОтбора); 
				
				Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
					СтрокаСинхронизации.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
				КонецЦикла;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("КлючСтроки", ВремТовар.КлючСтроки);
				НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора); 
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для Каждого СтрокаСинхронизации Из НайденныеСтроки Цикл
						СтрокаСинхронизации.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоОбработанных = 200 Тогда
			
			// промежуточную транзакцию закрываем и открываем новую
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
			
			КоличествоОбработанных = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузитьХарактеристики(Команда)
	
	ВыполнитьЗагрузитьХарактеристикиНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ХарактеристикиНоменклатурыИзменитьНаСервере()
	
	ТаблицаТоваров = Объект.СвойстваХарактеристик.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ВидНоменклатуры,КлючСтроки");
		
	Для Каждого ВремТовар Из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(ВремТовар.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремТовар.ХарактеристикаНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("КлючСтроки",ВремТовар.КлючСтроки);
		Отбор.Вставить("Номенклатура",ВремТовар.Номенклатура);
		
		ПолучитьХарактеристики = Объект.СвойстваХарактеристик.НайтиСтроки(Отбор);
		КоличествоСвойств = ПолучитьХарактеристики.Количество();
		
		Если ПолучитьХарактеристики.Количество() > 0 Тогда	
			
			ОбъектХарактеристика = ВремТовар.ХарактеристикаНоменклатуры.ПолучитьОбъект();
			
			Для Каждого ЗначенияСвойства Из ПолучитьХарактеристики  Цикл
				Если НЕ ЗначениеЗаполнено(ЗначенияСвойства.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойствоХарактеристики = ЗначенияСвойства.Свойство;
				ЗначениеСвойства = СокрЛП(ЗначенияСвойства.Значение);
				
				Если СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда 
					УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ЗначениеСвойства,Истина,,СвойствоХарактеристики);
					Если УстановитьСвойство = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
						НовоеСвойство = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						НовоеСвойство.Владелец     = СвойствоХарактеристики;
						НовоеСвойство.Наименование = СокрЛП(ЗначениеСвойства);
						НовоеСвойство.Записать();
						
						УстановитьСвойство = НовоеСвойство.Ссылка;
					КонецЕсли;
				ИначеЕсли СвойствоХарактеристики.ТипЗначения.СодержитТип(Тип("Число")) Тогда 
					
					ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства," ","");
					Если Найти(ЗначениеСвойства,".") > 0 И Найти(ЗначениеСвойства,",") > 0 Тогда
						ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства,",","");
					КонецЕсли;
					
					УстановитьСвойство = Число(ЗначениеСвойства);
				Иначе
					УстановитьСвойство = ЗначениеСвойства;
				КонецЕсли;
				
				ДопРеквизиты = ОбъектХарактеристика.ДополнительныеРеквизиты;
				Строка = ДопРеквизиты.Найти(СвойствоХарактеристики,"Свойство");
				Если Строка = Неопределено Тогда
					Строка = ОбъектХарактеристика.ДополнительныеРеквизиты.Добавить();
					Строка.Свойство = СвойствоХарактеристики;
					Строка.Значение = УстановитьСвойство;
				Иначе
					Строка.Свойство = СвойствоХарактеристики;
					Строка.Значение = УстановитьСвойство;
				КонецЕсли; 
			КонецЦикла;	
			ОбъектХарактеристика.Записать(); 
			
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиНоменклатурыИзменить(Команда)
	
	ХарактеристикиНоменклатурыИзменитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ТаблицыОбработок.ТекущаяСтраница = Элементы.ТаблицыОбработок.ПодчиненныеЭлементы.ТаблицаВсе Тогда
		ТекущиеДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		//ТекущийЭлемент = Элементы.ТабличнаяЧастьНовые;
	Иначе
		ТекущиеДанные = Элементы.ТабличнаяЧастьНовые.ТекущиеДанные;
		//ТекущийЭлемент = Элементы.ТабличнаяЧастьНовые;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Сообщить(НСтр("ru = 'Для того, чтобы выбрать характеристику Вам необходимо предварительно выбрать номенклатуру.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецХарактеристики = Неопределено;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущиеДанные.ХарактеристикаНоменклатуры);
	ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
	ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущиеДанные.Номенклатура);
	
	Характеристика = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора);
	Если Характеристика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Характеристика); //Сообщить(Характеристика);
	//СтандартнаяОбработка = Истина;
	
КонецПроцедуры

//============================================================================
// РЕГИСТРАЦИЯ ПРАЙСА

&НаСервере
Процедура ВыполнитьРегистрацияЦенПоставщикаСервер() Экспорт
	
	мегапрайсРегистрироватьВсюНоменклатуруПрайсов = Константы.мегапрайсРегистрироватьВсюНоменклатуруПрайсов.Получить();
	
	НовыйДокумент = Документы.мегапрайсРегистрацияПрайса.СоздатьДокумент();
	НовыйДокумент.Дата          = ТекущаяДата();
	НовыйДокумент.ПрайсПартнера = Объект.ПрайсПартнера;
	НовыйДокумент.Комментарий   = "";
	
	СпрХарактеристикиНоменклатуры = Справочники.ХарактеристикиНоменклатуры;
	ПустаяХарактеристика          = СпрХарактеристикиНоменклатуры.ПустаяСсылка();
	
	ПроцентСкидкиНаценки = Объект.ПрайсПартнера.ПроцентСкидкиНаценки;
	
	Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ мегапрайсРегистрироватьВсюНоменклатуруПрайсов Тогда
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,Стр);
		СтрокаТЧ.НоменклатураПоставщика = Мегапрайс.ПолучитьНоменклатуруКонтрагента(Объект.ПрайсПартнера,Стр,Истина);
		СтрокаТЧ.Производитель              = Стр.ПроизводительСсылка;	
		
		СтрокаТЧ.Валюта	      = ?(ЗначениеЗаполнено(Стр.ВалютаСсылка),Стр.ВалютаСсылка,Объект.ПрайсПартнера.Валюта);
		СтрокаТЧ.СрокПоставки = ?(ЗначениеЗаполнено(Стр.Поле_СрокПоставки),Стр.Поле_СрокПоставки,Объект.ПрайсПартнера.СрокПоставки);
	КонецЦикла;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Сообщить(""+НовыйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРегистрацияЦенПоставщикаТиповаяСервер() Экспорт
	
	Если Объект.ПрайсПартнера.ГруппаАнализаЦен = Справочники.мегапрайсГруппыАнализаЦен.КонкурентыОптовые ИЛИ Объект.ПрайсПартнера.ГруппаАнализаЦен = Справочники.мегапрайсГруппыАнализаЦен.КонкурентыРозница Тогда
		Сообщить("Конкурентов нельзя регистрировать в типовом регистре");
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.Партнер     = Объект.ПрайсПартнера.Партнер;
	НовыйДокумент.Соглашение  = Объект.ПрайсПартнера.Соглашение;
	НовыйДокумент.Комментарий = "Мегапрайс: импорт прайса "+ТекущаяДата();
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	СпрХарактеристикиНоменклатуры = Справочники.ХарактеристикиНоменклатуры;
	ПустаяХарактеристика          = СпрХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Для Каждого Стр из Объект.ТабличнаяЧасть Цикл	
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		СтрокаТЧ.Номенклатура = Стр.Номенклатура;
		СтрокаТЧ.Упаковка     = Стр.Упаковка;
		
		СтрокаТЧ.Цена         = Стр.Цена;
		
		Если Стр.ХарактеристикиИспользуются Тогда
			Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				СтрокаТЧ.Характеристика   = Стр.ХарактеристикаНоменклатуры;
			Иначе
				НайтиХарактеристикуБезСвойств = СпрХарактеристикиНоменклатуры.НайтиПоНаименованию("Без свойств",Истина,,Стр.Номенклатура);
				Если НайтиХарактеристикуБезСвойств = ПустаяХарактеристика Тогда
					НоваяХарактеристика = СпрХарактеристикиНоменклатуры.СоздатьЭлемент();           
					НоваяХарактеристика.Владелец     = Стр.Номенклатура;
					НоваяХарактеристика.Наименование = "Без свойств";   
					НоваяХарактеристика.Записать();  
					
					НайтиХарактеристикуБезСвойств = НоваяХарактеристика.Ссылка;
				КонецЕсли;
				
				СтрокаТЧ.Характеристика   = НайтиХарактеристикуБезСвойств.Ссылка;
			КонецЕсли;			
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.ПрайсПартнера.Партнер);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Сообщить(""+НовыйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияЦенПоставщика(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		Сообщить("Не указан Партнер!");
		Возврат;
	КонецЕсли;
	
	Состояние("Регистрация прайса...");
	
	ВыполнитьРегистрацияЦенПоставщикаСервер();
	
	Если Объект.РегистрироватьТиповойДокументРегистрацииЦенКонтрагента Тогда
		ВыполнитьРегистрацияЦенПоставщикаТиповаяСервер();
	КОнецЕсли;
	
	Сообщить("Регистрация выполнена.");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьХарактеристики(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

//============================================================================
// НОВАЯ ВЕРСИЯ

&НаСервере
Функция ПолучитьАдресАрхиваВоВременномХранилище()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	СсылкаНаАрхив   = ПоместитьВоВременноеХранилище(ОбъектОбработки.ПолучитьМакет("Subsystems"),Новый УникальныйИдентификатор);
	
	Возврат СсылкаНаАрхив;
	
КонецФункции 

&НаКлиенте
Функция УстановитьКомпоненту() Экспорт
	
	АдресАрхиваКомпонента = "";
	
	Попытка
		АдресАрхиваКомпонента = ПолучитьАдресАрхиваВоВременномХранилище();
		УстановитьВнешнююКомпоненту(АдресАрхиваКомпонента);
	Исключение
		Сообщить("Не удалось устанвить внешнюю компоненту.");   
	КонецПопытки;
	
	Возврат АдресАрхиваКомпонента;
	
КонецФункции 

&НаСервере
Функция ЗначИзСтроки(СтрокаЗначений)
	Возврат ЗначениеИзСтрокиВнутр(СтрокаЗначений);
КонецФункции

&НаСервере
Функция ПрочитатьТабличныйДокументИзExcelСервер(ИмяВременногоФайла,ФайлНаДискеРасширение)
	
	Перем ПутьВременногоФайла;
	
	Если ЭтоАдресВременногоХранилища(АдресФайлаХранилище) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ФайлНаДискеРасширение);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
	Иначе
		Сообщить("Ошибка загрузки файла");
		Возврат Ложь;
	КонецЕсли;	
	
	УдаляемыеРеквизиты = Новый Массив();
	УдаляемыеЭлементы = Новый Массив();
	
	Ном = 0;
	Для Каждого ТекЭлемент Из Элементы.ПанельЛистов.ПодчиненныеЭлементы Цикл
		Если ТекЭлемент = Элементы.ПанельЛистов.ПодчиненныеЭлементы.ЛистБуфер Тогда
			Продолжить;
		КонецЕсли;
		
		УдаляемыеЭлементы.Добавить(ТекЭлемент);
		УдаляемыеРеквизиты.Добавить("ТаблицаЛист"+Ном);
		Ном = Ном+1;
	КонецЦикла;	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	
	СЗ  = Мегапрайс.ПроинициализироватьКомпоненту(ИмяВременногоФайла);
	
	Для Ном = 0 По СЗ.Количество()-1 Цикл
		НомерЛиста = Ном+1;
		
		ВременнаяТаблица = СЗ[Ном].Значение;
		ИмяТаб           = СЗ[Ном].Представление;
		
		Если Объект.ТаблицаЛистовФайла.Количество() > 0 Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("НомерЛиста",НомерЛиста);
			НайтиСтроки = Объект.ТаблицаЛистовФайла.НайтиСтроки(Отбор);
			Если НайтиСтроки.Количество() > 0 Тогда
				Для Каждого СтрТаблицы Из НайтиСтроки Цикл
					СтрТаблицы.ИмяЛиста   = ИмяТаб;
					СтрТаблицы.НомерЛиста = Ном+1;
					СтрТаблицы.КоличествоСтрок = ВременнаяТаблица.Количество();
				КонецЦикла;
			Иначе
				НовыйЛист = Объект.ТаблицаЛистовФайла.Добавить();
				НовыйЛист.ИмяЛиста   = ИмяТаб;
				НовыйЛист.НомерЛиста = Ном+1;
				НовыйЛист.КоличествоСтрок = ВременнаяТаблица.Количество();
			КонецЕсли;
		Иначе
			НовыйЛист = Объект.ТаблицаЛистовФайла.Добавить();
			НовыйЛист.ИмяЛиста   = ИмяТаб;
			НовыйЛист.НомерЛиста = Ном+1;
			НовыйЛист.КоличествоСтрок = ВременнаяТаблица.Количество();
		КонецЕсли;
		
		ИмяЛиста   = "СтраницаЛист"+Ном;
		ИмяТаблицы = "ТаблицаЛист"+Ном;
		
		МассивРеквизитов = Новый Массив;
		МассивТипаВыбора = Новый Массив;
		МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
		ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, ОписаниеТипаВыбора, "", ИмяТаблицы));    
		
		Для Каждого Колонка Из ВременнаяТаблица.Колонки Цикл			
			ИмяТаблицыКолонка = Колонка.Имя;
			
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицыКолонка, Колонка.ТипЗначения,ИмяТаблицы, Колонка.Заголовок));
		КонецЦикла;
		
		ИзменитьРеквизиты(МассивРеквизитов);
		
		НоваяСтраница     = Элементы.Добавить(ИмяЛиста, Тип("ГруппаФормы"),Элементы.ПанельЛистов);
		НоваяСтраница.Вид = ВидГруппыФормы.Страница;
		НоваяСтраница.Заголовок = ИмяТаб;
		
		Элементы.ПанельЛистов.ТекущаяСтраница = НоваяСтраница;
		
		НоваяТаблица                = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"),НоваяСтраница);
		НоваяТаблица.ПутьКДанным    = ИмяТаблицы;
		НоваяТаблица.Отображение    = ОтображениеТаблицы.Список;
		НоваяТаблица.ТолькоПросмотр = Ложь;
		
		Для Каждого Колонка Из ВременнаяТаблица.Колонки Цикл
			ИмяТаблицыКолонка = ИмяТаблицы+Колонка.Имя;
			
			НовыйЭлемент             = Элементы.Добавить(ИмяТаблицыКолонка, Тип("ПолеФормы"), НоваяТаблица);
			НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = ""+ИмяТаблицы+"."+Колонка.Имя; 
			НовыйЭлемент.Ширина      = 15; 
		КонецЦикла; 	

		ЗначениеВРеквизитФормы(ВременнаяТаблица,ИмяТаблицы);
				
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции 



&НаСервере
Функция ОбновитьНастройкиЛиста() Экспорт
	
	Возврат ЗначениеВСтрокуВнутр(Объект.НастройкиКолонокЛиста.Выгрузить());
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицы()
	
	
	УсловныеОформления = Новый Массив();
	
	Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;	
	
	ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);		
	ИмяТаблицыИмпорта = "ТаблицаЛист"+(ИндексТекущейСтраницы-1);	
	
	
	// Условное оформление - Номер первой строки 
	НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяТаблицыИмпорта;
	НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
	НовыйЭлементУсловногоОформления.Использование = Истина;
	
	ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЛистовФайла.НомерПервойСтроки");
	
	НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта);
	
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.АкварельноСиний);
	
	Для Каждого Стр Из Объект.НастройкиКолонокЛиста Цикл		
		Если Стр.НомерКолонки = 0 Тогда 
			Продолжить;
		КонецЕсли;		
		
		// Условное оформление - Номер первой строки 
		НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки;
		НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
		НовыйЭлементУсловногоОформления.Использование = Истина;
		
		ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""+ИмяТаблицыИмпорта+".K_"+Стр.НомерКолонки);
		//ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
		//ЭлементОтбора.ПравоеЗначение = "";
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицыИмпорта+".НомерСтроки");
		ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаЛистовФайла.НомерПервойСтроки");
		
		
		НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(""+ИмяТаблицыИмпорта+"K_"+Стр.НомерКолонки);
		
		//НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
		
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиИмпортаЛистов()
	
	ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);

	СтрокаНастроки = ОбновитьНастройкиЛиста();

	Для Каждого Строка Из Объект.ТаблицаЛистовФайла Цикл		
		Если Объект.ИндивидуальныеНастройкиЛистов Тогда
			Если Строка.НомерЛиста       = ИндексТекущейСтраницы Тогда
				Строка.НомерПервойСтроки = НомерСтрокиШапка;
				Строка.НастройкиКолонок  = СтрокаНастроки;
				Строка.Пометка           = Истина;
			КОнецЕсли;
		Иначе
			Строка.НомерПервойСтроки = НомерСтрокиШапка;
			Строка.НастройкиКолонок  = СтрокаНастроки;
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьУсловноеОформлениеТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьНастройкиИмпортаЛистов();
	
КонецПроцедуры

&НаСервере
Функция глУбратьСимволЧтенияНастроекСервер(пКатНом) 
	
	КатНом = пКатНом;
	КатНом = СтрЗаменить(КатНом,"=","");
	
	КатНом = СокрЛП(КатНом);
	
	Возврат КатНом;
	
КонецФункции	

&НаСервере
Функция ПолучитьНастройкиЛиста(СтрокаНастроек) 
	
	Если НЕ ЗначениеЗаполнено(СтрокаНастроек) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Попытка
		ТаблицаЗначений = ЗначениеИзСтрокиВнутр(СтрокаНастроек);
		Если ТипЗнч(ТаблицаЗначений) <> Тип("ТаблицаЗначений") Тогда
			ВызватьИсключение("Ошибка");
		КонецЕсли;
	Исключение
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;

	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Процедура НастройкиВДерево(СтрокаНастроек) 
	
	//Очистим настройки
	Для Каждого Стр Из Объект.НастройкиКолонокЛиста Цикл
		Стр.НомерКолонки = 0;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(СтрокаНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзНастроек = ПолучитьНастройкиЛиста(СтрокаНастроек);
	
	Если ТаблицаИзНастроек.Количество() > 0 Тогда
		Объект.НастройкиКолонокЛиста.Загрузить(ПолучитьНастройкиЛиста(СтрокаНастроек));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВизуальноеПолучениеНастроекЛиста()
	
	ИндексТекущейСтраницы = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Индекс(Элементы.ПанельЛистов.ТекущаяСтраница);
	
	Для Каждого Строка Из Объект.ТаблицаЛистовФайла Цикл
		Если Строка.НомерЛиста = ИндексТекущейСтраницы Тогда
			НастройкиВДерево(Строка.НастройкиКолонок);
		КОнецЕсли;
	КонецЦикла;
	
	УстановитьУсловноеОформлениеТаблицы();

КонецПроцедуры

&НаКлиенте
Процедура ПанельЛистовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВизуальноеПолучениеНастроекЛиста();
	
КонецПроцедуры



//////////////////////////////////////////////////////////////////
//  Работа подсистемы АЛГОРИТМЫ

&НаКлиенте
Процедура НастройкиКолонокЛистаТекстАлгоритмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекстАлгоритма",Элементы.НастройкиКолонокЛиста.ТекущиеДанные.ТекстАлгоритма);
	
	Попытка
		Результат = ОткрытьФормуМодально("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма); 
	Исключение
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.НастройкиКолонокЛиста.ТекущиеДанные.ТекстАлгоритма = Результат;
	КонецЕсли;
	
КонецПроцедуры





&НаКлиенте
Процедура НастройкиКолонокЛистаВсе(Команда)		
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаДокумент(Команда)
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолей","Документ");  
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаНоменклатура(Команда)
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолей","Номенклатура");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаРеквизиты(Команда)
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;

	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Истина;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Истина;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Истина;
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолей","Реквизиты");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаХарактеристики(Команда)
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Истина;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Истина;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Истина;
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолей","Характеристики");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаЦены(Команда)
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
	
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаПолей","Цены");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаАвтонастройка(Команда)
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Неопределено;
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Истина;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Ложь;	
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Ложь;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокЛистаАлгоритмы(Команда)
	Элементы.НастройкиКолонокЛиста.ОтборСтрок = Неопределено;
	Элементы.НастройкиКолонокЛистаГруппаПолей.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаПредставление.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаВариантыСовпадений.Видимость = Ложь;
	
	//Элементы.НастройкиКолонокЛистаНаборСвойств.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаВидНоменклатуры.Видимость = Ложь;
	//Элементы.НастройкиКолонокЛистаСвойство.Видимость = Ложь;	
	
	Элементы.НастройкиКолонокЛистаКонтрольЗаполнения.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаКонтрольДлиныПоля.Видимость = Истина;
	Элементы.НастройкиКолонокЛистаТекстАлгоритма.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортаВыделитьВсе(Команда)
	
	Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		Стр.Пометка = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортаПометкаВыделенного(Команда)
	
	Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;
	
	ВыделенныеСтроки = Элементы.ТаблицаИмпорта.ВыделенныеСтроки;	
	Для Каждого СтрВыд Из ВыделенныеСтроки Цикл       
		НомерСтроки = Элементы.ТаблицаИмпорта.ДанныеСтроки(СтрВыд).НомерСтроки;
		
		СтрокаСоотв = Объект.ТаблицаИмпорта[НомерСтроки-1];
		СтрокаСоотв.Пометка = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмпортаСнятьВсе(Команда)
	
	Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЛистовФайлаПриАктивизацииСтроки(Элемент)
		
	ТекущиеДанные = Элементы.ТаблицаЛистовФайла.ТекущиеДанные;;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Попытка
			Элементы.ПанельЛистов.ТекущаяСтраница = Элементы.ПанельЛистов.ПодчиненныеЭлементы.Получить(ТекущиеДанные.НомерЛиста);
			
			ВизуальноеПолучениеНастроекЛиста();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрофиль(Команда)
	
	Объект.ПрайсПартнера = Элементы.СправочникПрофилиПрайсов.ТекущиеДанные.Ссылка;
	
	Если ЗначениеЗаполнено(Объект.ПрайсПартнера) Тогда
		ПрайсПартнераПриИзменении("");
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ИсходнаяТаблица;

КонецПроцедуры





мЖирныйШрифт = Новый Шрифт(, , Истина);







