&НаКлиенте
Перем ПоказатьРасшифровки;

&НаКлиенте
Перем ТекущаяСтраницаРасшифровки;

&НаКлиенте
Перем ЗакладкаПоставщики;
&НаКлиенте
Перем ЗакладкаТекущиеОстатки;
&НаКлиенте
Перем ЗакладкаДинамика;
&НаКлиенте
Перем ЗакладкаРасшифровкаИсторияЗакупок;			
&НаКлиенте
Перем ЗакладкаРасшифровкаЗаказыПоставщикам;
&НаКлиенте
Перем ЗакладкаРасшифровкаЗаказыКлиентов;


&НаКлиенте
Перем ИнформацияОТовареПрочитана;

&НаКлиенте
Перем ЗакрытьОбработку;


//============================================================================
// АВТОР

&НаКлиенте
Процедура SubSysДокументацияКПрограмме(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/learning/course2/chapter09/?LESSON_PATH=3.9");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysОставитьОтзыв(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/catalog/program=7494/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПроверитьОбновления(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/news/");
	
КонецПроцедуры

 
&НаКлиенте
Процедура ВидеоОбзор(Команда)
	
	ЗапуститьПриложение("https://www.youtube.com/channel/UCTukH6iP4DSW0LtdKBRfUlw");
	
КонецПроцедуры

//============================================================================
// СЛУЖЕБНЫЕ

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	//ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Объект.НачалоПериода, Объект.КонецПериода, Период);
	//ВыборПериодаКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	//ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.НачалоПериода, Объект.КонецПериода);
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//ВыборПериодаКлиент.ПериодНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, 
	//	ВидПериода, Период, Объект.НачалоПериода, Объект.КонецПериода);
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//ВыборПериодаКлиент.ПериодОбработкаВыбора(
	//	Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
	//	ВидПериода, Период, Объект.НачалоПериода, Объект.КонецПериода);
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	//ВыборПериодаКлиент.ПериодАвтоПодбор(
	//	Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
	//	ВидПериода, Период, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	//ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
	//	Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
	//	ВидПериода, Период, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Объект.КонецПериода = КонецДня(Объект.НачалоПериода);
	
	ОбновитьИнтервалНаСервере();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьФорматДаты(Дата,Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""гггг 'г.'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""к 'квартал'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""ММММ""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ""");
	КонецЕсли;
	
	Возврат ТекстВозврата;
	
КонецФункции

&НаСервере
Процедура ПрибавитьПериод(ТочкаОтсчета,Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 12);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 6);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ТочкаОтсчета = ТочкаОтсчета + 86400*10;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТочкаОтсчета = ТочкаОтсчета + 86400*7;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ТочкаОтсчета = ТочкаОтсчета + 86400;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКОнтекста
Функция ОтнятьПериод(ТочкаОтсчета,Периодичность,КоличествоПериодовАнализа)
	
	НоваяДата = ТочкаОтсчета;
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		НоваяДата = ДобавитьМесяц(ТочкаОтсчета, -12*КоличествоПериодовАнализа);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		НоваяДата = ДобавитьМесяц(ТочкаОтсчета, -6*КоличествоПериодовАнализа);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НоваяДата = ДобавитьМесяц(ТочкаОтсчета, -3*КоличествоПериодовАнализа);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НоваяДата = ДобавитьМесяц(ТочкаОтсчета, -1*КоличествоПериодовАнализа);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		НоваяДата = ТочкаОтсчета - 86400*10*КоличествоПериодовАнализа;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НоваяДата = ТочкаОтсчета - 86400*7*КоличествоПериодовАнализа;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		НоваяДата = ТочкаОтсчета - 86400*КоличествоПериодовАнализа;
	КонецЕсли;
	
	Возврат НоваяДата;
	
КонецФункции

&НаСервере
Функция ОпределитьНачалоИнтервала(ДатаОпределения,Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(ДатаОпределения);
		//ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		//	Возврат НачалоДекады(ДатаОпределения);	
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(ДатаОпределения);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьКонецИнтервала(ДатаОпределения,Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(ДатаОпределения);
		//ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		//	Возврат КонецДекады(ДатаОпределения);		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(ДатаОпределения);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбновитьИнтервал(Параметры) 
	
	НачалоПериода = НачалоДня(Объект.НачалоПериода);
	КонецПериода  = КонецДня(Объект.КонецПериода);
	Периодичность = Объект.Периодичность;
	КолПериодовАнализа = 0;
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("НачалоИнтервала",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Интервалы.Колонки.Добавить("КонецИнтервала",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	КОнецЕсли;
	
	НачалоПериода        = ОпределитьНачалоИнтервала(НачалоПериода,Периодичность);
	Объект.НачалоПериода = НачалоПериода;
	
	ТочкаОтсчета = НачалоПериода;
	Если ТочкаОтсчета < КонецПериода Тогда
		Пока ТочкаОтсчета <= КонецПериода Цикл		
			НачалоИнтервала = ОпределитьНачалоИнтервала(ТочкаОтсчета,Периодичность);
			КонецИнтервала  = ОпределитьКонецИнтервала(ТочкаОтсчета,Периодичность);
			
			Стр = Интервалы.Добавить();
			Стр.НачалоИнтервала = НачалоИнтервала;
			Стр.КонецИнтервала  = КонецИнтервала;
			
			Если НачалоИнтервала = ОпределитьНачалоИнтервала(КонецПериода,Периодичность) Тогда
				РазницаДнейВПериоде = КонецИнтервала - НачалоИнтервала;
				ДнейСНачала = КонецДня(КонецПериода) - ?(НачалоИнтервала < НачалоДня(НачалоПериода),НачалоДня(НачалоПериода),НачалоИнтервала);
				
				Вычислим = ДнейСНачала/РазницаДнейВПериоде;
				
				КолПериодовАнализа = КолПериодовАнализа + Вычислим;
			Иначе
				КолПериодовАнализа = КолПериодовАнализа + 1;				
			КонецЕсли;
			
			ПрибавитьПериод(ТочкаОтсчета,Периодичность);			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("Интервалы", Интервалы);
	ПараметрыВозврата.Вставить("КоличествоПериодовАнализа", КолПериодовАнализа);
	
	Возврат ПараметрыВозврата;
	
КОнецФункции

//============================================================================
// ФОРМА

&НаСервере
Процедура ЗаполнитьТаблицуПоказателей()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("НастройкиОтчета");
	
	Область = Макет.ПолучитьОбласть("Показатели");
	
	ВсегоСтрок = Область.ВысотаТаблицы + 1;
	ТекущаяСтрока = 2;
	
	Объект.ПоказателиТаблицы.Очистить();
	
	Пока ТекущаяСтрока < ВсегоСтрок Цикл
		
		мСтрока = "R" + Формат(ТекущаяСтрока,"ЧДЦ=0; ЧГ=");
		
		ГруппаПолей            = Область.ПолучитьОбласть( мСтрока + "C1").ТекущаяОбласть.Текст;
		ИмяПоказателя          = Область.ПолучитьОбласть( мСтрока + "C2").ТекущаяОбласть.Текст;
		НаименованиеПоказателя = Область.ПолучитьОбласть( мСтрока + "C3").ТекущаяОбласть.Текст;
		Пометка                = Область.ПолучитьОбласть( мСтрока + "C4").ТекущаяОбласть.Текст;
		Пояснение              = Область.ПолучитьОбласть( мСтрока + "C5").ТекущаяОбласть.Текст;
		
		НоваяСтрока = Объект.ПоказателиТаблицы.Добавить();
		НоваяСтрока.ГруппаПолей  = ГруппаПолей;
		НоваяСтрока.ИмяКолонки   = ИмяПоказателя;
		НоваяСтрока.Наименование = НаименованиеПоказателя;
		НоваяСтрока.Пометка      = ?(Пометка = "1", Истина, Ложь);
		НоваяСтрока.Пояснение    = Пояснение;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;			
	КонецЦикла;
	
Конецпроцедуры

&НаСервере
Процедура Инициализировать()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьТаблицуПоказателей();
	
	Объект.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Объект.РабочийКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗапроса");
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Объект.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Объект.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);
	
	Объект.ПроцентАКласса = 70;
	Объект.ПроцентВКласса = 20;
	Объект.ПроцентСКласса = 10;
	Объект.ВидОтбораПоПоставщику = "ПоНоменклатуре";
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоНаименьшейЦене";
	НовСтр.Представление = "Цены контрагентов: по наименьшей цене (типовые)";
	НовСтр.Пометка = Истина;
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоНаименьшейЦенеИНаличию";
	НовСтр.Представление = "Мегапрайс: по наименьшей цене с учетом наличия товара у поставщика";
	НовСтр.Пометка = Ложь;
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоПриоритетам";
	НовСтр.Представление = "Мегапрайс: по приоритетам поставщиков";
	НовСтр.Пометка = Ложь;
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоПоследнейЗакупке";
	НовСтр.Представление = "По последней закупке (приходной накладной)";
	НовСтр.Пометка = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантАнализаИПланирования) Тогда
		Объект.ВариантАнализаИПланирования = "РежимПоПериодам";
	КонецЕсли;
	
	Если Объект.ПравилаРасчетаПотребностей.Количество() = 0 Тогда
		НоваяНастройка = Объект.ПравилаРасчетаПотребностей.Добавить();
		
		НоваяНастройка.ПорогНормальнойЛиквидности = 4;
		НоваяНастройка.ПорогНормальнойЛиквидностиВДнях = 60;
		
		НоваяНастройка.КоличествоПериодовЗаказа = 1;   
		НоваяНастройка.ТочностьОкругления = 1;  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализировать();
	
	Если Параметры.Свойство("ПравилоЗакупок") Тогда 
		Объект.ПравилоЗакупок = Параметры.ПравилоЗакупок;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ПравилоЗакупок) Тогда 
		МегапрайсЗаполнитьПравилаЗакупок();
	КонецЕсли;

	//ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(
	//	Перечисления.ДоступныеПериодыОтчета.День,
	//	Элементы.ВидПериода.СписокВыбора, ВидПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОбработки(Элемент)
	
	Инициализировать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеРеквизитовНаСервере()
	
	НачалоПериода          = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	НачалоПериода          = НачалоМесяца(НачалоПериода-1);
	Объект.НачалоПериода   = НачалоМесяца(НачалоПериода-1);
	Объект.КонецПериода    = КонецДня(НачалоДня(ТекущаяДата())-1);
	
	Объект.Периодичность = Перечисления.Периодичность.Месяц;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнениеРеквизитовНаСервере();
	
	Если ЗначениеЗаполнено(Объект.КоличествоПериодовАнализа) Тогда
		Объект.НачалоПериода = ОтнятьПериод(ТекущаяДата(),Объект.Периодичность,Объект.КоличествоПериодовАнализа);
	Иначе
		ОбновитьИнтервалНаСервере();
	КонецЕсли;
	
	ПоказатьРасшифровки = Ложь;
	ПанельПоказатьРасшифровки("");
	
	ВариантНавигацииПоНоменклатуре = "По Иерархии";
	
	Элементы.ОтборыКЗаказу.Пометка = Ложь;
	
	ТекущаяСтраницаРасшифровки = Элементы.ДопИнформация.ТекущаяСтраница;
	
	ЗакладкаПоставщики = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаПоставщики;
	ЗакладкаТекущиеОстатки = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаТекущиеОстатки;
	ЗакладкаДинамика = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаДинамика;
	ЗакладкаРасшифровкаИсторияЗакупок = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаИсторияЗакупок;			
	ЗакладкаРасшифровкаЗаказыПоставщикам = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаЗаказыПоставщикам;
	ЗакладкаРасшифровкаЗаказыКлиентов = Элементы.ДопИнформация.ПодчиненныеЭлементы.ЗакладкаРасшифровкаЗаказыКлиентов;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнтервалНаСервере();
	
	Если Объект.Периодичность = Перечисления.Периодичность.Декада
		ИЛИ Объект.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Объект.Периодичность = Перечисления.Периодичность.Месяц;
		Сообщить("Данная периодичность не может быть использована");
	КонецЕсли;
	
	ПараметрыРеквизитов = Новый Структура;
	ПараметрыРеквизитов.Вставить("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	ПараметрыРеквизитов.Вставить("КонецПериода",  КонецДня(Объект.КонецПериода));
	ПараметрыРеквизитов.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыРеквизитов.Вставить("КоличествоПериодовАнализа", Объект.КоличествоПериодовАнализа);
	
	ПараметрыВозврата = ОбновитьИнтервал(ПараметрыРеквизитов);	
	Объект.КоличествоПериодовАнализа = ПараметрыВозврата.КоличествоПериодовАнализа;
	
КонецПроцедуры

//============================================================================
// СЛУЖЕБНЫЕ ПЕРЕДАЧА МЕЖДУ ФОРМАМИ	

&НаСервере
Функция ПоместитьДанныеВоВременноеХранилище()
	
	Перем СтруктураПараметров;
	
	ПолучитьТаблицуНоменклатурыКЗаказу();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	СтруктураПараметров.Вставить("ВидЦенНоменклатуры", Объект.ВидЦенНоменклатуры);
	СтруктураПараметров.Вставить("Валюта", Объект.Валюта);
	СтруктураПараметров.Вставить("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	СтруктураПараметров.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
	СтруктураПараметров.Вставить("Периодичность", Объект.Периодичность);
	СтруктураПараметров.Вставить("КоличествоПериодовАнализа", Объект.КоличествоПериодовАнализа);

	СтруктураПараметров.Вставить("ТаблицаПотребностей",Объект.ТаблицаПотребностей.Выгрузить());
	СтруктураПараметров.Вставить("ВариантыОпределенияПоставщиков", Объект.ВариантыОпределенияПоставщиков.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

//============================================================================

&НаСервере
Процедура ПолучитьТаблицуНоменклатурыКЗаказу()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Объект.ТаблицаПотребностей.Очистить();
	Для Каждого Подчиненный Из Объект.ТаблицаНоменклатуры Цикл
		Если Подчиненный.Заказать > 0 Тогда
			ТекущиеДанные = Объект.ТаблицаПотребностей.Добавить();
			ТекущиеДанные.Номенклатура   = Подчиненный.Номенклатура;
			ТекущиеДанные.Характеристика = Подчиненный.Характеристика;
			ТекущиеДанные.Производитель  = Подчиненный.Производитель;
			ТекущиеДанные.Заказать       = Подчиненный.Заказать;
		КонецЕсли;
	КонецЦикла;
	
КОнецПроцедуры

&НаКлиенте
Процедура ОтборыКЗаказу(Команда)
	
	Элементы.ОтборыКЗаказу.Пометка = НЕ Элементы.ОтборыКЗаказу.Пометка;
	
	Если Элементы.ОтборыКЗаказу.Пометка Тогда
		Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("КЗаказу", Истина);
	Иначе
		Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииПоНоменклатуреПриИзменении(Элемент)
	
	Если ВариантНавигацииПоНоменклатуре = "По Иерархии" Тогда
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Иерархия 
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Виды номенклатуры" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Виды
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Категории" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Категории 		
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Марки" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Марки 
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "Производители" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Производители 
		
	ИначеЕсли ВариантНавигацииПоНоменклатуре = "АВС классификация" Тогда
		
		Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.АВСКлассификация 	
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Иерархия Тогда
		
		ТекущиеДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Группа) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаНоменклатуры",ТекущиеДанные.Группа);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Виды Тогда
		
		ТекущиеДанные = Элементы.НавигацияВидыНоменклатуры.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидНоменклатуры) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидНоменклатуры",ТекущиеДанные.ВидНоменклатуры);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Категории Тогда
		
		ТекущиеДанные = Элементы.НавигацияТоварныеКатегории.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ТоварнаяКатегория) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("ТоварнаяКатегория",ТекущиеДанные.ТоварнаяКатегория);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Марки Тогда
		
		ТекущиеДанные = Элементы.НавигацияМаркиНоменклатуры.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.МаркаНоменклатуры) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("МаркаНоменклатуры",ТекущиеДанные.МаркаНоменклатуры);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.Производители Тогда
		
		ТекущиеДанные = Элементы.НавигацияПроизводители.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Производитель) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("Производитель",ТекущиеДанные.Производитель);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаНоменклатурыНавигация.ТекущаяСтраница = Элементы.АВСКлассификация Тогда
		
		ТекущиеДанные = Элементы.НавигацияАВСКлассы.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.АВСКлассификация) Тогда
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("АВСКлассификация",ТекущиеДанные.АВСКлассификация);
			Иначе
				Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;
			КонецЕсли;
		Иначе
			Элементы.ТаблицаНоменклатуры.ОтборСтрок = Неопределено;	
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаНоменклатурыПоказатьНавигацию(Команда)
	
	ПоказатьГруппыПометка = НЕ Элементы.ТаблицаНоменклатурыКоманднаяПанель.ПодчиненныеЭлементы.ТаблицаНоменклатурыПоказатьНавигацию.Пометка;
	Элементы.ТаблицаНоменклатурыКоманднаяПанель.ПодчиненныеЭлементы.ТаблицаНоменклатурыПоказатьНавигацию.Пометка = ПоказатьГруппыПометка;
	
	Элементы.СтраницаФильтры.Видимость = ПоказатьГруппыПометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельПоказатьРасшифровки(Команда)
	
	ПоказатьРасшифровки = НЕ Элементы.ПоказатьРасшифровки.Пометка;
	Элементы.ПоказатьРасшифровки.Пометка = ПоказатьРасшифровки;
	
	Элементы.ДопИнформация.Видимость = ПоказатьРасшифровки;
	
КонецПроцедуры


//============================================================================
// СЛУЖЕБНЫЕ

&НаСервере
Функция ОкруглитьЧисло(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону = Истина) 
	
	Перем Результат;
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервалов = Число / ТочностьОкругления;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
	
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлится до 0.4
			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлится до 0.35,
			// а 0.376 до 0.4
			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

//============================================================================
// ФОРМИРОВАНИЕ ОТЧЕТА

&НаСервере
Процедура ВыполнитьРасчет() Экспорт

	ВариантАнализаИПланирования = Объект.ВариантАнализаИПланирования;

	Для Каждого СтрокаТаблицы Из Объект.ТаблицаНоменклатуры Цикл	
				
		Если Объект.ВыполнитьРасчетМинимальныхОстатков Тогда
			Для Каждого ВыборкаПравило Из Объект.ПравилаРасчетаТочекЗаказа Цикл
				Если ЗначениеЗаполнено(ВыборкаПравило.ГруппаНоменклатуры) Тогда
					Если СтрокаТаблицы.ГруппаНоменклатуры <> ВыборкаПравило.ГруппаНоменклатуры Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				Если ЗначениеЗаполнено(ВыборкаПравило.ВидНоменклатуры) Тогда
					Если СтрокаТаблицы.ВидНоменклатуры <> ВыборкаПравило.ВидНоменклатуры Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				Если ЗначениеЗаполнено(ВыборкаПравило.ТоварнаяКатегория) Тогда
					Если СтрокаТаблицы.ТоварнаяКатегория <> ВыборкаПравило.ТоварнаяКатегория Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеТочкиЗаказа = ОкруглитьЧисло(СтрокаТаблицы.СредниеПродажиВДень*ВыборкаПравило.ДнейПоставки, 1,Истина);			
				СтрокаТаблицы.МинимальноеКоличествоЗапаса = ЗначениеТочкиЗаказа;
			КонецЦикла;
		КонецЕсли;			
		
		ТекущийАктив = 0;
		ПланПродаж   = 0;
		РекомендуетсяЗаказать = 0;
		Заказать     = 0;
		
		СредниеПродажи      = СтрокаТаблицы.СредниеПродажи;
		СредниеПродажиВДень = СтрокаТаблицы.СредниеПродажиВДень;
		ПроданоИтог         = СтрокаТаблицы.ПроданоВсего;
		СвободныйОстаток     = ?(СтрокаТаблицы.СвободныйОстаток < 0,0,СтрокаТаблицы.СвободныйОстаток);
		ЗаказаноПокупателями = ?(СтрокаТаблицы.ЗаказыПокупателейБезРезерва < 0,0,СтрокаТаблицы.ЗаказыПокупателейБезРезерва);
		ЗаказаноПоставщикам  = ?(СтрокаТаблицы.ЗаказаноПоставщикам < 0,0,СтрокаТаблицы.ЗаказаноПоставщикам);
		КоличествоКПередаче  = ?(СтрокаТаблицы.КоличествоКПередаче < 0,0,СтрокаТаблицы.КоличествоКПередаче);
		КоличествоКПолучению = ?(СтрокаТаблицы.КоличествоВПути < 0,0,СтрокаТаблицы.КоличествоВПути);
		МинимальноеКоличествоЗапаса  = СтрокаТаблицы.МинимальноеКоличествоЗапаса;
		МаксимальноеКоличествоЗапаса = СтрокаТаблицы.МаксимальноеКоличествоЗапаса;
		КоличествоДнейНаСкладе = СтрокаТаблицы.КоличествоДнейНаСкладе;
		ЧастотаПродаж = СтрокаТаблицы.КоличествоПериодовПродаж;
		
		ТекущийАктив = СвободныйОстаток + ЗаказаноПоставщикам - ЗаказаноПокупателями;		
		СтрокаТаблицы.ТекущийАктив = ТекущийАктив;
		
		Для Каждого ВыборкаПравило Из Объект.ПравилаРасчетаПотребностей Цикл			
			Если ЗначениеЗаполнено(ВыборкаПравило.ГруппаНоменклатуры) Тогда
				Если СтрокаТаблицы.ГруппаНоменклатуры <> ВыборкаПравило.ГруппаНоменклатуры Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			Если ЗначениеЗаполнено(ВыборкаПравило.ТоварнаяКатегория) Тогда
				Если СтрокаТаблицы.ТоварнаяКатегория <> ВыборкаПравило.ТоварнаяКатегория Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ВыборкаПравило.Производитель) Тогда
				Если СтрокаТаблицы.Производитель <> ВыборкаПравило.Производитель Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПравило.АВСКлассификация) Тогда
				Если СтрокаТаблицы.АВСКлассификация <> ВыборкаПравило.АВСКлассификация Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаПравило.НеЗаказывать Тогда
				Продолжить;
			КонецЕсли;
			
			КонтрольНовинокДата = ТекущаяДата() - 86400*ВыборкаПравило.ПорогНормальнойЛиквидностиВДнях;
			Если СтрокаТаблицы.мегапрайсДатаРегистрации >= КонтрольНовинокДата Тогда
				СтрокаТаблицы.Новинка = Истина;
				Продолжить;
			КонецЕсли;
			
			//ПЛАН ПРОДАЖ
			КоличествоПериодовЗаказа = ВыборкаПравило.КоличествоПериодовЗаказа;
			Если ВариантАнализаИПланирования = "РежимПоПериодам" Тогда
				ПланПродаж = СредниеПродажи * КоличествоПериодовЗаказа; 
			ИначеЕсли ВариантАнализаИПланирования = "РежимПоДням" Тогда
				ПланПродаж = СредниеПродажиВДень * КоличествоПериодовЗаказа; 
			КонецЕсли;	

			//НЕЛИКВИДЫ
			КоличествоКВозврату = 0;
			Если ВыборкаПравило.ПорогНормальнойЛиквидности > 0 Тогда
				Если ВыборкаПравило.ПорогНормальнойЛиквидности < СтрокаТаблицы.Ликвидность Тогда
					КоличествоКВозврату = СвободныйОстаток - СтрокаТаблицы.ПланПродаж;
				КонецЕсли;
			КонецЕсли;	
			Если СтрокаТаблицы.КоличествоДнейНаСкладе > ВыборкаПравило.КоличествоПериодовЗаказа Тогда
				Если ВыборкаПравило.ПорогНормальнойЛиквидностиВДнях < СтрокаТаблицы.ЛиквидностьВДнях Тогда
					КоличествоКВозврату = СвободныйОстаток - СтрокаТаблицы.ПланПродаж;
				КонецЕсли;
			КонецЕсли;
			
			Если СвободныйОстаток > 0 И СтрокаТаблицы.ПроданоВсего = 0 Тогда
				СтрокаТаблицы.КоличествоКВозврату = СвободныйОстаток;
			КонецЕсли;
			
			//ПРОИЗВОЛЬНАЯ ФОРМУЛА
			Если ЗначениеЗаполнено(ВыборкаПравило.ТекстАлгоритма) Тогда
				Выполнить(ВыборкаПравило.ТекстАлгоритма);
			Иначе
				
				Если ВариантАнализаИПланирования = "РежимМинимальныеОстатки" Тогда
					
					Если СтрокаТаблицы.МинимальноеКоличествоЗапаса > 0 Тогда // отрабатываем только позиции у которых установлена точка заказа
						// если минимальный запас не установлен, то считаем его совпадающим с точкой заказа	
						СводныйОстаток = СвободныйОстаток + ЗаказаноПоставщикам;				
						МинимальноеКоличествоЗапаса = МинимальноеКоличествоЗапаса; 
						
						Если СводныйОстаток <= МинимальноеКоличествоЗапаса Тогда
							РекомендуетсяЗаказать = МаксимальноеКоличествоЗапаса;
						КОнецЕсли;
					КонецЕсли;	
					
				ИначеЕсли ВариантАнализаИПланирования = "РежимПоПериодам" ИЛИ ВариантАнализаИПланирования = "РежимПоДням" Тогда
					
					//----------> По товарам, которым указаны точки заказов, всегда расчитывать исключительно по ним.
					Если МинимальноеКоличествоЗапаса > 0 Тогда 
						ОстатокСУчетомЗаказов = СвободныйОстаток + ЗаказаноПоставщикам;	
						Разница = МинимальноеКоличествоЗапаса - ОстатокСУчетомЗаказов; 
						
						Если Разница >= 0 Тогда
							РекомендуетсяЗаказать = МаксимальноеКоличествоЗапаса - ОстатокСУчетомЗаказов;
						КонецЕсли;
						//----------> В остальных случаях делаем расчет по продажам
					Иначе 
						РекомендуетсяЗаказать = ПланПродаж - ТекущийАктив;
					КонецЕсли;				
					РекомендуетсяЗаказать = ?(РекомендуетсяЗаказать < 0,0,РекомендуетсяЗаказать);
					
				ИначеЕсли ВариантАнализаИПланирования = "РежимЗаказыПокупателей" Тогда
					
					РекомендуетсяЗаказать = ЗаказаноПокупателями - СвободныйОстаток - ЗаказаноПоставщикам;
					РекомендуетсяЗаказать = ?(РекомендуетсяЗаказать < 0,0,РекомендуетсяЗаказать);
					
				КонецЕсли;				
			КонецЕсли;
			
			СтрокаТаблицы.ПланПродаж = ПланПродаж;
			СтрокаТаблицы.КоличествоКВозврату = КоличествоКВозврату;
			СтрокаТаблицы.МинимальноеКоличествоЗапаса = МинимальноеКоличествоЗапаса;
            СтрокаТаблицы.МаксимальноеКоличествоЗапаса = МаксимальноеКоличествоЗапаса;
						
			СтрокаТаблицы.КоэффициентСезонности = ВыборкаПравило.КоэффициентСезонности;
			Если СтрокаТаблицы.КоэффициентСезонности > 0 Тогда
				РекомендуетсяЗаказать = РекомендуетсяЗаказать * СтрокаТаблицы.КоэффициентСезонности;
			КонецЕсли;
			
			ТочностьОкругления = ?(ВыборкаПравило.ТочностьОкругления > 0,ВыборкаПравило.ТочностьОкругления,1);
			СтрокаТаблицы.РекомендуетсяЗаказать = ОкруглитьЧисло(РекомендуетсяЗаказать, ТочностьОкругления);				
			СтрокаТаблицы.Заказать = ОкруглитьЧисло(Заказать, ВыборкаПравило.ТочностьОкругления);
			Если СтрокаТаблицы.Заказать = 0 Тогда;		
				СтрокаТаблицы.Заказать = СтрокаТаблицы.РекомендуетсяЗаказать;								
			КонецЕсли;
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Заказать * СтрокаТаблицы.Цена;
			
			Если РекомендуетсяЗаказать > 0 ИЛИ Заказать > 0 Тогда
				СтрокаТаблицы.КЗаказу = Истина;
			Иначе
				СтрокаТаблицы.КЗаказу = Ложь;
			КонецЕсли;	
		КонецЦикла;					
		
		СтрокаТаблицы.КоличествоПереместить = 0;
		Если ЗначениеЗаполнено(Объект.ГлавныйСклад) Тогда
			ГлавныйСкладОстатокПосле = СтрокаТаблицы.ГлавныйСкладОстаток - СтрокаТаблицы.ГлавныйМинимальноеКоличествоЗапаса;
			
			СтрокаТаблицы.РекомендуетсяЗаказать = СтрокаТаблицы.РекомендуетсяЗаказать;
			Если ГлавныйСкладОстатокПосле > 0 И СтрокаТаблицы.РекомендуетсяЗаказать > 0 Тогда
				РазницаЧисел = МИН(ГлавныйСкладОстатокПосле,СтрокаТаблицы.РекомендуетсяЗаказать);
				Если РазницаЧисел > 0 Тогда
					СтрокаТаблицы.КоличествоПереместить = РазницаЧисел;
					СтрокаТаблицы.Заказать = СтрокаТаблицы.РекомендуетсяЗаказать - СтрокаТаблицы.КоличествоПереместить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	НавигацияПроизводители.Очистить();
	НавигацияАВСКлассы.Очистить();
	
	НавигацияМаркиНоменклатуры.Очистить();
	НавигацияВидыНоменклатуры.Очистить();
	НавигацияТоварныеКатегории.Очистить();
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ГруппыНоменклатурыРеквизит = РеквизитФормыВЗначение("ГруппыНоменклатуры");
	ОбработкаОбъект.ЗаполнитьДанныеНоменклатуры(Объект.ТаблицаНоменклатуры,ГруппыНоменклатурыРеквизит);	
	ЗначениеВРеквизитФормы(ГруппыНоменклатурыРеквизит, "ГруппыНоменклатуры");
	//ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ВыполнитьРасчет();
	
	//////////////////////////////////////////////

	СверткаТабл = Объект.ТаблицаНоменклатуры.Выгрузить(,"Производитель,СуммаВыручки"); 
	СверткаТабл.Свернуть("Производитель","СуммаВыручки");
	СверткаТабл.Сортировать("СуммаВыручки");
	Для Каждого Стр Из СверткаТабл Цикл
		НоваяСтрока = НавигацияПроизводители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.Наименование = Стр.Производитель;
	КонецЦикла;
	НавигацияПроизводители.Сортировать("Наименование");
	
	НоваяСтрока = НавигацияПроизводители.Вставить(0);
	НоваяСтрока.Наименование = "[Вся номенклатура]";
	НоваяСтрока.СуммаВыручки = НавигацияПроизводители.Итог("СуммаВыручки");
	
	//////////////////////////////////////////////
	
	СверткаТабл = Объект.ТаблицаНоменклатуры.Выгрузить(,"АВСКлассификация,СуммаВыручки"); 
	СверткаТабл.Свернуть("АВСКлассификация","СуммаВыручки");
	СверткаТабл.Сортировать("СуммаВыручки");
	Для Каждого Стр Из СверткаТабл Цикл
		НоваяСтрока = НавигацияАВСКлассы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.Наименование = Стр.АВСКлассификация;
	КонецЦикла;
	
	НоваяСтрока = НавигацияАВСКлассы.Вставить(0);
	НоваяСтрока.Наименование = "[Вся номенклатура]";
	НоваяСтрока.СуммаВыручки = НавигацияАВСКлассы.Итог("СуммаВыручки");

	//////////////////////////////////////////////

	СверткаТабл = Объект.ТаблицаНоменклатуры.Выгрузить(,"МаркаНоменклатуры,СуммаВыручки"); 
	СверткаТабл.Свернуть("МаркаНоменклатуры","СуммаВыручки");
	СверткаТабл.Сортировать("СуммаВыручки");
	Для Каждого Стр Из СверткаТабл Цикл
		НоваяСтрока = НавигацияМаркиНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.Наименование = Стр.МаркаНоменклатуры;
	КонецЦикла;
	НавигацияМаркиНоменклатуры.Сортировать("Наименование");
	
	НоваяСтрока = НавигацияМаркиНоменклатуры.Вставить(0);
	НоваяСтрока.Наименование = "[Вся номенклатура]";
	НоваяСтрока.СуммаВыручки = НавигацияМаркиНоменклатуры.Итог("СуммаВыручки");

	//////////////////////////////////////////////

	СверткаТабл = Объект.ТаблицаНоменклатуры.Выгрузить(,"ВидНоменклатуры,СуммаВыручки"); 
	СверткаТабл.Свернуть("ВидНоменклатуры","СуммаВыручки");
	СверткаТабл.Сортировать("СуммаВыручки");
	Для Каждого Стр Из СверткаТабл Цикл
		НоваяСтрока = НавигацияВидыНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.Наименование = Стр.ВидНоменклатуры;
	КонецЦикла;
	НавигацияВидыНоменклатуры.Сортировать("Наименование");
	
	НоваяСтрока = НавигацияВидыНоменклатуры.Вставить(0);
	НоваяСтрока.Наименование = "[Вся номенклатура]";
	НоваяСтрока.СуммаВыручки = НавигацияВидыНоменклатуры.Итог("СуммаВыручки");

	//////////////////////////////////////////////

	СверткаТабл = Объект.ТаблицаНоменклатуры.Выгрузить(,"ТоварнаяКатегория,СуммаВыручки"); 
	СверткаТабл.Свернуть("ТоварнаяКатегория","СуммаВыручки");
	СверткаТабл.Сортировать("СуммаВыручки");
	Для Каждого Стр Из СверткаТабл Цикл
		НоваяСтрока = НавигацияТоварныеКатегории.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.Наименование = Стр.ТоварнаяКатегория;
	КонецЦикла;
	НавигацияТоварныеКатегории.Сортировать("Наименование");
	
	НоваяСтрока = НавигацияТоварныеКатегории.Вставить(0);
	НоваяСтрока.Наименование = "[Вся номенклатура]";
	НоваяСтрока.СуммаВыручки = НавигацияТоварныеКатегории.Итог("СуммаВыручки");

КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьАнализ(Команда)
	
	Если Объект.ТаблицаНоменклатуры.Количество() > 0 Тогда
		Ответ = Вопрос("В таблице есть данные. Вы уверены что хотите сформировать отчет?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	 	
	Для Каждого СтрПоказатель Из Объект.ПоказателиТаблицы Цикл		
		Попытка
			КолонкаСписка = Элементы["ТаблицаНоменклатуры"+СтрПоказатель.ИмяКолонки];
			Если НЕ КолонкаСписка = Неопределено Тогда
				КолонкаСписка.Видимость = СтрПоказатель.Пометка;
			КонецЕсли;
		Исключение
		КонецПопытки;		
	КонецЦикла;		
	
	Если Объект.ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ТаблицаНоменклатурыХарактеристика.Видимость = Истина;
	Иначе
		Элементы.ТаблицаНоменклатурыХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	СформироватьНаСервере();
	
	ОбработкаПрерыванияПользователя();
	
	Элементы.Закладки.ТекущаяСтраница = ЭтаФорма.Элементы.Закладки.ПодчиненныеЭлементы.ТаблицаДанных;
	
	Если ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		Элементы.ТаблицаНоменклатурыЦена.Видимость = Истина;
	Иначе
		Элементы.ТаблицаНоменклатурыЦена.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ГлавныйСклад) Тогда
		Элементы.ГруппаГлавныйСклад.Видимость = Истина;
		Элементы.ТаблицаНоменклатурыКоличествоПереместить.Видимость = Истина;
	Иначе
		Элементы.ГруппаГлавныйСклад.Видимость = Ложь;
		Элементы.ТаблицаНоменклатурыКоличествоПереместить.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТаблицаНоменклатурыГлавныйСкладОстаток.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыГлавныйМинимальноеКоличествоЗапаса.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыКоличествоПереместить.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;

	Элементы.ТаблицаНоменклатурыЗаказать.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыРекомендуетсяЗаказать.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыПланПродаж.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыПроданоВсего.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыКоличествоОстаток.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыРезервыНаСкладах.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыЗаказаноПокупателями.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыЗаказаноПоставщикам.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыМинимальноеКоличествоЗапаса.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыМаксимальноеКоличествоЗапаса.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыКоличествоВПути.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыКоличествоКПередаче.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	
	Элементы.ТаблицаНоменклатурыЗаказыНаВнутреннееПотребление.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыЗаказыНаСборку.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыЗаказыНаПеремещение.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	
	Элементы.ТаблицаНоменклатурыВРезервеПодЗаказ.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыСвободныйОстаток.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыЗаказыПокупателейБезРезерва.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;
	Элементы.ТаблицаНоменклатурыТекущийАктив.Формат = "ЧДЦ="+Объект.ФорматЧиселКолонок;

КонецПроцедуры



//============================================================================
// ПАНЕЛЬ ИНФОРМАЦИИ

&НаСервереБезКонтекста
Функция ИнформацияСформироватьОстаткиПоСкладам(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвободныеОстатки.Склад.Родитель КАК СкладРодитель,
	|	СвободныеОстатки.Склад КАК Склад,
	|	СвободныеОстатки.Характеристика КАК Характеристика,
	|	СУММА(СвободныеОстатки.ВНаличииОстаток) КАК ВНаличии,
	|	СУММА(СвободныеОстатки.ВРезервеСоСкладаОстаток) КАК ВРезервеСоСклада,
	|	СУММА(СвободныеОстатки.ВРезервеПодЗаказОстаток) КАК ВРезервеПодЗаказ,
	|	0 КАК МинимальноеКоличествоЗапаса,
	|	0 КАК МаксимальноеКоличествоЗапаса
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Номенклатура = &ВыбНоменклатура
	|				И Характеристика = &ВыбХарактеристика) КАК СвободныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстатки.Склад.Родитель,
	|	СвободныеОстатки.Склад,
	|	СвободныеОстатки.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварныеОграничения.Склад.Родитель,
	|	ТоварныеОграничения.Склад,
	|	ТоварныеОграничения.Характеристика,
	|	0,
	|	0,
	|	0,
	|	ТоварныеОграничения.МинимальноеКоличествоЗапаса,
	|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|ГДЕ
	|	ТоварныеОграничения.Номенклатура = &ВыбНоменклатура
	|	И ТоварныеОграничения.Характеристика = &ВыбХарактеристика
	|ИТОГИ
	|	СУММА(ВНаличии),
	|	СУММА(ВРезервеСоСклада),
	|	СУММА(ВРезервеПодЗаказ),
	|	СУММА(МинимальноеКоличествоЗапаса),
	|	СУММА(МаксимальноеКоличествоЗапаса)
	|ПО
	|	СкладРодитель,
	|	Склад,
	|	Характеристика";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСкладРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкладРодитель");
	Пока ВыборкаСкладРодитель.Следующий() Цикл					
		ВыборкаСклад = ВыборкаСкладРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл	
			Склад = ВыборкаСклад.Склад;
			
			ВыборкаХарактеристика = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаХарактеристика.Следующий() Цикл		
				
				НоваяСтрока = Новый Структура("Склад, Характеристика, ВНаличии, ВРезервеСоСклада, ВРезервеПодЗаказ, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристика);
				
				ТаблицаРезультат.Добавить(НоваяСтрока);					
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияРасшифровкаЦеныПоставщиков(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	Если ПараметрыЗапроса.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер КАК Поставщик,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера КАК ПрайсПартнера,
		|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Количество) КАК ОстатокКонтрагента,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.СрокПоставки) КАК СрокПоставки,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Период) КАК ДатаЦены,
		|	0 КАК ЦенаПересчет,
		|	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток,
		|	СУММА(ЗаказыПоставщикамОстатки.КОформлениюОстаток) КАК КОформлениюОстаток
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура = &ВыбНоменклатура
		|				И ХарактеристикаНоменклатуры = &ВыбХарактеристика) КАК ЦеныНоменклатурыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
		|		ПО ЦеныНоменклатурыКонтрагентов.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.Характеристика
		|			И ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер = ЗаказыПоставщикамОстатки.ЗаказПоставщику.Партнер
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер,
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера,
		|	ЦеныНоменклатурыКонтрагентов.Валюта,
		|	ЦеныНоменклатурыКонтрагентов.Период,
		|	ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыКонтрагентов.ПрайсПартнера.Партнер.Наименование";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыКонтрагентов.Партнер КАК Поставщик,
		|	ЦеныНоменклатурыКонтрагентов.Валюта КАК Валюта,
		|	МИНИМУМ(ЦеныНоменклатурыКонтрагентов.Цена) КАК ЦенаПоставщика,
		|	0 КАК СрокПоставки,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентов.Период) КАК ДатаЦены,
		|	ЦеныНоменклатурыКонтрагентов.Характеристика КАК ХарактеристикаНоменклатуры,
		|	0 КАК ОстатокКонтрагента,
		|	0 КАК ЦенаПересчет,
		|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток,
		|	ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура = &ВыбНоменклатура
		|				И Характеристика = &ВыбХарактеристика
		|				И Партнер.Поставщик = ИСТИНА) КАК ЦеныНоменклатурыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
		|		ПО ЦеныНоменклатурыКонтрагентов.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ЦеныНоменклатурыКонтрагентов.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|			И ЦеныНоменклатурыКонтрагентов.Партнер = ЗаказыПоставщикамОстатки.ЗаказПоставщику.Партнер
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыКонтрагентов.Партнер,
		|	ЦеныНоменклатурыКонтрагентов.Валюта,
		|	ЦеныНоменклатурыКонтрагентов.Характеристика,
		|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток,
		|	ЗаказыПоставщикамОстатки.КОформлениюОстаток
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыКонтрагентов.Партнер.Наименование";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	ВозможныеПоставщикиТаб = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ВидЦенНоменклатуры) Тогда
		ВалютаРасчетная = ПараметрыЗапроса.ВидЦенНоменклатуры.ВалютаЦены;
	Иначе
		ВалютаРасчетная = ПараметрыЗапроса.Валюта;
	КонецЕсли;
	СтруктураВалютыРасчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
	
	Для Каждого ВыборкаСтрока Из ВозможныеПоставщикиТаб Цикл
		Если ВыборкаСтрока.ЦенаПоставщика = 0  Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСтрока.Валюта) И ВалютаРасчетная <> ВыборкаСтрока.Валюта Тогда
			//РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаСтрока.ЦенаПоставщика,ВыборкаСтрока.Валюта,ВалютаУпр,ТекущаяДата());	
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВыборкаСтрока.Валюта, ТекущаяДата());
			ВыборкаСтрока.ЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ВыборкаСтрока.ЦенаПоставщика, СтруктураВалюты, СтруктураВалютыРасчета);
		Иначе
			ВыборкаСтрока.ЦенаПересчет = ВыборкаСтрока.ЦенаПоставщика;
		КонецЕсли;
		
		НоваяСтрока = Новый Структура("ДатаЦены, Поставщик, СрокПоставки, ОстатокКонтрагента, ЦенаПоставщика, Валюта, ЦенаПересчет, ЗаказаноОстаток, КОформлениюОстаток");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьДинамикаПродаж(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ПериодичностьДляЗапроса = Строка(ПараметрыЗапроса.Периодичность);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.КоличествоОборот КАК КоличествоПродажи,
	|	ВложенныйЗапрос.КоличествоНачальныйОстаток КАК НачальныйОстаток,
	|	ВложенныйЗапрос.КоличествоКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) КАК Период,
	|		СУММА(ВложенныйЗапрос.КоличествоОборот) КАК КоличествоОборот,
	|		СУММА(ВложенныйЗапрос.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	|		СУММА(ВложенныйЗапрос.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(СвободныеОстатки.Период, ДЕНЬ) КАК Период,
	|			0 КАК КоличествоОборот,
	|			СвободныеОстатки.ВНаличииНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|			СвободныеОстатки.ВНаличииПриход КАК ВНаличииПриход,
	|			СвободныеОстатки.ВНаличииРасход КАК ВНаличииРасход,
	|			СвободныеОстатки.ВНаличииКонечныйОстаток КАК КоличествоКонечныйОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					ДЕНЬ,
	|					,
	|					Номенклатура = &УсловиеОтбора
	|						И Характеристика = &ВыбХарактеристика) КАК СвободныеОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(ПродажиОбороты.Период, ДЕНЬ),
	|			ПродажиОбороты.КоличествоОборот,
	|			0,
	|			0,
	|			0,
	|			0
	|		ИЗ
	|			РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, ДЕНЬ, ) КАК ПродажиОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|				ПО ПродажиОбороты.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|				ПО ПродажиОбороты.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		ГДЕ
	|			АналитикаНоменклатуры.Номенклатура = &УсловиеОтбора
	|			И АналитикаНоменклатуры.Характеристика = &ВыбХарактеристика
	|			И АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|ИТОГИ
	|	СУММА(КоличествоПродажи),
	|	СУММА(НачальныйОстаток),
	|	СУММА(КонечныйОстаток)
	|ПО
	|	Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)
	|АВТОУПОРЯДОЧИВАНИЕ";
				
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"День",ПериодичностьДляЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДЕНЬ",ПериодичностьДляЗапроса);
		
	Запрос = Новый Запрос;	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УсловиеОтбора", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыЗапроса.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыЗапроса.КонецПериода));
	Запрос.УстановитьПараметр("РабочийКалендарь", ПараметрыЗапроса.РабочийКалендарь);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");
	Пока Выборка.Следующий() Цикл			
		НоваяСтрока = Новый Структура("Период, КоличествоПродажи, НачальныйОстаток, КонечныйОстаток");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаИсторияПоступлений(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Период КАК Дата,
	|	ПоступлениеТоваровУслуг.Партнер КАК Партнер,
	|	ПоступлениеТоваровУслуг.Регистратор КАК ДокументЗакупки,
	|	СУММА(ПоступлениеТоваровУслуг.КоличествоОборот) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ПоступлениеТоваровУслуг.КоличествоОборот) > 0
	|			ТОГДА СУММА(ПоступлениеТоваровУслуг.СуммаОборот) / СУММА(ПоступлениеТоваровУслуг.КоличествоОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаЗакупки,
	|	ПоступлениеТоваровУслуг.Регистратор.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(&НачалоПериода, &КонецПериода, Регистратор, АналитикаУчетаНоменклатуры.Номенклатура = &ВыбНоменклатура) КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Период,
	|	ПоступлениеТоваровУслуг.Регистратор,
	|	ПоступлениеТоваровУслуг.Партнер,
	|	ПоступлениеТоваровУслуг.Регистратор.Валюта,
	|	ПоступлениеТоваровУслуг.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыЗапроса.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыЗапроса.КонецПериода));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, Партнер, ДокументЗакупки, Количество, ЦенаЗакупки, Валюта, Склад");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаЗаказыПоставщикам(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщикам.ЗаказаноОстаток) КАК Заказано,
	|	СУММА(ЗаказыПоставщикам.КОформлениюОстаток) КАК КОформлению
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			,
	|			Номенклатура = &ВыбНоменклатура
	|				И Характеристика = &ВыбХарактеристика) КАК ЗаказыПоставщикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, ЖелаемаяДатаПоступления, Контрагент, ЗаказПоставщику, Склад, Заказано, КОформлению");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаЗаказыКлиентов(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыКлиентов.ЗаказКлиента.Дата КАК Дата,
	|	ЗаказыКлиентов.ЗаказКлиента.Статус КАК Статус,
	|	ЗаказыКлиентов.ЗаказКлиента.Партнер КАК Партнер,
	|	ЗаказыКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказыКлиентов.ЗаказКлиента.Склад КАК Склад,
	|	СУММА(ЗаказыКлиентов.ЗаказаноОстаток) КАК Заказано,
	|	СУММА(ЗаказыКлиентов.КОформлениюОстаток) КАК КОформлению
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|			,
	|			Номенклатура = &ВыбНоменклатура
	|				И Характеристика = &ВыбХарактеристика) КАК ЗаказыКлиентов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.ЗаказКлиента.Дата,
	|	ЗаказыКлиентов.ЗаказКлиента,
	|	ЗаказыКлиентов.ЗаказКлиента.Склад,
	|	ЗаказыКлиентов.ЗаказКлиента.Статус,
	|	ЗаказыКлиентов.ЗаказКлиента.Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, Статус, Партнер, ЗаказКлиента, Склад, Заказано, КОформлению");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияРасшифровкаИсторияПродажНоменклатуры(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Продажи.Период КАК Дата,
	|	Продажи.Регистратор КАК ДокументПродажи,
	|	Продажи.Склад КАК Склад,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	СУММА(Продажи.КоличествоОборот) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(Продажи.КоличествоОборот) > 0
	|			ТОГДА СУММА(Продажи.СуммаВыручкиОборот) / СУММА(Продажи.КоличествоОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, Регистратор, ) КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Продажи.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО Продажи.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	АналитикаНоменклатуры.Номенклатура = &ВыбНоменклатура
	|	И АналитикаНоменклатуры.Характеристика = &ВыбХарактеристика
	|	И АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Склад,
	|	АналитикаПоПартнерам.Партнер,
	|	Продажи.Период,
	|	Продажи.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода",ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",ПараметрыЗапроса.КонецПериода);
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, ДокументПродажи, Склад, Партнер, Количество, Цена");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаСервереБезКонтекста
Функция мИнформацияПолучитьАналоги(ТекущиеДанныеСтроки) Экспорт
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	мегапрайсВзаимозаменяемостьНоменклатуры.АналогНоменклатура КАК АналогНоменклатура,
	|	мегапрайсВзаимозаменяемостьНоменклатуры.АртикулАналога КАК АналогАртикул,
	|	мегапрайсВзаимозаменяемостьНоменклатуры.АналогНоменклатура.Производитель КАК Производитель
	|ИЗ
	|	РегистрСведений.мегапрайсВзаимозаменяемостьНоменклатуры КАК мегапрайсВзаимозаменяемостьНоменклатуры
	|ГДЕ
	|	мегапрайсВзаимозаменяемостьНоменклатуры.Номенклатура = &ВыбНоменклатура";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ТекущиеДанныеСтроки.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("АналогНоменклатура, АналогАртикул, Производитель, Замена");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции


&НаСервереБезКонтекста
Функция РасшифровкиСформироватьРасшифровкаГрафикДвиженияТоваров(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикПоступленияТоваровОстатки.Склад КАК Склад,
	|	ГрафикПоступленияТоваровОстатки.ДатаСобытия КАК ДатаСобытия,
	|	ГрафикПоступленияТоваровОстатки.Назначение КАК Назначение,
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоИзЗаказовОстаток) КАК КоличествоИзЗаказов,
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоПодЗаказОстаток) КАК КоличествоПодЗаказ,
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоИзЗаказовСНеподтвержденнымиОстаток) КАК КоличествоИзЗаказовСНеподтвержденными,
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоПодЗаказСНеподтвержденнымиОстаток) КАК КоличествоПодЗаказСНеподтвержденными,
	|	0 КАК КоличествоИзЗаказовОтгрузка,
	|	0 КАК КоличествоПодЗаказОтгрузка,
	|	0 КАК КоличествоНеобеспеченоОтгрузка
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров.Остатки(, Номенклатура = &ВыбНоменклатура) КАК ГрафикПоступленияТоваровОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПоступленияТоваровОстатки.Склад,
	|	ГрафикПоступленияТоваровОстатки.ДатаСобытия,
	|	ГрафикПоступленияТоваровОстатки.Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикПоступленияТоваровОстатки.Склад,
	|	ГрафикПоступленияТоваровОстатки.ДатаОтгрузки,
	|	ГрафикПоступленияТоваровОстатки.Назначение,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоИзЗаказовОстаток),
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоПодЗаказОстаток),
	|	СУММА(ГрафикПоступленияТоваровОстатки.КоличествоНеобеспеченоОстаток)
	|ИЗ
	|	РегистрНакопления.ГрафикОтгрузкиТоваров.Остатки(, Номенклатура = &ВыбНоменклатура) КАК ГрафикПоступленияТоваровОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПоступленияТоваровОстатки.Склад,
	|	ГрафикПоступленияТоваровОстатки.ДатаОтгрузки,
	|	ГрафикПоступленияТоваровОстатки.Назначение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Склад, ДатаСобытия, Назначение, КоличествоИзЗаказов, КоличествоПодЗаказ, КоличествоИзЗаказовСНеподтвержденными, КоличествоПодЗаказСНеподтвержденными,КоличествоИзЗаказовОтгрузка,КоличествоПодЗаказОтгрузка,КоличествоНеобеспеченоОтгрузка");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции


&НаСервере
Функция ПолучитьКартинкуНоменклатуры(Номенклатура)
	
	//УстановитьПривилегированныйРежим(Истина);
	
	ФайлКартинкиНоменклатуры = Номенклатура.ФайлКартинки;
	
	Возврат ФайлКартинкиНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ИнформацияПолучитьСвойстваНоменклатуры(ТекущиеДанныеСтроки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Свойство КАК Свойство,
	|	СпрНоменклатура.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &ТекНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойство";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекНоменклатура", ТекущиеДанныеСтроки.Номенклатура);
	
	СвойстваНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ИнформацияПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки)
	
	ПодборКартинкаНоменклатуры = ПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);		
	Если ЗначениеЗаполнено(ПодборКартинкаНоменклатуры) Тогда
		КартинкаНоменклатуры = ПолучитьНавигационнуюСсылкуКартинки(ПодборКартинкаНоменклатуры, УникальныйИдентификатор)
	Иначе
		КартинкаНоменклатуры = "";
	Конецесли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеНоменклатуры(Номенклатура)
	
	ОписаниеНоменклатуры = Номенклатура.Описание;
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции




&НаКлиенте
Процедура ДопИнформацияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраницаРасшифровки = Элементы.ДопИнформация.ТекущаяСтраница;
	
	ТаблицаНоменклатурыПриАктивизацииСтроки("");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,НомерСтраницы)
	
	Если НомерСтраницы = 5 Тогда
		
		СтруктураИнформации = ИнформацияРасшифровкаЦеныПоставщиков(ПараметрыЗапроса);
		РасшифровкаЦеныПоставщиков.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЦеныПоставщиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;	
		
		РасшифровкаЦеныПоставщиков.Сортировать("ЦенаПересчет Возр");

	ИначеЕсли НомерСтраницы = 20 Тогда
		
		СтруктураИнформации = РасшифровкиСформироватьРасшифровкаГрафикДвиженияТоваров(ПараметрыЗапроса);
		РасшифровкаГрафикДвиженияТоваров.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаГрафикДвиженияТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;			
	
	ИначеЕсли НомерСтраницы = 4 Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаЗаказыПоставщикам(ПараметрыЗапроса);
		РасшифровкаЗаказыПоставщикам.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЗаказыПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;	
		
	ИначеЕсли НомерСтраницы = 1 Тогда
		
		СтруктураИнформации = ИнформацияСформироватьОстаткиПоСкладам(ПараметрыЗапроса);
		РасшифровкаОстаткиТоваров.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаОстаткиТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;			
		
	ИначеЕсли НомерСтраницы = 2 Тогда
		
		СтруктураИнформации = ИнформацияСформироватьДинамикаПродаж(ПараметрыЗапроса);
		Объект.ДинамикаПродаж.Очистить();
		
		ДинамикаОборотов.Обновление = Истина;
		ДинамикаОборотов.Очистить();

		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = Объект.ДинамикаПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;		
				
				
		Объект.ДинамикаПродаж.Сортировать("Период ВОЗР");
		Для Каждого Выборка Из Объект.ДинамикаПродаж Цикл	
			ВыборкаПериод = Выборка.Период;
			ВыборкаКоличествоОборот = Выборка.КоличествоПродажи;
			ВыборкаНачальныйОстаток = Выборка.НачальныйОстаток;
			ВыборкаКонечныйОстаток  = Выборка.КонечныйОстаток;
			
			СерияПродажи = ДинамикаОборотов.УстановитьСерию("Продажи по перидам");
			СерияПродажи.Текст       = "Продажи по перидам";
			СерияПродажи.Расшифровка = "Продажи по перидам";
			
			СерияОстатки = ДинамикаОборотов.УстановитьСерию("Остатки по перидам");
			СерияОстатки.Текст       = "Остатки по перидам";
			СерияОстатки.Расшифровка = "Остатки по перидам";

            Точка  = ДинамикаОборотов.УстановитьТочку(Формат(ВыборкаПериод, "ДФ = ""дд ММММ"""));	
			//Точка  = ДинамикаОборотов.УстановитьТочку(ПолучитьФорматДаты(ВыборкаПериод, Объект.Периодичность));	
			ДинамикаОборотов.УстановитьЗначение(Точка, СерияПродажи, ВыборкаКоличествоОборот, СерияПродажи.Расшифровка,ВыборкаКоличествоОборот);
			ДинамикаОборотов.УстановитьЗначение(Точка, СерияОстатки, ВыборкаНачальныйОстаток, СерияОстатки.Расшифровка,ВыборкаНачальныйОстаток);
		КонецЦикла;
		Объект.ДинамикаПродаж.Сортировать("Период УБЫВ");
		
		ДинамикаОборотов.ОбластьПостроения.ВертикальныеМетки = Истина;
		ДинамикаОборотов.АвтоТранспонирование = Истина;
		ДинамикаОборотов.Обновление = Истина;
		
	ИначеЕсли НомерСтраницы = 3 Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаИсторияПоступлений(ПараметрыЗапроса);
		РасшифровкаИсторияПоступлений.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаИсторияПоступлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;			
		
	ИначеЕсли НомерСтраницы = 6 Тогда
		
		СтруктураИнформации = ИнформацияСформироватьРасшифровкаЗаказыКлиентов(ПараметрыЗапроса);
		РасшифровкаЗаказыКлиентов.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаЗаказыКлиентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;			
		
	ИначеЕсли НомерСтраницы = 7 Тогда
		
		СтруктураИнформации = ИнформацияРасшифровкаИсторияПродажНоменклатуры(ПараметрыЗапроса);
		РасшифровкаИсторияПродажНоменклатуры.Очистить();
		
		Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
			НоваяСтрока = РасшифровкаИсторияПродажНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
		КонецЦикла;			
		
	КонецЕсли;
	
КонецПроцедуры

//============================================================================
// ДЕРЕВО НОМЕНКЛАТУРЫ


&НаСервере
Процедура ПоказатьПодчиненныйСправочник(ТекущиеДанные)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ТекНоменклатура";	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекНоменклатура",ТекущиеДанные.Номенклатура);
	Запрос.Текст = ТекстЗапроса;
	
	СписокКартинокТовара = Запрос.Выполнить().Выгрузить();
	
	НомерКартинки = 0;
	Для Каждого Выборка Из СписокКартинокТовара Цикл		
		НомерКартинки = НомерКартинки + 1;
		ИмяРеквизита = "КартинкаТовара"+НомерКартинки;
		
		ЭтотОбъект[ИмяРеквизита] = ПолучитьНавигационнуюСсылкуКартинки(Выборка.ПрисоединенныйФайл, УникальныйИдентификатор);
		
		Если НомерКартинки = 5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкиПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки)
	
	ПодборКартинкаНоменклатуры = ПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);		
	Если ЗначениеЗаполнено(ПодборКартинкаНоменклатуры) Тогда
		КартинкаНоменклатуры = ПолучитьНавигационнуюСсылкуКартинки(ПодборКартинкаНоменклатуры, УникальныйИдентификатор)
	Иначе
		КартинкаНоменклатуры = "";
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ИнформацияОТовареПрочитана Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыЗапроса.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
	ПараметрыЗапроса.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	ПараметрыЗапроса.Вставить("ВидЦенНоменклатуры", Объект.ВидЦенНоменклатуры);
	ПараметрыЗапроса.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗапроса.Вставить("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	ПараметрыЗапроса.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
	ПараметрыЗапроса.Вставить("РабочийКалендарь", Объект.РабочийКалендарь);
	ПараметрыЗапроса.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыЗапроса.Вставить("КоличествоПериодовАнализа", Объект.КоличествоПериодовАнализа);
	
	Если ТекущаяСтраницаРасшифровки = ЗакладкаПоставщики Тогда
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,5);
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = Элементы.ГрафикДвиженияТоваров Тогда		
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,20);	
	
	ИначеЕсли ТекущаяСтраницаРасшифровки = ЗакладкаТекущиеОстатки Тогда
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,1);
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = ЗакладкаДинамика Тогда
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,2);	
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = ЗакладкаРасшифровкаИсторияЗакупок Тогда
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,3);	
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = ЗакладкаРасшифровкаЗаказыПоставщикам Тогда
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,4);	
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = ЗакладкаРасшифровкаЗаказыКлиентов Тогда
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,6);	
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = Элементы.ЗакладкаИнформацияОТоваре Тогда	
		
		ИнформацияПолучитьСвойстваНоменклатуры(ПараметрыЗапроса);
		ИнформацияПолучитьКартинкуНоменклатуры(ПараметрыЗапроса);		
		ОписаниеНоменклатуры = ПолучитьОписаниеНоменклатуры(ТекущиеДанные.Номенклатура);	
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = Элементы.ЗакладкаИсторияПродаж Тогда	
		
		ОбновитьДанныеДополнительнойИнформации(ПараметрыЗапроса,7);	
		
	ИначеЕсли ТекущаяСтраницаРасшифровки = Элементы.Картинки Тогда	
		
		Для Ном = 1 По 5 Цикл
			ИмяРеквизита = "КартинкаТовара"+Ном;
			
			ЭтотОбъект[ИмяРеквизита] = ""; 
		КонецЦикла;

		ПоказатьПодчиненныйСправочник(ПараметрыЗапроса);
		
	КонецЕсли;	
	
	ИнформацияОТовареПрочитана = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ИнформацияОТовареПрочитана = Ложь;

	Если ПоказатьРасшифровки Тогда 			
		ТаблицаНоменклатурыПриАктивизацииСтрокиОбработчикОжидания();
	КонецЕсли;
	
КонецПроцедуры




&НаКлиенте
Процедура ТаблицаНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Строка = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	
	Если Строка.Заказать > 0 Тогда
		Строка.КЗаказу = Истина;
	Иначе
		Если Строка.РекомендуетсяЗаказать > 0 Тогда
			Строка.КЗаказу = Истина;
		Иначе
			Строка.КЗаказу = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Строка.Сумма = Строка.Заказать * Строка.Цена;
	
КонецПроцедуры


&НаКлиенте
Процедура ДействияФормыУстановитьАвторасчетЗаказа(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьРасчет();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияФормыОбнулитьЗаказать()
	
	Для Каждого ВыборкаСтрока Из Объект.ТаблицаНоменклатуры Цикл		
		ВыборкаСтрока.Заказать = 0;									
		ВыборкаСтрока.Сумма = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыОбнулитьЗаказать(Команда)
	
	Ответ = Вопрос("Вы уверены ?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьДействияФормыОбнулитьЗаказать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыЗаказатьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры



//============================================================================
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ

&НаКлиенте
Процедура ОтрытьФормированиеЗаказов(Команда)
	
	АдресПередаваемыхПараметров = ПоместитьДанныеВоВременноеХранилище();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	СтруктураПараметров.Вставить("ИспользоватьМегапрайс",Объект.ИспользоватьМегапрайс);
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширенныйПомощникЗакупок.Форма.ШахматкаПоставщиков",СтруктураПараметров,ЭтаФорма); 
	Исключение
		ОткрытьФорму("Обработка.мегапрайсРасширенныйПомощникЗакупок.Форма.ШахматкаПоставщиков",СтруктураПараметров,ЭтаФорма); 
	КОнецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтрытьФормированиеЗаказовОбычное(Команда)
	
	АдресПередаваемыхПараметров = ПоместитьДанныеВоВременноеХранилище();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Адрес",АдресПередаваемыхПараметров);
	СтруктураПараметров.Вставить("ИспользоватьМегапрайс",Объект.ИспользоватьМегапрайс);
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширенныйПомощникЗакупок.Форма.ФормированиеЗаказов",СтруктураПараметров,ЭтаФорма); 
	Исключение
		ОткрытьФорму("Обработка.мегапрайсРасширенныйПомощникЗакупок.Форма.ФормированиеЗаказов",СтруктураПараметров,ЭтаФорма); 
	КОнецПопытки;
	
КонецПроцедуры



//============================================================================
// ЖУРНАЛ ЗАКАЗОВ

&НаКлиенте
Процедура СписокПоставщиковЖурналЗаказыПоставщикамПриАктивизацииСтроки(Элемент)
	
	ЖурналЗаказовУстановитьОтборПоПартнеру("");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналЗаказовУстановитьОтборПоПартнеру(Команда)
	
	Если НЕ Элементы.ЗаказыПоставщикамПартнеры.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЗаказыПоставщикам.Отбор,
		"Партнер",
		Элементы.ЗаказыПоставщикамПартнеры.ТекущиеДанные.Партнер,
		ВидСравненияКомпоновкиДанных.Равно, ,УстановитьОтборЗаказовПоПартнеру);
	КОнецЕсли;
	
КонецПроцедуры



//============================================================================
// ЖУРНАЛ ЗАКАЗОВ

&НаКлиенте
Процедура СписокПокупателейЖурналЗаказыКлиентовПриАктивизацииСтроки(Элемент)
	
	ЖурналЗаявокУстановитьОтборПоПартнеру("");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналЗаявокУстановитьОтборПоПартнеру(Команда)
	
	Если НЕ Элементы.ЖурналЗаказыКлиентовПартнеры.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЖурналЗаказыКлиентов.Отбор,
		"Партнер",
		Элементы.ЖурналЗаказыКлиентовПартнеры.ТекущиеДанные.Партнер,
		ВидСравненияКомпоновкиДанных.Равно, ,УстановитьОтборЗаказовПоПартнеру);
	КонецЕсли;
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция НайтиТоварПоКоду(КодТовара,АртикулТовара)
	
	НайденЭлемент = Справочники.Номенклатура.НайтиПоКоду(КодТовара);
	Если НайденЭлемент = Справочники.Номенклатура.ПустаяСсылка() Тогда
		 НайденЭлемент = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",АртикулТовара);
	КонецЕсли;
	
	Возврат НайденЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТаблицуИзФайла(Команда)
	
	Объект.ТаблицаИзЭкселя.Очистить();
	
	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл	
		
		КодТовара = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(1,"ЧГ=")).Текст);
        АртикулТовара = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(2,"ЧГ=")).Текст);
		ЗаказатьКол = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(3,"ЧГ=")).Текст);
		
		НайденЭлемент = НайтиТоварПоКоду(КодТовара,АртикулТовара);
		
		Если НайденЭлемент <> Неопределено Тогда
			НоваяСтрока = Объект.ТаблицаИзЭкселя.Добавить();
			НоваяСтрока.Номенклатура = НайденЭлемент;
			НоваяСтрока.Заказать = ЗаказатьКол;
		КонецЕсли;		
    КонецЦикла;		

КонецПроцедуры



&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьИнтервалНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗакупок(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", ПериодЗакупокНачало, ПериодЗакупокКонец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗакупокЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗакупокЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПериодЗакупокНачало = РезультатВыбора.НачалоПериода;
	ПериодЗакупокКонец = РезультатВыбора.КонецПериода;

КонецПроцедуры


//============================================================================
// ВЫЗОВ ТИПОВЫХ ОТЧЕТОВ (РАСШИФРОВКИ ПО ТОВАРУ ДЕРЕВА)

&НаКлиенте
Процедура ОтчетАнализДоступностиТоваров(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ТекущиеДанные.Номенклатура;	
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Номенклатура", Номенклатура);
	ПараметрыЗапроса.Вставить("ИмяОтчета","АнализДоступностиТоваров");
	
	мОткрытьОтчетПоТекущейНоменклатуре(ПараметрыЗапроса);
	
КонецПроцедуры


Процедура мОткрытьОтчетПоТекущейНоменклатуре(ПараметрыЗапроса) Экспорт
	
	Номенклатура = ПараметрыЗапроса.Номенклатура;	
	
	ОтчетОбъект = Отчеты[ПараметрыЗапроса.ИмяОтчета].Создать();
	СхемаКомпоновкиДанныхВПП = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиВПП = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	ЭлементыОтбора = НастройкиВПП.Отбор.Элементы;
	КоличествоПользовательскихНастроек = ЭлементыОтбора.Количество();
	ИскомоеПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Номенклатура");
	НашлиОтборПоНоменклатуре = Ложь;
	Для к = 0 По КоличествоПользовательскихНастроек -  1 Цикл
		ЭлементОтбора = НастройкиВПП.Отбор.Элементы[к];
		Если ЭлементОтбора.ЛевоеЗначение = ИскомоеПолеКомпоновкиДанных Тогда
			НашлиОтборПоНоменклатуре = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не НашлиОтборПоНоменклатуре Тогда
		ЭлементОтбора = НастройкиВПП.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ИскомоеПолеКомпоновкиДанных;
	КонецЕсли;	
	
	Если ТипЗнч(Номенклатура) = Тип("СписокЗначений") Тогда 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = Номенклатура;
	Иначе
		Если Номенклатура.ЭтоГруппа Тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕслИ;	
		ЭлементОтбора.ПравоеЗначение = Номенклатура.Ссылка;
	КонецЕсли;
	ЭлементОтбора.Использование = Истина;
	
	ФормаОтчета = ОтчетОбъект.ПолучитьФорму();
	ФормаОтчета.НачальноеЗначениеВыбора = "СформироватьПриОткрытии";
	ФормаОтчета.Открыть();
	
КонецПроцедуры


&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ВариантАнализаИПланирования",Объект.ВариантАнализаИПланирования);
	Настройки.Вставить("Периодичность",Объект.Периодичность);
	Настройки.Вставить("КоличествоПериодовАнализа",Объект.КоличествоПериодовАнализа);

	Настройки.Вставить("ПравилаРасчетаПотребностей",Объект.ПравилаРасчетаПотребностей.Выгрузить());
	Настройки.Вставить("ПоказателиТаблицы",Объект.ПоказателиТаблицы.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьИнтервалНаСервере();

	ЗначениеНастройки = Настройки.Получить("ВариантАнализаИПланирования");
	Если НЕ ЗначениеНастройки = Неопределено Тогда
		Объект.ВариантАнализаИПланирования = ЗначениеНастройки;
	КонецЕсли;
	ЗначениеНастройки = Настройки.Получить("Периодичность");
	Если НЕ ЗначениеНастройки = Неопределено Тогда
		Объект.Периодичность = ЗначениеНастройки;
	КонецЕсли;
	ЗначениеНастройки = Настройки.Получить("КоличествоПериодовАнализа");
	Если НЕ ЗначениеНастройки = Неопределено Тогда
		Объект.КоличествоПериодовАнализа = ЗначениеНастройки;
	КонецЕсли;

	ЗначениеНастройки = Настройки.Получить("ПравилаРасчетаПотребностей");
	Если НЕ ЗначениеНастройки = Неопределено Тогда
		Объект.ПравилаРасчетаПотребностей.Загрузить(ЗначениеНастройки);
	КонецЕсли;

	ЗначениеНастройки = Настройки.Получить("ПоказателиТаблицы");
	Если НЕ ЗначениеНастройки = Неопределено Тогда
		Объект.ПоказателиТаблицы.Загрузить(ЗначениеНастройки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтборПоПоставщикуПриИзмененииНаСервере(ПараметрыЗапроса)
	
	Объект.ТаблицаИзЭкселя.Очистить();

	МассивПоставщиков = Новый СписокЗначений;
	Для Каждого Поставщик Из Объект.ПрайсыПоставщиков Цикл
		Если НЕ Поставщик.Пометка Тогда
			Продолжить;
		КонецЕсли;		
		МассивПоставщиков.Добавить(Поставщик.Партнер);
	КонецЦикла;
	
	Если МассивПоставщиков.Количество() = 0 Тогда
		Возврат;
	КОнецЕсли;
	
	Если Объект.ВидОтбораПоПоставщику = "ПоНоменклатуре" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец.Ссылка В(&МассивПоставщиков)
		|	И НоменклатураПоставщиков.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатурыОтбор)";
		
	ИначеЕсли Объект.ВидОтбораПоПоставщику="ПоПриходу" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПриобретениеТоваровУслуг.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслуг
		|ГДЕ
		|	ПриобретениеТоваровУслуг.Ссылка.Партнер В(&МассивПоставщиков)
		|	И ПриобретениеТоваровУслуг.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПриобретениеТоваровУслуг.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатурыОтбор)";

	ИначеЕсли Объект.ВидОтбораПоПоставщику = "ПоРегистрацииЦен" Тогда
		
		Если Объект.ИспользоватьМегапрайс Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыПоставщиков.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, ) КАК ЦеныНоменклатурыПоставщиков
			|ГДЕ
			|	ЦеныНоменклатурыПоставщиков.ПрайсПартнера.Партнер В(&МассивПоставщиков)
			|	И ЦеныНоменклатурыПоставщиков.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатурыОтбор)";
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыПоставщиков.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, ) КАК ЦеныНоменклатурыПоставщиков
			|ГДЕ
			|	ЦеныНоменклатурыПоставщиков.Партнер В(&МассивПоставщиков)
			|	И ЦеныНоменклатурыПоставщиков.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатурыОтбор)";

		КонецЕсли;
		
	Иначе
		Сообщить("Ошибка реквизита Вид отбора по поставщику");
	КонецЕсли;
	
	ЗапросФильтраПоПоставщику = Новый Запрос;
	ЗапросФильтраПоПоставщику.Текст = ТекстЗапроса;
	ЗапросФильтраПоПоставщику.УстановитьПараметр("МассивПоставщиков",МассивПоставщиков);
	ЗапросФильтраПоПоставщику.УстановитьПараметр("НачалоПериода",ПараметрыЗапроса.ПериодЗакупокНачало);
	ЗапросФильтраПоПоставщику.УстановитьПараметр("КонецПериода",ПараметрыЗапроса.ПериодЗакупокКонец);
	ЗапросФильтраПоПоставщику.УстановитьПараметр("ГруппаНоменклатурыОтбор",Объект.ГруппаНоменклатурыОтбор);
	
	Объект.ТаблицаИзЭкселя.Загрузить(ЗапросФильтраПоПоставщику.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщикуПриИзменении(Элемент)
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПериодЗакупокНачало", ПериодЗакупокНачало);  
	ПараметрыЗапроса.Вставить("ПериодЗакупокКонец", ПериодЗакупокКонец);	

	ОтборПоПоставщикуПриИзмененииНаСервере(ПараметрыЗапроса);
	
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ПредварительнаяНоменклатура.ПодчиненныеЭлементы.ТоварыКЗаказу;

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовАнализаПриИзменении(Элемент)
	
	Объект.НачалоПериода = ОтнятьПериод(ТекущаяДата(),Объект.Периодичность,Объект.КоличествоПериодовАнализа);

КонецПроцедуры




&НаСервере
Процедура ЗаписатьТоварныеОграниченияНаСервере()
	
	Для Каждого ВыборкаСтрока Из Объект.ТаблицаНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(Объект.ГлавныйСклад) Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Склад", Объект.ГлавныйСклад);
			СтруктураПараметров.Вставить("Номенклатура", ВыборкаСтрока.Номенклатура);
			СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", ВыборкаСтрока.Характеристика);       
			СтруктураПараметров.Вставить("ГруппировкаТоварныхОграничений", Объект.ГруппировкаТоварныхОграничений);   
			СтруктураПараметров.Вставить("МинимальноеКоличествоЗапаса", ВыборкаСтрока.ГлавныйМинимальноеКоличествоЗапаса);   
			
			ТаблицаНоменклатурыГлавныйМинимальноеКоличествоЗапасаПриИзмененииНаСервере(СтруктураПараметров);
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Склад", Объект.СкладЗаказчик);
		СтруктураПараметров.Вставить("Номенклатура", ВыборкаСтрока.Номенклатура);
		СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", ВыборкаСтрока.Характеристика);
		СтруктураПараметров.Вставить("ГруппировкаТоварныхОграничений", Объект.ГруппировкаТоварныхОграничений); 
		СтруктураПараметров.Вставить("МинимальноеКоличествоЗапаса", ВыборкаСтрока.МинимальноеКоличествоЗапаса);   
		СтруктураПараметров.Вставить("МаксимальноеКоличествоЗапаса", ВыборкаСтрока.МаксимальноеКоличествоЗапаса);
		
		ТаблицаНоменклатурыМинимальноеКоличествоЗапасаПриИзмененииНаСервере(СтруктураПараметров);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТоварныеОграничения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладЗаказчик) Тогда
		Сообщить("Не выбран склад-заказчик. Изменение минимальных остатков без указания конкретного склада невозможно.");
		Возврат;
	КонецЕсли;

	ЗаписатьТоварныеОграниченияНаСервере();
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ТаблицаНоменклатурыМинимальноеКоличествоЗапасаПриИзмененииНаСервере(СтруктураПараметров)
	
	НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметров.Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(СтруктураПараметров.ХарактеристикаНоменклатуры);	
	НаборЗаписей.Отбор.Склад.Установить(СтруктураПараметров.Склад);		
	НаборЗаписей.Отбор.Группировка.Установить(СтруктураПараметров.ГруппировкаТоварныхОграничений);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей.Получить(0);
	КонецЕсли;
	Запись.Склад                       = СтруктураПараметров.Склад;
	Запись.Номенклатура                = СтруктураПараметров.Номенклатура;
	Запись.Характеристика              = СтруктураПараметров.ХарактеристикаНоменклатуры;
	Запись.Группировка = СтруктураПараметров.ГруппировкаТоварныхОграничений;
	Запись.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс;
	Запись.ОбеспечениеЗаказовПриПоддержанииЗапаса = Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов;
	Запись.МинимальноеКоличествоЗапаса = СтруктураПараметров.МинимальноеКоличествоЗапаса;   
	Запись.МаксимальноеКоличествоЗапаса = СтруктураПараметров.МаксимальноеКоличествоЗапаса;   
	НаборЗаписей.Записать();	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыМинимальноеКоличествоЗапасаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладЗаказчик) Тогда
		Сообщить("Не выбран склад-заказчик. Изменение минимальных остатков без указания конкретного склада невозможно.");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда	
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склад", Объект.СкладЗаказчик);
	СтруктураПараметров.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
	СтруктураПараметров.Вставить("ГруппировкаТоварныхОграничений", Объект.ГруппировкаТоварныхОграничений); 
	СтруктураПараметров.Вставить("МинимальноеКоличествоЗапаса", ТекущиеДанные.МинимальноеКоличествоЗапаса);   
	СтруктураПараметров.Вставить("МаксимальноеКоличествоЗапаса", ТекущиеДанные.МаксимальноеКоличествоЗапаса);

	ТаблицаНоменклатурыМинимальноеКоличествоЗапасаПриИзмененииНаСервере(СтруктураПараметров);
	
	Если ТекущиеДанные.МинимальноеКоличествоЗапаса > 0 Тогда // отрабатываем только позиции у которых установлена точка заказа
		// если минимальный запас не установлен, то считаем его совпадающим с точкой заказа	
		СводныйОстаток = ТекущиеДанные.СвободныйОстаток + ТекущиеДанные.ЗаказаноПоставщикам;				
		МинимальноеКоличествоЗапаса = ТекущиеДанные.МинимальноеКоличествоЗапаса; 
		
		Если СводныйОстаток <= МинимальноеКоличествоЗапаса Тогда
			ТекущиеДанные.РекомендуетсяЗаказать = ТекущиеДанные.МаксимальноеКоличествоЗапаса;
			ТекущиеДанные.Заказать = ТекущиеДанные.РекомендуетсяЗаказать;
		Иначе
			ТекущиеДанные.РекомендуетсяЗаказать = 0;
			ТекущиеДанные.Заказать = 0;
		КОнецЕсли;
		
		Если ТекущиеДанные.РекомендуетсяЗаказать > 0 Тогда
			ТекущиеДанные.КЗаказу = Истина;
		Иначе
			ТекущиеДанные.КЗаказу = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	ТекущиеДанные.КоличествоПереместить = 0;
	Если ЗначениеЗаполнено(Объект.ГлавныйСклад) Тогда
		ГлавныйСкладОстатокПосле = ТекущиеДанные.ГлавныйСкладОстаток - ТекущиеДанные.ГлавныйМинимальноеКоличествоЗапаса;
		
		ТекущиеДанные.РекомендуетсяЗаказать = ТекущиеДанные.РекомендуетсяЗаказать;
		Если ГлавныйСкладОстатокПосле > 0 И ТекущиеДанные.РекомендуетсяЗаказать > 0 Тогда
			РазницаЧисел = МИН(ГлавныйСкладОстатокПосле,ТекущиеДанные.РекомендуетсяЗаказать);
			Если РазницаЧисел > 0 Тогда
				ТекущиеДанные.КоличествоПереместить = РазницаЧисел;
				ТекущиеДанные.Заказать = ТекущиеДанные.РекомендуетсяЗаказать - ТекущиеДанные.КоличествоПереместить;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Состояние("Изменение в базе произошло.");
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ТаблицаНоменклатурыГлавныйМинимальноеКоличествоЗапасаПриИзмененииНаСервере(СтруктураПараметров)
	
	НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Номенклатура.Установить(СтруктураПараметров.Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(СтруктураПараметров.ХарактеристикаНоменклатуры);			
	НаборЗаписей.Отбор.Склад.Установить(СтруктураПараметров.Склад);	
	НаборЗаписей.Отбор.Группировка.Установить(СтруктураПараметров.ГруппировкаТоварныхОграничений);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей.Получить(0);
	КонецЕсли;
	Запись.Склад                       = СтруктураПараметров.Склад;
	Запись.Номенклатура                = СтруктураПараметров.Номенклатура;
	Запись.Характеристика              = СтруктураПараметров.ХарактеристикаНоменклатуры;      
	Запись.Группировка = СтруктураПараметров.ГруппировкаТоварныхОграничений;
	Запись.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс;   
	Запись.ОбеспечениеЗаказовПриПоддержанииЗапаса = Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов;
	Запись.МинимальноеКоличествоЗапаса = СтруктураПараметров.МинимальноеКоличествоЗапаса;    
	НаборЗаписей.Записать();	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыГлавныйМинимальноеКоличествоЗапасаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ГлавныйСклад) Тогда
		Сообщить("Не выбран Главный склад. Изменение минимальных остатков без указания конкретного склада невозможно.");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда	
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склад", Объект.ГлавныйСклад);
	СтруктураПараметров.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);       
	СтруктураПараметров.Вставить("ГруппировкаТоварныхОграничений", Объект.ГруппировкаТоварныхОграничений);   
	СтруктураПараметров.Вставить("МинимальноеКоличествоЗапаса", ТекущиеДанные.ГлавныйМинимальноеКоличествоЗапаса);   

	ТаблицаНоменклатурыГлавныйМинимальноеКоличествоЗапасаПриИзмененииНаСервере(СтруктураПараметров);
	
	ТекущиеДанные.КоличествоПереместить = 0;
	Если ЗначениеЗаполнено(Объект.ГлавныйСклад) Тогда
		ГлавныйСкладОстатокПосле = ТекущиеДанные.ГлавныйСкладОстаток - ТекущиеДанные.ГлавныйМинимальноеКоличествоЗапаса;
		
		ТекущиеДанные.РекомендуетсяЗаказать = ТекущиеДанные.РекомендуетсяЗаказать;
		Если ГлавныйСкладОстатокПосле > 0 И ТекущиеДанные.РекомендуетсяЗаказать > 0 Тогда
			РазницаЧисел = МИН(ГлавныйСкладОстатокПосле,ТекущиеДанные.РекомендуетсяЗаказать);
			Если РазницаЧисел > 0 Тогда
				ТекущиеДанные.КоличествоПереместить = РазницаЧисел;
				ТекущиеДанные.Заказать = ТекущиеДанные.РекомендуетсяЗаказать - ТекущиеДанные.КоличествоПереместить;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Состояние("Изменение в базе произошло.");

КонецПроцедуры








&НаКлиенте
Процедура ОткрытьНовое(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширенныйПомощникЗакупок.Форма.Форма",,,Истина); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРасширенныйПомощникЗакупок.Форма.Форма",,,Истина); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗакрытьОбработку Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Работа будет завершена, все введенные данные будут потеряны. Закрыть?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьОбработку = Истина;
        Закрыть();
    КонецЕсли;

КонецПроцедуры




&НаСервере
Процедура ЗаполнитьСписокПоставщиков(ПараметрыЗапроса)
	
	Объект.ПрайсыПоставщиков.Очистить();
	
	Если Объект.ВидОтбораПоПоставщику = "ПоНоменклатуре" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураПоставщиков.Владелец КАК Партнер
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатурыОтбор)";
		
	ИначеЕсли Объект.ВидОтбораПоПоставщику = "ПоПриходу" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслуг.Ссылка.Контрагент КАК Партнер
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслуг
		|ГДЕ
		|	ПриобретениеТоваровУслуг.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПриобретениеТоваровУслуг.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатурыОтбор)";
		
	ИначеЕсли Объект.ВидОтбораПоПоставщику = "ПоРегистрацииЦен" Тогда
		
		Если Объект.ИспользоватьМегапрайс Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ 
			|	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.ПрайсПартнера.Партнер КАК Партнер
			|ИЗ
			|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних
			|ГДЕ
			|	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.ПрайсПартнера.Партнер.Поставщик = ИСТИНА
			|    "+?(ЗначениеЗаполнено(Объект.ЦеныПоставщиковОграничениеПоДате)," И мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.Период >= &ОграничениеПоДате","")+"
			|
			|СГРУППИРОВАТЬ ПО
			|	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.ПрайсПартнера.Партнер"; 
			
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ 
			|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер КАК Партнер
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныНоменклатурыПоставщиковСрезПоследних
			|ГДЕ
			|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер.Поставщик = ИСТИНА
			|    "+?(ЗначениеЗаполнено(Объект.ЦеныПоставщиковОграничениеПоДате)," И ЦеныНоменклатурыПоставщиковСрезПоследних.Период >= &ОграничениеПоДате","")+"
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатурыПоставщиковСрезПоследних.Партнер";
		КонецЕсли;
		
	Иначе
		Сообщить("Ошибка реквизита Вид отбора по поставщику");
	КонецЕсли;

		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачалоПериода",ПараметрыЗапроса.ПериодЗакупокНачало);
	Запрос.УстановитьПараметр("КонецПериода",ПараметрыЗапроса.ПериодЗакупокКонец);
	Запрос.УстановитьПараметр("ОграничениеПоДате",Объект.ЦеныПоставщиковОграничениеПоДате);
	Запрос.УстановитьПараметр("ГруппаНоменклатурыОтбор",Объект.ГруппаНоменклатурыОтбор);
	
	Таблица = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Объект.ПрайсыПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьСписокПоставщиков(Команда)
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПериодЗакупокНачало", ПериодЗакупокНачало);  
	ПараметрыЗапроса.Вставить("ПериодЗакупокКонец", ПериодЗакупокКонец);	
	
	ЗаполнитьСписокПоставщиков(ПараметрыЗапроса);
	
КонецПроцедуры






//============================================================================
// ДОКУМЕНТЫ

&НаКлиенте
Процедура СоздатьЗаказНаВнутреннееПотребление(Команда)
	
	МассивДокументов = СоздатьЗаказНаВнутреннееПотреблениеНаСервере();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;

КонецПроцедуры


&НаСервере
Функция СоздатьЗаказНаВнутреннееПотреблениеНаСервере()
	
	МассивДокументов = Новый Массив;
		
	НовыйДокумент = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПотреблениеТоваров;
	НовыйДокумент.Статус                = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	НовыйДокумент.Комментарий = "";
		
	Для Каждого Выборка из Объект.ТаблицаНоменклатуры Цикл		
		Если Выборка.КоличествоПереместить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентУпаковки = 1; //ПолучитьКоэффициентУпаковки(Стр.Упаковка); 
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		СтрокаТЧ.Номенклатура     = Выборка.Номенклатура;
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТЧ.Характеристика   = Выборка.Характеристика;
		СтрокаТЧ.Количество       = Выборка.КоличествоПереместить;
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		СтрокаТЧ.ДатаОтгрузки       = ТекущаяДата();
	КонецЦикла;
	
	Если НовыйДокумент.Товары.Количество() > 0 Тогда
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
	КонецЕсли;
	
	Возврат МассивДокументов;	
	
КонецФункции


&НаКлиенте
Процедура СоздатьЗаказНаПеремещение(Команда)
	
	МассивДокументов = СоздатьЗаказНаПеремещениеНаСервере();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.ЗаказНаПеремещение.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;

КонецПроцедуры


&НаСервере
Функция СоздатьЗаказНаПеремещениеНаСервере()
	
	МассивДокументов = Новый Массив;
		
	НовыйДокумент = Документы.ЗаказНаПеремещение.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	НовыйДокумент.Статус                = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	НовыйДокумент.Комментарий = "";
	НовыйДокумент.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
		
	Для Каждого Выборка из Объект.ТаблицаНоменклатуры Цикл	
		Если Выборка.КоличествоПереместить = 0 Тогда
			Продолжить;
		КонецЕсли;

		КоэффициентУпаковки = 1; //ПолучитьКоэффициентУпаковки(Стр.Упаковка); 
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		СтрокаТЧ.Номенклатура     = Выборка.Номенклатура;
		СтрокаТЧ.Характеристика   = Выборка.Характеристика;
		СтрокаТЧ.Количество       = Выборка.КоличествоПереместить;
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЦикла;
	
	Если НовыйДокумент.Товары.Количество() > 0 Тогда
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
	КонецЕсли;
	
	Возврат МассивДокументов;	

КонецФункции


&НаКлиенте
Процедура СоздатьПеремещениеТоваров(Команда)
	
	МассивДокументов = СоздатьПеремещениеТоваровНаСервере();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;

КонецПроцедуры


&НаСервере
Функция СоздатьПеремещениеТоваровНаСервере()
	
	МассивДокументов = Новый Массив;
		
	НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
	НовыйДокумент.Дата        = ТекущаяДата();
	НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	НовыйДокумент.Статус                = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
	НовыйДокумент.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	НовыйДокумент.Комментарий = "";
		
	Для Каждого Выборка из Объект.ТаблицаНоменклатуры Цикл		
		Если Выборка.КоличествоПереместить = 0 Тогда
			Продолжить;
		КонецЕсли;

		КоэффициентУпаковки = 1; //ПолучитьКоэффициентУпаковки(Стр.Упаковка); 
		
		СтрокаТЧ = НовыйДокумент.Товары.Добавить();
		СтрокаТЧ.Номенклатура     = Выборка.Номенклатура;
		СтрокаТЧ.Характеристика   = Выборка.Характеристика;
		СтрокаТЧ.Количество       = Выборка.КоличествоПереместить;
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЦикла;
	
	Если НовыйДокумент.Товары.Количество() > 0 Тогда
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
	КонецЕсли;
	
	Возврат МассивДокументов;	

КонецФункции

&НаКлиенте
Процедура ПравилаРасчетаПотребностейТекстАлгоритмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекстАлгоритма",Элементы.ПравилаРасчетаПотребностей.ТекущиеДанные.ТекстАлгоритма);
	
	Попытка
		Результат = ОткрытьФормуМодально("Обработка.мегапрайсРасширенныйПомощникЗакупок.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма); 
	Исключение
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсРасширенныйПомощникЗакупок.Форма.РедакторАлгоритма",ПараметрыФормыВыбора,ЭтаФорма);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.ПравилаРасчетаПотребностей.ТекущиеДанные.ТекстАлгоритма = Результат;
	КонецЕсли;

КонецПроцедуры




//============================================================================
// ПРАВИЛА РАСЧЕТА ЦЕН

&НаСервере
Процедура МегапрайсСохранитьПравилаЗакупок()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилоЗакупок) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоОбъект = Объект.ПравилоЗакупок.ПолучитьОбъект();
	ПравилоОбъект.СкладЗаказчик = Объект.СкладЗаказчик;
	ПравилоОбъект.ГлавныйСклад = Объект.ГлавныйСклад;
	
	ПравилоОбъект.ВариантАнализаИПланирования = Объект.ВариантАнализаИПланирования;
	ПравилоОбъект.ВидОтбораПоПоставщику = Объект.ВидОтбораПоПоставщику;
	ПравилоОбъект.ОтборПоПоставщику = Объект.ОтборПоПоставщику;
	ПравилоОбъект.Периодичность = Объект.Периодичность;
	ПравилоОбъект.ТочностьОкругления = Объект.ПравилоЗакупок.ТочностьОкругления;
	ПравилоОбъект.РабочийКалендарь = Объект.РабочийКалендарь;
	ПравилоОбъект.ЦеныПоставщиковОграничениеПоДате = Объект.ЦеныПоставщиковОграничениеПоДате;
	ПравилоОбъект.ЦеныПоставщиковМинимальныйПорогНаценки = Объект.ЦеныПоставщиковМинимальныйПорогНаценки;
	
	ПравилоОбъект.ГруппировкаТоварныхОграничений = Объект.ГруппировкаТоварныхОграничений;
	ПравилоОбъект.ВыполнитьРасчетМинимальныхОстатков = Объект.ВыполнитьРасчетМинимальныхОстатков;
	
	Попытка
		ПравилоОбъект.ХранилищеНастроекКомпоновщика = Новый ХранилищеЗначения(Объект.КомпоновщикНастроек.Настройки);
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ПравилоОбъект.ПравилаРасчетаПотребностей.Загрузить(Объект.ПравилаРасчетаПотребностей.Выгрузить());	
	ПравилоОбъект.ПравилаРасчетаТочекЗаказа.Загрузить(Объект.ПравилаРасчетаТочекЗаказа.Выгрузить());
	ПравилоОбъект.ПрайсыПоставщиков.Загрузить(Объект.ПрайсыПоставщиков.Выгрузить());
	ПравилоОбъект.ВариантыОпределенияПоставщиков.Загрузить(Объект.ВариантыОпределенияПоставщиков.Выгрузить());

	ПравилоОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Процедура МегапрайсЗаполнитьПравилаЗакупок()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилоЗакупок) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПравилаРасчетаПотребностей.Очистить();
	Объект.ПравилаРасчетаТочекЗаказа.Очистить();
	Объект.ПрайсыПоставщиков.Очистить();
	Объект.ВариантыОпределенияПоставщиков.Очистить();

	НайденоПравило = Объект.ПравилоЗакупок; 
	
	Попытка
		Объект.СкладЗаказчик = НайденоПравило.СкладЗаказчик;
	Исключение
	КонецПопытки;
    Объект.ГлавныйСклад = НайденоПравило.ГлавныйСклад;

	Объект.ВариантАнализаИПланирования = НайденоПравило.ВариантАнализаИПланирования;
	Объект.ВидОтбораПоПоставщику = НайденоПравило.ВидОтбораПоПоставщику;
	Объект.ОтборПоПоставщику = НайденоПравило.ОтборПоПоставщику;
	Объект.Периодичность = НайденоПравило.Периодичность;
	Объект.ТочностьОкругления = НайденоПравило.ТочностьОкругления;
	Объект.РабочийКалендарь = НайденоПравило.РабочийКалендарь;
	Объект.ЦеныПоставщиковОграничениеПоДате = НайденоПравило.ЦеныПоставщиковОграничениеПоДате;
	Объект.ЦеныПоставщиковМинимальныйПорогНаценки = НайденоПравило.ЦеныПоставщиковМинимальныйПорогНаценки;
	
	Объект.ГруппировкаТоварныхОграничений = НайденоПравило.ГруппировкаТоварныхОграничений;
	Объект.ВыполнитьРасчетМинимальныхОстатков = НайденоПравило.ВыполнитьРасчетМинимальныхОстатков;
	
	
	Попытка
		Объект.КомпоновщикНастроек.ЗагрузитьНастройки(НайденоПравило.ХранилищеНастроекКомпоновщика.Получить());
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Объект.ПравилаРасчетаПотребностей.Загрузить(НайденоПравило.ПравилаРасчетаПотребностей.Выгрузить());	
	Объект.ПравилаРасчетаТочекЗаказа.Загрузить(НайденоПравило.ПравилаРасчетаТочекЗаказа.Выгрузить());
	Объект.ПрайсыПоставщиков.Загрузить(НайденоПравило.ПрайсыПоставщиков.Выгрузить());
	Объект.ВариантыОпределенияПоставщиков.Загрузить(НайденоПравило.ВариантыОпределенияПоставщиков.Выгрузить());	
	
КонецПроцедуры

&НаКлиенте
Процедура МегапрайсИзменениеПрайилаЗакупок(Элемент)
	
	МегапрайсЗаполнитьПравилаЗакупок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПравилоЗакупок(Команда)
	МегапрайсСохранитьПравилаЗакупок();
КонецПроцедуры

&НаКлиенте
Процедура СкладЗаказчикПриИзменении(Элемент)
	
	Для Каждого ОтборКомпоновки Из Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(ОтборКомпоновки.ЛевоеЗначение) = "СкладОстатковОтбор" Тогда
			ОтборКомпоновки.Использование  = ЗначениеЗаполнено(Объект.СкладЗаказчик);
			ОтборКомпоновки.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборКомпоновки.ПравоеЗначение = Объект.СкладЗаказчик;
		ИначеЕсли СокрЛП(ОтборКомпоновки.ЛевоеЗначение) = "СкладПродажОтбор" Тогда
			ОтборКомпоновки.Использование  = ЗначениеЗаполнено(Объект.СкладЗаказчик);
			ОтборКомпоновки.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборКомпоновки.ПравоеЗначение = Объект.СкладЗаказчик;	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРеализации(Команда)
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналЗаказыПокупателей(Команда)
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналЗаказыПоставщикам(Команда)
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаСписка");
КонецПроцедуры





ЗакрытьОбработку = Ложь;



