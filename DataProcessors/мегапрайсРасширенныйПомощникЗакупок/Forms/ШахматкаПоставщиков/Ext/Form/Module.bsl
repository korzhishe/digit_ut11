
&НаСервере
Перем Кэш;

//============================================================================
// ФОРМА

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	АдресВХранилище = Параметры.Адрес;
	
	Объект.ИспользоватьМегапрайс = Параметры.ИспользоватьМегапрайс;

	СпрХарактеристикиНоменклатуры = Справочники.ХарактеристикиНоменклатуры;

	Для Каждого Строка из СтруктураПараметров.ТаблицаПотребностей Цикл			
		НоваяСтрока = Объект.ТаблицаПотребностей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		ХарактеристикиИспользуются = Строка.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики;
		
		Если ХарактеристикиИспользуются Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				НоваяСтрока.Характеристика = СпрХарактеристикиНоменклатуры.НайтиПоНаименованию("Без свойств",Истина,,Строка.Номенклатура);
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;

	ИнициализироватьВозможныеПоставщики();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ТаблицаНоменклатурыХарактеристика.Видимость = Истина;
	Иначе
		Элементы.ТаблицаНоменклатурыХарактеристика.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

//============================================================================
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ

&НаСервере
Процедура ДеревоВыполнитьСозданиеТабличныхЧастейЗаказов(ТаблицаНоменклатуры)
	
	Объект.ФормированиеЗаказов.Очистить();
	
	Для Каждого Подчиненный Из ТаблицаНоменклатуры Цикл
		
		Для Каждого ВыборкаПоставщик Из ВозможныеПоставщики Цикл	
			Если ВыборкаПоставщик.Пометка Тогда		
				ИмяКолонки = ВыборкаПоставщик.ИмяКолонки;
				
				ЗаказатьПоставщик = Подчиненный["ЗаказатьПоставщик"+ИмяКолонки];
				
				Если ЗаказатьПоставщик > 0 Тогда
					НоваяСтрока = Объект.ФормированиеЗаказов.Добавить();
					НоваяСтрока.Партнер        = ВыборкаПоставщик.Ссылка;
					НоваяСтрока.Номенклатура   = Подчиненный.Номенклатура;
					НоваяСтрока.Характеристика = Подчиненный.Характеристика;
					НоваяСтрока.Количество     = ЗаказатьПоставщик;
					НоваяСтрока.ЦенаЗаказа     = Подчиненный["ЦенаПоставщика"+ИмяКолонки];
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаказПоставщикуСервер()
	
	ТаблицаНоменклатурыРеквизит = РеквизитФормыВЗначение("ТаблицаНоменклатуры");

	ДеревоВыполнитьСозданиеТабличныхЧастейЗаказов(ТаблицаНоменклатурыРеквизит);

	НовыйДокумент  = Документы.ЗаказПоставщику.ПустаяСсылка();
	МассивДокументов = Новый Массив;
	
	ВремПоставщик = "";
	
	Объект.ФормированиеЗаказов.Сортировать("Партнер,Номенклатура");
	
	ТаблицаРазделения = Объект.ФормированиеЗаказов.Выгрузить();
	ТаблицаРазделения.Свернуть("Партнер");

	
	Для Каждого Шапка Из ТаблицаРазделения Цикл		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Партнер", Шапка.Партнер);
		
		ТаблЧасть = Объект.ФормированиеЗаказов.НайтиСтроки(ПараметрыОтбора);
		
		НовыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
		НовыйДокумент.Дата        = ТекущаяДата();
		НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Партнер     = Шапка.Партнер;
		НовыйДокумент.ЗаполнитьУсловияЗакупокПоСоглашению();
		НовыйДокумент.Комментарий = "";
		
		Для Каждого Стр из ТаблЧасть Цикл
			КоэффициентУпаковки = 1; //ПолучитьКоэффициентУпаковки(Стр.Упаковка); 
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Номенклатура       = Стр.Номенклатура;
			СтрокаТЧ.Характеристика     = Стр.Характеристика;
			СтрокаТЧ.Количество         = Стр.Количество;
			СтрокаТЧ.КоличествоУпаковок = Стр.Количество;
			СтрокаТЧ.Цена               = Стр.ЦенаЗаказа;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Шапка.Партнер);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НовыйДокумент.НалогообложениеНДС);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			//СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(НовыйДокумент));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		
		НовыйДокумент.Записать();
		МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументов;	
	
КонецФункции

&НаКлиенте
Процедура КомандаСформироватьЗаказыПоставщикам(Команда)
	
	МассивДокументов = СоздатьЗаказПоставщикуСервер();
	Для Каждого Строка Из МассивДокументов Цикл
		ФормаДока = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента", Новый Структура("Ключ", Строка));    
		ФормаДока.Открыть();
	КонецЦикла;
		
КонецПроцедуры

//============================================================================
// АНАЛИЗ

&НаСервере
Процедура ЗаполнитьТаблицаНоменклатуры()
	
	ТаблицаНоменклатуры.Очистить();	
	Для Каждого Строка из Объект.ТаблицаПотребностей Цикл			
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьАнализ(Команда)
	
	СформироватьТаблицуКолонокСервер();
	
	ЗаполнитьТаблицаНоменклатуры();
	
	ЗаполнитьТаблицаНоменклатурыДанными();

	Элементы.Закладки.ТекущаяСтраница = ЭтаФорма.Элементы.Закладки.ПодчиненныеЭлементы.ТаблицаПотребностей;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКолонкиПоИдентификатору(Параметр1)
	
	Идентификатор = ""+Параметр1;
	
	УникИдентификатор1 = СтрЗаменить(Параметр1.УникальныйИдентификатор(), "-", "");
	
	Значение = Кэш.Получить(Идентификатор);
	Если Значение = Неопределено Тогда
		Значение = "Партнер"+УникИдентификатор1;
		Кэш.Вставить(Идентификатор, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьВозможныеПоставщики()
	
	ВозможныеПоставщики.Очистить();
	
	Если Объект.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер КАК Ссылка,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.Наименование КАК Наименование,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.БизнесРегион КАК БизнесРегион,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ мегапрайсПрайсыПартнеров.Номенклатура) КАК КоличествоПозиций
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК мегапрайсПрайсыПартнеров
		|ГДЕ
		|	мегапрайсПрайсыПартнеров.Номенклатура В(&Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.Наименование,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.БизнесРегион
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	КоличествоПозиций УБЫВ";
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыПоставщиков.Партнер КАК Ссылка,
		|	ЦеныНоменклатурыПоставщиков.Партнер.Наименование КАК Наименование,
		|	ЦеныНоменклатурыПоставщиков.Партнер.БизнесРегион КАК БизнесРегион,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЦеныНоменклатурыПоставщиков.Номенклатура) КАК КоличествоПозиций
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныНоменклатурыПоставщиков
		|ГДЕ
		|	ЦеныНоменклатурыПоставщиков.Номенклатура В(&Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыПоставщиков.Партнер,
		|	ЦеныНоменклатурыПоставщиков.Партнер.Наименование,
		|	ЦеныНоменклатурыПоставщиков.Партнер.БизнесРегион
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	КоличествоПозиций УБЫВ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Номенклатура",Объект.ТаблицаПотребностей.Выгрузить(,"Номенклатура"));
		
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("ИмяКолонки",Новый ОписаниеТипов("Строка"));	
	
	Для Каждого СтрокаВидаЦен Из Таблица Цикл
		СтрокаВидаЦен.ИмяКолонки = ПолучитьИмяКолонкиПоИдентификатору(СтрокаВидаЦен.Ссылка);
	КонецЦикла;

	Для Каждого СтрокаТЧ Из Таблица Цикл		
		НоваяСтрока = ВозможныеПоставщики.Добавить();
		НоваяСтрока.Ссылка       = СтрокаТЧ.Ссылка;	
		НоваяСтрока.ИмяКолонки   = СтрокаТЧ.ИмяКолонки;
		НоваяСтрока.Наименование = СтрокаТЧ.Наименование;
		НоваяСтрока.БизнесРегион = СтрокаТЧ.БизнесРегион;
        НоваяСтрока.КоличествоПозиций = СтрокаТЧ.КоличествоПозиций;
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНоменклатуры()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Имя,
						 Заголовок = Неопределено,
						 ОбработчикПриИзменении = "",
						 ОбработчикНачалоВыбора = "",
						 ШиринаПоля,
						 ЦветФона = Неопределено,
						 ЦветФонаЗаголовка = Неопределено,
						 Родитель = Неопределено,
						 КартинкаШапки = Неопределено,
						 ПутьКДанным = Неопределено,
						 ТолькоПросмотрПоля = Ложь,
						 СвязиПараметровВыбора = Неопределено)
	
	НовоеПоле                     = Элементы.Добавить("ТаблицаНоменклатуры" + Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Элементы.ТаблицаНоменклатуры, Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, "ТаблицаНоменклатуры." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = ШиринаПоля;
	
	Если СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвязиПараметровВыбора;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КОнецФункции

&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок = Неопределено, ОтображатьВШапке = Ложь, КартинкаШапки = Неопределено, ГруппировкаКолонок, Родитель = Неопределено)
	
	НоваяГруппа                  = Элементы.Добавить("ТаблицаНоменклатуры" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.ТаблицаНоменклатуры, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	НоваяГруппа.ШрифтЗаголовка = Новый Шрифт(, , Истина); 
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПустоеТаблицаНоменклатуры()
	
	ДеревоЗначений = Новый ТаблицаЗначений();
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ДеревоЗначений.Колонки.Добавить("Заказать", Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("Распределено", Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("РекомендуемыйПоставщик", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
    ДеревоЗначений.Колонки.Добавить("МинимальнаяЦена", Новый ОписаниеТипов("Число"));
	
	Возврат ДеревоЗначений;
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуКолонокСервер()
	
	ДобавляемыеКолонкиТаблицаНоменклатуры = Новый Массив();
	УдаляемыеКолонкиТаблицаНоменклатуры = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	ДеревоЗначений = СоздатьПустоеТаблицаНоменклатуры();
	
	Для Каждого ВыборкаПартнер Из ВозможныеПоставщики Цикл		
		Если ВыборкаПартнер.Пометка Тогда		
			ИмяКолонки = ВыборкаПартнер.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить("ЗаказатьПоставщик"+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой)),           ВыборкаПартнер.Наименование);
			ДеревоЗначений.Колонки.Добавить("ЦенаПоставщика"   + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВыборкаПартнер.Наименование);
			ДеревоЗначений.Колонки.Добавить("ОстатокПоставщика"+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой)),           ВыборкаПартнер.Наименование);
		КонецЕсли;	
	КонецЦикла;
		
	РеквизитыТаблицаНоменклатуры = ПолучитьРеквизиты("ТаблицаНоменклатуры");
	Для Каждого Реквизит Из РеквизитыТаблицаНоменклатуры Цикл
		Если Найти(Реквизит.Имя, "Партнер") Тогда
			УдаляемыеКолонкиТаблицаНоменклатуры.Добавить("ТаблицаНоменклатуры." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "Партнер") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицаНоменклатуры.Найти("ТаблицаНоменклатуры." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицаНоменклатуры.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицаНоменклатуры.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаНоменклатуры", Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицаНоменклатуры.Количество() > 0 Или ДобавляемыеКолонкиТаблицаНоменклатуры.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицаНоменклатуры, УдаляемыеКолонкиТаблицаНоменклатуры);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ТаблицаНоменклатуры.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "Партнер") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;	
	
	Для Каждого ВыборкаПартнер Из ВозможныеПоставщики Цикл	
		ИмяКолонки = ВыборкаПартнер.ИмяКолонки;
		
		Если ВыборкаПартнер.Пометка Тогда			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			ИмяГруппы = ""+Строка(ВыборкаПартнер.Ссылка);
						
			НоваяГруппа = ДобавитьГруппуФормы("ГруппаПартнер" + ИмяКолонки, ИмяГруппы, Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная);
			
			НовоеПоле = ДобавитьПолеФормы("ЦенаПоставщика"      + ИмяКолонки,НСтр("ru='Цена '"),,, 10, ЦветФона, ЦветФона, НоваяГруппа,,,Истина);
			НовоеПоле = ДобавитьПолеФормы("ЗаказатьПоставщик"   + ИмяКолонки,НСтр("ru='Заказать'"),"ТаблицаНоменклатурыПриИзменении",, 10, ЦветФона, WebЦвета.СветлоЗеленый, НоваяГруппа,,,Ложь);
			НовоеПоле = ДобавитьПолеФормы("ОстатокПоставщика"   + ИмяКолонки,НСтр("ru='Остаток'"),,, 10, ЦветФона, ЦветФона, НоваяГруппа,,,Истина);
			
			// Условное оформление 
			НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.МинимальнаяЦена");
			ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ЦенаПоставщика"+ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыЦенаПоставщика"+ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПользовательВыбранный);
		КонецЕсли;		
	КонецЦикла;
	
	ТаблицаНоменклатурыЗначение = РеквизитФормыВЗначение("ТаблицаНоменклатуры");
	ТаблицаНоменклатурыЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ТаблицаНоменклатурыЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНоменклатурыЗначение, "ТаблицаНоменклатуры");

КонецПроцедуры

//=========================================================================

&НаСервере
Процедура ЗаполнитьТаблицаНоменклатурыДанными()
		
	ЗагрузитьДеревоДаннымиЗапроса(ТаблицаНоменклатуры);

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТаблицыНоменклатуры(ТаблицаНоменклатуры,СтрокаНоменклатуры)
			
	Отбор = Новый Структура("Номенклатура, Характеристика", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Характеристика);
	
	МассивСтрок = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
	Для Каждого СтрокаТЗ Из МассивСтрок Цикл
		Возврат СтрокаТЗ;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДеревоДаннымиЗапроса(ТаблицаНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.ИспользоватьМегапрайс Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	мегапрайсПрайсыПартнеров.Номенклатура КАК Номенклатура,
		                      |	мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры КАК Характеристика,
		                      |	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер КАК Партнер,
		                      |	МАКСИМУМ(мегапрайсПрайсыПартнеров.Цена) КАК ЦенаПоставщика,
		                      |	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(мегапрайсПрайсыПартнеров.Цена, 0) * ВЫБОР
		                      |				КОГДА &ВалютаУправленческогоУчета <> мегапрайсПрайсыПартнеров.Валюта
		                      |					ТОГДА ВЫБОР
		                      |							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		                      |									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		                      |									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		                      |									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		                      |								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		                      |							ИНАЧЕ 0
		                      |						КОНЕЦ
		                      |				ИНАЧЕ 1
		                      |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПоставщикаУпр,
		                      |	МАКСИМУМ(мегапрайсПрайсыПартнеров.СрокПоставки) КАК СрокПоставки,
		                      |	МАКСИМУМ(мегапрайсПрайсыПартнеров.Количество) КАК ОстатокКонтрагента
		                      |ИЗ
		                      |	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, ) КАК мегапрайсПрайсыПартнеров
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		                      |		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = мегапрайсПрайсыПартнеров.Валюта)
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУправленческогоУчета) КАК КурсыСрезПоследнихВалютаДокумента
		                      |		ПО (ИСТИНА)
		                      |ГДЕ
		                      |	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер В(&СписокПартнеров)
		                      |	И мегапрайсПрайсыПартнеров.Номенклатура В(&Товары)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	мегапрайсПрайсыПартнеров.Номенклатура,
		                      |	мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры,
		                      |	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер
		                      |ИТОГИ
		                      |	МАКСИМУМ(ЦенаПоставщика),
		                      |	МАКСИМУМ(ЦенаПоставщикаУпр),
		                      |	МАКСИМУМ(СрокПоставки),
		                      |	МАКСИМУМ(ОстатокКонтрагента)
		                      |ПО
		                      |	Номенклатура,
		                      |	Характеристика,
		                      |	Партнер");	
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЦеныНоменклатурыПоставщиков.Номенклатура КАК Номенклатура,
		                      |	ЦеныНоменклатурыПоставщиков.Характеристика КАК Характеристика,
		                      |	ЦеныНоменклатурыПоставщиков.Партнер КАК Партнер,
		                      |	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		                      |			КОГДА &ВалютаУправленческогоУчета <> ЦеныНоменклатурыПоставщиков.Валюта
		                      |				ТОГДА ВЫБОР
		                      |						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		                      |								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		                      |								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		                      |								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		                      |							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		                      |						ИНАЧЕ 0
		                      |					КОНЕЦ
		                      |			ИНАЧЕ 1
		                      |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПоставщика
		                      |ИЗ
		                      |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, ) КАК ЦеныНоменклатурыПоставщиков
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		                      |		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУправленческогоУчета) КАК КурсыСрезПоследнихВалютаДокумента
		                      |		ПО (ИСТИНА)
		                      |ГДЕ
		                      |	ЦеныНоменклатурыПоставщиков.Номенклатура В(&Товары)
		                      |ИТОГИ
		                      |	МАКСИМУМ(ЦенаПоставщика)
		                      |ПО
		                      |	Номенклатура,
		                      |	Характеристика,
		                      |	Партнер");	
	КонецЕсли;
						  
	СписокПартнеров = Новый СписокЗначений;	
	Для Каждого ВыборкаПартнер Из ВозможныеПоставщики Цикл	
		Если ВыборкаПартнер.Пометка Тогда		
			СписокПартнеров.Добавить(ВыборкаПартнер.Ссылка);				
		КонецЕсли;		
	КонецЦикла;			
	
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Товары", ТаблицаНоменклатуры.Выгрузить(,"Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ЭлементНоменклатура = НайтиСтрокуТаблицыНоменклатуры(ТаблицаНоменклатуры,ВыборкаХарактеристика);
			
			Если ЭлементНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаПартнер = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПартнер.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаПартнер.Партнер) Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяКолонки = ПолучитьИмяКолонкиПоИдентификатору(ВыборкаПартнер.Партнер);
				Если ИмяКолонки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементНоменклатура["ЦенаПоставщика"+ИмяКолонки] = ВыборкаПартнер.ЦенаПоставщика;
				Если Объект.ИспользоватьМегапрайс Тогда
					ЭлементНоменклатура["ОстатокПоставщика"+ИмяКолонки] = ВыборкаПартнер.ОстатокКОнтрагента;
				КонецЕсли;						
			КонецЦикла;				
		КонецЦикла;			
	КонецЦикла;
	
	Для Каждого ЭлементНоменклатура Из ТаблицаНоменклатуры Цикл
		Для Каждого ВыборкаПоставщик Из ВозможныеПоставщики Цикл	
			Если ВыборкаПоставщик.Пометка Тогда		
				ИмяКолонки = ВыборкаПоставщик.ИмяКолонки;
				
				МинимальнаяЦена      = ЭлементНоменклатура["МинимальнаяЦена"];
				ЦенаТекПоставщика    = ЭлементНоменклатура["ЦенаПоставщика"+ИмяКолонки];
				ТекОстатокПоставщика = ЭлементНоменклатура["ОстатокПоставщика"+ИмяКолонки];
				
				Если Объект.ИспользоватьМегапрайс Тогда
					Если ТекОстатокПоставщика = 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ЦенаТекПоставщика > 0 И МинимальнаяЦена > ЦенаТекПоставщика Тогда
					ЭлементНоменклатура["МинимальнаяЦена"] = ЦенаТекПоставщика;
					ЭлементНоменклатура["РекомендуемыйПоставщик"] = ВыборкаПоставщик.Ссылка;
				ИначеЕсли ЦенаТекПоставщика > 0 И МинимальнаяЦена = 0 Тогда
					ЭлементНоменклатура["МинимальнаяЦена"] = ЦенаТекПоставщика;
					ЭлементНоменклатура["РекомендуемыйПоставщик"] = ВыборкаПоставщик.Ссылка;
				КонецЕсли;			
			КонецЕсли;		
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КРаспределению   = 0;

	Для Каждого ВыборкаПоставщик Из ВозможныеПоставщики Цикл	
		Если ВыборкаПоставщик.Пометка Тогда		
			ИмяКолонки = ВыборкаПоставщик.ИмяКолонки;
			
			КРаспределению = КРаспределению + ТекущиеДанные["ЗаказатьПоставщик"+ИмяКолонки];	
		КонецЕсли;		
	КонецЦикла;
	
	ТекущиеДанные.Распределено  = КРаспределению;
	
КонецПроцедуры

//============================================================================
// АНАЛИЗ

&НаСервере
Процедура АвтораспределитьПоМинимальнойЦенеСервер()
	
	ТаблицаНоменклатурыРеквизит = РеквизитФормыВЗначение("ТаблицаНоменклатуры");

	Для Каждого Подчиненный Из ТаблицаНоменклатурыРеквизит Цикл	
		Распределено   = Подчиненный.Заказать;
		КРаспределению = 0;

		Для Каждого ВыборкаПоставщик Из ВозможныеПоставщики Цикл
			Если Распределено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаПоставщик.Пометка Тогда		
				ИмяКолонки = ВыборкаПоставщик.ИмяКолонки;
				
				Если ВыборкаПоставщик.Ссылка = Подчиненный.РекомендуемыйПоставщик Тогда
					Подчиненный["ЗаказатьПоставщик"+ИмяКолонки] = Распределено;
				КонецЕсли;	
				
				КРаспределению = КРаспределению + Подчиненный["ЗаказатьПоставщик"+ИмяКолонки];
				Распределено = Распределено - КРаспределению;
			КонецЕсли;		
		КонецЦикла;
		
		Подчиненный.Распределено = КРаспределению;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНоменклатурыРеквизит, "ТаблицаНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАвтораспределитьПоМинимальнойЦене(Команда)
	
	 АвтораспределитьПоМинимальнойЦенеСервер();
	
 КонецПроцедуры

&НаКлиенте
 Процедура ТаблицаНоменклатурыПриАктивизацииСтроки(Элемент)
	 
	 ТекущиеДанные = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		
		ПараметрыЗапроса = Новый Структура;
	    ПараметрыЗапроса.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		
		ЦеныПоставщиковТовараПОлучить(ПараметрыЗапроса);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЦеныПоставщиковТовараПОлучить(ПараметрыЗапроса)
	
	ВозможныеПоставщикиТаб = РеквизитФормыВЗначение("ВозможныеПоставщикиРасшифровка");	
	ВозможныеПоставщикиТаб.Очистить();
	
	Если Объект.ИспользоватьМегапрайс Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер КАК Поставщик,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.БизнесРегион КАК БизнесРегион,
		|	мегапрайсПрайсыПартнеров.Валюта,
		|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(мегапрайсПрайсыПартнеров.Цена, 0) * ВЫБОР
		|				КОГДА &ВалютаУправленческогоУчета <> мегапрайсПрайсыПартнеров.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПоставщикаУпр,
		|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Количество) КАК ОстатокПоставщика
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК мегапрайсПрайсыПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = мегапрайсПрайсыПартнеров.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУправленческогоУчета) КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.Поставщик = ИСТИНА
		|	И мегапрайсПрайсыПартнеров.Номенклатура = &ВыбНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.БизнесРегион,
		|	мегапрайсПрайсыПартнеров.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.Наименование";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыПоставщиков.Партнер КАК Поставщик,
		|	ЦеныНоменклатурыПоставщиков.Партнер.БизнесРегион КАК БизнесРегион,
		|	ЦеныНоменклатурыПоставщиков.Валюта,
		|	МАКСИМУМ(ЦеныНоменклатурыПоставщиков.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|				КОГДА &ВалютаУправленческогоУчета <> ЦеныНоменклатурыПоставщиков.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПоставщикаУпр
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних КАК ЦеныНоменклатурыПоставщиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУправленческогоУчета) КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЦеныНоменклатурыПоставщиков.Партнер.Поставщик = ИСТИНА
		|	И ЦеныНоменклатурыПоставщиков.Номенклатура = &ВыбНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыПоставщиков.Партнер,
		|	ЦеныНоменклатурыПоставщиков.Партнер.БизнесРегион,
		|	ЦеныНоменклатурыПоставщиков.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыПоставщиков.Партнер.Наименование";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",Константы.ВалютаУправленческогоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = ВозможныеПоставщикиТаб.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб,Выборка);	
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ВозможныеПоставщикиТаб, "ВозможныеПоставщикиРасшифровка");

КонецПроцедуры

 
Кэш = Новый Соответствие;

