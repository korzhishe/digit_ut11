
//============================================================================
// СЛУЖЕБНЫЕ

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка) Экспорт
	
	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = ТекУпаковка.Коэффициент;
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;
	
	Возврат ТекКоэффициент;
	
КонецФункции

Функция ОкруглитьЧисло(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону = Истина) Экспорт
	
	Перем Результат;
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервалов = Число / ТочностьОкругления;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
	
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлится до 0.4
			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлится до 0.35,
			// а 0.376 до 0.4
			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//============================================================================
// ФОРМА

&НаСервере
Процедура ЗаполнитьВариантыПодбораПоставщиковСервер()
		
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоНаименьшейЦене";
	НовСтр.Представление = "Цены контрагентов: по наименьшей цене (типовые)";
	НовСтр.Пометка = Истина;
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоНаименьшейЦенеИНаличию";
	НовСтр.Представление = "Мегапрайс: по наименьшей цене с учетом наличия товара у поставщика";
	НовСтр.Пометка = Ложь;
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоПриоритетам";
	НовСтр.Представление = "Мегапрайс: по приоритетам поставщиков";
	НовСтр.Пометка = Ложь;
	
	НовСтр = Объект.ВариантыОпределенияПоставщиков.Добавить();
	НовСтр.Наименование = "ВариантПоПоследнейЗакупке";
	НовСтр.Представление = "По последней закупке (приходной накладной)";
	НовСтр.Пометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантыПодбораПоставщиков(Команда)
	
	ЗаполнитьВариантыПодбораПоставщиковСервер();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанными()
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	АдресВХранилище = Параметры.Адрес;
	
	Объект.ИспользоватьМегапрайс = СтруктураПараметров.ИспользоватьМегапрайс;
	Объект.НачалоПериода = СтруктураПараметров.НачалоПериода;
	Объект.КонецПериода  = СтруктураПараметров.КонецПериода;
	Объект.Периодичность = СтруктураПараметров.Периодичность;
	Объект.ВидЦенНоменклатуры = СтруктураПараметров.ВидЦенНоменклатуры;
	
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);

	Объект.ТаблицаПотребностей.Очистить();
	
	Для Каждого Строка из СтруктураПараметров.ТаблицаПотребностей Цикл			
		НоваяСтрока = Объект.ТаблицаПотребностей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.НоменклатураИсточник       = НоваяСтрока.Номенклатура;
		НоваяСтрока.КоличествоЗаказатьИсходное = НоваяСтрока.Заказать;
	КонецЦикла;
	
	Для Каждого Строка из СтруктураПараметров.ВариантыОпределенияПоставщиков Цикл			
		НоваяСтрока = Объект.ВариантыОпределенияПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	Попытка
		СтатусЗаказа = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	Исключение
	КонецПопытки;
	
	Объект.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДанными();
	
	Объект.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");

	Если Объект.ИспользоватьМегапрайс ИЛИ Объект.ИспользоватьМинимальныйЗаказ Тогда
		ИспользоватьМинимальныйЗаказПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Элементы.ТаблицаПотребностейХарактеристикаНоменклатуры.Видимость = Объект.ИспользоватьХарактеристикиНоменклатуры;
	Элементы.ТаблицаПотребностейНоменклатураИсточник.Видимость = Объект.ИспользоватьАналогиНоменклатуры;
	Элементы.ТаблицаПотребностейКоэффициентУпаковки.Видимость = Объект.ИспользоватьМинимальныйЗаказ;
	Элементы.ТаблицаПотребностейКоличествоУпаковок.Видимость = Объект.ИспользоватьМинимальныйЗаказ;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Сообщить("ВНИМАНИЕ. В таблице могут быть старые данные! Необходимо закрыть это окно.");

КонецПроцедуры

//============================================================================
// ОСНОВНЫЕ ДЕЙСТВИЯ

&НаСервере
Функция СоздатьЗаказПоставщикуСервер(СтруктураПараметров)
	
	НовыйДокумент  = Документы.ЗаказПоставщику.ПустаяСсылка();
	МассивДокументов = Новый Массив;
	
	ВремПоставщик = "";
	
	Объект.ТаблицаПотребностей.Сортировать("Поставщик,Соглашение,Номенклатура");
		
	ТаблицаРазделения = Объект.ТаблицаПотребностей.Выгрузить();
	ТаблицаРазделения.Свернуть("Поставщик,Соглашение,Валюта");
	
	Для Каждого Шапка Из ТаблицаРазделения Цикл		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Поставщик",Шапка.Поставщик);
		ПараметрыОтбора.Вставить("Соглашение",Шапка.Соглашение);
		ПараметрыОтбора.Вставить("Валюта",Шапка.Валюта);

		НовыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
		НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
		НовыйДокумент.Дата        = ТекущаяДата();
		
		НовыйДокумент.Согласован  = Истина;
		НовыйДокумент.Статус      = СтруктураПараметров.СтатусЗаказа;
		НовыйДокумент.Приоритет   = СтруктураПараметров.Приоритет;
		НовыйДокумент.Менеджер    = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Комментарий = "Мегапрайс - помощник закупок.";

		НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;		
		НовыйДокумент.Партнер = Шапка.Поставщик;
		НовыйДокумент.Соглашение = Шапка.Соглашение;
		НовыйДокумент.Заполнить(Шапка.Поставщик);				
		НовыйДокумент.Валюта = Шапка.Валюта;
		
		Если ЗначениеЗаполнено(НовыйДокумент.Соглашение) Тогда
			НовыйДокумент.ЗаполнитьУсловияЗакупокПоСоглашению(); //ДО 11.4.5 .ЗаполнитьУсловияЗакупокПоСоглашению();
		Иначе
			НовыйДокумент.ЗаполнитьУсловияЗакупокПоУмолчанию();
		КонецЕсли;
		НовыйДокумент.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, НовыйДокумент.Договор);

		ТаблЧасть = Объект.ТаблицаПотребностей.НайтиСтроки(ПараметрыОтбора);

		Для Каждого Стр из ТаблЧасть Цикл
			
			КоэффициентУпаковки = 1; //ПолучитьКоэффициентУпаковки(Стр.Упаковка); 
			
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			СтрокаТЧ.Склад            = НовыйДокумент.Склад;
			СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			СтрокаТЧ.Характеристика   = Стр.Характеристика;
			СтрокаТЧ.Количество       = Стр.Заказать;
			СтрокаТЧ.КоличествоУпаковок = Стр.Заказать;
			СтрокаТЧ.Цена               = Стр.ЦенаЗаказа;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Шапка.Поставщик);
			
			//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
			
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			//СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(НовыйДокумент));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЦикла;
		
		Если НовыйДокумент.Товары.Количество() > 0 Тогда
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",Новый Структура("НалогообложениеНДС, Дата", НовыйДокумент.НалогообложениеНДС, НовыйДокумент.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(НовыйДокумент));
			
			СтруктураТЧ = Новый Структура;
			СтруктураТЧ.Вставить("СтрокиТЧ" , НовыйДокумент.Товары);
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий, Неопределено);
			
			НовыйДокумент.Записать();
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
			НоваяСтрока = Объект.СформированныеДокументы.Добавить();
			НоваяСтрока.Партнер         = Шапка.Поставщик;
			НоваяСтрока.ЗаказПоставщику = НовыйДокумент.Ссылка;
		КонецЕсли;

	КонецЦикла;
	
	Возврат МассивДокументов;	
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьЗаказПоставщикуЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПоставщикуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЗаказа",СтатусЗаказа);
	СтруктураПараметров.Вставить("Приоритет",Приоритет);
	
	СоздатьЗаказПоставщикуСервер(СтруктураПараметров);
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.СтраницаСформированныеДокументы;
	
КонецПроцедуры


&НаКлиенте
Процедура СформированныеДокументыВыполнить(Команда)
	
	СформированныеДокументыВыполнитьНаСервере();
	
	Для Каждого Строка Из Объект.СформированныеДокументы Цикл
		
		Если Объект.ОткрытьДокументы Тогда
			ФормаДока = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента", Новый Структура("Ключ", Строка.ЗаказПоставщику)); 
			ФормаДока.Открыть();
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура СформированныеДокументыВыполнитьНаСервере()
	
	Для Каждого Строка Из Объект.СформированныеДокументы Цикл
				
		Если Объект.ПровестиДокументы Тогда
			ЗаказОбъект = Строка.ЗаказПоставщику.ПолучитьОбъект();
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

//============================================================================
// СПИСОК

&НаСервереБезКонтекста
Функция ИнформацияСформироватьРасшифровкаИсторияПоступлений(ПараметрыЗапроса) 
	
	ТаблицаРезультат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Период КАК Дата,
	|	ПоступлениеТоваровУслуг.Партнер КАК Партнер,
	|	ПоступлениеТоваровУслуг.Регистратор КАК ДокументЗакупки,
	|	СУММА(ПоступлениеТоваровУслуг.КоличествоОборот) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ПоступлениеТоваровУслуг.КоличествоОборот) > 0
	|			ТОГДА СУММА(ПоступлениеТоваровУслуг.СуммаОборот) / СУММА(ПоступлениеТоваровУслуг.КоличествоОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаЗакупки,
	|	ПоступлениеТоваровУслуг.Регистратор.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(&НачалоПериода, &КонецПериода, Регистратор, АналитикаУчетаНоменклатуры.Номенклатура = &ВыбНоменклатура) КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Период,
	|	ПоступлениеТоваровУслуг.Регистратор,
	|	ПоступлениеТоваровУслуг.Партнер,
	|	ПоступлениеТоваровУслуг.Регистратор.Валюта,
	|	ПоступлениеТоваровУслуг.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.Характеристика);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыЗапроса.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыЗапроса.КонецПериода));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрока Из РезультатЗапроса Цикл		
		НоваяСтрока = Новый Структура("Дата, Контрагент, ДокументЗакупки, Количество, ЦенаЗакупки, Валюта, Склад");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрока);
		
		ТаблицаРезультат.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	Возврат Новый Структура("ТаблицаРезультат",ТаблицаРезультат);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДетализацию()
	
	ТекущиеДанные = Элементы.ТаблицаПотребностей.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыЗапроса.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыЗапроса.Вставить("ЦенаПродажи", ТекущиеДанные.ЦенаПродажи);

	ПараметрыЗапроса.Вставить("ИспользоватьМегапрайс", Объект.ИспользоватьМегапрайс);
	ПараметрыЗапроса.Вставить("ВидЦенНоменклатуры", Объект.ВидЦенНоменклатуры);
	ПараметрыЗапроса.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗапроса.Вставить("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	ПараметрыЗапроса.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
	ПараметрыЗапроса.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыЗапроса.Вставить("КоличествоПериодовАнализа", Объект.КоличествоПериодовАнализа);
	
	ЦеныПоставщиковТовараПолучить(ПараметрыЗапроса);
	
	

	СтруктураИнформации = ИнформацияСформироватьРасшифровкаИсторияПоступлений(ПараметрыЗапроса);
	РасшифровкаИсторияПоступлений.Очистить();
	
	Для Каждого ВыборкаСтрока Из СтруктураИнформации.ТаблицаРезультат Цикл				
		НоваяСтрока = РасшифровкаИсторияПоступлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрока);
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиДетализацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДетализацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПриАктивизацииСтроки(Элемент)
		
	ОбновитьДетализацию();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СформироватьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ЦеныПоставщиковТовараПолучить(ПараметрыЗапроса)
	
	Если ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		ВалютаЦеныПродажи = ПараметрыЗапроса.ВидЦенНоменклатуры.ВалютаЦены;
	Иначе
		ВалютаЦеныПродажи = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;	

	РасшифровкаЦеныПоставщиковТаб = РеквизитФормыВЗначение("РасшифровкаЦеныПоставщиков");	
	РасшифровкаЦеныПоставщиковТаб.Очистить();
	
	Если ПараметрыЗапроса.ИспользоватьМегапрайс Тогда 
		
		ПеречислениеВариантыКурса = Перечисления.мегапрайсВариантКурсаВалютыКонтрагента;

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	мегапрайсПрайсыПартнеров.Номенклатура КАК Номенклатура,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер КАК Поставщик,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера КАК ПрайсПартнера,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Соглашение КАК Соглашение,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Приоритет КАК Приоритет,
		|	мегапрайсПрайсыПартнеров.Валюта КАК Валюта,
		|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(мегапрайсПрайсыПартнеров.Цена, 0) * ВЫБОР
		|				КОГДА &ВалютаЦеныПродажи <> мегапрайсПрайсыПартнеров.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПересчет,
		|	МАКСИМУМ(мегапрайсПрайсыПартнеров.СрокПоставки) КАК СрокПоставки,
		|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Количество) КАК ОстатокКонтрагента,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ВариантКурсаВалютыКонтрагента КАК ВариантКурсаВалютыКонтрагента,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ИскажениеКурсаВалюты КАК ИскажениеКурсаВалюты,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ФиксированныйКурс КАК ФиксированныйКурс,
		|	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток,
		|	СУММА(ЗаказыПоставщикамОстатки.КОформлениюОстаток) КАК КОформлениюОстаток
		|ИЗ
		|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура В (&ВыбНоменклатура)
		|				И ПрайсПартнера.Партнер.Поставщик = ИСТИНА) КАК мегапрайсПрайсыПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = мегапрайсПрайсыПартнеров.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаЦеныПродажи) КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
		|		ПО мегапрайсПрайсыПартнеров.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.Характеристика
		|			И мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер = ЗаказыПоставщикамОстатки.ЗаказПоставщику.Партнер
		|
		|СГРУППИРОВАТЬ ПО
		|	мегапрайсПрайсыПартнеров.Номенклатура,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Соглашение,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Приоритет,
		|	мегапрайсПрайсыПартнеров.Валюта,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ВариантКурсаВалютыКонтрагента,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ИскажениеКурсаВалюты,
		|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ФиксированныйКурс
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыПоставщиков.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыПоставщиков.Партнер КАК Поставщик,
		|	ЦеныНоменклатурыПоставщиков.Валюта КАК Валюта,
		|	МАКСИМУМ(ЦеныНоменклатурыПоставщиков.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|				КОГДА &ВалютаЦеныПродажи <> ЦеныНоменклатурыПоставщиков.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПересчет,
		|	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток,
		|	СУММА(ЗаказыПоставщикамОстатки.КОформлениюОстаток) КАК КОформлениюОстаток
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			,
		|			Номенклатура В (&ВыбНоменклатура)
		|				И Партнер.Поставщик = ИСТИНА) КАК ЦеныНоменклатурыПоставщиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаЦеныПродажи) КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
		|		ПО ЦеныНоменклатурыПоставщиков.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ЦеныНоменклатурыПоставщиков.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|			И ЦеныНоменклатурыПоставщиков.Партнер = ЗаказыПоставщикамОстатки.ЗаказПоставщику.Партнер
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыПоставщиков.Номенклатура,
		|	ЦеныНоменклатурыПоставщиков.Партнер,
		|	ЦеныНоменклатурыПоставщиков.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыПоставщиков.Партнер.Наименование";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура",ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",ПараметрыЗапроса.Характеристика);
	Запрос.УстановитьПараметр("ВалютаЦеныПродажи",ВалютаЦеныПродажи);
		
	СписокАналогов = Новый Массив();
	Если Объект.ИспользоватьАналогиНоменклатуры Тогда
		ТекстЗапросаАналоги = 
		"ВЫБРАТЬ
		|	мегапрайсВзаимозаменяемостьНоменклатуры.АналогНоменклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.мегапрайсВзаимозаменяемостьНоменклатуры КАК мегапрайсВзаимозаменяемостьНоменклатуры
		|ГДЕ
		|	мегапрайсВзаимозаменяемостьНоменклатуры.Номенклатура = &ВыбНоменклатура";
		
		ЗапросАналоги = Новый Запрос;
		ЗапросАналоги.Текст = ТекстЗапросаАналоги;
		ЗапросАналоги.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
		
		РезультатЗапросаАналоги = ЗапросАналоги.Выполнить();
		СписокАналогов = РезультатЗапросаАналоги.Выгрузить().ВыгрузитьКолонку("Номенклатура");
		СписокАналогов.Добавить(ПараметрыЗапроса.Номенклатура);
		Запрос.УстановитьПараметр("ВыбНоменклатура",СписокАналогов);		
	Иначе
		СписокАналогов.Добавить(ПараметрыЗапроса.Номенклатура);
		Запрос.УстановитьПараметр("ВыбНоменклатура",СписокАналогов);
	КонецЕсли;		
	
	ВалютаРасчетная = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	СтруктураВалютыРасчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
	ПоКурсуНач = 0;
	ПоКурсуНачКратность = 0;
	ЦенаПродажи = ПараметрыЗапроса.ЦенаПродажи;

	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДоб = РасшифровкаЦеныПоставщиковТаб.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоб,Выборка);	
		
		Если ЗначениеЗаполнено(ВалютаРасчетная) И ВалютаРасчетная <> Выборка.Валюта Тогда			
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, ТекущаяДата());
			ПоКурсуНач = СтруктураВалюты.Курс;
			ПоКурсуНачКратность = СтруктураВалюты.Кратность;

			Если ПараметрыЗапроса.ИспользоватьМегапрайс Тогда
				Если Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБ Тогда
				ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсЧисло Тогда
					ПоКурсуНач = ПоКурсуНач + Выборка.ИскажениеКурсаВалюты;
				ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсПроцент Тогда	
					ПоКурсуНач = ПоКурсуНач *(1+Выборка.ИскажениеКурсаВалюты/100);
				ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.ФиксированныйКурс Тогда	
					ПоКурсуНач = Выборка.ФиксированныйКурс;
				КонецЕсли;
			КонецЕсли;
			СтрокаДоб.ЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.ЦенаПоставщика, Выборка.Валюта, ВалютаРасчетная, ПоКурсуНач, СтруктураВалютыРасчета.Курс,ПоКурсуНачКратность,СтруктураВалютыРасчета.Кратность);
		КонецЕсли;

		Если СтрокаДоб.ЦенаПересчет > 0 И ЦенаПродажи > 0 Тогда
			НаценкаКЦенеКомпании = (ЦенаПродажи - СтрокаДоб.ЦенаПересчет)*100 / СтрокаДоб.ЦенаПересчет;
			СтрокаДоб.Наценка = НаценкаКЦенеКомпании;
		КонецЕсли;
	КонецЦикла;	
	
	РасшифровкаЦеныПоставщиковТаб.Сортировать("ЦенаПересчет Возр");
	
	ЗначениеВРеквизитФормы(РасшифровкаЦеныПоставщиковТаб, "РасшифровкаЦеныПоставщиков");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаЦеныПоставщиков.ТекущиеДанные;
	
	Для Каждого Строка Из Элементы.ТаблицаПотребностей.ВыделенныеСтроки Цикл
		СтрокаСоотв = Объект.ТаблицаПотребностей.Получить(Строка);
		СтрокаСоотв.Номенклатура = ТекущиеДанные.Номенклатура;
		СтрокаСоотв.Поставщик    = ТекущиеДанные.Поставщик;
		СтрокаСоотв.ЦенаЗаказа   = ТекущиеДанные.ЦенаПоставщика;
		СтрокаСоотв.Сумма        = СтрокаСоотв.Заказать * СтрокаСоотв.ЦенаЗаказа;
		СтрокаСоотв.Валюта       = ТекущиеДанные.Валюта;
		СтрокаСоотв.Соглашение   = ТекущиеДанные.Соглашение;
		
		Если СтрокаСоотв.ЦенаПересчет > 0 И СтрокаСоотв.ЦенаПродажи > 0 Тогда
			НаценкаКЦенеКомпании = (СтрокаСоотв.ЦенаПродажи - СтрокаСоотв.ЦенаПересчет)*100 / СтрокаСоотв.ЦенаПересчет;
			СтрокаСоотв.Наценка = НаценкаКЦенеКомпании;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьИтоги();
	
КонецПроцедуры

//============================================================================
// ПОДБОР ПОСТАВЩИКОВ

&НаСервере
Процедура ПодборПоставщикаПоНаименьшейЦенеСервер(НомерВарианта)
	
	Если ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		ВалютаЦеныПродажи = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	Иначе
		ВалютаЦеныПродажи = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Характеристика КАК ХарактеристикаНоменклатуры,
	|	ЦеныНоменклатурыПоставщиков.Партнер КАК Поставщик,
	|	ЦеныНоменклатурыПоставщиков.Валюта КАК Валюта,
	|	МАКСИМУМ(ЦеныНоменклатурыПоставщиков.Цена) КАК ЦенаПоставщика,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
	|				КОГДА &ВалютаЦеныПродажи <> ЦеныНоменклатурыПоставщиков.Валюта
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПересчет
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Партнер.Поставщик = ИСТИНА) КАК ЦеныНоменклатурыПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаЦеныПродажи) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЦеныНоменклатурыПоставщиков.Период >= &ЦеныПоставщиковОграничениеПоДате
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыПоставщиков.Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Характеристика,
	|	ЦеныНоменклатурыПоставщиков.Партнер,
	|	ЦеныНоменклатурыПоставщиков.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦенаПоставщика УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ЦенаПоставщика),
	|	МАКСИМУМ(ЦенаПересчет)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Поставщик,
	|	Валюта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Номенклатура",Объект.ТаблицаПотребностей.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("ВалютаЦеныПродажи",ВалютаЦеныПродажи);
	Запрос.Параметры.Вставить("ЦеныПоставщиковОграничениеПоДате",Объект.ЦеныПоставщиковОграничениеПоДате);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	Пока Выборка.Следующий() Цикл
		
		ВыборкаХарактеристики = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаХарактеристики.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ВыборкаХарактеристики.ХарактеристикаНоменклатуры);
			
			НайденныеСтроки = Объект.ТаблицаПотребностей.НайтиСтроки(ПараметрыОтбора);		
			Если НайденныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				ВыборкаКонтрагенты = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
				Пока ВыборкаКонтрагенты.Следующий() Цикл
					ВыборкаВалюта = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
					Пока ВыборкаВалюта.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
							СтрокаТаблицы.КлючОпределения = НомерВарианта;
							СтрокаТаблицы.Поставщик    = ВыборкаВалюта.Поставщик;
							СтрокаТаблицы.ЦенаЗаказа   = ВыборкаВалюта.ЦенаПоставщика;
							СтрокаТаблицы.Валюта       = ВыборкаВалюта.Валюта;
							СтрокаТаблицы.ЦенаПересчет = ВыборкаВалюта.ЦенаПересчет;
							СтрокаТаблицы.Сумма        = СтрокаТаблицы.Заказать * СтрокаТаблицы.ЦенаЗаказа;
						КонецЕсли;
						
						Если СтрокаТаблицы.ЦенаПересчет > ВыборкаВалюта.ЦенаПересчет Тогда
							СтрокаТаблицы.КлючОпределения = НомерВарианта;
							СтрокаТаблицы.Поставщик    = ВыборкаВалюта.Поставщик;
							СтрокаТаблицы.ЦенаЗаказа   = ВыборкаВалюта.ЦенаПоставщика;
							СтрокаТаблицы.Валюта       = ВыборкаВалюта.Валюта;
							СтрокаТаблицы.ЦенаПересчет = ВыборкаВалюта.ЦенаПересчет;
							СтрокаТаблицы.Сумма        = СтрокаТаблицы.Заказать * СтрокаТаблицы.ЦенаЗаказа;
						КонецЕсли;
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПодборПоставщикаПоНаименьшейЦенеИНаличиюСервер(НомерВарианта)
	
	ПеречислениеВариантыКурса = Перечисления.мегапрайсВариантКурсаВалютыКонтрагента;

	Если ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		ВалютаЦеныПродажи = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	Иначе
		ВалютаЦеныПродажи = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;	

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	мегапрайсПрайсыПартнеров.Номенклатура КАК Номенклатура,
	|	мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер КАК Поставщик,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Соглашение КАК Соглашение,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Приоритет КАК Приоритет,
	|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Цена) КАК ЦенаПоставщика,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(мегапрайсПрайсыПартнеров.Цена, 0) * ВЫБОР
	|				КОГДА &ВалютаЦеныПродажи <> мегапрайсПрайсыПартнеров.Валюта
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПересчет,
	|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Количество) КАК ОстатокКонтрагента,
	|	мегапрайсПрайсыПартнеров.Валюта КАК Валюта,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ВариантКурсаВалютыКонтрагента КАК ВариантКурсаВалютыКонтрагента,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ИскажениеКурсаВалюты КАК ИскажениеКурсаВалюты,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ФиксированныйКурс КАК ФиксированныйКурс
	|ИЗ
	|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК мегапрайсПрайсыПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = мегапрайсПрайсыПартнеров.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаЦеныПродажи) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	мегапрайсПрайсыПартнеров.Номенклатура В(&Номенклатура)
	|	И мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.Поставщик = ИСТИНА
	|	И мегапрайсПрайсыПартнеров.Период >= &ЦеныПоставщиковОграничениеПоДате
	|
	|СГРУППИРОВАТЬ ПО
	|	мегапрайсПрайсыПартнеров.Номенклатура,
	|	мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Соглашение,
	|	мегапрайсПрайсыПартнеров.Валюта,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ВариантКурсаВалютыКонтрагента,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ИскажениеКурсаВалюты,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ФиксированныйКурс,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦенаПоставщика,
	|	ОстатокКонтрагента УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ЦенаПоставщика),
	|	МАКСИМУМ(ЦенаПересчет),
	|	МАКСИМУМ(ОстатокКонтрагента)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Поставщик,
	|	Соглашение,
	|	Валюта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Номенклатура",Объект.ТаблицаПотребностей.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("ВалютаЦеныПродажи",ВалютаЦеныПродажи);
	Запрос.Параметры.Вставить("ЦеныПоставщиковОграничениеПоДате",Объект.ЦеныПоставщиковОграничениеПоДате);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ВалютаРасчетная = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	СтруктураВалютыРасчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
	ПоКурсуНач = 0;
	ПоКурсуНачКратность = 0;

	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	Пока Выборка.Следующий() Цикл
		
		ВыборкаХарактеристики = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаХарактеристики.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ВыборкаХарактеристики.ХарактеристикаНоменклатуры);
			
			НайденныеСтроки = Объект.ТаблицаПотребностей.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				ВыборкаКонтрагенты = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
				Пока ВыборкаКонтрагенты.Следующий() Цикл
					ВыборкаВалюта = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
					Пока ВыборкаВалюта.Следующий() Цикл
						
						ОстатокПоставщика  = ВыборкаВалюта.ОстатокКонтрагента;
						Если ОстатокПоставщика = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаТаблицыЦенаПересчет = СтрокаТаблицы.ЦенаПересчет;
						
						Если ВалютаРасчетная <> Выборка.Валюта Тогда			
							СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, ТекущаяДата());
							ПоКурсуНач = СтруктураВалюты.Курс;
							ПоКурсуНачКратность = СтруктураВалюты.Кратность;
							
							Если Объект.ИспользоватьМегапрайс Тогда
								Если Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБ Тогда
								ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсЧисло Тогда
									ПоКурсуНач = ПоКурсуНач + Выборка.ИскажениеКурсаВалюты;
								ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсПроцент Тогда	
									ПоКурсуНач = ПоКурсуНач *(1+Выборка.ИскажениеКурсаВалюты/100);
								ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.ФиксированныйКурс Тогда	
									ПоКурсуНач = Выборка.ФиксированныйКурс;
								КонецЕсли;
							КонецЕсли;
							СтрокаТаблицыЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.ЦенаПоставщика, Выборка.Валюта, ВалютаРасчетная, ПоКурсуНач, СтруктураВалютыРасчета.Курс,ПоКурсуНачКратность,СтруктураВалютыРасчета.Кратность);
						КонецЕсли;

						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
							СтрокаТаблицы.КлючОпределения = НомерВарианта;
							СтрокаТаблицы.Поставщик    = ВыборкаВалюта.Поставщик;
							СтрокаТаблицы.ЦенаЗаказа   = ВыборкаВалюта.ЦенаПоставщика;
							СтрокаТаблицы.Валюта        = ВыборкаВалюта.Валюта;
							СтрокаТаблицы.ЦенаПересчет = СтрокаТаблицыЦенаПересчет;
							СтрокаТаблицы.Сумма        = СтрокаТаблицы.Заказать * СтрокаТаблицы.ЦенаЗаказа;
						КонецЕсли;
						
						Если СтрокаТаблицыЦенаПересчет > ВыборкаВалюта.ЦенаПересчет Тогда
							СтрокаТаблицы.КлючОпределения = НомерВарианта;
							СтрокаТаблицы.Поставщик    = ВыборкаВалюта.Поставщик;
							СтрокаТаблицы.ЦенаЗаказа   = ВыборкаВалюта.ЦенаПоставщика;
							СтрокаТаблицы.Валюта        = ВыборкаВалюта.Валюта;
							СтрокаТаблицы.ЦенаПересчет = СтрокаТаблицыЦенаПересчет;
							СтрокаТаблицы.Сумма        = СтрокаТаблицы.Заказать * СтрокаТаблицы.ЦенаЗаказа;
						КонецЕсли;
						
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПодборПоставщикаПоПриоритетамСервер(НомерВарианта)
	
	ПеречислениеВариантыКурса = Перечисления.мегапрайсВариантКурсаВалютыКонтрагента;

	Если ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		ВалютаЦеныПродажи = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	Иначе
		ВалютаЦеныПродажи = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;	

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	мегапрайсПрайсыПартнеров.Номенклатура КАК Номенклатура,
	|	мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Приоритет КАК Приоритет,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер КАК Поставщик,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Соглашение КАК Соглашение,
	|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Цена) КАК ЦенаПоставщика,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(мегапрайсПрайсыПартнеров.Цена, 0) * ВЫБОР
	|				КОГДА &ВалютаЦеныПродажи <> мегапрайсПрайсыПартнеров.Валюта
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПересчет,
	|	МАКСИМУМ(мегапрайсПрайсыПартнеров.Количество) КАК ОстатокКонтрагента,
	|	мегапрайсПрайсыПартнеров.Валюта КАК Валюта,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ВариантКурсаВалютыКонтрагента КАК ВариантКурсаВалютыКонтрагента,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ИскажениеКурсаВалюты КАК ИскажениеКурсаВалюты,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ФиксированныйКурс КАК ФиксированныйКурс
	|ИЗ
	|	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних КАК мегапрайсПрайсыПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = мегапрайсПрайсыПартнеров.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаЦеныПродажи) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	мегапрайсПрайсыПартнеров.Номенклатура В(&Номенклатура)
	|	И мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер.Поставщик = ИСТИНА
	|	И мегапрайсПрайсыПартнеров.Период >= &ЦеныПоставщиковОграничениеПоДате
	|
	|СГРУППИРОВАТЬ ПО
	|	мегапрайсПрайсыПартнеров.Номенклатура,
	|	мегапрайсПрайсыПартнеров.ХарактеристикаНоменклатуры,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Приоритет,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Партнер,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.Соглашение,
	|	мегапрайсПрайсыПартнеров.Валюта,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ВариантКурсаВалютыКонтрагента,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ИскажениеКурсаВалюты,
	|	мегапрайсПрайсыПартнеров.ПрайсПартнера.ФиксированныйКурс
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ЦенаПоставщика),
	|	МАКСИМУМ(ЦенаПересчет),
	|	МАКСИМУМ(ОстатокКонтрагента)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Поставщик,
	|	Соглашение,
	|	Валюта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Номенклатура",Объект.ТаблицаПотребностей.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("ВалютаЦеныПродажи",ВалютаЦеныПродажи);
	Запрос.Параметры.Вставить("ЦеныПоставщиковОграничениеПоДате",Объект.ЦеныПоставщиковОграничениеПоДате);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ВалютаРасчетная = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	СтруктураВалютыРасчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетная, ТекущаяДата());
	ПоКурсуНач = 0;
	ПоКурсуНачКратность = 0;

	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	Пока Выборка.Следующий() Цикл
		
		ВыборкаХарактеристики = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ВыборкаХарактеристики.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ВыборкаХарактеристики.ХарактеристикаНоменклатуры);
			
			НайденныеСтроки = Объект.ТаблицаПотребностей.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
					Продолжить;
				КонецЕсли;
				
				ВыборкаКонтрагенты = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
				Пока ВыборкаКонтрагенты.Следующий() Цикл
					ВыборкаВалюта = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
					Пока ВыборкаВалюта.Следующий() Цикл
						
						ОстатокПоставщика  = ВыборкаВалюта.ОстатокКонтрагента;
						Если ОстатокПоставщика = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаТаблицыЦенаПересчет = СтрокаТаблицы.ЦенаПересчет;
						
						Если ВалютаРасчетная <> Выборка.Валюта Тогда			
							СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, ТекущаяДата());
							ПоКурсуНач = СтруктураВалюты.Курс;
							ПоКурсуНачКратность = СтруктураВалюты.Кратность;
							
							Если Объект.ИспользоватьМегапрайс Тогда
								Если Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБ Тогда
								ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсЧисло Тогда
									ПоКурсуНач = ПоКурсуНач + Выборка.ИскажениеКурсаВалюты;
								ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.КурсВалютыЦБПлюсПроцент Тогда	
									ПоКурсуНач = ПоКурсуНач *(1+Выборка.ИскажениеКурсаВалюты/100);
								ИначеЕсли Выборка.ВариантКурсаВалютыКонтрагента = ПеречислениеВариантыКурса.ФиксированныйКурс Тогда	
									ПоКурсуНач = Выборка.ФиксированныйКурс;
								КонецЕсли;
							КонецЕсли;
							СтрокаТаблицыЦенаПересчет = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.ЦенаПоставщика, Выборка.Валюта, ВалютаРасчетная, ПоКурсуНач, СтруктураВалютыРасчета.Курс,ПоКурсуНачКратность,СтруктураВалютыРасчета.Кратность);
						КонецЕсли;
						
						СтрокаТаблицы.КлючОпределения = НомерВарианта;
						СтрокаТаблицы.Поставщик    = ВыборкаВалюта.Поставщик;
						СтрокаТаблицы.ЦенаЗаказа   = ВыборкаВалюта.ЦенаПоставщика;
						СтрокаТаблицы.Валюта       = ВыборкаВалюта.Валюта;
						СтрокаТаблицы.ЦенаПересчет = СтрокаТаблицыЦенаПересчет;
						СтрокаТаблицы.Сумма        = СтрокаТаблицы.Заказать * СтрокаТаблицы.ЦенаЗаказа;
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПодборПоставщикаВариантПоПоследнейЗакупкеСервер(НомерВарианта)
	
	Если ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		ВалютаЦеныПродажи = Объект.ВидЦенНоменклатуры.ВалютаЦены;
	Иначе
		ВалютаЦеныПродажи = Константы.ВалютаУчета.Получить();
	КонецЕсли;	
	
	
	Для Каждого ВыборкаСтрока Из Объект.ТаблицаПотребностей Цикл
		
		Если ЗначениеЗаполнено(ВыборкаСтрока.Поставщик) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Характеристика КАК ХарактеристикаНоменклатуры,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Поставщик,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Валюта КАК Валюта,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата КАК Дата,
		|	МАКСИМУМ(ПриходнаяНакладнаяЗапасы.Цена) КАК ЦенаПоставщика,
		|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Цена, 0) * ВЫБОР
		|				КОГДА &ВалютаЦеныПродажи <> ПриходнаяНакладнаяЗапасы.Ссылка.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ЦенаПересчет
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриходнаяНакладнаяЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ПриходнаяНакладнаяЗапасы.Ссылка.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаЦеныПродажи) КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Номенклатура = &Номенклатура
		|	И ПриходнаяНакладнаяЗапасы.Характеристика = &ХарактеристикаНоменклатуры
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата,
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Характеристика,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(ЦенаПоставщика),
		|	МАКСИМУМ(ЦенаПересчет)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Поставщик,
		|	Валюта";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.Параметры.Вставить("Номенклатура",ВыборкаСтрока.Номенклатура);      
		Запрос.Параметры.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрока.Характеристика);
		Запрос.УстановитьПараметр("ВалютаЦеныПродажи",ВалютаЦеныПродажи);
		
		РезультатЗапроса = Запрос.Выполнить(); 
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока Выборка.Следующий() Цикл		
			ВыборкаХарактеристики = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
			Пока ВыборкаХарактеристики.Следующий() Цикл
				ВыборкаКонтрагенты = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Поставщик");
				Пока ВыборкаКонтрагенты.Следующий() Цикл
					ВыборкаВалюта = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
					Пока ВыборкаВалюта.Следующий() Цикл
						ВыборкаСтрока.КлючОпределения = НомерВарианта;
						ВыборкаСтрока.Поставщик    = ВыборкаВалюта.Поставщик;
						ВыборкаСтрока.ЦенаЗаказа   = ВыборкаВалюта.ЦенаПоставщика;
						ВыборкаСтрока.Валюта       = ВыборкаВалюта.Валюта;
						ВыборкаСтрока.ЦенаПересчет = ВыборкаВалюта.ЦенаПересчет;
						ВыборкаСтрока.Сумма        = ВыборкаСтрока.Заказать * ВыборкаСтрока.ЦенаЗаказа;
					КонецЦикла;	
				КонецЦикла;			
			КонецЦикла;
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАнализПоставщиков()
	
	Для Каждого Строка Из Объект.ТаблицаПотребностей Цикл
		Строка.Поставщик = "";
	КонецЦикла;
	
	Для Каждого Вариант Из Объект.ВариантыОпределенияПоставщиков Цикл
		Если НЕ Вариант.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Вариант.Наименование = "ВариантПоНаименьшейЦене" Тогда
			ПодборПоставщикаПоНаименьшейЦенеСервер(Вариант.НомерСтроки);
		ИначеЕсли Вариант.Наименование = "ВариантПоНаименьшейЦенеИНаличию" Тогда
			ПодборПоставщикаПоНаименьшейЦенеИНаличиюСервер(Вариант.НомерСтроки);
		ИначеЕсли Вариант.Наименование = "ВариантПоПриоритетам" Тогда
			ПодборПоставщикаПоПриоритетамСервер(Вариант.НомерСтроки);	
		ИначеЕсли Вариант.Наименование = "ВариантПоПоследнейЗакупке" Тогда
			ПодборПоставщикаВариантПоПоследнейЗакупкеСервер(Вариант.НомерСтроки);		
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦенНоменклатуры) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Объект.ТаблицаПотребностей Цикл		
		Строка.ЦенаПродажи = ПолучитьЦенуНоменклатуры(Строка.Номенклатура,Строка.Характеристика,Объект.ВидЦенНоменклатуры,ТекущаяДата());
		
		Если Строка.ЦенаПересчет > 0 И Строка.ЦенаПродажи > 0 Тогда
			НаценкаКЦенеКомпании = (Строка.ЦенаПродажи - Строка.ЦенаПересчет)*100 / Строка.ЦенаПересчет;
			Строка.Наценка = НаценкаКЦенеКомпании;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполнитьАнализПоставщиков(Команда)
	
	ВыполнитьАнализПоставщиков();
	
	СформироватьИтоги();
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.ФормированиеЗаказов;
	
КонецПроцедуры

//============================================================================
// ИТОГИ ПО ПОСТАВЩИКАМ

&НаСервере
Процедура СформироватьИтоги()
	
	Объект.ТаблицаЗаказов.Очистить();
	
	ТаблицаИтогов = Объект.ТаблицаПотребностей.Выгрузить();
	ТаблицаИтогов.Свернуть("Поставщик","Сумма");
	
	Объект.ТаблицаЗаказов.Загрузить(ТаблицаИтогов);
	
	Объект.ТаблицаЗаказов.Сортировать("Сумма УБЫВ");
	
КонецПроцедуры






Функция ПолучитьЦенуНоменклатуры(Номенклатура,Характеристика,ВидЦенНоменклатуры,Дата)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * КурсыСрезПоследних.Курс / КурсыСрезПоследних.Кратность / КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаЦены.Кратность КАК ЧИСЛО(15, 2)) КАК Цена
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	                      |			Номенклатура = &ВыбНоменклатура
	                      |				И Характеристика = &ВыбХарактеристика
	                      |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследних
	                      |		ПО (КурсыСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаЦены
	                      |		ПО (ИСТИНА)");
	
	Запрос.УстановитьПараметр("ВидЦены"        ,ВидЦенНоменклатуры);
	Запрос.УстановитьПараметр("Дата"           ,Дата);
	Запрос.УстановитьПараметр("ВыбНоменклатура",Номенклатура);
	Запрос.УстановитьПараметр("ВыбХарактеристика",Характеристика);
	Запрос.УстановитьПараметр("Валюта",ВидЦенНоменклатуры.ВалютаЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			Возврат Выборка.Цена;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	//ОбновитьИнтервалНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СформироватьИтоги();

КонецПроцедуры




&НаСервере
Процедура ЗаписатьУпаковкуВКарточкуНаСервере()
	
	Для Каждого Строка Из Объект.ТаблицаПотребностей Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
		//	ТекОбъект = Строка.Характеристика.ПолучитьОбъект();
		//Иначе     
			ТекОбъект = Строка.Номенклатура.ПолучитьОбъект();
		//КонецЕсли;
		ИзменениеПроизошло = Ложь;
				
		Если ТекОбъект.мегапрайсМинимальныйЗаказ <> Строка.мегапрайсМинимальныйЗаказ Тогда				
			ТекОбъект.мегапрайсМинимальныйЗаказ = Строка.мегапрайсМинимальныйЗаказ;			
			ИзменениеПроизошло = Истина;
		КонецЕсли;
		
		Если ИзменениеПроизошло Тогда
			ТекОбъект.ОбменДанными.Загрузка = Истина;
			ТекОбъект.Записать();
		КонецЕсли;			
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьУпаковкуВКарточку(Команда)
	
	ЗаписатьУпаковкуВКарточкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПотребностейКоэффициентУпаковкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаПотребностей.ТекущиеДанные;
	
	Если ТекущаяСтрока.мегапрайсМинимальныйЗаказ > 0 Тогда
		КоличествоУпаковок = ТекущаяСтрока.КоличествоЗаказатьИсходное/ТекущаяСтрока.мегапрайсМинимальныйЗаказ;
		ТекущаяСтрока.КоличествоУпаковокМинимальныйЗаказ = КоличествоУпаковок;
		
		ЦелоеКоличествоУпаковок = ОкруглитьЧисло(КоличествоУпаковок,1,Ложь);
		
		Если ЦелоеКоличествоУпаковок = 1 Тогда
			ТекущаяСтрока.Заказать = ЦелоеКоличествоУпаковок * ТекущаяСтрока.мегапрайсМинимальныйЗаказ;
		Иначе
			ТекущаяСтрока.Заказать = Окр(КоличествоУпаковок, 0, РежимОкругления.Окр15как10) * ТекущаяСтрока.мегапрайсМинимальныйЗаказ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьЖурналМегапрайс(Команда)
	
	ОткрытьФорму("РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрацииТиповой(Команда)
	
	ОткрытьФорму("Документ.РегистрацияЦенНоменклатурыПоставщика.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМегапрайсПриИзменении(Элемент)
	
	Объект.ИспользоватьМинимальныйЗаказ = Объект.ИспользоватьМегапрайс;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьМинимальныйЗаказПриИзмененииНаСервере()
	
	Для Каждого Строка из Объект.ТаблицаПотребностей Цикл	
		Попытка
			Строка.мегапрайсМинимальныйЗаказ = Строка.Характеристика.мегапрайсМинимальныйЗаказ;
		Исключение     
			Строка.мегапрайсМинимальныйЗаказ = Строка.Номенклатура.мегапрайсМинимальныйЗаказ;
		КонецПопытки;
		
		Если Строка.мегапрайсМинимальныйЗаказ > 0 Тогда
			КоличествоУпаковок = Строка.КоличествоЗаказатьИсходное/Строка.мегапрайсМинимальныйЗаказ;
			Строка.Заказать = ОкруглитьЧисло(КоличествоУпаковок,1) * Строка.мегапрайсМинимальныйЗаказ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМинимальныйЗаказПриИзменении(Элемент)
	
	ИспользоватьМинимальныйЗаказПриИзмененииНаСервере();
	
	Элементы.ТаблицаПотребностейКоэффициентУпаковки.Видимость = Объект.ИспользоватьМинимальныйЗаказ;
	Элементы.ТаблицаПотребностейКоличествоУпаковок.Видимость = Объект.ИспользоватьМинимальныйЗаказ;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАналогиНоменклатурыПриИзменении(Элемент)
	
	Элементы.ТаблицаПотребностейНоменклатураИсточник.Видимость = Объект.ИспользоватьАналогиНоменклатуры;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналЗаказыПоставщикам(Команда)
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаСписка");
КонецПроцедуры






