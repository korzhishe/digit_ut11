&НаКлиенте
Перем КэшированныеЗначения;
&НаКлиенте
Перем ПодборТекущаяНоменклатура;
&НаКлиенте
Перем ПодборТекущаяНоменклатураТипНоменклатуры;
&НаКлиенте
Перем ПодборТекущаяХарактеристика;
&НаКлиенте
Перем Цена;
&НаКлиенте
Перем Упаковка;
&НаКлиенте
Перем ВидЦены;

&НаКлиенте
Перем ИнформацияОТовареПрочитана;

&НаКлиенте
Перем ТекущаяСтраницаНавигации;
&НаКлиенте
Перем НавигацияПоИерархии;
&НаКлиенте
Перем НавигацияПоВидамНоменклатуры;
&НаКлиенте
Перем НавигацияПоСегментам;
&НаКлиенте
Перем НавигацияПоПроизводителям;

//============================================================================
// ССЫЛКИ

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");

КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysПроверитьОбновления(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/forum/?PAGE_NAME=read&FID=9&TID=34");
	
КонецПроцедуры


//============================================================================
// ФОРМА

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.КорзинаХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	Элементы.СписокОстаткиПоСкладамХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	Элементы.СписокОстаткиПоСкладамЦена.Видимость = ИспользоватьХарактеристикиНоменклатуры;

	ИнициализироватьСервер();
	
	КассаККМПриИзменении("");
	
	Элементы.ОтображениеПанелиНавигации.Пометка = ПанельНавигацииПометка;
	Элементы.Навигация.Видимость = ПанельНавигацииПометка;
		
	Элементы.КнопкаПодборПоНесколькимСкладам.Пометка = ОпцияПодборСНесколькихСкладов;
	Элементы.СписокОстаткиПоСкладам.Видимость = ?(ИспользоватьХарактеристикиНоменклатуры,ИспользоватьХарактеристикиНоменклатуры,ОпцияПодборСНесколькихСкладов);

	ЭлементыВариантыНавигации = Элементы.ВариантыНавигации;
	ТекущаяСтраницаНавигации = ЭлементыВариантыНавигации.ТекущаяСтраница;
	НавигацияПоИерархии = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияИерархияНоменклатуры;
	НавигацияПоПроизводителям = ЭлементыВариантыНавигации.ПодчиненныеЭлементы.НавигацияПроизводители;
	
	//МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода,ДисплейПокупателя");
	
	СтрокаДисплеяПокупателя = НСтр("ru = 'Здравствуйте!'");
	
	ОткрыватьДокументы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовое(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРабочееМестоРозница.Форма.Форма",,,Истина); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРабочееМестоРозница.Форма.Форма",,,Истина); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("SubSysРММПоПродажамРозница",);
	Если НЕ Настройки = Неопределено Тогда
		Если Настройки.Свойство("КассаККМ") Тогда
			Объект.КассаККМ = Настройки.КассаККМ;
		КонецЕсли;
		Если Настройки.Свойство("ИсторияПоискаНоменклатуры") Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.ИсторияПоискаНоменклатуры);
		КонецЕсли;
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		Если Настройки.Свойство("ПоискПоАртикулу") Тогда
			ПоискПоАртикулу = Настройки.ПоискПоАртикулу;
		КонецЕсли;
		Если Настройки.Свойство("ПоискВНаименовании") Тогда
			ПоискВНаименовании = Настройки.ПоискВНаименовании;
		КонецЕсли;
		Если Настройки.Свойство("ПоискВПолномНаименовании") Тогда
			ПоискВПолномНаименовании = Настройки.ПоискВПолномНаименовании;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.Дата   = ТекущаяДата();
		
	// Список без групп.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	ПодборТаблицаНоменклатура.Отбор,
	"Номенклатура.ЭтоГруппа",
	Ложь,
	ВидСравненияКомпоновкиДанных.Равно, ,Истина);

	ПодборТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПодборТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура, "Склад", Объект.Склад);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,   "ВидЦеныНоменклатуры", Справочники.ВидыЦен.ПустаяСсылка(), Истина);

	Если Параметры.ЗапрашиватьКоличество <> Неопределено Тогда
		ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
	Продавец = ПараметрыСеанса.ТекущийПользователь;
		
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	НазначатьСкидкиПоКнопкеРасчетВЧекеККМ     = ПолучитьФункциональнуюОпцию("НазначатьСкидкиПоКнопкеРасчетВЧекеККМ");
	ИспользоватьОплатуПлатежнымиКартами       = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьПодарочныеСертификаты         = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	
	ИспользоватьОграниченияРучныхСкидок       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям") 
	                                            Или ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("КассаКММ", Объект.КассаККМ);
	ПараметрыЗакрытия.Вставить("ИсторияПоискаНоменклатуры", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыЗакрытия.Вставить("ЗапрашиватьКоличество",  ЗапрашиватьКоличество);
	ПараметрыЗакрытия.Вставить("ПоискПоАртикулу",     ПоискПоАртикулу);
	ПараметрыЗакрытия.Вставить("ПоискВНаименовании",     ПоискВНаименовании);
	ПараметрыЗакрытия.Вставить("ПоискВПолномНаименовании",     ПоискВПолномНаименовании);
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("SubSysРММПоПродажамРозница", , ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();
		
КонецПроцедуры

&НаСервере
Функция РеквизитыКассыККМ(КассаККМ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Склад КАК Склад,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.Склад.РозничныйВидЦены КАК ВидЦены,
	|	КассыККМ.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.ВалютаДенежныхСредств КАК Валюта,
	|	КассыККМ.ТипКассы КАК ТипКассы
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Склад           = Выборка.Склад;
		Организация     = Выборка.Организация;
		ВидЦены         = Выборка.ВидЦены;
		ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
		Валюта          = Выборка.Валюта;
		ТипКассы        = Выборка.ТипКассы;
	Иначе
		Склад           = Неопределено;
		Организация     = Неопределено;
		ВидЦены         = Неопределено;
		ЦенаВключаетНДС = Неопределено;
		Валюта          = Неопределено;
		ТипКассы        = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Склад, Организация, ВидЦены, ЦенаВключаетНДС, Валюта, ТипКассы",
		Склад,
		Организация,
		ВидЦены,
		ЦенаВключаетНДС,
		Валюта,
		ТипКассы
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

&НаСервере
Процедура ИнициализироватьСервер()
	
	СтруктураРеквизитов = РеквизитыКассыККМ(Объект.КассаККМ);
	
	Объект.Организация = СтруктураРеквизитов.Организация;
	Объект.Склад       = СтруктураРеквизитов.Склад;
	Объект.ВидЦены     = СтруктураРеквизитов.ВидЦены;
	Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
	
	Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	Объект.Статус  = "";
	Объект.СкидкиРассчитаны = Ложь;
	Объект.КартаЛояльности = Неопределено;
	
	//ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	//
	//СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
	//Если Объект.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
	//	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	//КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Объект.Кассир = ТекущийПользователь;

КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ИнициализироватьСервер(); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура, "Склад", Объект.Склад);
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,   "ВидЦеныНоменклатуры", Объект.ВидЦены, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,   "ВидЦеныНоменклатуры", Неопределено, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПерейтиКГруппе(Команда)
	
	ТекущиеДанные = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда		
		Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель;
		
		ОчиститьПоиск("");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ВариантыНавигации.ТекущаяСтраница = Элементы.НавигацияИерархияНоменклатуры Тогда
		ГруппаНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"ГруппаНоменклатуры", ГруппаНоменклатуры, Истина);
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"ГруппаНоменклатуры", Неопределено, Ложь);
	КОнецЕсли;

	ЭтаФорма.ТекущийЭлемент = Элементы.ПодборТаблицаНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрыгСкокВГруппы(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"ГруппаНоменклатуры", Неопределено, Ложь);
	
КонецПроцедуры

//============================================================================
// НАВИГАЦИЯ

&НаКлиенте
Процедура ВариантОтбораПриИзменении()
	
	// Удаление всех наложенных отборов.
	ПодборТаблицаНоменклатура.Отбор.Элементы.Очистить();
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,   "ВидЦеныНоменклатуры", Объект.ВидЦены, Истина);
	
	// Список без групп.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	ПодборТаблицаНоменклатура.Отбор,"Номенклатура.ЭтоГруппа",Ложь,ВидСравненияКомпоновкиДанных.Равно, ,Истина);	
	
	ГруппаОтбораТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ПодборТаблицаНоменклатура.Отбор.Элементы,"ГруппаТолькоВНаличии",
	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораТолькоВНаличииНоменклатура,"ВНаличииПоСкладу",0,
	ВидСравненияКомпоновкиДанных.Больше,,ТолькоВНаличии);
				
	ПрименитьПоиск();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура, "СегментНоменклатуры", Неопределено, Ложь);
	
	Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура ВариантыНавигацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВариантОтбораПриИзменении();

	ТекущаяСтраницаНавигации = Элементы.ВариантыНавигации.ТекущаяСтраница;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПодборТаблицаНоменклатура.Отбор,"Родитель",Неопределено,ВидСравненияКомпоновкиДанных.Равно, ,Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"ГруппаНоменклатуры", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПодборТаблицаНоменклатура.Отбор,"Производитель",Неопределено,ВидСравненияКомпоновкиДанных.Равно, ,Ложь);	

КонецПроцедуры

&НаКлиенте
Процедура НавигацияПриАктивизацииСтроки(Элемент)
			
	ЭлементыВариантыНавигации = Элементы.ВариантыНавигации.ТекущаяСтраница;
	
	Если ТекущаяСтраницаНавигации = НавигацияПоИерархии Тогда
		
		ОтборГруппаНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура,"ГруппаНоменклатуры", ОтборГруппаНоменклатуры, Истина);
		
	ИначеЕсли ТекущаяСтраницаНавигации = НавигацияПоПроизводителям Тогда		
		ОтборВидНоменклатуры = Элементы.ПроизводителиНоменклатуры.ТекущаяСтрока;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПодборТаблицаНоменклатура.Отбор,"Производитель",ОтборВидНоменклатуры,ВидСравненияКомпоновкиДанных.Равно, ,Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ГруппаОтбораТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	ПодборТаблицаНоменклатура.Отбор.Элементы,
	"ГруппаТолькоВНаличии",
	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	ГруппаОтбораТолькоВНаличииНоменклатура,
	"ВНаличииПоСкладу",
	0,
	ВидСравненияКомпоновкиДанных.Больше,,ТолькоВНаличии);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	ГруппаОтбораТолькоВНаличииНоменклатура,
	"Ссылка.ТипНоменклатуры",
	ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"),
	ВидСравненияКомпоновкиДанных.Равно,,ТолькоВНаличии);
	
	ИнформацияОТовареПрочитана = Ложь;
	ЭтаФорма.ТекущийЭлемент = Элементы.ПодборТаблицаНоменклатура;
	ОбновитьИнформациюСтрокиСписка();
		
КонецПроцедуры

//============================================================================
// ПОИСК

&НаСервере
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ";")
	
	МассивСтрок = Новый Массив();
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;		
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция ПеревестиВРег(МассивСлов)
	
	НовыйМассив = Новый Массив; 
	
	Для Каждого Стр Из МассивСлов Цикл
		НовыйМассив.Добавить(ВРег(СокрЛП(Стр)));
	КонецЦикла;
	
	Возврат НовыйМассив; 
	
КонецФункции

&НаСервере
Процедура ПоискПоПодстрокеНаКлиенте()
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);
	
	Если НЕ Использование Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ПодборТаблицаНоменклатура.Отбор,
		"Ссылка",
		Неопределено,
		ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
		Возврат;
	КонецЕсли;	
	
	ШаблонПоиска = СокрЛП(СтрокаПоиска);
	
	МассивОтбора = Новый СписокЗначений();	
	МассивСлов   = мРазложитьСтрокуВМассивПодстрок(ШаблонПоиска," ");
	МассивСлов   = ПеревестиВРег(МассивСлов);
	КоличествоСлов = МассивСлов.Количество();
	
	Если КоличествоСлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоискПоАртикулу ИЛИ ПоискВНаименовании ИЛИ ПоискВПолномНаименовании Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование,
		|	СпрНоменклатура.Код,
		|	СпрНоменклатура.Артикул,
		|	СпрНоменклатура.НаименованиеПолное
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	(СпрНоменклатура.Наименование ПОДОБНО &ШаблонПоиска
		|			ИЛИ СпрНоменклатура.НаименованиеПолное ПОДОБНО &ШаблонПоиска
		|			ИЛИ СпрНоменклатура.Артикул ПОДОБНО &ШаблонПоиска
		|			ИЛИ СпрНоменклатура.Код ПОДОБНО &ШаблонПоиска)
		|	И СпрНоменклатура.ЭтоГруппа = ЛОЖЬ";	
		
		//Попытка найти по первому слову но его может и не быть.
		ПодстрокаПоиска = СокрЛП(МассивСлов[0]);
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;							
		Запрос.УстановитьПараметр("ШаблонПоиска","%"+ПодстрокаПоиска+"%");
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		
		//Попытка найти по второму слову
		Попытка
			Если ТаблицаТоваров.Количество() = 0 Тогда
				ПодстрокаПоиска = СокрЛП(МассивСлов[1]);
				
				Запрос = Новый Запрос();
				Запрос.Текст = ТекстЗапроса;							
				Запрос.УстановитьПараметр("ШаблонПоиска","%"+ПодстрокаПоиска+"%");
				ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Для Каждого СтрЭлемент Из ТаблицаТоваров Цикл
				НаименованиеНоменклатуры = ВРег(СокрЛП(СтрЭлемент.Наименование));
				НаименованиеПолное = ВРег(СокрЛП(СтрЭлемент.НаименованиеПолное));
				Артикул = ВРег(СокрЛП(СтрЭлемент.Артикул));
				Код = ВРег(СокрЛП(СтрЭлемент.Код));
				
				КоличествоСовпаденийСлов = 0;
				
				Для Каждого ПодстрокаПоиска Из МассивСлов Цикл				
					НомерСовпадения = Найти(НаименованиеНоменклатуры, ПодстрокаПоиска);
					Если НомерСовпадения = 0 Тогда
						НомерСовпадения = Найти(НаименованиеПолное, ПодстрокаПоиска);
					КонецЕсли;
					Если НомерСовпадения = 0 Тогда
						НомерСовпадения = Найти(Артикул, ПодстрокаПоиска);
					КонецЕсли;
					Если НомерСовпадения = 0 Тогда
						НомерСовпадения = Найти(Код, ПодстрокаПоиска);
					КонецЕсли;
					
					Если НомерСовпадения > 0 Тогда						
						КоличествоСовпаденийСлов = КоличествоСовпаденийСлов + 1;
						
						Если КоличествоСовпаденийСлов = КоличествоСлов Тогда
							МассивОтбора.Добавить(СтрЭлемент.Номенклатура);
						КонецЕсли;					
					КонецЕсли;
				КонецЦикла;			
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискПоСвойству Тогда		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Номенклатура,
		|	ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(50)) КАК ЗначениеСвойства
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Свойство = &ВидСвойства
		|	И ВЫРАЗИТЬ(ДополнительныеРеквизиты.Значение КАК СТРОКА(50)) ПОДОБНО &ШаблонПоиска";
		
		ПодстрокаПоиска = СокрЛП(МассивСлов[0]);
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;							
		Запрос.УстановитьПараметр("ШаблонПоиска","%"+ПодстрокаПоиска+"%");
		Запрос.УстановитьПараметр("ВидСвойства",ВидСвойства);
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		
		Попытка
			Если ТаблицаТоваров.Количество() = 0 Тогда
				ПодстрокаПоиска = СокрЛП(МассивСлов[1]);
				
				Запрос = Новый Запрос();
				Запрос.Текст = ТекстЗапроса;							
				Запрос.УстановитьПараметр("ШаблонПоиска","%"+ПодстрокаПоиска+"%");
				ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ТаблицаТоваров.Количество() > 0 Тогда
			Для Каждого СтрЭлемент Из ТаблицаТоваров Цикл
				ЗначениеСвойства = ВРег(СокрЛП(СтрЭлемент.ЗначениеСвойства));
				
				КоличествоСовпаденийСлов = 0;				
				Для Каждого ПодстрокаПоиска Из МассивСлов Цикл				
					НомерСовпадения = Найти(ЗначениеСвойства, ПодстрокаПоиска);
					
					Если НомерСовпадения > 0 Тогда						
						КоличествоСовпаденийСлов = КоличествоСовпаденийСлов + 1;
						
						Если КоличествоСовпаденийСлов = КоличествоСлов Тогда
							МассивОтбора.Добавить(СтрЭлемент.Номенклатура);
						КонецЕсли;					
					КонецЕсли;
				КонецЦикла;			
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискПоШтрихкоду Тогда
		Если СтрДлина(СтрокаПоиска) > 12 Тогда			
			МассивТоваров = НайтиТоварПоШтрихкоду(СтрокаПоиска);
			
			Если МассивТоваров.Количество() > 0 Тогда
				МассивОтбора.Добавить(МассивТоваров.Номенклатура);				
				ОбработатьВыборСтроки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОтбора.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ПодборТаблицаНоменклатура.Отбор,
		"Ссылка",
		МассивОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,,Использование);
		
		ПоискИстина = Истина;
	Иначе
		ПоискИстина = Ложь;
		//Сообщить("Ничего не найдено");
	КонецЕсли;
	
	СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);	
	
	
	//ЭтаФорма.ТекущийЭлемент = Элементы.ПодборТаблицаНоменклатура;
	//
	//ИнформацияОТовареПрочитана = Ложь;
	//ПодборТаблицаНоменклатураПриАктивизацииСтроки("");
	//				
	//Если ОбработатьВыборСтроки Тогда
	//	ОбработатьВыборСтроки();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()
	
	ПоискПоПодстрокеНаКлиенте();		
	
	Если ПоискИстина = Ложь Тогда
		Состояние("Ничего не найдено");
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПоиск(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоискПоАртикулу", ПоискПоАртикулу);
	СтруктураПараметров.Вставить("ПоискВНаименовании", ПоискВНаименовании);
	СтруктураПараметров.Вставить("ПоискВПолномНаименовании", ПоискВПолномНаименовании);	

	Попытка
		СтруктураВозврата = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсРабочееМестоРозница.Форма.ФормаПоисковаяСтрока",СтруктураПараметров,ЭтаФорма); 
	Исключение
		СтруктураВозврата = ОткрытьФормуМодально("Обработка.мегапрайсРабочееМестоРозница.Форма.ФормаПоисковаяСтрока",СтруктураПараметров,ЭтаФорма); 
	КонецПопытки;

	Если СтруктураВозврата <> Неопределено Тогда
		СтрокаПоиска = СтруктураВозврата.СтрокаПоиска;
		ПоискПоАртикулу = СтруктураВозврата.ПоискПоАртикулу;
		ПоискВНаименовании = СтруктураВозврата.ПоискВНаименовании;
		ПоискВПолномНаименовании = СтруктураВозврата.ПоискВПолномНаименовании;	
		
		ПрименитьПоиск();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СтрокаПоиска = "";
	
	ПрименитьПоиск();
	
КонецПроцедуры
 
//============================================================================
// ШТРИХКОДЫ И ТОРГОВОЕ ОБОРУДОВАНИЕ

&НаСервере
Функция НайтиТоварПоШтрихкоду(Штрихкод) Экспорт

    НайденаНоменклатура = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.КоличествоУпаковок, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";

	МассивШтрихкодов = Новый Массив;

	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденаНоменклатура.Вставить("Номенклатура", Выборка.Номенклатура);
	КонецЦикла;
	
	Возврат НайденаНоменклатура;

КонецФункции

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ТекШтрихкод = "";
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора)
	Возврат ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов) Экспорт
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если ИспользоватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	//СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
	//СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", Объект.Кассир));
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		
		СтруктураДействий.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
	КонецЕсли;
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		СтрокаДисплеяПокупателя = Строка(Элементы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ДанныеШтрихкодов = Новый Массив;
	ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
	
	ОбработатьШтрихкоды(ДанныеШтрихкодов);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка                                 КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование               КАК ПодключаемоеОборудование,
	|	
	|	ЭквайринговыеТерминалы.Владелец.ВидыПлатежныхКарт.(
	|		Владелец.ВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
	|	) КАК ВидыПлатежныхКарт
	|	
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &КассаККМ
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто)
	|		Или ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|";
	
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Иначе
		Запрос.УстановитьПараметр("РабочееМесто", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Стр = Новый Структура;
		Стр.Вставить("Ссылка",                                 Выборка.Ссылка);
		Стр.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		Стр.Вставить("ВидыПлатежныхКарт",                      Новый СписокЗначений);
		Стр.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ВыборкаВидыКарт = Выборка.ВидыПлатежныхКарт.Выбрать();
		Пока ВыборкаВидыКарт.Следующий() Цикл
			Стр.ВидыПлатежныхКарт.Добавить(ВыборкаВидыКарт.ВидПлатежнойКарты);
		КонецЦикла;
		
		ЭквайринговыеТерминалы.Добавить(Стр);
		
	КонецЦикла;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя",,МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));
		
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьКомандыФормы(УникальныйИдентификатор)
	
	КомандаПереходаДобавлена = Ложь;	
	КомандыФормы = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если НЕ КомандаФормы.СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
			//Если КомандаФормы.Имя = "ПодборПерейтиКСпискуНоменклатурыСтандартныйПоиск"  
			//	ИЛИ КомандаФормы.Имя = "ПодборПерейтиКСпискуНоменклатурыРасширенныйПоиск" Тогда
			//	Если КомандаПереходаДобавлена Тогда
			//		Продолжить;
			//	Иначе
			//		КомандаПереходаДобавлена = Истина;
			//		КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", "ПодборПерейтиКСпискуНоменклатуры", КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));	
			//	КонецЕсли;	
			//Иначе	
				КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", КомандаФормы.Имя, КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(КомандыФормы, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПолученыСообщения(Параметр.Сообщения);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранБыстрыйТовар"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, Параметр);
		ПараметрыТовара.Продавец = ТекущийПродавец;
		ПараметрыТовара.КоличествоУпаковок = Параметр.КоличествоУпаковок;
		
		Если ЗапрашиватьКоличество Тогда
			
			СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
			ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, Параметр);
			СтруктураПараметровОтбора.Валюта = Объект.Валюта;
			СтруктураПараметровОтбора.Дата = ТекущаяДата();
			СтруктураПараметровОтбора.ВидЦены = Объект.ВидЦены;
			ПараметрыТовара.Цена = ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
			
		КонецЕсли;
		
		ДобавитьВКорзину(ПараметрыТовара,Параметр.КоличествоУпаковок);
		
	КонецЕсли;
	
	//Если ИмяСобытия = "АвторизованПользователь"
	//	И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
	//	
	//	Если Параметр.Режим = "СменитьПрава" Тогда
	//		НастроитьПраваДляПользователя(Параметр.Пользователь);
	//	ИначеЕсли Параметр.Режим = "ИзменитьПродавца" Тогда
	//		ТекущийПродавец = Параметр.Пользователь;
	//		ОбновитьСостояниеКассовойСменыНаСервере();
	//	КонецЕсли;

	//	ПересчитатьДокументНаКлиенте();
	//	
	//КонецЕсли;
	
	Если ИмяСобытия = "ЧтениеКомандФормы"
		И Параметр.Форма = УникальныйИдентификатор Тогда
		
		Оповестить("ЧтениеКомандФормы", Новый Структура("Форма, ФормаВладелец, АдресВоВременномХранилище", Параметр.ФормаВладелец, УникальныйИдентификатор, ПолучитьКомандыФормы(Параметр.ФормаВладелец)));
		
	КонецЕсли;
	
	//Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
	//	
	//	ПолучитьСсылкиНаОборудование();
	//	Если (НЕ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования И Не ЗначениеЗаполнено(ПараметрыКассыККМ.ИдентификаторУстройства))
	//		ИЛИ Не ЗначениеЗаполнено(ПараметрыКассыККМ.НастройкиРМК) Тогда
	//		
	//		Предупреждение(НСтр("ru = 'Изменено рабочее место подключаемого оборудования. Для данного рабочего места не настроено оборудование.'"));
	//		ПринудительноеЗавершениеРаботы = Истина;
	//		Закрыть();
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	//Если ИмяСобытия = "ОплатаБонуснымиБаллами" Тогда
	//	ОплатитьБонуснымиБалламиНаСервере(Параметр.АдресВоВременномХранилище);
	//	ПересчитатьДокументНаКлиенте();
	//КонецЕсли;
	
КонецПроцедуры

//============================================================================
// ПЕРЕНОС В ДОКУМЕНТ

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = Объект.Товары.Выгрузить();
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

//============================================================================
// СПИСКИ

&НаСервере
Функция ПолучитьТекстЗапросаЦенаПродажиПоВидуЦеныНоменклатуры(МассивТаблиц = Неопределено)

	Если МассивТаблиц <> Неопределено Тогда 
		МассивТаблиц.Добавить("РезультатЗапросаЦеныНоменклатуры");
	КонецЕсли;

	Текст = 
	"ВЫБРАТЬ
	|	&ВидЦены                                          КАК ВидЦены,
	|	ЦеныНоменклатуры.Упаковка                         КАК Упаковка,
	|	ЦеныНоменклатуры.Номенклатура.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.КоличествоУпаковок,1) КАК Коэффициент,
	|	
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) *
	|	ВЫБОР
	|		КОГДА
	|			&Валюта <> ЦеныНоменклатуры.Валюта
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА
	|					ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|					И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|					И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|					И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|					ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК Число(15,2)) КАК Цена
	|	
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|													ВидЦены = &ВидЦены
	|													И Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК ЦеныНоменклатуры
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ПолучитьЦенуПоВидуЦены(Номенклатура, Характеристика, Валюта, ВидЦены) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЦенаПродажиПоВидуЦеныНоменклатуры();
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидЦены",        ВидЦены);
	Запрос.УстановитьПараметр("Валюта",         Валюта);
	Запрос.УстановитьПараметр("ТекущаяДата",    НачалоДня(ТекущаяДата()));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураЦены = Новый Структура("ВидЦены, Цена, Упаковка, ЕдиницаИзмерения", Выборка.ВидЦены, Выборка.Цена, Выборка.Упаковка, Выборка.ЕдиницаИзмерения);
	Иначе
		СтруктураЦены = Новый Структура("ВидЦены, Цена, Упаковка, ЕдиницаИзмерения", Справочники.ВидыЦен.ПустаяСсылка(), 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Новый Структура("Цена", СтруктураЦены);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюСтрокиСписка()
	
	ИнформацияОТовареПрочитана = Ложь;
	
	ТекущиеДанныеСтроки = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;
	 		
	Если НЕ ТекущиеДанныеСтроки = Неопределено Тогда
		
		ПодборТекущаяНоменклатура = ТекущиеДанныеСтроки.Ссылка;
		//ПодборТекущаяНоменклатураТипНоменклатуры = ТекущиеДанныеСтроки.ТипНоменклатуры;
		ПодборТекущаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ПодборКартинкаНоменклатуры = Неопределено;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			ТекущиеДанныеРасшифровка = Элементы.СписокОстаткиПоСкладам.ТекущиеДанные;		
			Если ТекущиеДанныеРасшифровка <> Неопределено Тогда
				ПодборТекущаяХарактеристика = ТекущиеДанныеРасшифровка.Характеристика;
			КонецЕсли;
		КонецЕсли;
				
		ИнформацияОТовареПрочитана = Ложь;
		
		//ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания",0.2,Истина);
		ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания();

	Иначе		
		ПодборТекущаяНоменклатураТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
		
		СписокОстаткиПоСкладам.Очистить();
	КонецЕсли;

КОнецПроцедуры

&НаКлиенте
Процедура ДетализацияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьИнформациюСтрокиСписка();

КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ИнформацияОТовареПрочитана = Ложь;
	ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокОстаткиПоСкладамПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеРасшифровка = Элементы.СписокОстаткиПоСкладам.ТекущиеДанные;
		
	Если НЕ ТекущиеДанныеРасшифровка = Неопределено Тогда
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			ПодборТекущаяХарактеристика = ТекущиеДанныеРасшифровка.Характеристика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидЦены) Тогда		
			СтруктураИнформацииОТоваре = ПолучитьЦенуПоВидуЦены(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Объект.Валюта, Объект.ВидЦены);
			
			СтруктураЦена = СтруктураИнформацииОТоваре.Цена;
			НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(СтруктураЦена.Упаковка), Строка(СтруктураЦена.Упаковка), Строка(СтруктураЦена.ЕдиницаИзмерения));
			
			Цена         = СтруктураЦена.Цена;
			ВидЦены      = СтруктураЦена.ВидЦены;
			Упаковка     = СтруктураЦена.Упаковка;
		Иначе
			
			Цена = 0;
			ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
			Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		ПодборТекущаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура СписокЩелчокМенеджераПоОкнуСостатками(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
				
	ТекущиеДанныеНоменклатура = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;
	
	ТекущиеДанныеОстатки = Элемент.ТекущиеДанные;
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанныеНоменклатура.Ссылка);
		СтруктураПараметрыНоменклатуры.Вставить("ТипНоменклатуры", ПодборТекущаяНоменклатураТипНоменклатуры);
		
		Если (ТекущиеДанныеНоменклатура.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры")
			ИЛИ ТекущиеДанныеНоменклатура.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры")) Тогда
			ТекущиеДанныеХарактеристика = ТекущиеДанныеОстатки.Характеристика;
			СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикиИспользуются", Истина);
		Иначе
			ТекущиеДанныеХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикиИспользуются", Ложь);
		КонецЕсли;
		СтруктураПараметрыНоменклатуры.Вставить("Характеристика", ТекущиеДанныеХарактеристика);
		
		ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ТекущиеДанныеХарактеристика);

		Если ИспользоватьУпаковкиНоменклатуры Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
		Иначе
			СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
		КонецЕсли;
		
		СтруктураПараметрыНоменклатуры.Вставить("ВидЦены", Объект.ВидЦены);
		СтруктураПараметрыНоменклатуры.Вставить("Цена", Цена);		
		СтруктураПараметрыНоменклатуры.Вставить("Склад", ТекущиеДанныеОстатки.Склад);
		
		ТекущиеДанныеСвободныйОстаток = ТекущиеДанныеОстатки.Свободно;
		СтруктураПараметрыНоменклатуры.Вставить("ТекущиеДанныеСвободныйОстаток", ТекущиеДанныеСвободныйОстаток);
				
		ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, 1);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтроки()
	
	Если Объект.ПодборСНесколькихСкладов Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СписокОстаткиПоСкладам;
		Возврат;
	КонецЕсли;

	ТекущиеДанныеНоменклатура = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;

	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ТекущиеДанныеРасшифровка = Элементы.СписокОстаткиПоСкладам.ТекущиеДанные;		
		Если ТекущиеДанныеРасшифровка <> Неопределено Тогда
			ПодборТекущаяХарактеристика = ТекущиеДанныеРасшифровка.Характеристика;
		КонецЕсли;
	КонецЕсли;

	Если ТекущиеДанныеНоменклатура = Неопределено ИЛИ ТекущиеДанныеНоменклатура.ЭтоГруппа Тогда		
	Иначе						
		ТекущиеДанныеСвободныйОстаток = ТекущиеДанныеНоменклатура.ВНаличииПоСкладу;
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанныеНоменклатура.Ссылка);
		СтруктураПараметрыНоменклатуры.Вставить("ТипНоменклатуры", ПодборТекущаяНоменклатураТипНоменклатуры);
		
		ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика);

		Если НЕ ТекущиеДанныеРасшифровка = Неопределено Тогда
		
			Попытка
				ИндивидуальныеДляНоменклатуры = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры");
				ОбщиеДляВидаНоменклатуры = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры");
			Исключение
				// в предыдущих релизах конфигурации
				ИндивидуальныеДляНоменклатуры = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры");
				ОбщиеДляВидаНоменклатуры = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры");
			КонецПопытки;
			
			Если (ТекущиеДанныеНоменклатура.ИспользованиеХарактеристик = ИндивидуальныеДляНоменклатуры
				ИЛИ ТекущиеДанныеНоменклатура.ИспользованиеХарактеристик = ОбщиеДляВидаНоменклатуры) Тогда
				ТекущиеДанныеХарактеристика = ТекущиеДанныеРасшифровка.Характеристика;
				СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикиИспользуются", Истина);
			Иначе
				ТекущиеДанныеХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
				СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикиИспользуются", Ложь);
			КонецЕсли;
		Иначе
			ТекущиеДанныеХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			СтруктураПараметрыНоменклатуры.Вставить("ХарактеристикиИспользуются", Ложь);
		КонецЕсли;
		СтруктураПараметрыНоменклатуры.Вставить("Характеристика", ТекущиеДанныеХарактеристика);
			
		СтруктураЦенаИОстатки = ПолучитьЦенуПоВидуЦены(ТекущиеДанныеНоменклатура.Ссылка,ТекущиеДанныеХарактеристика,Объект.Валюта,Объект.ВидЦены);
		
		СтруктураЦена = СтруктураЦенаИОстатки.Цена;
		
		Цена     = СтруктураЦена.Цена;
		Упаковка = СтруктураЦена.Упаковка;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Упаковка", Упаковка);
		Иначе
			СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
		КонецЕсли;
		
		СтруктураПараметрыНоменклатуры.Вставить("ВидЦены", Объект.ВидЦены);
		СтруктураПараметрыНоменклатуры.Вставить("Цена", Цена);		
		СтруктураПараметрыНоменклатуры.Вставить("Склад", Объект.Склад);
		СтруктураПараметрыНоменклатуры.Вставить("КассаККМ", Объект.КассаККМ);
		СтруктураПараметрыНоменклатуры.Вставить("ТекущиеДанныеСвободныйОстаток", ТекущиеДанныеСвободныйОстаток);
		
		ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, 1);	
		
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОбработатьВыборСтроки();
		
КонецПроцедуры

//============================================================================
// ПАНЕЛЬ ИНФОРМАЦИИ

&НаКлиенте
Процедура ПолучитьЦенуТекущегоТовара(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика)
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		СтруктураИнформацииОТоваре = ПолучитьЦенуПоВидуЦены(ПодборТекущаяНоменклатура, ПодборТекущаяХарактеристика, Объект.Валюта, Объект.ВидЦены);
		
		СтруктураЦена = СтруктураИнформацииОТоваре.Цена;
		НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(СтруктураЦена.Упаковка), Строка(СтруктураЦена.Упаковка), Строка(СтруктураЦена.ЕдиницаИзмерения));
		
		Цена         = СтруктураЦена.Цена;
		ВидЦены      = СтруктураЦена.ВидЦены;
		Упаковка     = СтруктураЦена.Упаковка;
		СрокПоставки = 0;
	Иначе
		
		Цена         = 0;
		ВидЦены      = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		Упаковка     = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");		СрокПоставки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ИнформацияОТовареПрочитана Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанныеНоменклатура = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;	
	Если ТекущиеДанныеНоменклатура = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПодборТекущаяНоменклатура = ТекущиеДанныеНоменклатура.Ссылка;
	ПодборТекущаяНоменклатураТипНоменклатуры = ТекущиеДанныеНоменклатура.ТипНоменклатуры;
	ПодборТекущаяХарактеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	ПодборКартинкаНоменклатуры  = Неопределено;	

	ТекущиеДанныеСтроки = Новый Структура;
	ТекущиеДанныеСтроки.Вставить("Номенклатура",ПодборТекущаяНоменклатура);
	ТекущиеДанныеСтроки.Вставить("Характеристика",ПодборТекущаяХарактеристика);
	ТекущиеДанныеСтроки.Вставить("ВидЦенНоменклатуры",Объект.ВидЦены);
	ТекущиеДанныеСтроки.Вставить("ИспользоватьХарактеристики",ТекущиеДанныеНоменклатура.ИспользоватьХарактеристики);
	ТекущиеДанныеСтроки.Вставить("СкладОтбор",Объект.Склад);
	ТекущиеДанныеСтроки.Вставить("ОпцияПодборСНесколькихСкладов",ОпцияПодборСНесколькихСкладов);
	
	Если ИспользоватьХарактеристикиНоменклатуры ИЛИ ОпцияПодборСНесколькихСкладов Тогда
		СписокОстаткиПоСкладам.Очистить();
		
		ИнформацияСформироватьОстаткиПоСкладам(ТекущиеДанныеСтроки);
	КонецЕсли;
					
	ТекСтрокаДопИнфо = Элементы.ДетализацияСнизу.ТекущаяСтраница;
	ЗакладкиДопИнфо  = Элементы.ДетализацияСнизу.ПодчиненныеЭлементы;

	Если ТекСтрокаДопИнфо = ЗакладкиДопИнфо.Описание Тогда	
		ИнформацияПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки);
		ОписаниеНоменклатуры = ПолучитьОписаниеНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);	
	КонецЕсли;	
	
	ИнформацияОТовареПрочитана = Истина;

КонецПроцедуры

&НаСервере
Процедура ИнформацияПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки)

	ПодборКартинкаНоменклатуры = ПолучитьКартинкуНоменклатуры(ТекущиеДанныеСтроки.Номенклатура);		
	Если ЗначениеЗаполнено(ПодборКартинкаНоменклатуры) Тогда
		КартинкаНоменклатуры = ПолучитьНавигационнуюСсылкуКартинки(ПодборКартинкаНоменклатуры, УникальныйИдентификатор)
	Иначе
		КартинкаНоменклатуры = "";
	Конецесли;

КонецПроцедуры

&НаСервере
Функция ИнформацияСформироватьОстаткиПоСкладам(ТекущиеДанныеСтроки)
	
	ИспользоватьХарактеристики = ТекущиеДанныеСтроки.ИспользоватьХарактеристики;
	
	Если ИспользоватьХарактеристики Тогда
		СтруктураИнформацииОстаткиНаСкладах = РеквизитФормыВЗначение("Объект").мИнформацияСформироватьОстаткиПоСкладамХарактеристики(ТекущиеДанныеСтроки);
	Иначе
		СтруктураИнформацииОстаткиНаСкладах = РеквизитФормыВЗначение("Объект").мИнформацияСформироватьОстаткиПоСкладам(ТекущиеДанныеСтроки);
	КОнецЕсли;
	
	Для Каждого СтрокаТЧ Из СтруктураИнформацииОстаткиНаСкладах.ГруппыСкладов Цикл	
		
		ТекущийОстаток = СписокОстаткиПоСкладам.Добавить();
		ТекущийОстаток.Склад = СтрокаТЧ.СкладРодитель;
		ТекущийОстаток.СкладГруппа = Истина;
		
		Для Каждого СтрокаТЧ2 Из СтруктураИнформацииОстаткиНаСкладах.ТекущиеОстатки Цикл
			
			Если СтрокаТЧ2.СкладРодитель <> ТекущийОстаток.Склад Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийОстатокСклад = СписокОстаткиПоСкладам.Добавить();
			ТекущийОстатокСклад.Склад          = СтрокаТЧ2.Склад;
			ТекущийОстатокСклад.Характеристика = СтрокаТЧ2.Характеристика;			
			ТекущийОстатокСклад.Свободно       = СтрокаТЧ2.Свободно;
			ТекущийОстатокСклад.ВНаличии       = СтрокаТЧ2.ВНаличии;
			ТекущийОстатокСклад.ВРезерве       = СтрокаТЧ2.ВРезерве;
			ТекущийОстатокСклад.Цена           = СтрокаТЧ2.Цена;
			//ТекущийОстатокСклад.Ячейка    = СтрокаТЧ2.Ячейка;
		КонецЦикла;	
	КонецЦикла;			

	Возврат СтруктураИнформацииОстаткиНаСкладах;
		
КонецФункции

&НаСервере
Процедура ИнформацияСформироватьАналогиНоменклатуры(ТекущиеДанныеСтроки)
					
КонецПроцедуры

&НаСервере
Процедура ИнформацияСформироватьОстаткиПоПрайсамПоставщиков(ТекущиеДанныеСтроки)
					
КонецПроцедуры

&НаКлиенте
Процедура ДопИнформацияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущиеДанныеНоменклатура = Элементы.ПодборТаблицаНоменклатура.ТекущиеДанные;
	
	Если НЕ ТекущиеДанныеНоменклатура = Неопределено Тогда	
		ИнформацияОТовареПрочитана = Ложь;		
		ОбновитьИнформациюСтрокиСписка();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеНоменклатуры(Номенклатура)

	ОписаниеНоменклатуры = Номенклатура.Описание;

	Возврат ОписаниеНоменклатуры;

КонецФункции

&НаСервере
Функция ПолучитьКартинкуНоменклатуры(Номенклатура)

	//УстановитьПривилегированныйРежим(Истина);

	ФайлКартинкиНоменклатуры = Номенклатура.ФайлКартинки;

	Возврат ФайлКартинкиНоменклатуры;

КонецФункции

//============================================================================
// ТОВАРЫ

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
	мСуммаСдачи = Объект.ПолученоНаличными - СуммаДокумента;
	
	СуммаСкидки = Объект.Товары.Итог("СуммаРучнойСкидки") + Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	
	Если Объект.ЦенаВключаетНДС Тогда
		СуммаБезСкидки = СуммаДокумента + СуммаСкидки;
	Иначе
		СуммаБезСкидки = СуммаДокумента - Объект.Товары.Итог("СуммаНДС") + СуммаСкидки;
	КонецЕсли;
	
	ЧекОплачен = мСуммаСдачи >= 0;
		
	Если мСуммаСдачи < 0 Тогда
		
		СуммаСдачи   = 0;
		СуммаДоплаты = - мСуммаСдачи;
		
		//Элементы.СуммаКСдаче.Видимость = Ложь;
		//Элементы.СуммаДоплаты.Видимость = Истина;
		
	Иначе
		
		СуммаСдачи   = мСуммаСдачи;
		СуммаДоплаты = 0;
		
		//Элементы.СуммаКСдаче.Видимость = Истина;
		//Элементы.СуммаДоплаты.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьВКорзинуНаСервере(СтруктураПараметры, КоличествоУпаковок, НовыеСтроки)
	
	ТекстОповещенияИтог = "";
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
		Отбор.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",                    НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		Отбор.Вставить("КассаККМ",                   НоваяСтрока.КассаККМ);
				
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
		Иначе			
			ТекущаяСтрока = РезультатПоиска[0];			
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		ТекущиеДанныеСвободныйОстаток = СтруктураПараметры.ТекущиеДанныеСвободныйОстаток;
		
		Если ТекущаяСтрока.КоличествоУпаковок > ТекущиеДанныеСвободныйОстаток Тогда
			Сообщить("Указано больше товара чем есть в наличии!!");
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
		ТекстОповещения = НСтр("ru = 'Товар %%Товар%% стоимостью %%Цена%% %%Валюта%% в количестве %%КоличествоУпаковок%% %%ЕдиницаИзмерения%% добавлен в корзину'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Товар%%",              Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(СтруктураПараметры.Характеристика)," ("+СтруктураПараметры.Характеристика+")",""));
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Цена%%",               ТекущаяСтрока.Цена);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Валюта%%",             Объект.Валюта);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%ЕдиницаИзмерения%%",   ?(ЗначениеЗаполнено(СтруктураПараметры.Упаковка),СтруктураПараметры.Упаковка,НСтр("ru = 'ед.'")));
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%КоличествоУпаковок%%", КоличествоУпаковок);

		ТекстОповещенияИтог = ?(ТекстОповещенияИтог = "", "", Символы.ПС) + ТекстОповещения;
		
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();		
	КонецЕсли;
	
	Возврат ТекстОповещенияИтог;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(СтруктураПараметры, КоличествоУпаковок=1)
	
	НовыеСтроки = Новый Массив;

	Если ЗапрашиватьКоличество Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",   СтруктураПараметры.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", СтруктураПараметры.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",        СтруктураПараметры.ВидЦены);
		ПараметрыФормы.Вставить("Упаковка",       СтруктураПараметры.Упаковка);
		ПараметрыФормы.Вставить("Цена",           СтруктураПараметры.Цена);
		ПараметрыФормы.Вставить("Дата",           Объект.Дата);
		ПараметрыФормы.Вставить("Валюта",         Объект.Валюта);
		ПараметрыФормы.Вставить("РедактироватьЦену",    Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены", Истина);
		ПараметрыФормы.Вставить("Склад",                    СтруктураПараметры.Склад);
		ПараметрыФормы.Вставить("Склады",                   Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ЭтоУслуга",                СтруктураПараметры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		
		Попытка
			МассивСтруктур = ОткрытьФормуМодально("ВнешняяОбработка.мегапрайсРабочееМестоРозница.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		Исключение
			МассивСтруктур = ОткрытьФормуМодально("Обработка.мегапрайсРабочееМестоРозница.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		КонецПопытки;
	
		Если МассивСтруктур <> Неопределено Тогда
			
			Для Каждого ЭлементМассива Из МассивСтруктур Цикл
				
				НоваяСтрока = Новый Структура;
				НоваяСтрока.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
				НоваяСтрока.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
				НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
				НоваяСтрока.Вставить("Упаковка",                   ЭлементМассива.Упаковка);
				НоваяСтрока.Вставить("Цена",                       ЭлементМассива.Цена);
				НоваяСтрока.Вставить("ВидЦены",                    ЭлементМассива.ВидЦены);
				НоваяСтрока.Вставить("Склад",                      СтруктураПараметры.Склад);
				НоваяСтрока.Вставить("КассаККМ",                   ПолучитьКассуККМПоСкладу(СтруктураПараметры.Склад));
				//НоваяСтрока.Вставить("КассаККМ",                   Объект.КассаККМ);
				НоваяСтрока.Вставить("КоличествоУпаковок",         ЭлементМассива.КоличествоУпаковок);
				НовыеСтроки.Добавить(НоваяСтрока);
				
			КонецЦикла;			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Номенклатура",               СтруктураПараметры.Номенклатура);
		НоваяСтрока.Вставить("Характеристика",             СтруктураПараметры.Характеристика);
		НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
		НоваяСтрока.Вставить("Упаковка",                   СтруктураПараметры.Упаковка);
		НоваяСтрока.Вставить("Цена",                       СтруктураПараметры.Цена);
		НоваяСтрока.Вставить("ВидЦены",                    СтруктураПараметры.ВидЦены);
		НоваяСтрока.Вставить("Склад",                      СтруктураПараметры.Склад);
		НоваяСтрока.Вставить("КассаККМ",                   ПолучитьКассуККМПоСкладу(СтруктураПараметры.Склад));
		//НоваяСтрока.Вставить("КассаККМ",                   Объект.КассаККМ);
		НоваяСтрока.Вставить("КоличествоУпаковок",         КоличествоУпаковок);
		НовыеСтроки.Добавить(НоваяСтрока);
				
	КонецЕсли;
	
	ДобавитьВКорзинуНаСервере(СтруктураПараметры, КоличествоУпаковок, НовыеСтроки);
	
	ПересчитатьДокументНаКлиенте();

	ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	ЭтаФорма.ТекущийЭлемент = Элементы.ПодборТаблицаНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении()
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//ОбработкаТабличнойЧастиКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	//	Элемент,
	//	КэшированныеЗначения,
	//	ПараметрыУказанияСерий,
	//	Копирование
	//);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	//Если ОбработкаТабличнойЧастиКлиент.НеобходимоОбновитьСтатусыСерий(
	//	
	//	Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
	//	
	//	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	//	
	//	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//	ОбработкаТабличнойЧастиКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если Поле.Имя = "ТоварыСтатусУказанияСерий" Тогда
	//	
	//	Если ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
	//		
	//		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	//		ПараметрыФормыСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	//		
	//		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыСерий.ИмяФормы,ПараметрыФормыСерий,ЭтаФорма);
	//		
	//		Если ЗначениеВозврата <> Неопределено Тогда
	//			ОбработатьУказаниеСерийСервер(ПараметрыФормыСерий);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	//ОбработкаТабличнойЧастиКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	//	Элемент,
	//	КэшированныеЗначения,
	//	ПараметрыУказанияСерий
	//);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
	
	//Если ОбработкаТабличнойЧастиКлиент.НеобходимоОбновитьСтатусыСерий(
	//	Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
	//	
	//	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
	//	
	//	ОбработкаТабличнойЧастиКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	//		Элемент,
	//		КэшированныеЗначения,
	//		ПараметрыУказанияСерий
	//	);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
КонецФункции

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", Новый Структура);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	//Отказ = Ложь;
	//
	//ПередЗакрытиемЧека(Отказ);	
	//Если Отказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	ИнициализироватьСервер();
	Объект.Товары.Очистить();
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок = 0;
					
				Иначе
					
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	//ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Истина);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		
		Модифицированность = Истина;
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

//============================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ СКИДКИ

&НаКлиенте
Процедура ТоварыСкидкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСкидкиПроцентАвтоматическойСкидки
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСкидкиСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
					ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

//============================================================================
// 

&НаСервере
Процедура ТоварыУстановитьОтборПоТоварамСервер(Включить)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	ПодборТаблицаНоменклатура.Отбор,
	"Номенклатура",
	Объект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"),
	ВидСравненияКомпоновкиДанных.ВСписке, ,Включить);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУстановитьОтборПоТоварам(Команда)
	
	ТоварыУстановитьОтборПоТоварамСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтключитьОтборПоТоварам(Команда)
	
	ТоварыУстановитьОтборПоТоварамСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПолученоНаличнымиПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры


//============================================================================
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки, "Товары");
	
КонецФункции

&НаКлиенте
Процедура Расчет(Команда)
	
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(ВыполнитьПредварительныйРасчетСкидокНаСервере());
	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		Объект.Дата = ТекущаяДата();
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если СтруктураСообщений.Сообщения.Количество() > 0 
			И СтруктураСообщений.АвтоматическиОткрывать Тогда
			
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//	Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		//КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Товары;
	
КонецПроцедуры

//============================================================================
// ЦЕНООБРАЗОВАНИЕ И СКИДКИ
&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры


&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Неопределено,
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаСервере
Функция СчитанаКартаЛояльностиНаСервере(КартаЛояльности)
	
	Результат = Истина;
	Попытка
		ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности, Ложь);
	Исключение
		// для старых конфигураций
		ДанныеКартыЛояльности = КартыЛояльностиСервер.ПолучитьДанныеКартыЛояльности(КартаЛояльности, Ложь);
	КонецПопытки;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Объект.КартаЛояльности = КартаЛояльности;
		
		Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
			Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда
			Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		//	И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		//	И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		//	Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		//	ПриИзмененииСоглашенияСервер();
		//КонецЕсли;
		//Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		//	И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		//	И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		//	Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		//	КонтрагентПриИзмененииСервер();
		//КонецЕсли;

		НастроитьАвтоматическиеСкидкиНаценки();
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	Если СчитанаКартаЛояльностиНаСервере(КартаЛояльности) Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(
		Объект, 
		"Товары", 
		СуммаСкидкиНаценки, 
		Истина,,,,
		ВыделенныеСтроки, 
		АдресВоВременномХранилище
	);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, Ложь);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура ОтменитьСкидкиНаценкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьАвтоматическиеСкидкиНаценки()
	
   //ПараметрыПримененияСкидок = СкидкиНаценкиСервер.ПолучитьПараметрыПримененияСкидокНаценокВЧекеККМ(Объект, ТекущаяДата());
	
	//Элементы.ТоварыСкидкиОткрытьИнформациюОСкидках.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	//Элементы.КонтекстноеМенюТоварыСкидкиОткрытьИнформациюОСкидках.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	//Элементы.ТоварыСкидкиПроцентАвтоматическойСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	//Элементы.ТоварыСкидкиСуммаАвтоматическойСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	
	//Элементы.ТоварыСкидкиНазначитьАвтоматическиеСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки;
	
КонецПроцедуры

//============================================================================
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ

&НаСервере
Функция ПолучитьКассуККМПоСкладу(ВыбСклад)
	
	КассаККМПоСкладу = Справочники.КассыККМ.ПустаяСсылка();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КассыККМ.Ссылка
	               |ИЗ
	               |	Справочник.КассыККМ КАК КассыККМ
	               |ГДЕ
	               |	КассыККМ.Склад = &ВыбСклад";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбСклад",ВыбСклад);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ВыборкаЗапроса = Результат.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			КассаККМПоСкладу = ВыборкаЗапроса.Ссылка;
			Возврат КассаККМПоСкладу;
		КонецЦИкла;
	КонецЕсли;
	
	Возврат КассаККМПоСкладу;
				   
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Кнопки = Новый СписокЗначений;
		
	ТекстВопроса = "Выберите действие.";
	
	Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
	Кнопки.Добавить(2, НСтр("ru = 'В резерв'"));
	Кнопки.Добавить(3, НСтр("ru = 'Очистить корзину'"));		
	Кнопки.Добавить(99,НСтр("ru = 'Отмена'"));
			
	Если Кнопки.Количество() > 0 Тогда
		
		РезультатВопроса = Вопрос(ТекстВопроса, Кнопки);
		Если РезультатВопроса = 1 Тогда
			
			Отложить("");
			
		ИначеЕсли РезультатВопроса = 2 Тогда
			
			Зарезервировать("");
			
		ИначеЕсли РезультатВопроса = 3 Тогда
			
			ИнициализироватьСервер();
			Объект.Товары.Очистить();
			
			ПересчитатьДокументНаКлиенте();
						
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусЧека()
	Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧек(Команда)
	
	УстановитьСтатусЧека();
	мСоздатьЧек();
	
	Состояние("Чек создан.");

	Если ОткрыватьДокументы Тогда
		Для Каждого Строка Из Объект.СформированныеДокументы Цикл
			//ОткрытьЗначение(Строка.Документ);

			// эта форма подходит только если не используется ФР, иначе нельзя пробить чек по ККМ
			Если Строка.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор") Тогда
				ФормаДока = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокументаРМК", Новый Структура("Ключ", Строка.Документ));
			Иначе
				ФормаДока = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", Новый Структура("Ключ", Строка.Документ));    
			КонецЕсли;
			
			ФормаДока.Открыть();
		КонецЦикла;
	КонецЕсли;
	
	ОчиститьКорзину("");
			
КонецПроцедуры

&НаСервере
Процедура мСоздатьЧек()
	
	УстановитьПривилегированныйРежим(Истина);

	Объект.СформированныеДокументы.Очистить();
	
	МассивДокументов = Новый Массив;

	Объект.Товары.Сортировать("Склад,Номенклатура");

	НовыйДокумент = Документы.ЧекККМ.ПустаяСсылка();
		
	ВремРазмещение = Справочники.Склады.ПустаяСсылка();

	ТаблицаРазделения = Объект.Товары.Выгрузить();
	ТаблицаРазделения.Свернуть("КассаККМ,Склад");
	
	Для Каждого Шапка Из ТаблицаРазделения Цикл	
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КассаККМ", Шапка.КассаККМ);
		ПараметрыОтбора.Вставить("Склад", Шапка.Склад);
		
		ДокументКассаККМ = ?(ЗначениеЗаполнено(Шапка.КассаККМ), Шапка.КассаККМ, Объект.КассаККМ);
		
		
		ТаблЧасть = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		НовыйДокумент = Документы.ЧекККМ.СоздатьДокумент(); 
		НовыйДокумент.Архивный	  = Ложь;
		НовыйДокумент.Партнер 	  = Справочники.Партнеры.РозничныйПокупатель;
	    НовыйДокумент.ОбработкаЗаполнения(Новый Структура("КассаККМ", ДокументКассаККМ), Истина);
		НовыйДокумент.Дата        = ТекущаяДата();
		НовыйДокумент.КассаККМ    = ДокументКассаККМ;
		НовыйДокумент.Кассир      = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.КартаЛояльности = Объект.КартаЛояльности;
		НовыйДокумент.Партнер     = Объект.Партнер;
		НовыйДокумент.Валюта      = Объект.Валюта;
		НовыйДокумент.КассоваяСмена = Объект.КассоваяСмена;
		НовыйДокумент.Организация = Объект.Организация;
		НовыйДокумент.ОтложенДо   = Объект.ОтложенДо;
		НовыйДокумент.Склад       = Шапка.Склад;
		НовыйДокумент.Статус      = Объект.Статус;
		НовыйДокумент.ВидЦены     = Объект.ВидЦены;
		НовыйДокумент.ФормаОплаты = Объект.ФормаОплаты;
		НовыйДокумент.Комментарий = "";
		НовыйДокумент.ПолученоНаличными = 0;
		НовыйДокумент.СкидкиРассчитаны = Истина;
		
			
		Для Каждого Стр из ТаблЧасть Цикл					
			СтрокаТЧ = НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,Стр);
			
			Попытка // появилось в новой версии 11.1.2.6
				СтрокаТЧ.Продавец = Продавец;
				//ПараметрыСеанса.ТекущийПользователь;
			Исключение
			КонецПопытки;
			//СтрокаТЧ.Номенклатура     = Стр.Номенклатура;
			//СтрокаТЧ.Характеристика   = Стр.Характеристика;
			//СтрокаТЧ.Упаковка         = Стр.Упаковка;
			//СтрокаТЧ.Количество       = Стр.Количество;
			//СтрокаТЧ.КоличествоУпаковок = Стр.КоличествоУпаковок;
			//СтрокаТЧ.Цена             = Стр.Цена;
			//СтрокаТЧ.Сумма            = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		КонецЦикла;
		
		
		СтруктураДействий = Новый Структура;
		//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НовыйДокумент.НалогообложениеНДС);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий,Неопределено);
		
		НовыйДокумент.ПолученоНаличными = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(НовыйДокумент.Товары, НовыйДокумент.ЦенаВключаетНДС);
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		//Попытка
		//	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//КонецПопытки;
		
		МассивДокументов = Объект.СформированныеДокументы.Добавить();
		МассивДокументов.Документ = НовыйДокумент.Ссылка;
		МассивДокументов.КассаККМ = НовыйДокумент.КассаККМ;
		МассивДокументов.ТипКассы = НовыйДокумент.КассаККМ.ТипКассы;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ОтложитьНаСервере();
	
	мСоздатьЧек();
	
	Состояние("Чек создан.");

	ОчиститьКорзину("");
		
КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	
	ОтложенДо = ТекущаяДата() + 3 * 60 * 60;
	
	Если ВвестиДату(ОтложенДо, НСтр("ru = 'Отложить до:'")) Тогда
		
		Объект.ОтложенДо = ОтложенДо;
		ЗарезервироватьНаСервере();		
	КонецЕсли;
	
	мСоздатьЧек();
	
	Состояние("Чек создан.");

	ОчиститьКорзину("");
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере()
	
	ОтложитьВыполнено = Истина;
	
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	Объект.Дата   = ТекущаяДата();
	
	//Если ИспользоватьАвтоматическиеСкидкиВПродажах 
	//	И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
	//	ОтменитьСкидкиНаценкиНаСервере();
	//КонецЕсли;	
	
	Возврат ОтложитьВыполнено;

КонецФункции

&НаСервере
Функция ЗарезервироватьНаСервере()
	
	РезервированиеВыполнено = Истина;
	
	Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
	
	Возврат РезервированиеВыполнено;

КонецФункции

&НаКлиенте
Функция ПробитьЧекВыполнить()
	
	ЧекПробит = Ложь;
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			// Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
				УникальныйИдентификатор,
				ИдентификаторУстройстваФР,
				ОписаниеОшибки
			);
			
			Если Результат Или ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					// Готовим данные
					ВходныеПараметры  = Новый Массив;
					ВыходныеПараметры = Неопределено;
					
					НомерСекции = 1;
					
					// Подготовка таблицы товаров
					ТаблицаТоваров = Новый Массив();
					
					Для Каждого СтрокаТЧ Из Объект.Товары Цикл
						
						СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
						
						Если Объект.ЦенаВключаетНДС Тогда
							Сумма = СтрокаТЧ.Сумма;
						Иначе
							Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
						КонецЕсли;
						
						СуммаСкидки   = СтрокаТЧ.СуммаАвтоматическойСкидки   + СтрокаТЧ.СуммаРучнойСкидки;
						ПроцентСкидки = СтрокаТЧ.ПроцентАвтоматическойСкидки + СтрокаТЧ.ПроцентРучнойСкидки;
						
						СтрокаТаблицыТоваров = Новый СписокЗначений();
						СтрокаТаблицыТоваров.Добавить(Строка(СтрокаТЧ.Номенклатура));
						                                                            //  1 - Наименование
						СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
						СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
						СтрокаТаблицыТоваров.Добавить(НомерСекции);                 //  4 - Номер отдела
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Цена);               //  5 - Цена за позицию без скидки
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.КоличествоУпаковок); //  6 - Количество
						СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
						СтрокаТаблицыТоваров.Добавить(СуммаСкидки);                 //  8 - Сумма скидки/наценки
						СтрокаТаблицыТоваров.Добавить(ПроцентСкидки);               //  9 - Процент скидки/наценки
						СтрокаТаблицыТоваров.Добавить(Сумма);                       // 10 - Сумма позиции со скидкой
						СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.СуммаНДС);           // 12 - Сумма налога (1)
						СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);             // 13 - Процент налога (1)
						СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
						СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
						СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
						СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
						
						ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
						
					КонецЦикла;
					
					// Подготовка таблицы оплат
					ТаблицаОплат = Новый Массив();
					
					// Наличные
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(0);
					СтрокаОплаты.Добавить(Объект.ПолученоНаличными);
					СтрокаОплаты.Добавить("Наличная оплата");
					СтрокаОплаты.Добавить("");
					ТаблицаОплат.Добавить(СтрокаОплаты);
					// Безналичные
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(1);
					СтрокаОплаты.Добавить(Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
					СтрокаОплаты.Добавить("Безналичная оплата");
					СтрокаОплаты.Добавить("");
					ТаблицаОплат.Добавить(СтрокаОплаты);
					
					// Подготовка таблицы общих параметров
					ОбщиеПараметры = Новый Массив();
					ОбщиеПараметры.Добавить(0);                      //  1 - Тип чека
					ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
					ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
					ОбщиеПараметры.Добавить(СуммаДокумента);         //  4 - Сумма по чеку без скидок/наценок
					ОбщиеПараметры.Добавить(СуммаДокумента);         //  5 - Сумма по чеку с учетом всех скидок/наценок
					ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
					ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
					ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
					ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
					ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
					ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
					ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
					
					ВходныеПараметры.Добавить(ТаблицаТоваров);
					ВходныеПараметры.Добавить(ТаблицаОплат);
					ВходныеПараметры.Добавить(ОбщиеПараметры);
					
					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
						ИдентификаторУстройстваФР,
						"PrintReceipt",
						ВходныеПараметры,
						ВыходныеПараметры
					);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					// Установить полученное значение номера чека реквизиту документа.
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						Объект.НомерЧекаККМ = ВыходныеПараметры[1];
					КонецЕсли;
					
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
					Объект.Дата   = ТекущаяДата();
					Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
						Объект.НомерЧекаККМ = 1;
					КонецЕсли;
					
					Модифицированность = Истина;
					
					//РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
					
					//Если РезультатПроведения = Истина Тогда
					//	ЧекПробит = Истина;
					//КонецЕсли;
					
					ПересчитатьДокументНаКлиенте();
					ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаКнопкуЗакрыть", 0.1, Истина);
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
					|Чек не напечатан на фискальном регистраторе.
					|Дополнительное описание:
					|%ДополнительноеОписание%'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					"%ДополнительноеОписание%",
					
					ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
				// Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				|Чек не напечатан на фискальном регистраторе.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат ЧекПробит;
	
КонецФункции

&НаКлиенте
Функция ПробитьЧекНаКлиенте()
	
	Результат = Ложь;
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Если СуммаДокумента > Объект.ПолученоНаличными + Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сумма оплаты меньше суммы чека'"), Объект.Ссылка, "СуммаСдачи",,ЕстьОшибки);
	КонецЕсли;
	
	Если СуммаДокумента < Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сумма оплаты платежными картами превышает сумму чека'"), Объект.Ссылка, "СуммаСдачи",,ЕстьОшибки);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДата();
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		Результат = ПробитьЧекВыполнить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВнесенаОплата()
	
	Возврат (Объект.ПолученоНаличными > 0 ИЛИ Объект.ОплатаПлатежнымиКартами.Количество() > 0);
	
КонецФункции

//============================================================================
// ЖУРНАЛ

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЖурналЧеки.Отбор,"КассаККМ", Объект.КассаККМ, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Объект.КассаККМ));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЖурналЧекиВРезерве.Отбор,"КассаККМ", Объект.КассаККМ, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Объект.КассаККМ));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЖурналЧекиВРезерве.Отбор,"Статус", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ТоварЗарезервирован"), ВидСравненияКомпоновкиДанных.Равно,,Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЖурналЧекиОтложенные.Отбор,"КассаККМ", Объект.КассаККМ, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Объект.КассаККМ));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЖурналЧекиОтложенные.Отбор,"Статус", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложен"), ВидСравненияКомпоновкиДанных.Равно,,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент = Элементы.ЧекиККМ Тогда
		ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	ИначеЕсли Элемент = Элементы.ЧекиККМВРезерве Тогда
		ТекущиеДанные = Элементы.ЧекиККМВРезерве.ТекущиеДанные;
	ИначеЕсли Элемент = Элементы.ЧекиККМОтложенные Тогда
		ТекущиеДанные = Элементы.ЧекиККМОтложенные.ТекущиеДанные;	
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") И СменаОткрыта Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент = Элементы.ЧекиККМ Тогда
		ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	ИначеЕсли Элемент = Элементы.ЧекиККМВРезерве Тогда
		ТекущиеДанные = Элементы.ЧекиККМВРезерве.ТекущиеДанные;
	ИначеЕсли Элемент = Элементы.ЧекиККМОтложенные Тогда
		ТекущиеДанные = Элементы.ЧекиККМОтложенные.ТекущиеДанные;	
	КонецЕсли;

	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные.Тип = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
			Отказ = Истина;
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПанельНавигацииПоказатьСкрыть(Команда)
	
	ПанельНавигацииПометка = НЕ Элементы.ОтображениеПанелиНавигации.Пометка;
	Элементы.ОтображениеПанелиНавигации.Пометка = ПанельНавигацииПометка;	
	Элементы.Навигация.Видимость = ПанельНавигацииПометка;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ТекущаяСтрока = Элементы.ПодборТаблицаНоменклатура.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура КнопкаПодборПоНесколькимСкладам(Команда)
	
	ОпцияПодборСНесколькихСкладов = НЕ Элементы.КнопкаПодборПоНесколькимСкладам.Пометка;
	
	Пометка = ?(ИспользоватьХарактеристикиНоменклатуры,ИспользоватьХарактеристикиНоменклатуры,ОпцияПодборСНесколькихСкладов);
	
	Элементы.КнопкаПодборПоНесколькимСкладам.Пометка = ОпцияПодборСНесколькихСкладов;
	Элементы.СписокОстаткиПоСкладам.Видимость = Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоСтроке(Команда)
	ПрименитьПоиск();
КонецПроцедуры






















