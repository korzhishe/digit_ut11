//[begin] Added by Sergey. http://infostart.ru/profile/18346/
//28.01.2012 0:10:13

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИХ МОДУЛЕЙ

// Устанавливает отбор по владельцу в динамическом списке подчиненного справочника, при активизации строки динамического списка справочника родителя.
 //
 // Параметры
 //  Элемент  		- ТаблицаФормы - таблица в которой произошло событие
 //  Форма		 	- УправляемаяФорма - форма, на которой находятся элементы.
 //
 &НаКлиенте
 Процедура КонтактВладелецПриАктивизацииСтроки(Элемент,Форма)  Экспорт
	
	ИмяТаблицыБезПрефикса = Прав(Элемент.Имя,СтрДлина(Элемент.Имя)-8);
	ЗначениеОтбора = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
	МассивОписанияКонтактов = ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов  Цикл
		Если  ЭлементМассиваОписания.ИмяВладельца = ИмяТаблицыБезПрефикса Тогда
			Форма["Список_" + ЭлементМассиваОписания.Имя].Отбор.Элементы[0].ПравоеЗначение = ЗначениеОтбора;
		КонецЕсли;
	КонецЦикла;
 
КонецПроцедуры 


// Дополняет описания возможных типов контактов.
// Используется, если в конфигурации определен хотя бы один тип контактов взаимодействий,
// помимо справочника Пользователи.
//
// Параметры:
//   Массив   - массив структур, в котором описываются возможные типы контактов.
//              Каждая структура содержит описание одного типа контактов.   
//				Описание полей структуры см. в комментарии к функции
//              ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов общего модуля
//              ВзаимодействияКлиентСервер.
//
&НаСервереБезКонтекста
Процедура ДополнитьМассивОписанияВозможныхКонтактов(МассивВозможныеКонтакты) Экспорт
	
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,Тип("СправочникСсылка.Партнеры"),Истина ,"Партнеры","Партнеры",Ложь,Ложь,"",Истина,"");
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,Тип("СправочникСсылка.Контрагенты"),Истина ,"Контрагенты","Контрагенты партнеров",Ложь,Ложь,"",Истина,"");
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,Тип("СправочникСсылка.КонтактныеЛицаПартнеров"),Истина,"КонтактныеЛицаПартнеров","Контактные лица",Ложь,Истина,"Партнеры",Истина,"");
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,Тип("СправочникСсылка.ФизическиеЛица"),Истина,"ФизическиеЛица","Физические лица",Истина,Ложь,"",Ложь,"КонтактныеЛицаПартнеров.ФизЛицо");
	
КонецПроцедуры

// Возвращает описания возможных типов контактов.
// Используется, если в конфигурации определен хотя бы один тип контактов взаимодействий,
// помимо справочника Пользователи.
//
// Возвращаемое значение:
//   Массив   - массив структур, в котором описываются возможные типы контактов.
//              Каждая структура содержит описание одного типа контактов.   
//				Описание полей структуры см. в комментарии к функции
//              ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов общего модуля
//              ВзаимодействияКлиентСервер.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивОписанияВозможныхКонтактов() Экспорт

	МассивВозможныеКонтакты = Новый Массив();
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(МассивВозможныеКонтакты,
		Тип("СправочникСсылка.Пользователи"),Ложь,"Пользователи","Пользователи",Ложь,Ложь,"",Ложь,"");
		
	ДополнитьМассивОписанияВозможныхКонтактов(МассивВозможныеКонтакты);
	
	Возврат МассивВозможныеКонтакты;

КонецФункции // ПолучитьСтруктуруВозможныеКонтакты()

&НаСервереБезКонтекста
Процедура ДобавитьЭлементПорядкаСКД(ЭлементСКД, ПутьКДанным, РежимОтображения = Неопределено, ТипУпорядочивания = Неопределено, Использование = Неопределено) 
	
	//Создаем новый элемент порядка  
	НовыйПорядок = ЭлементСКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	//То поле, по которому будет упорядочивание, оно как видно является полем компоновки
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	
	//Заполняем необходимые поля, это стандартные глобальные перечисления
	НовыйПорядок.РежимОтображения = ?(РежимОтображения = Неопределено, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный, РежимОтображения);
	НовыйПорядок.ТипУпорядочивания = ?(ТипУпорядочивания = Неопределено, НаправлениеСортировкиКомпоновкиДанных.Возр, ТипУпорядочивания);
	//флаг использование, говорит сам за себя
	НовыйПорядок.Использование = ?(Использование = Неопределено, Истина, Использование);
	
КонецПроцедуры // ДобавитьЭлементСортировкиСписка()

// Динамически формирует общие формы "Адресная книга" и "Подбор контактов" согласно возможным типам контактов
//
&НаСервереБезКонтекста
Процедура ДобавитьСтраницыФормыПодбораКонтактов(Форма) Экспорт
	
	ОписаниеТипаДинамическийСписок = Новый ОписаниеТипов("ДинамическийСписок");
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивОписанийВозможныхКонтактов = ПолучитьМассивОписанияВозможныхКонтактов();
	
	//Создадим динамические списки
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Список_" + ЭлементМассиваОписания.Имя ,ОписаниеТипаДинамическийСписок));	
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Установим в динамические списки основные таблицы и обязательное использование реквизита ЭтоГруппа
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСписок = Форма["Список_" + ЭлементМассиваОписания.Имя];
		ЭлементСписок.ОсновнаяТаблица = "";
		
		ЭлементСписок.ПроизвольныйЗапрос = Истина;
		ЭлементСписок.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	%Партнер%
		|	СправочникКонтакты.Ссылка КАК Ссылка,
		|	СправочникКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник.%Таблица% КАК СправочникКонтакты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%Таблица%.КонтактнаяИнформация КАК СправочникКонтактнаяИнформация
		|		ПО (СправочникКонтактнаяИнформация.Ссылка = СправочникКонтакты.Ссылка)
		|ГДЕ
		|	СправочникКонтактнаяИнформация.АдресЭП <> """"
		|";
		ЭлементСписок.ТекстЗапроса = СтрЗаменить(ЭлементСписок.ТекстЗапроса, "%Таблица%", ЭлементМассиваОписания.Имя);
		Если ЭлементМассиваОписания.Имя = "Контрагенты" Тогда
			
			ЭлементСписок.ТекстЗапроса = СтрЗаменить(ЭлементСписок.ТекстЗапроса, "%Партнер%", "СправочникКонтакты.Партнер КАК Партнер,");
			
			//Создаем новые элементы порядка  
			//предварительно очищаем элементы 
			ЭлементСписок.Порядок.Элементы.Очистить();
			
			ДобавитьЭлементПорядкаСКД(ЭлементСписок, "Партнер");
			ДобавитьЭлементПорядкаСКД(ЭлементСписок, "Ссылка");
			
		Иначе
			ЭлементСписок.ТекстЗапроса = СтрЗаменить(ЭлементСписок.ТекстЗапроса, "%Партнер%", "");
			ЭлементСписок.ОсновнаяТаблица = "Справочник." + ЭлементМассиваОписания.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементМассиваОписания.ЕстьВладелец  Тогда
			
			ЭлементСтраница = Форма.Элементы.Добавить("Страница_" + ЭлементМассиваОписания.Имя,Тип("ГруппаФормы"),Форма.Элементы.СтраницыСписки);
			ЭлементСтраница.Вид 					= ВидГруппыФормы.Страница;
			ЭлементСтраница.ОтображатьЗаголовок 	= Истина;
			ЭлементСтраница.Заголовок				= ЭлементМассиваОписания.Представление;
			ЭлементСтраница.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
		КонецЕсли;
		
		ЭлементТаблица = Форма.Элементы.Добавить("Таблица_" + ЭлементМассиваОписания.Имя,Тип("ТаблицаФормы"),Форма.Элементы[?(ЭлементМассиваОписания.ЕстьВладелец,"Страница_" + ЭлементМассиваОписания.ИмяВладельца,"Страница_" + ЭлементМассиваОписания.Имя)]);
		ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;
		ЭлементТаблица.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя;
		ЭлементТаблица.УстановитьДействие("Выбор","СписокСправочникаВыбор");
		Если Форма.ИмяФормы = "ОбщаяФорма.ВыборКонтакта" Тогда
			ЭлементТаблица.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			ЭлементТаблица.УстановитьДействие("ПриАктивизацииСтроки","Подключаемый_СписокКонтактыПриАктивизацииСтроки");
		КонецЕсли;
		Если ЭлементМассиваОписания.ЕстьВладелец Тогда
			Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].УстановитьДействие("ПриАктивизацииСтроки","Подключаемый_СписокВладелецПриАктивизацииСтроки");
			ЭлементОтбора = Форма["Список_" + ЭлементМассиваОписания.Имя].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		КонецЕсли;	
		
		КолонкаСсылка = Форма.Элементы.Добавить("Колонка_" + ЭлементМассиваОписания.Имя + "_Ссылка",Тип("ПолеФормы"),ЭлементТаблица);
		КолонкаСсылка.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаСсылка.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя + ".Ссылка";
		КолонкаСсылка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КолонкаСсылка.Заголовок = "Контакт";
		
		Если ЭлементМассиваОписания.Имя = "Контрагенты" Тогда
			КолонкаСсылка = Форма.Элементы.Добавить("Колонка_" + ЭлементМассиваОписания.Имя + "_Партнер",Тип("ПолеФормы"),ЭлементТаблица);
			КолонкаСсылка.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаСсылка.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя + ".Партнер";
			КолонкаСсылка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			КолонкаСсылка.Заголовок = "Партнер";
		КонецЕсли;
		
		КолонкаСсылка = Форма.Элементы.Добавить("Колонка_" + ЭлементМассиваОписания.Имя + "_АдресЭП",Тип("ПолеФормы"),ЭлементТаблица);
		КолонкаСсылка.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаСсылка.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя + ".АдресЭП";
		КолонкаСсылка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КолонкаСсылка.Заголовок = "Адрес";
		
	КонецЦикла;
	
КонецПроцедуры

//[end] Added 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОСУЩЕСТВЛЕНИЯ ПОИСКА

// Осуществляет поиск контактов по доменному имени или по адресу электронной почты.
// 
&НаСервере
Функция НайтиПоEmail(ПоДомену)
	
	Возврат Взаимодействия.НайтиПоEmail(СтрокаПоиска,ПоДомену,ЭтаФорма);
	
КонецФункции

//Осуществляет поиск контактов по строке
//
&НаСервере
Функция ОсуществитьПоискКонтактовПоСтроке()
	
	Возврат Взаимодействия.ОсуществитьПоискКонтактовПоСтроке(ЭтаФорма,Истина);
	
КонецФункции

// Осуществляет поиск контактов по началу наименования
//
&НаСервере
Функция НайтиПоНачалуНаименования()
	
	Возврат Взаимодействия.ПолучитьВсеКонтактыПоНачалуНаименованияСАдресамиЭлектроннойПочты(СтрокаПоиска,ЭтаФорма);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьТаблицуПолучателей()
	
	табПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	Для Каждого ГруппаВыбранных Из Параметры.СписокВыбранных Цикл
		Если ГруппаВыбранных.Значение <> Неопределено Тогда
			Для Каждого Элемент Из ГруппаВыбранных.Значение Цикл
				новСтр = табПолучатели.Добавить();
				новСтр.Группа = ГруппаВыбранных.Представление;
				ЗаполнитьЗначенияСвойств(новСтр, Элемент);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	табПолучатели.Сортировать("Группа");
	
	Если табПолучатели.Количество() > 0 Тогда
		ТаблицаАдресов = Взаимодействия.ПолучитьАдресаЭлектроннойПочтыДляМассиваКонтактов(табПолучатели.ВыгрузитьКолонку("Контакт"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПолучателиПисьма.Адрес,
		               |	ПолучателиПисьма.Представление,
		               |	ПолучателиПисьма.Контакт,
		               |	ПолучателиПисьма.Группа
		               |ПОМЕСТИТЬ ПолучателиПисьма
		               |ИЗ
		               |	&ПолучателиПисьма КАК ПолучателиПисьма
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КонтактыАдреса.Контакт,
		               |	КонтактыАдреса.СписокАдресов
		               |ПОМЕСТИТЬ КонтактыСписокАдресов
		               |ИЗ
		               |	&КонтактыАдреса КАК КонтактыАдреса
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПолучателиПисьма.Адрес,
		               |	ПолучателиПисьма.Представление,
		               |	ПолучателиПисьма.Контакт,
		               |	ПолучателиПисьма.Группа,
		               |	ЕСТЬNULL(КонтактыСписокАдресов.СписокАдресов, """") КАК СписокАдресов
		               |ИЗ
		               |	ПолучателиПисьма КАК ПолучателиПисьма
		               |		ЛЕВОЕ СОЕДИНЕНИЕ КонтактыСписокАдресов КАК КонтактыСписокАдресов
		               |		ПО КонтактыСписокАдресов.Контакт = ПолучателиПисьма.Контакт";
		
		Запрос.УстановитьПараметр("ПолучателиПисьма", табПолучатели);
		Запрос.УстановитьПараметр("КонтактыАдреса", ТаблицаАдресов);
		
		табПолучатели = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(табПолучатели, "ПолучателиПисьма");
	
КонецПроцедуры

//Добавляет строку в таблицу "Получатели письма" и заполняет ее согласно переданным параметрам.
//
//Параметры
//  Адрес        - Строка - адрес электронной почты.
//  Наименование - Строка - Представление адресата.
//  Контакт      - СправочникСсылка - контакт получатель.
//
&НаКлиенте
Процедура ДобавитьПолучателя(Адрес, Наименование, Контакт,СписокАдресов = "")
	
	новСтр = ПолучателиПисьма.Добавить();
	новСтр.Адрес         = Адрес;
	новСтр.Представление = Наименование;
	новСтр.Контакт       = Контакт;
	новСтр.СписокАдресов = СписокАдресов;
	новСтр.Группа        = ГруппаПоУмолчанию;
	
КонецПроцедуры

// Добавляет в таблицу получателей письма выбранную строку из списка "Контакты по предмету"
//
&НаКлиенте
Процедура ДобавитьПолучателяИзСпискаПоПредмету()
	
	текДанные = Элементы.КонтактыПоПредмету.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(текДанные.Ссылка);
	Если Результат <> Неопределено И Результат.Адреса.Количество() > 0 Тогда
		СписокАдресов = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Результат.Адреса,";");
	Иначе
		СписокАдресов = "";
	КонецЕсли;
	
	ДобавитьПолучателя(текДанные.Адрес, текДанные.Наименование, текДанные.Ссылка,СписокАдресов);
	
КонецПроцедуры

//Позиционируется на заданном контакте в списке получателей письма
//
//Параметры
//  Контакт - СправочникСсылка - контакт, на котором необходимо спозиционироватся.
//
&НаКлиенте
Процедура УстановитьКонтактВСпискеПолучателей(Контакт)
	
	Если ЗначениеЗаполнено(Контакт) И Элементы.ПолучателиПисьма.ТекущиеДанные <> Неопределено Тогда
		Элементы.ПолучателиПисьма.ТекущиеДанные.Контакт = Контакт;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущим контакт в соответствующем динамическом списке.
//
//Параметры
//  Контакт  - СправочникСсылка - контакт, на котором необходимо спозиционироватся.
//
&НаСервере
Процедура УстановитьТекущимКонтакт(Контакт)
	
	Взаимодействия.УстановитьТекущимКонтакт(Контакт,ЭтаФорма);
	
КонецПроцедуры

//Изменяет группу получателей письма.
//
//Параметры
//  ИмяГруппы  - Строка - имя группы, которое будет установлено выделенным получателям письма.
//
&НаКлиенте
Процедура ИзменитьГруппу(ИмяГруппы)
	
	Для Каждого Стр Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
		Элемент = ПолучателиПисьма.НайтиПоИдентификатору(Стр);
		Элемент.Группа = ИмяГруппы;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтроки(ЗНАЧ ВыделенныеСтроки)

	Результат = Взаимодействия.ПолучитьАдресаЭлектроннойПочтыДляМассиваКонтактов(ВыделенныеСтроки,ГруппаПоУмолчанию);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат,ПолучателиПисьма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуПоУмолчанию()
	
	Если Параметры.Свойство("ГруппаПоУмолчанию") Тогда
		ГруппаПоУмолчанию = Параметры.ГруппаПоУмолчанию;
	КонецЕсли;
	Если ПустаяСтрока(ГруппаПоУмолчанию) Тогда
		ГруппаПоУмолчанию = НСтр("ru = 'Кому'");
	КонецЕсли;
	
КонецПроцедуры 

// Управляет доступностью элементов формы
&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.КомандаОбновитьИндексППД.Доступность = Не ИндексАктуален;

КонецПроцедуры

&НаКлиенте
Процедура УправлениеСтраницами()

	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаВсеКонтактыПоПредмету ИЛИ 
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов ИЛИ 
		Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() = 1 ИЛИ
		(Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей И (НЕ ИспользоватьГруппыПользователей))Тогда
		
		Элементы.СтраницыПереместить.ТекущаяСтраница = Элементы.СтраницаПереместитьОднаТаблица;
		
	Иначе
		
		Элементы.СтраницыПереместить.ТекущаяСтраница = Элементы.СтраницаПереместитьДвеТаблицы;
		
	КонецЕсли;

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//[begin] Added by Sergey. http://infostart.ru/profile/18346/
	//29.01.2012 6:18:52
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	СписокПользователей.Параметры.УстановитьЗначениеПараметра("ИспользоватьГруппыПользователей", ИспользоватьГруппыПользователей);
	СписокПользователей.Параметры.УстановитьЗначениеПараметра("ГруппаПользователей", Справочники.ГруппыПользователей.ПустаяСсылка());
	//[end] Added 
	
	ДобавитьСтраницыФормыПодбораКонтактов(ЭтаФорма);
	ЗаполнитьТаблицуПолучателей();
	УстановитьГруппуПоУмолчанию();

	// Заполним контакты по предмету
	Предмет = Параметры.Предмет;
	Взаимодействия.ЗаполнитьКонтактыПоПредмету(Элементы, Предмет, КонтактыПоПредмету, Истина);
	
	// Получим информацию об индексе ППД
	Взаимодействия.ОбновитьИнформациюОбАктуальностиИндексаППД(ИнформацияОбАктуальностиИндексаППД, ППДВключен, ИндексАктуален);

	// Заполним список вариантов поиска и осуществим первый поиск
	ВсеСпискиПоиска = Взаимодействия.ПолучитьСписокДоступныхПоисков(ППДВключен, Параметры, Элементы, Истина);
	ВариантыПоиска = "ПоEmail";
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностью();
	УправлениеСтраницами();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//КОМАНДЫ ФОРМЫ 

// Передает владельцу в качестве результата работы формы массив структур содержащих 
// адреса выбранных получателей и закрывает форму. 
//
&НаКлиенте
Процедура КомандаОКВыполнить()
	
	Результат = Новый Массив;
	
	Для Каждого Стр Из ПолучателиПисьма Цикл
		Группа = ?(ПустаяСтрока(Стр.Группа), "Кому", Стр.Группа);
		Контакт = Новый Структура("Адрес,Представление,Контакт, Группа", Стр.Адрес, Стр.Представление, Стр.Контакт, Группа);
		Результат.Добавить(Контакт);
	КонецЦикла;
	
	Закрыть(Результат);
	
КонецПроцедуры

//Переносит текущий контакт из списка "Контакты по предмету" в список "Получетели письма". 
//
&НаКлиенте
Процедура ДобавитьИзСпискаПредметовВыполнить()

	ДобавитьПолучателяИзСпискаПоПредмету();

КонецПроцедуры

//Изменяет текущую группу получателей письма на группу "Кому". 
//
&НаКлиенте
Процедура ИзменитьГруппуКомуВыполнить()

	ИзменитьГруппу("Кому");

КонецПроцедуры

//Изменяет текущую группу получателей письма на группу "Копии". 
//
&НаКлиенте
Процедура ИзменитьГруппуКопииВыполнить()

	ИзменитьГруппу("Копии");

КонецПроцедуры 

//Изменяет текущую группу получателей письма на группу "Скрытые". 
//
&НаКлиенте
Процедура ИзменитьГруппуСкрытыеВыполнить()

	ИзменитьГруппу("Скрытые");

КонецПроцедуры

//Инициирует процесс поиска контактов.
//
&НаКлиенте
Процедура КомандаНайтиВыполнить()
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Предупреждение(НСтр("ru = 'Не задана строка поиска!'"));
		Возврат;
	КонецЕсли;
	
	Результат = "";
	НайденныеКонтакты.Очистить();
	
	Если ВариантыПоиска = "ПоEmail" Тогда
		НайтиПоEmail(Ложь);
	ИначеЕсли ВариантыПоиска = "ПоДомену" Тогда
		НайтиПоEmail(Истина);
	ИначеЕсли ВариантыПоиска = "ПоСтроке" Тогда
		Результат = ОсуществитьПоискКонтактовПоСтроке();
	ИначеЕсли ВариантыПоиска = "НачинаетсяС" Тогда
		НайтиПоНачалуНаименования();
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		Предупреждение(Результат);
	КонецЕсли;
	
КонецПроцедуры

//Обновляет индекс полнотекстового поиска. 
//
&НаКлиенте
Процедура КомандаОбновитьИндексППДВыполнить()
	
	ВзаимодействияКлиент.КомандаОбновитьИндексППДВыполнить(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален);
	УправлениеДоступностью();
	
КонецПроцедуры 

//Выполняет позиционирование в соответсвующем динамическом списке на текущем контакте из 
//списка "Найденные контакты".
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаНайденныхВыполнить()
	
	текДанные = Элементы.НайденныеКонтакты.ТекущиеДанные;
	Если текДанные <> Неопределено И ЗначениеЗаполнено(текДанные.Ссылка) Тогда
		УстановитьТекущимКонтакт(текДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет позиционирование в соответсвующем динамическом списке на текущем контакте
//из списка "Получатели письма".
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаПолучателейВыполнить()
	
	текДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если текДанные <> Неопределено И ЗначениеЗаполнено(текДанные.Контакт) Тогда
		УстановитьТекущимКонтакт(текДанные.Контакт);
	КонецЕсли;
	
КонецПроцедуры

//Выполняет позиционирование в соответсвующем динамическом списке на текущем контакте
//из списка "Контакты по предмету".
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаПредметовВыполнить()
	
	текДанные = Элементы.КонтактыПоПредмету.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		УстановитьТекущимКонтакт(текДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

//Инициирует поиск контактов по адресу электронной почты текущей строки списка "Получатели письма". 
//
&НаКлиенте
Процедура НайтиПоАдресуВыполнить()
	
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов;
	НайденныеКонтакты.Очистить();
	ВариантыПоиска = "ПоEmail";

	текДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаПоиска = текДанные.Адрес;
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		НайтиПоEmail(Ложь);
	КонецЕсли;

КонецПроцедуры

//Инициирует поиск контактов по представлению текущей строки списка "Получатели письма". 
//
&НаКлиенте
Процедура НайтиПоПредставлениюВыполнить()
	
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов;
	НайденныеКонтакты.Очистить();
	ВариантыПоиска = "ПоСтроке";

	текДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = текДанные.Представление;
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		Результат = ОсуществитьПоискКонтактовПоСтроке();
		Если Не ПустаяСтрока(Результат) Тогда
			Предупреждение(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

//Осуществляет поиск всех адресов электронной почты контакта из списка "Получатели письма" и
 //предлагает пользователю сделать выбор, если у контакта более одного адреса электронной почты.
&НаКлиенте
Процедура УстановитьАдресКонтактаВыполнить()
	
	текДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если текДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(текДанные.Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВзаимодействияВызовСервера.ПолучитьАдресаЭлектроннойПочтыКонтакта(текДанные.Контакт);
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Количество() = 1 Тогда
		Адрес = Результат[0].АдресЭП;
		Представление = Результат[0].Представление;
	Иначе
		спсВыбора = Новый СписокЗначений;
		Номер = 0;
		Для Каждого Элемент Из Результат Цикл
			спсВыбора.Добавить(Номер, Элемент.ВидНаименование + ": " + Элемент.АдресЭП);
			Номер = Номер + 1;
		КонецЦикла;
		
		выбрЭлемент = спсВыбора.ВыбратьЭлемент();
		Если выбрЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Индекс = выбрЭлемент.Значение;
		Адрес = Результат[Индекс].АдресЭП;
		Представление = Результат[Индекс].Представление;
	КонецЕсли;

	Поз = Найти(Представление, "<");
	Представление = ?(Поз = 0, "", СокрЛП(Лев(Представление, Поз-1)));

	текДанные.Адрес = Адрес;
	Если Не ПустаяСтрока(Представление) Тогда
		текДанные.Представление = Представление;
	КонецЕсли;

КонецПроцедуры

//Выполняет позиционирование в соответсвующем динамическом списке на текущем контакте
//из списка "Контакты по предмету".
//
&НаКлиенте
Процедура УстановитьКонтактИзСпискаПредметовВыполнить()
	
	текДанные = Элементы.КонтактыПоПредмету.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		УстановитьКонтактВСпискеПолучателей(текДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПереместитьИзВыбранногоВСписокВсе(Команда)
	
	ПолучателиПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзВыбранногоВСписок(Команда)
	
	ВыделенныеСтроки = Элементы.ПолучателиПисьма.ВыделенныеСтроки;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ПолучателиПисьма.Удалить(ПолучателиПисьма.НайтиПоИдентификатору(ВыделеннаяСтрока));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзСпискаВВыбранное(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоискКонтактов Тогда
		
		Для каждого ВыделеннаяСтрока Из Элементы.НайденныеКонтакты.ВыделенныеСтроки Цикл
		
			ДанныеСтроки = Элементы.НайденныеКонтакты.ДанныеСтроки(ВыделеннаяСтрока);
			ДобавитьПолучателя(ДанныеСтроки.Представление, ДанныеСтроки.НаименованиеКонтакта, ДанныеСтроки.Ссылка);
		
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	НомерЭлементаФормы = Неопределено;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() = 1 Тогда
		
		НомерЭлементаФормы = 0;
		
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы.Количество() = 2 Тогда
		
		Если ТекущийЭлемент.Имя = "ПереместитьИзВерхнегоСпискаВВыбранное" Тогда
			
			НомерЭлементаФормы = 0;
			
		Иначе
			
			НомерЭлементаФормы = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерЭлементаФормы = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПеренестиВыделенныеСтроки(Элементы.СтраницыСписки.ТекущаяСтраница.ПодчиненныеЭлементы[НомерЭлементаФормы].ВыделенныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеСтраницами();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.СписокАдресов) Тогда
		Элемент.СписокВыбора.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущиеДанные.СписокАдресов,";"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ВзаимодействияКлиент.ВыбратьКонтакт(Предмет, текДанные.Адрес, текДанные.Представление, текДанные.Контакт, Истина, Ложь, Истина) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Группа = "Кому";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПоПредметуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ДобавитьПолучателяИзСпискаПоПредмету();

КонецПроцедуры

&НаКлиенте
Процедура СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	//[begin] Added by Sergey. http://infostart.ru/profile/18346/
	//28.01.2012 2:25:42
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		ВыбраннаяСтрока = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	//[end] Added 
	
	Результат = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(ВыбраннаяСтрока);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = Результат.Адреса[0];
	СписокАдресов = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Результат.Адреса,";");
	
	ДобавитьПолучателя(Адрес, Результат.Наименование, ВыбраннаяСтрока,СписокАдресов);
	
КонецПроцедуры

//Универсальный обработчик активизации строки динамического списка, у которого есть подчинненные списки.
&НаКлиенте
Процедура Подключаемый_СписокВладелецПриАктивизацииСтроки(Элемент)
	
	КонтактВладелецПриАктивизацииСтроки(Элемент,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеКонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	текДанные = Элементы.НайденныеКонтакты.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(текДанные.Ссылка);
	Если Результат <> Неопределено И Результат.Адреса.Количество() > 0 Тогда
		СписокАдресов = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Результат.Адреса,";");
	Иначе
		СписокАдресов = "";
	КонецЕсли;
	
	ДобавитьПолучателя(текДанные.Представление, текДанные.НаименованиеКонтакта, текДанные.Ссылка,СписокАдресов);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПриАктивизацииСтроки(Элемент)
	
	СписокПользователей.Параметры.УстановитьЗначениеПараметра("ГруппаПользователей", Элементы.ГруппыПользователей.ТекущаяСтрока);
	
КонецПроцедуры