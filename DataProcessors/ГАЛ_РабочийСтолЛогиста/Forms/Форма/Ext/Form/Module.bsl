//При активизации строки ТЗ маршруты
&НаКлиенте
Процедура ТЗМаршрутыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		 ТЗЗаказыНаДоставку.Параметры.УстановитьЗначениеПараметра("ДокументМаршрут", ТекущаяСтрока);
	Иначе
		
		 ТЗЗаказыНаДоставку.Параметры.УстановитьЗначениеПараметра("ДокументМаршрут", Неопределено);
	КонецЕсли;
	
КонецПроцедуры



//При создании на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 
	
	 УсловноеОформлениеСтатуса();

 КонецПроцедуры
 
  //Устанавливает условное оформление списка по статусу
 &НаСервере
Процедура УсловноеОформлениеСтатуса()
	 
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ГАЛ_СтатусыЗаявокНаДоставку.Ссылка,
	                |	ГАЛ_СтатусыЗаявокНаДоставку.R,
	                |	ГАЛ_СтатусыЗаявокНаДоставку.G,
	                |	ГАЛ_СтатусыЗаявокНаДоставку.B
	                |ИЗ
	                |	Справочник.ГАЛ_СтатусыЗаявокНаДоставку КАК ГАЛ_СтатусыЗаявокНаДоставку
	                |ГДЕ
	                |	ГАЛ_СтатусыЗаявокНаДоставку.ПометкаУдаления = ЛОЖЬ";
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
		 ЭлементУО = УсловноеОформление.Элементы.Добавить();
		 ЭлементУО.Использование = Истина;
		 
			 Попытка
			 ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(Выборка.R,Выборка.G,Выборка.B));
		 Исключение
			 
		 КонецПопытки;
	 
		 ЭлементУсловия                = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТЗЗаказыНаДоставку.СтатусДоставки");
		 ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		 ЭлементУсловия.ПравоеЗначение = Выборка.Ссылка;
		 ЭлементУсловия.Использование  = Истина;
		 
		 ОформляемоеПоле      = ЭлементУО.Поля.Элементы.Добавить();
		 ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТЗЗаказыНаДоставку");
	 КонецЦикла;

КонецПроцедуры

//Обновить отображения карты на форме
&НаСервере
Процедура ОбновитьКарту()
	
	
	
	рКод =      РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет").ПолучитьТекст();
	
	рУвеличение = "";
	рШирота = "";
	рДолгота="";
	рЦветМеткиПоУмолчанию = "";
	// зададим координаты; по умолчанию - центр Москвы
	Если ПустаяСтрока(рУвеличение) Тогда рУвеличение="10" КонецЕсли;
	Если ПустаяСтрока(рШирота) Тогда рШирота="55.76" КонецЕсли;
	Если ПустаяСтрока(рДолгота) Тогда рДолгота="37.60" КонецЕсли;
	Если ПустаяСтрока(рЦветМеткиПоУмолчанию) Тогда рЦветМеткиПоУмолчанию="#1e90ff" КонецЕсли;
	
	
	
	КоординатыСтрокой = СокрЛП(Константы.ГАЛ_КоординатыНачальнойКарты.Получить());
	ЕСли СтрДлина(КоординатыСтрокой)>0 Тогда
		рКод = СтрЗаменить(рКод,"#КоординатыЦентра#","["+КоординатыСтрокой+"]" ); 
	Иначе	
		рКод = СтрЗаменить(рКод,"#КоординатыЦентра#","["+СокрЛП(рШирота)+","+СокрЛП(рДолгота)+"]" ); 	
	КонецЕсли;

	рКод = СтрЗаменить(рКод,"#Увеличение#",рУвеличение ); 
	рКод = СтрЗаменить(рКод,"#ЦветМеткиПоУмолчанию#","'"+рЦветМеткиПоУмолчанию +"'"); 
	
	
	Карта = рКод;
КонецПроцедуры




//Нажатие команды показать на карте
&НаКлиенте
Процедура ПоказатьНаКарте(Команда)
	
	
	//Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарта;
	
	//ТекВремя = ТекущаяДата();
	//Будущуе = ТекВремя + 20;
	//Пока ТекущаяДата() < Будущуе Цикл

	//
	// КонецЦикла;	
	
	ПоказатьКурьеровНаКарте();
	ПоказатьЗаказыНаКарте();
КонецПроцедуры

#Область Карта_Курьеры

//Обновить курьеров на карте
&НаКлиенте
Процедура ПоказатьКурьеровНаКарте()
	
	//Удаляем курьеров на карте
	УдалитьКурьеровНаКарте();
	
	//Заполнение курьеров на карте
	ЗаполнитьТаблицуКурьеров();
	
	Для Каждого ТекСтрока из ТЗКурьеры Цикл
		
		Координаты = ПолучитьКоординатыКурьера(ТекСтрока.КурьерЭкспедитор,ТекСтрока.ДатаДоставки);
		Если Координаты <> Неопределено Тогда
			ДобавитьКурьераНаКарту(ТекСтрока,Координаты);
		КонецЕсли;
	КонецЦикла;
  
КонецПроцедуры 

//Обновить данные по курьерам
&НаСервере
Процедура ЗаполнитьТаблицуКурьеров()
	
	МассивМаршрутов = Элементы.ТЗМаршруты.ВыделенныеСтроки;

	//ТЗКурьеры = Новый ТаблицаЗначений;
	//ТЗКурьеры.Колонки.Добавить("КурьерЭкспедитор",,"КурьерЭкспедитор");
	//ТЗКурьеры.Колонки.Добавить("ТранспортноеСредство",,"ТранспортноеСредство");
	//ТЗКурьеры.Колонки.Добавить("ДатаДоставки",,"ДатаДоставки");
	//ТЗКурьеры.Колонки.Добавить("ГАЛ_МаршрутныйЛист",,"ГАЛ_МаршрутныйЛист");

	ТЗКурьеры.Очистить();
	НомерСтроки = 0;
	Для Каждого  ТекСтрока из МассивМаршрутов Цикл
		
		  НоваяСтрока = ТЗКурьеры.Добавить();
		  НоваяСтрока.НомерСтроки          =  НомерСтроки;
		  НоваяСтрока.МаршрутныйЛист       =  ТекСтрока; 
		  НоваяСтрока.КурьерЭкспедитор     =  ТекСтрока.КурьерЭкспедитор;   
		  НоваяСтрока.ТранспортноеСредство =  ТекСтрока.ТранспортноеСредство;
		  НоваяСтрока.ДатаДоставки         =  ТекСтрока.ДатаДоставки;
		  
		  НоваяСтрока.ЦветКурьера = ПолучитьЦветКурьера(НоваяСтрока.КурьерЭкспедитор);
		  
		  НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	
КонецПроцедуры

//ПолучаемЦветКурьера из регистра
&НаСервере
Функция ПолучитьЦветКурьера(ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГАЛ_ЦветаМетокФизЛиц.R,
	|	ГАЛ_ЦветаМетокФизЛиц.G,
	|	ГАЛ_ЦветаМетокФизЛиц.B
	|ИЗ
	|	РегистрСведений.ГАЛ_ЦветаМетокФизЛиц КАК ГАЛ_ЦветаМетокФизЛиц
	|ГДЕ
	|	ГАЛ_ЦветаМетокФизЛиц.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		ЦветФизЛица = "#"+Строка(ГАЛ_ДополнительныеФункции.DecToHex(Выборка.R)) + Строка(ГАЛ_ДополнительныеФункции.DecToHex(Выборка.G)) + Строка(ГАЛ_ДополнительныеФункции.DecToHex(Выборка.B));
		Возврат  ЦветФизЛица;
	Иначе
		Возврат  "";
	КонецЕсли;
 
	
КонецФункции

//Возвращает последние координаты на дату
&НаСервереБезКонтекста
Функция  ПолучитьКоординатыКурьера(КурьерЭкспедитор,ДатаДоставки)
	
	Если ЗначениеЗаполнено(КурьерЭкспедитор) Тогда
		
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		                |	ГАЛ_ИсторияПеремещенияМУСрезПоследних.Широта,
		                |	ГАЛ_ИсторияПеремещенияМУСрезПоследних.Долгота,
		                |	МАКСИМУМ(НАЧАЛОПЕРИОДА(ГАЛ_ИсторияПеремещенияМУСрезПоследних.Период, ДЕНЬ)) КАК Период
		                |ИЗ
		                |	РегистрСведений.ГАЛ_ИсторияПеремещенияМУ.СрезПоследних(
		                |			,
		                |			НАЧАЛОПЕРИОДА(Период, ДЕНЬ) = &НаДату
		                |				И ФизЛицо = &ФизЛицо) КАК ГАЛ_ИсторияПеремещенияМУСрезПоследних
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	ГАЛ_ИсторияПеремещенияМУСрезПоследних.Широта,
		                |	ГАЛ_ИсторияПеремещенияМУСрезПоследних.Долгота";
						
						Запрос.УстановитьПараметр("НаДату", ДатаДоставки);
						Запрос.УстановитьПараметр("ФизЛицо", КурьерЭкспедитор);
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Если Выборка.Количество()>0 Тогда
							Выборка.Следующий();
							
							
							Ответ = Новый Структура;
							Ответ.Вставить("Широта" , СтрЗаменить(Строка(Выборка.Широта),",","."));
							Ответ.Вставить("Долгота" , СтрЗаменить(Строка(Выборка.Долгота),",","."));
							Возврат Ответ;
						КонецЕсли;
						
		 
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

//Добавляем курьера на карту
&НаКлиенте
Процедура ДобавитьКурьераНаКарту(ТекСтрока,Координаты)
	
	 ФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Строка(ТекСтрока.КурьерЭкспедитор));
	iconContent          = ФИО; 
	balloonContentHeader = "";	
	balloonContentBody   = Строка(ТекСтрока.КурьерЭкспедитор);
	balloonContentFooter = "";
	balloonContentFooter = "";
	hintContent          = Строка(ТекСтрока.КурьерЭкспедитор);
	id                   = Строка(ТекСтрока.НомерСтроки);
	Если ТекСтрока.ЦветКурьера <>"" Тогда
	p_Color = СокрЛП(ТекСтрока.ЦветКурьера);	
Иначе
	 p_Color  = "#3b5998";
КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.ТранспортноеСредство) Тогда
		p_preset             = "islands#blueAutoIcon";
	Иначе 
		p_preset             = "islands#blueRunIcon";
	КонецЕсли;
	
	 
	рТочка = Элементы.Карта.Документ.parentWindow.AddPlacemarkKyr(Координаты.Широта,Координаты.Долгота,
	iconContent,balloonContentHeader,balloonContentBody,balloonContentFooter,hintContent,id,p_preset,p_Color);
	

	
КонецПроцедуры

//Удаляем всех курьеров на карте
&НаКлиенте
Процедура УдалитьКурьеровНаКарте() 
	Элементы.Карта.Документ.parentWindow.RemoveAllPlacemarkKyr();	
КонецПроцедуры

#КонецОбласти


//Отправка сообщения курьеру на телефон
&НаКлиенте
Процедура ОтправитьСообщениеПУШ(Команда)
	
	ТекСтрокаМаршрут = Элементы.ТЗМаршруты.ТекущиеДанные;
	ТекСтрокаЗаказ = Элементы.ТЗЗаказыНаДоставку.ТекущиеДанные;
	Если ТекСтрокаМаршрут <> Неопределено Тогда
		
		П = Новый Структура;
		П.Вставить("Водитель",ТекСтрокаМаршрут.КурьерЭкспедитор);
		Если ТекСтрокаМаршрут <> Неопределено Тогда
			П.Вставить("Документ",ТекСтрокаЗаказ.ЗаказНаДоставку);
		Иначе	
			П.Вставить("Документ","");
		КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.ГАЛ_ФормаОтправкиPush", П);
	КонецЕсли;

КонецПроцедуры

//Обновить заказы на карте
&НаКлиенте
Процедура ПоказатьЗаказыНаКарте()
	
	//Удаляем Заказы на карте
	УдалитьЗаказыНаКарте();
	
	МассивМаршрутов = Элементы.ТЗМаршруты.ВыделенныеСтроки;
	
	ЗаполнитьМаршуртыВТЗ(МассивМаршрутов);
	
	Для Каждого ТекСтрока из ТЗМаршрутыКарты Цикл
		
		ДобавитьЗаказНаКарту(ТекСтрока);
	КонецЦикла;
	
	  
КонецПроцедуры 

//Запоняет таблицу маршрутов для отображения на карте
&НаСервере
Процедура ЗаполнитьМаршуртыВТЗ(МассивМаршрутов)
	
	ТЗМаршрутыКарты.Очистить();
	
	Для Каждого ТекСтрокаМаршрута из МассивМаршрутов Цикл
		Маршрут  = ТекСтрокаМаршрута;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.НомерСтроки,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.Широта,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.Долгота,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку.СтатусДоставки КАК СтатусДоставки,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку.ТипДоставки КАК ТипДоставки,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку.АдресДоставки КАК АдресДоставки,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку.Номер КАК Номер,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку.КонтактноеЛицо КАК КонтактноеЛицо,
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.Ссылка.КурьерЭкспедитор КАК КурьерЭкспедитор
		               |ИЗ
		               |	Документ.ГАЛ_МаршрутныйЛист.ЗаказыНаДоставку КАК ГАЛ_МаршрутныйЛистЗаказыНаДоставку
		               |ГДЕ
		               |	ГАЛ_МаршрутныйЛистЗаказыНаДоставку.ЗаказНаДоставку.СтатусДоставки <> &СтатусДоставкикРаспределению
		               |	И ГАЛ_МаршрутныйЛистЗаказыНаДоставку.Ссылка = &Маршрут";
		
		Запрос.УстановитьПараметр("Маршрут",Маршрут);
		Запрос.УстановитьПараметр("СтатусДоставкикРаспределению", Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
		
		
		
		Для Каждого ТекСтрока из Выборка Цикл
			 
			Если ТекСтрока.Широта = 0 Тогда
				Координаты =  ГАЛ_ApiYandex.YandexGeoCode(ТекСтрока.АдресДоставки);
				Если Координаты = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				Широта = СтрЗаменить(Строка(Координаты.lat),",",".");
				Долгота = СтрЗаменить(Строка(Координаты.lng),",","."); 
			Иначе
				Широта  = СтрЗаменить(Строка(ТекСтрока.Широта),",",".");
				Долгота = СтрЗаменить(Строка(ТекСтрока.Долгота),",",".");
			КонецЕсли;
			
			НоваяСтрока = ТЗМаршрутыКарты.Добавить();
			НоваяСтрока.НомерСтроки      = ТекСтрока.НомерСтроки;
			НоваяСтрока.КурьерЭкспедитор = ТекСтрока.КурьерЭкспедитор;
			НоваяСтрока.СтатусДоставки   = ТекСтрока.СтатусДоставки;
			НоваяСтрока.АдресДоставки    = ТекСтрока.АдресДоставки;
			НоваяСтрока.ТипДоставки      = ТекСтрока.ТипДоставки;
			НоваяСтрока.Номер            = ТекСтрока.Номер;
			НоваяСтрока.КонтактноеЛицо   = ТекСтрока.КонтактноеЛицо;
			НоваяСтрока.Широта           = Широта;
			НоваяСтрока.Долгота          = Долгота;
			НоваяСтрока.ЦветКурьера      = ПолучитьЦветКурьера(НоваяСтрока.КурьерЭкспедитор);

			Если ЗначениеЗаполнено(НоваяСтрока.СтатусДоставки) Тогда
				Если НоваяСтрока.СтатусДоставки.КонечныйСтатус Тогда
				НоваяСтрока.КонечныйСтатус          = Истина;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
//Процедура добавляет заказ на карту
Процедура ДобавитьЗаказНаКарту(ТекущаяСтрока) Экспорт
	
		
	Долгота =  СтрЗаменить(Строка(ТекущаяСтрока.Долгота),",",".");
	Широта  =  СтрЗаменить(Строка(ТекущаяСтрока.Широта),",",".");	
	 
	balloonContentHeader = Строка(ТекущаяСтрока.СтатусДоставки);	
	balloonContentBody   = ТекущаяСтрока.АдресДоставки;
	balloonContentFooter = ТекущаяСтрока.КонтактноеЛицо; 
	hintContent          = Строка(ТекущаяСтрока.ТипДоставки) + " №" + СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяСтрока.Номер,"0","Слева");
	id                   =  Строка(ТекущаяСтрока.НомерСтроки);
		
		
	Если ТекущаяСтрока.КонечныйСтатус Тогда
		p_preset = "islands#blueDotIconWithCaption";
		iconContent          = Строка(ТекущаяСтрока.СтатусДоставки);
	Иначе
		p_preset = "islands#blueIcon";
		iconContent          = Строка(ТекущаяСтрока.НомерСтроки);
	КонецЕсли;
	
	Если Строка(ТекущаяСтрока.СтатусДоставки) = "Доставлен" Тогда

		 p_preset = "islands#blueCircleDotIcon";
	КонецЕсли;
	
	
	
	Если ТекущаяСтрока.ЦветКурьера <>"" Тогда
		p_Color = СокрЛП(ТекущаяСтрока.ЦветКурьера);	
	Иначе
		p_Color  = "#3b5998";
	КонецЕсли;

	
	рТочка = Элементы.Карта.Документ.parentWindow.AddPlacemark(Широта,Долгота,
	iconContent,balloonContentHeader,balloonContentBody,balloonContentFooter,hintContent,id,p_preset,p_Color);
	
	
КонецПроцедуры


//Удаляем все заказы на карте
&НаКлиенте
Процедура УдалитьЗаказыНаКарте() 
Элементы.Карта.Документ.parentWindow.RemoveAllPlacemark();	
КонецПроцедуры



//При открытии формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьКарту();
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	УдалитьЗаказыНаКарте();
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////// процедуры и функции



