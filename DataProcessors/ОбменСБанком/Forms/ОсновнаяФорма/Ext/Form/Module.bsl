
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Объект.НачПериода = ТекущаяДатаСеанса();
	Объект.КонПериода = ТекущаяДатаСеанса();
	
	ОплатаПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ПередачиТоваровМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ОбособленныеПодразделенияВыделенныеНаБаланс = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	ИмпортныеЗакупки = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	УчетПрочихДоходовРасходов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьДоговорыКредитовИДепозитов = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	
	ЗначенияФункциональныхОпций = Новый Структура;
	ЗначенияФункциональныхОпций.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	ЗначенияФункциональныхОпций.Вставить("ПередачиТоваровМеждуОрганизациями", ПередачиТоваровМеждуОрганизациями);
	ЗначенияФункциональныхОпций.Вставить("ОбособленныеПодразделенияВыделенныеНаБаланс", ОбособленныеПодразделенияВыделенныеНаБаланс);
	ЗначенияФункциональныхОпций.Вставить("ИмпортныеЗакупки", ИмпортныеЗакупки);
	ЗначенияФункциональныхОпций.Вставить("УчетПрочихДоходовРасходов", УчетПрочихДоходовРасходов);
	ЗначенияФункциональныхОпций.Вставить("ИспользоватьДоговорыКредитовИДепозитов", ИспользоватьДоговорыКредитовИДепозитов);
	ЗначенияФункциональныхОпций.Вставить("НесколькоВалют", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	Элементы.НастройкаЗаполненияПодразделение.Видимость = ИспользоватьПодразделения;
	Элементы.ДокументыКИмпортуПодразделение.Видимость = ИспользоватьПодразделения;
	
	НастройкаЗаполненияЭлементКоллекции = НастройкаЗаполнения.Добавить();
	НастройкаЗаполненияЭлементКоллекции.Документ = "Поступление безналичных денежных средств";
	НастройкаЗаполненияЭлементКоллекции.СтатьяДоходовИлиРасходов = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
	
	НастройкаЗаполненияЭлементКоллекции = НастройкаЗаполнения.Добавить();
	НастройкаЗаполненияЭлементКоллекции.Документ = "Списание безналичных денежных средств";
	НастройкаЗаполненияЭлементКоллекции.СтатьяДоходовИлиРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ЗаполнитьСписокПрограмм();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Для к = 1 по НастройкаЗаполнения.Количество() Цикл
		НастройкаЗаполненияЭлементКоллекции = НастройкаЗаполнения[к-1];
		Если  НастройкаЗаполненияЭлементКоллекции.СтатьяДоходовИлиРасходов = Неопределено Тогда
			Если  НастройкаЗаполненияЭлементКоллекции.Документ = "Поступление безналичных денежных средств" Тогда
				НастройкаЗаполненияЭлементКоллекции.СтатьяДоходовИлиРасходов = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
			ИначеЕсли  НастройкаЗаполненияЭлементКоллекции.Документ = "Списание безналичных денежных средств" Тогда
				НастройкаЗаполненияЭлементКоллекции.СтатьяДоходовИлиРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Объект.ФайлЗагрузки		   = "";
	Объект.ПрограммаЗагрузки   = "";
	Объект.ОрганизацияЗагрузки = "";
	Объект.КодировкаЗагрузки   = "";
	
	Объект.ФайлВыгрузки		   = "";
	Объект.ПрограммаВыгрузки   = "";
	Объект.ОрганизацияВыгрузки = "";
	Объект.КодировкаВыгрузки   = "";

	Если Не ПустаяСтрока(ПрограммаФайлЗагрузки) Тогда
		СтрТаблицаПрограммЗагрузки = 
			ТаблицаПрограммЗагрузки.НайтиСтроки(Новый Структура("Представление", ПрограммаФайлЗагрузки));
		Если НЕ СтрТаблицаПрограммЗагрузки.Количество() = 0 Тогда
			СтрПрограммаФайлЗагрузки = СтрТаблицаПрограммЗагрузки[0];
			Объект.ФайлЗагрузки = СтрПрограммаФайлЗагрузки.ПутьКФайлу;
			Объект.ПрограммаЗагрузки = СтрПрограммаФайлЗагрузки.Программа;
			Объект.ОрганизацияЗагрузки = СтрПрограммаФайлЗагрузки.Организация;
			Объект.КодировкаЗагрузки = 
				УстановитьЗначенияРеквизитовВыгрузкиИзНастроекОбменаСКлиентомБанка(Объект.ОрганизацияЗагрузки, 
																					Объект.ПрограммаЗагрузки,
																					Объект.ФайлЗагрузки,);		
			
		Иначе
			ПрограммаФайлЗагрузки = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПрограммаФайлВыгрузки) Тогда
		СтрТаблицаПрограммВыгрузки = 
			ТаблицаПрограммВыгрузки.НайтиСтроки(Новый Структура("Представление", ПрограммаФайлВыгрузки));
		Если НЕ СтрТаблицаПрограммВыгрузки.Количество() = 0 Тогда
			СтрПрограммаФайлВыгрузки = СтрТаблицаПрограммВыгрузки[0];
			Объект.ФайлВыгрузки = СтрПрограммаФайлВыгрузки.ПутьКФайлу;
			Объект.ПрограммаВыгрузки = СтрПрограммаФайлВыгрузки.Программа;
			Объект.ОрганизацияВыгрузки = СтрПрограммаФайлВыгрузки.Организация;
			
			Объект.КодировкаВыгрузки = 
				УстановитьЗначенияРеквизитовВыгрузкиИзНастроекОбменаСКлиентомБанка(Объект.ОрганизацияВыгрузки, 
																					Объект.ПрограммаВыгрузки,,
																					Объект.ФайлВыгрузки);
			ДокументыНАЭкспортОбновить();																		
																					
		Иначе
			ПрограммаФайлВыгрузки = "";
		КонецЕсли;	
    КонецЕсли;
		
	Если ЗначениеЗаполнено(РежимПоУмолчанию) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[РежимПоУмолчанию];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
			
	РежимПоУмолчанию = Элементы.Страницы.ТекущаяСтраница.Имя;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
				
	Если ИмяСобытия = "ПрочитатьФайлПроверкаСуществованияФайла_ПолученТекстФайла" Тогда
		
		Если ПрочитатьФайлДанныеПолучены(Параметр.Текст, Параметр.ВыводитьСообщения) Тогда
			
			Если Параметр.ВыводитьСообщения Тогда
				
				ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту");
				
				Элементы.ДокументыКИмпортуЗагрузить.Доступность = Истина;
				Элементы.ДокументыКИмпортуСформироватьОтчетОЗагрузке.Доступность = Истина;
				
			Иначе
				
				Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли Параметр = ЭтаФорма Тогда
		
		ДокументыНаЭкспортОбновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбратьФайлВыгрузки(Команда)
	 ВыбратьФайлДанных("ФайлВыгрузки");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗагрузки(Команда)
	
	ВыбратьФайлДанных("ФайлЗагрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	
	Если Объект.НачПериода > Объект.КонПериода Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("НачПериодаПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru='Дата начала периода не должна быть больше даты окончания периода!'"));
		Возврат;
	КонецЕсли;
		
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
    
    Объект.НачПериода = Объект.КонПериода;

КонецПроцедуры

&НаКлиенте
Процедура КонПериодаПриИзменении(Элемент)
	
	Если Объект.КонПериода < Объект.НачПериода Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("КонПериодаПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru='Дата окончания периода не должна быть меньше даты начала периода!'"));
		Возврат;
	КонецЕсли;
	
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
    
    Объект.КонПериода = Объект.НачПериода;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если (Элементы.Страницы.ТекущаяСтраница = Элементы.ВыгрузкаДокументов)
		И ЗначениеЗаполнено(ПрограммаФайлВыгрузки) Тогда
	
		ДокументыНаЭкспортОбновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыНаЭкспорт

&НаКлиенте
Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если Поле.Имя = "Выгружать" Тогда
		
		Элемент.ТекущиеДанные.Выгружать = НЕ (Элемент.ТекущиеДанные.Выгружать);
				
	ИначеЕсли Поле.Имя = "ОписаниеОшибок" Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст 
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.ОписаниеОшибок);
				
		Сообщение.Сообщить();
	
	ИначеЕсли Поле.Имя = "НазначениеПлатежа" Тогда
				
		ПоказатьПредупреждение(Неопределено, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
			Элемент.ТекущиеДанные.НазначениеПлатежа));
		
	Иначе
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если НЕ Копирование Тогда
						
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломИзменения(Элемент, Отказ)
		
	Если НЕ Элемент.ТекущийЭлемент.Имя = "Выгружать" Тогда
		
		Отказ = Истина;
						
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные) Тогда
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПриИзменении(Элемент)
	
	Сумма      = 0;
	Количество = 0;
	
	Для Каждого Строка Из Объект.ПлатежныеДокументы Цикл
		
		Если Строка.Выгружать Тогда
			
			Сумма      = Сумма + Строка.СуммаДокумента;
			Количество = Количество + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Выгружать.ТекстПодвала = Формат(Количество, "ЧЦ=10");
	Элементы.СуммаДокумента.ТекстПодвала = Формат(Сумма, "ЧДЦ=2");
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаЗаполнения

&НаКлиенте
Процедура НастройкаЗаполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "НастройкаЗаполненияВидОперации" Тогда
		
		ТекущиеДанные = Элементы.НастройкаЗаполнения.ТекущиеДанные;
		ЗаполнитьСписокВыбораВидовОпераций(ТекущиеДанные.Документ, Элементы.НастройкаЗаполненияВидОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияВидОперацииПриИзменении(Элемент)
	
	Элементы.НастройкаЗаполнения.ТекущиеДанные.СтатьяДДС 
		= ПолучитьСтатьюДДС(Элементы.НастройкаЗаполнения.ТекущиеДанные.ВидОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКИмпорту

&НаКлиенте
Процедура ПрограммаФайлЗагрузкиПриИзменении(Элемент)
	
	СтрТаблицаПрограммЗагрузки = 
		ТаблицаПрограммЗагрузки.НайтиСтроки(Новый Структура("Представление", Элемент.ТекстРедактирования));
	
	Если СтрТаблицаПрограммЗагрузки.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрПрограммаФайлЗагрузки = СтрТаблицаПрограммЗагрузки[0];
	КонецЕсли;	

	Объект.ФайлЗагрузки = СтрПрограммаФайлЗагрузки.ПутьКФайлу;
	Объект.ПрограммаЗагрузки = СтрПрограммаФайлЗагрузки.Программа;
	Объект.ОрганизацияЗагрузки = СтрПрограммаФайлЗагрузки.Организация;
	
	Объект.КодировкаЗагрузки = 
				УстановитьЗначенияРеквизитовВыгрузкиИзНастроекОбменаСКлиентомБанка(Объект.ОрганизацияЗагрузки, 
																					Объект.ПрограммаЗагрузки,
																					Объект.ФайлЗагрузки,);
			
	Если ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
		ВыбратьФайлДанных("ФайлЗагрузки");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрограммаФайлВыгрузкиПриИзменении(Элемент)
	СтрТаблицаПрограммВыгрузки = 
		ТаблицаПрограммВыгрузки.НайтиСтроки(Новый Структура("Представление", Элемент.ТекстРедактирования));
	
	Если СтрТаблицаПрограммВыгрузки.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрПрограммаФайлВыгрузки = СтрТаблицаПрограммВыгрузки[0];
	КонецЕсли;	

	Объект.ФайлВыгрузки = СтрПрограммаФайлВыгрузки.ПутьКФайлу;
	Объект.ПрограммаВыгрузки = СтрПрограммаФайлВыгрузки.Программа;
	Объект.ОрганизацияВыгрузки = СтрПрограммаФайлВыгрузки.Организация;
	
	Объект.КодировкаВыгрузки = 
				УстановитьЗначенияРеквизитовВыгрузкиИзНастроекОбменаСКлиентомБанка(Объект.ОрганизацияВыгрузки, 
																					Объект.ПрограммаВыгрузки,,
																					Объект.ФайлВыгрузки);		
	
	Если ПустаяСтрока(Объект.ФайлВыгрузки) Тогда
		ВыбратьФайлДанных("ФайлВыгрузки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДокументыКИмпортуЗагружать" Тогда
						
		Элемент.ТекущиеДанные.Загружать = НЕ (Элемент.ТекущиеДанные.Загружать);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
			Элемент.ТекущиеДанные.ОписаниеОшибок);
				
		Сообщение.Сообщить();
			
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
				
		ПоказатьПредупреждение(Неопределено, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), 
			Элемент.ТекущиеДанные.НазначениеПлатежа));
				
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда 
		
		Если (Поле.Имя = "ДокументыКИмпортуНомерСтроки"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуНомерДок"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуДатаДок"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаПоступило"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаСписано"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуДатаПроведения")
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуКонтрагент" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент)) 
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуСчетКонтрагента" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетКонтрагента)) 
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуСтатьяДДС" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДДС))
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуСтатьяДоходовИлиРасходов" 
		  		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДоходовИлиРасходов))
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуПодразделение" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Подразделение)) Тогда
			
			СтандартнаяОбработка = Ложь;
				
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);
		
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДокументыКИмпортуВидОперации" Тогда
		
		ЗаполнитьСписокВыбораВидовОпераций(ТекущиеДанные.ИмяДокумента, Элементы.ДокументыКИмпортуВидОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВидОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.СчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		БанковскийСчет = ТекущиеДанные.СчетОрганизации;
	ИначеЕсли ТипЗнч(ТекущиеДанные.СчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") Тогда
		БанковскийСчет = ТекущиеДанные.СчетКонтрагента;
	Иначе
		БанковскийСчет = "";
	КонецЕсли;	
		
	ДокументыКИмпортуВидОперацииПриИзмененииСервер(
		ТекущиеДанные.ВидОперации,
		Текущиеданные.СуммаДокумента,
		ТекущиеДанные.ТипПлатежногоДокумента,
		БанковскийСчет,
		ТекущиеДанные.ДатаДок,
		ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметровВыбора = Новый Массив;
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Элементы.ДокументыКИмпорту.ТекущиеДанные.ВидОперации);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
	
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Ложь;
	
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		Если ВыгрузитьДокументыНаЭкспортНаКлиенте() Тогда
			
			ТекстПредупреждения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данные успешно выгружены в файл %1'"), Объект.ФайлВыгрузки);
			
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект), ТекстПредупреждения);
			
		Иначе
			
			ТекстПредупреждения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось записать данные в файл. 
					|Возможно, отсутствует каталог %1'"), 
					Объект.ФайлВыгрузки);
			
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			
		КонецЕсли;
		
	Иначе
				
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Список документов для выгрузки пуст.
			|%1Проверьте правильность указанных параметров выгрузки.'"),
			Символы.ПС);
				
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(ДополнительныеПараметры) Экспорт
    
    Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Истина;
	КонецЦикла;
		           	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Ложь;
	КонецЦикла;
	           	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ЗагрузитьДокументыКИмпорту();
		Оповестить("Загрузка_ОбменСБанками");
	Иначе
				
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Список документов для загрузки пуст.%1Необходимо прочитать данные из файла.'"), Символы.ПС);
				
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
	Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьФлажки(Истина);
	   
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьДанныеИзФайла(Команда)
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	УстановитьФлажки(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	СоздатьНовыхКонтрагентов();
	ПрочитатьДанныеИзФайла(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОВыгрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	
	ПолучитьОтчетОВыгрузке(ПолеОтчета);
	
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о выгруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
		
	ПолучитьОтчетОЗагрузке(ПолеОтчета);
	
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о загруженных документах'"));
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКИмпортуДокумент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКИмпортуСтатьяДДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКИмпортуСтатьяДоходовИлиРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКИмпортуПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыКИмпортуДокумент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.Загружать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаЗаполненияСтатьяДДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаЗаполненияСтатьяДоходовИлиРасходов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкаЗаполненияПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаЗаполнения.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДокументыКИмпортуВидОперацииПриИзмененииСервер(ВидОперации, 
														 СуммаДокумента, 
														 ТипПлатежногоДокумента,
														 БанковскийСчет,
														 ДатаПроведения,
														 ПлатежныйДокумент)
														 
	Если ПустаяСтрока(БанковскийСчет) Тогда													 
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	КонецЕсли;													 
	Обработки.ОбменСБанком.ЗаполнитьТипПлатежногоДокумента(
		Объект.ОрганизацияЗагрузки,
		БанковскийСчет,
		ВидОперации,
		СуммаДокумента,
		ТипПлатежногоДокумента,
		ДатаПроведения,
		ПлатежныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыбратьФайлДанных(Режим);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      = НСтр("ru='Текстовый файл (*.txt)|*.txt'");
	Если Режим = "ФайлВыгрузки" Тогда
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл для выгрузки данных в клиента банка'");
	ИначеЕсли Режим = "ФайлЗагрузки" Тогда
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл для загрузки данных в клиента банка'");
	КонецЕсли;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "txt";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	Если Режим = "ФайлВыгрузки" Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = Объект.ФайлВыгрузки ;
	ИначеЕсли Режим = "ФайлЗагрузки" Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла =  Объект.ФайлЗагрузки ;
	КонецЕсли;
	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьФайлДанныхДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("Режим", Режим));
		
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДанныхДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Режим = ДополнительныеПараметры.Режим;
	
	Если Режим = "ФайлВыгрузки" Тогда
		Объект.ФайлВыгрузки = ВыбранныеФайлы[0];
		ДокументыНаЭкспортОбновитьСервер();
	ИначеЕсли Режим = "ФайлЗагрузки" Тогда
		Объект.ФайлЗагрузки = ВыбранныеФайлы[0];
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначенияРеквизитовВыгрузкиИзНастроекОбменаСКлиентомБанка(Знач Организация, 
																			Знач Программа, 
																			Знач ФайлЗагрузки,
																			Знач ФайлВыгрузки)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Программа,
	               |	БанковскиеСчетаОрганизаций.Кодировка,
	               |	БанковскиеСчетаОрганизаций.ФайлВыгрузки
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций";
				   
	Если НЕ Организация.Пустая() Тогда
		Запрос.Текст = Запрос.Текст + "
		|Где
		|	БанковскиеСчетаОрганизаций.Владелец = &Организация";
	КонецЕсли; 
				   
	Если НЕ ПустаяСтрока(Программа) > 0 Тогда
		Если Организация.Пустая() Тогда
			Запрос.Текст = Запрос.Текст + "
			|Где ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|И ";
		КонецЕсли;	
			
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчетаОрганизаций.Программа = &Программа";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФайлВыгрузки) > 0 Тогда
		Если (Организация.Пустая() И ПустаяСтрока(Программа)) Тогда
			Запрос.Текст = Запрос.Текст + "
			|Где ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|И ";
		КонецЕсли;	

		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчетаОрганизаций.ФайлВыгрузки = &ФайлВыгрузки";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФайлЗагрузки) > 0 Тогда
		Если (Организация.Пустая() И ПустаяСтрока(Программа) И ПустаяСтрока(ФайлВыгрузки)) Тогда
			Запрос.Текст = Запрос.Текст + "
			|Где ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|И ";
		КонецЕсли;	

		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчетаОрганизаций.ФайлЗагрузки = &ФайлЗагрузки";
	КонецЕсли;

    			   
	Запрос.УстановитьПараметр("Организация", Организация);   
	Запрос.УстановитьПараметр("Программа", Программа);
	Запрос.УстановитьПараметр("ФайлЗагрузки", ФайлЗагрузки);
	Запрос.УстановитьПараметр("ФайлВыгрузки", ФайлВыгрузки);
    		
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Выборка.Количество() = 0 Тогда
		
		Возврат Выборка[0].Кодировка;
		
	КонецЕсли;	
	
	Возврат "";
		
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеТаблицыДокументов(Документы)
			
	Обработки.ОбменСБанком.ПроверитьЗаполнениеТаблицыДокументов(Объект, ?(Документы = "ДокументыНаЭкспорт", 
																Объект.ПлатежныеДокументы, ДокументыКИмпорту));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт()
	
	Если НЕ ЗначениеЗаполнено(ПрограммаФайлВыгрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не выбрана программа в которую будет проводится выгрузка документов.'"));
		Возврат;
	КонецЕсли;
		
	ПутьКФайлуВыгрузки = "";
	
	СтрТаблицаПрограммВыгрузки = 
		ТаблицаПрограммВыгрузки.НайтиСтроки(Новый Структура("Представление", ПрограммаФайлВыгрузки));
		
	Если СтрТаблицаПрограммВыгрузки.Количество() > 0 Тогда
		СтрПрограммаФайлВыгрузки = СтрТаблицаПрограммВыгрузки[0];
		ПутьКФайлуВыгрузки = СтрПрограммаФайлВыгрузки.ПутьКФайлу;
	КонецЕсли;	
 	
	Обработки.ОбменСБанком.ЗаполнитьДокументыНаЭкспорт(Объект.ПлатежныеДокументы,
													  Элементы.ДокументыНаЭкспорт,
													  Объект.НачПериода,
													  Объект.КонПериода,
													  Объект.ОрганизацияВыгрузки,
													  Объект.ПрограммаВыгрузки,
													  ПутьКФайлуВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаЭкспортОбновитьСервер()
	
	ЗаполнитьДокументыНаЭкспорт();
	
	ПроверитьЗаполнениеТаблицыДокументов("ДокументыНаЭкспорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортОбновить()
	
	Объект.ПлатежныеДокументы.Очистить();
	
	ДокументыНаЭкспортОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Флаг)
	
	Количество = 0;
	Сумма      = 0;
	
	Для Каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
		
		СтрокаДокумента.Выгружать = Флаг;
		
		Если СтрокаДокумента.Выгружать Тогда
			
			Количество = Количество + 1;
			Сумма      = Сумма + СтрокаДокумента.СуммаДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Элементы.Выгружать.ТекстПодвала = Формат(Количество, "ЧЦ=10");
	Элементы.СуммаДокумента.ТекстПодвала = Формат(Сумма, "ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьДокументыНаЭкспортНаКлиенте()
		
	ПотокВыгрузки = Новый ТекстовыйДокумент();
		
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ПотокВыгрузки, ЭтаФорма.УникальныйИдентификатор);
		
	ВыгрузитьДокументыНаЭкспорт(АдресВременногоХранилища);
	
	ПотокВыгрузки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Попытка
		
		Если Объект.КодировкаВыгрузки = "DOS" Тогда
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.OEM);
		Иначе
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
		
		// Отметим те документы, которые успешно выгрузились.
		Для Каждого СтрокаСекции Из Объект.ПлатежныеДокументы Цикл
			
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат 1;
		
	Исключение
		
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьДокументыНаЭкспорт(АдресВременногоХранилища)
	
	Обработки.ОбменСБанком.Выгрузить(Объект.ПлатежныеДокументы,
	 								 Объект.КодировкаВыгрузки,
									 Объект.ПрограммаВыгрузки,
									 Объект.НачПериода,
									 Объект.КонПериода,
									 Объект.ФайлВыгрузки,
									 Объект.ОрганизацияВыгрузки,
									 АдресВременногоХранилища,
									 ВыгружатьКПП);
			
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтчетОВыгрузке(ПолеОтчета)
	
	Обработки.ОбменСБанком.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета,
																	  Объект.ПлатежныеДокументы,
																	  Объект.ОрганизацияВыгрузки,
																	  Объект.НачПериода,
																	  Объект.КонПериода);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтчетОЗагрузке(ПолеОтчета)
	
	Обработки.ОбменСБанком.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета,
																	  ДокументыКИмпорту,
																	  Объект.ОрганизацияЗагрузки,
																	  Импорт_РасчетныеСчета,
																	  Импорт_Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНаИмпорт(ВыводитьСообщения, АдресВременногоХранилища)
	
	ОчисткаТаблицыНеНайденныхКонтрагентов();
	
	ПараметрыЗаполнения = Новый Соответствие;
	ПараметрыЗаполнения.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	ПараметрыЗаполнения.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	ПараметрыЗаполнения.Вставить("Программа", Объект.ПрограммаЗагрузки);
	ПараметрыЗаполнения.Вставить("Кодировка", Объект.КодировкаЗагрузки);
	ПараметрыЗаполнения.Вставить("Организация", Объект.ОрганизацияЗагрузки);
	ПараметрыЗаполнения.Вставить("НастройкаЗаполнения", НастройкаЗаполнения);
	 	
	Обработки.ОбменСБанком.ЗаполнитьДокументыНаИмпорт(ДокументыКИмпорту, 
													  Элементы.ДокументыКИмпорту,
													  ПараметрыЗаполнения,
													  ТаблицаКонтрагентов,
													  Импорт_Заголовок, 
													  Импорт_РасчетныеСчета,
													  АдресВременногоХранилища);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовОпераций(ИмяДокумента, ПолеФормы)
	
	ОплатаПлатежнымиКартами = Неопределено;
	ПередачиТоваровМеждуОрганизациями = Неопределено;
	ОбособленныеПодразделенияВыделенныеНаБаланс = Неопределено;
	ИмпортныеЗакупки = Неопределено;
	УчетПрочихДоходовРасходов = Неопределено;
	ИспользоватьДоговорыКредитовИДепозитов = Неопределено;
	НесколькоВалют = Неопределено;
	
	ЗначенияФункциональныхОпций.Свойство("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	ЗначенияФункциональныхОпций.Свойство("ПередачиТоваровМеждуОрганизациями", ПередачиТоваровМеждуОрганизациями);
	ЗначенияФункциональныхОпций.Свойство("ОбособленныеПодразделенияВыделенныеНаБаланс", ОбособленныеПодразделенияВыделенныеНаБаланс);
	ЗначенияФункциональныхОпций.Свойство("ИмпортныеЗакупки", ИмпортныеЗакупки);
	ЗначенияФункциональныхОпций.Свойство("УчетПрочихДоходовРасходов", УчетПрочихДоходовРасходов);
	ЗначенияФункциональныхОпций.Свойство("ИспользоватьДоговорыКредитовИДепозитов", ИспользоватьДоговорыКредитовИДепозитов);
	ЗначенияФункциональныхОпций.Свойство("НесколькоВалют", НесколькоВалют);
	
	СписокВыбора = ПолеФормы.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если СтрНайти(ИмяДокумента, "Поступление") > 0 Тогда
	
		СписокВыбора.Добавить(ХозОперация("ПоступлениеОплатыОтКлиента"));
		Если ОплатаПлатежнымиКартами Тогда
			СписокВыбора.Добавить(ХозОперация("ПоступлениеОплатыПоПлатежнойКарте"));
		КонецЕсли;
		Если ПередачиТоваровМеждуОрганизациями Тогда
			СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствИзДругойОрганизации"));
		КонецЕсли;
		Если ОбособленныеПодразделенияВыделенныеНаБаланс Тогда
			СписокВыбора.Добавить(ХозОперация("ВнутренняяПередачаДенежныхСредств"));
		КонецЕсли;
		
		СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствСДругогоСчета"));
		СписокВыбора.Добавить(ХозОперация("СдачаДенежныхСредствВБанк"));
		СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет"));
		
		Если ИспользоватьДоговорыКредитовИДепозитов Тогда
			СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствПоКредитам"));
			СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствПоДепозитам"));
			СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствПоЗаймамВыданным"));
		КонецЕсли;
		
		Если НесколькоВалют Тогда
			СписокВыбора.Добавить(ХозОперация("КонвертацияВалюты"));
		КонецЕсли;
		Если УчетПрочихДоходовРасходов Тогда
			СписокВыбора.Добавить(ХозОперация("ПрочиеДоходы"));
		КонецЕсли;
		СписокВыбора.Добавить(ХозОперация("ПрочееПоступлениеДенежныхСредств"));
		
		СписокВыбора.Добавить(ХозОперация("ВозвратДенежныхСредствОтПоставщика"));
		СписокВыбора.Добавить(ХозОперация("ВозвратДенежныхСредствОтПодотчетника"));
		Если ПередачиТоваровМеждуОрганизациями Тогда
			СписокВыбора.Добавить(ХозОперация("ВозвратДенежныхСредствОтДругойОрганизации"));
		КонецЕсли;
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС"));
		
	Иначе
		
		СписокВыбора.Добавить(ХозОперация("ОплатаПоставщику"));
		СписокВыбора.Добавить(ХозОперация("ВыдачаДенежныхСредствПодотчетнику"));
		СписокВыбора.Добавить(ХозОперация("ПеречислениеВБюджет"));
		Если ИмпортныеЗакупки Тогда
			СписокВыбора.Добавить(ХозОперация("ПеречислениеТаможне"));
		КонецЕсли;
		Если ПередачиТоваровМеждуОрганизациями Тогда
			СписокВыбора.Добавить(ХозОперация("ОплатаДенежныхСредствВДругуюОрганизацию"));
		КонецЕсли;
		Если ОбособленныеПодразделенияВыделенныеНаБаланс Тогда
			СписокВыбора.Добавить(ХозОперация("ВнутренняяПередачаДенежныхСредств"));
		КонецЕсли;
		СписокВыбора.Добавить(ХозОперация("ВыплатаЗарплатыПоЗарплатномуПроекту"));
		СписокВыбора.Добавить(ХозОперация("ВыплатаЗарплатыНаЛицевыеСчета"));
		
		СписокВыбора.Добавить(ХозОперация("ПеречислениеДенежныхСредствНаДругойСчет"));
		СписокВыбора.Добавить(ХозОперация("ПоступлениеДенежныхСредствИзБанка"));
		СписокВыбора.Добавить(ХозОперация("СнятиеНаличныхДенежныхСредств"));
		
		Если ИспользоватьДоговорыКредитовИДепозитов Тогда
			СписокВыбора.Добавить(ХозОперация("ОплатаПоКредитам"));
			СписокВыбора.Добавить(ХозОперация("ПеречислениеНаДепозиты"));
			СписокВыбора.Добавить(ХозОперация("ВыдачаЗаймов"));
		КонецЕсли;
		
		Если НесколькоВалют Тогда
			СписокВыбора.Добавить(ХозОперация("КонвертацияВалюты"));
		КонецЕсли;
		Если УчетПрочихДоходовРасходов Тогда
			СписокВыбора.Добавить(ХозОперация("ПрочиеРасходы"));
		КонецЕсли;
		СписокВыбора.Добавить(ХозОперация("ПрочаяВыдачаДенежныхСредств"));
		
		СписокВыбора.Добавить(ХозОперация("ВозвратОплатыКлиенту"));
		Если ПередачиТоваровМеждуОрганизациями Тогда
			СписокВыбора.Добавить(ХозОперация("ВозвратДенежныхСредствВДругуюОрганизацию"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ХозОперация(Наименование)
	
	Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации." + Наименование);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДокументыКИмпорту()
	
	// Проверка заполнения реквизитов таблицы документов к импорту.
	ЕстьОшибкиЗаполнения = Ложь;
	Для Каждого СтрокаТаблицы Из ДокументыКИмпорту Цикл
		
		Если СтрокаТаблицы.Загружать
		 И (СтрокаТаблицы.ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		 	ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
		 И Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		 
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Платежный документ"" в строке %1 списка загружаемых документов'"),
				СтрокаТаблицы.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыКИмпорту[" + (СтрокаТаблицы.НомерСтроки - 1) + "].Документ");
			ЕстьОшибкиЗаполнения = Истина;
		 
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьОшибкиЗаполнения Тогда
		Обработки.ОбменСБанком.Загрузить(
			ДокументыКИмпорту,
			Импорт_Заголовок,
			Объект.ОрганизацияЗагрузки,
			Импорт_РасчетныеСчета,
			НастройкаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыхКонтрагентов()
			
	Для Каждого Элемент Из ТаблицаКонтрагентов.ПолучитьЭлементы() Цикл
							
		Обработки.ОбменСБанком.СоздатьКонтрагента(Элемент);
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайла(ВыводитьСообщения = Истина)
	
	ФайлЗагр = Новый Файл;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПрочитатьФайлИнициализацияФайла",
		ЭтотОбъект,
		Новый Структура("ИмяФайла, Кодировка, ВыводитьСообщения", Объект.ФайлЗагрузки, Объект.КодировкаЗагрузки, ВыводитьСообщения));
	
	ФайлЗагр.НачатьИнициализацию(ОписаниеОповещения, Объект.ФайлЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПрочитатьФайлПроверкаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	ИмяФайла  		  = ДополнительныеПараметры.ИмяФайла;
	Кодировка 		  = ДополнительныеПараметры.Кодировка;
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	
	Если НЕ Существует Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файла %1 не существует!'"), ИмяФайла);
		Сообщение.Сообщить();
		Оповестить(
			"ПрочитатьФайлПроверкаСуществованияФайла_ПолученТекстФайла",
			Новый Структура("Текст, ВыводитьСообщения", "ФайлНеСуществует", ВыводитьСообщения));
		Возврат;
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент;
	
	Если Кодировка = "DOS" Тогда
		Кодировка = КодировкаТекста.OEM;
	Иначе
		Кодировка = КодировкаТекста.ANSI;
	Конецесли;

	Попытка
		ПотокЧтения.Прочитать(ИмяФайла, Кодировка);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Файл не прочитан.'");
		Сообщение.Сообщить();
		Оповестить(
			"ПрочитатьФайлПроверкаСуществованияФайла_ПолученТекстФайла",
			Новый Структура("Текст, ВыводитьСообщения", Неопределено, ВыводитьСообщения));
		Возврат;
	КонецПопытки;
	
	Если ПотокЧтения.КоличествоСтрок() < 1
	 ИЛИ НЕ СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) = "1CClientBankExchange" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Указанный файл не является файлом обмена, или неверно указана кодировка!'");
		Сообщение.Сообщить();
		Оповестить(
			"ПрочитатьФайлПроверкаСуществованияФайла_ПолученТекстФайла",
			Новый Структура("Текст, ВыводитьСообщения", Неопределено, ВыводитьСообщения));
		Возврат;
	КонецЕсли;
	
	Оповестить(
		"ПрочитатьФайлПроверкаСуществованияФайла_ПолученТекстФайла",
		Новый Структура("Текст, ВыводитьСообщения", ПотокЧтения.ПолучитьТекст(), ВыводитьСообщения));
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайлДанныеПолучены(ТекстДляРазбора, ВыводитьСообщения)
	
	Если ТекстДляРазбора = "ФайлНеСуществует" Тогда
		ВыбратьФайлДанных("ФайлЗагрузки");
		Возврат Ложь;
	ИначеЕсли ТекстДляРазбора = Неопределено Тогда
		//Файл загрузки не содержит данных						
		Возврат Ложь;
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТекстДляРазбора, ЭтаФорма.УникальныйИдентификатор);
	
	ЗаполнитьДокументыНаИмпорт(ВыводитьСообщения, АдресВременногоХранилища);
	
	Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	
	Элементы.ДокументыКИмпортуЗагружать.ТекстПодвала      = ДокументыКИмпорту.Количество();
	Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала 
		= Формат(ДокументыКИмпорту.Итог("СуммаПоступило"), "ЧЦ=12; ЧДЦ=2");
	Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала   
		= Формат(ДокументыКИмпорту.Итог("СуммаСписано"), "ЧЦ=12; ЧДЦ=2");
	
	ДокументыКИмпортуОтметитьВсе(Неопределено);
	
	Возврат Истина;
			
КонецФункции

&НаСервере
Процедура ОчисткаТаблицыНеНайденныхКонтрагентов()
		
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
							
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатьюДДС(ВидОперации)
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ВидОперации);
	                                           	                                    	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПрограмм()
	
	ТаблицаПрограммЗагрузки.Очистить();
	ТаблицаПрограммВыгрузки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	               |	БанковскиеСчетаОрганизаций.Программа КАК Программа,
	               |	БанковскиеСчетаОрганизаций.ФайлЗагрузки КАК ФайлЗагрузки,
	               |	БанковскиеСчетаОрганизаций.ФайлВыгрузки КАК ФайлВыгрузки,
	               |	БанковскиеСчетаОрганизаций.Представление
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	               |ГДЕ
	               |	БанковскиеСчетаОрганизаций.ИспользоватьОбменСБанком	
				   |	И БанковскиеСчетаОрганизаций.Программа <> &ПустаяСтрока
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БанковскиеСчетаОрганизаций.Владелец,
	               |	БанковскиеСчетаОрганизаций.Программа,
	               |	БанковскиеСчетаОрганизаций.ФайлЗагрузки,
	               |	БанковскиеСчетаОрганизаций.ФайлВыгрузки,
	               |	БанковскиеСчетаОрганизаций.Представление
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Владелец,
	               |	Программа,
	               |	ФайлЗагрузки,
	               |	ФайлВыгрузки";
				   
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
		   
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
		
	ОбработанныйВладелец  = "";
	ОбработаннаяПрограмма = "";
	ОбработанныйФайлЗагрузки = "";
	ОбработанныйФайлВыгрузки = "";
	Пока Выборка.Следующий() Цикл
		
		Если (ОбработанныйВладелец = Выборка.Владелец) и (ОбработаннаяПрограмма = Выборка.Программа) Тогда
			Если (ОбработанныйФайлЗагрузки = Выборка.ФайлЗагрузки) Тогда
				Если ТаблицаПрограммЗагрузки[ТаблицаПрограммЗагрузки.Количество()-1].Представление 
						= СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа) Тогда
					ТаблицаПрограммЗагрузки[ТаблицаПрограммЗагрузки.Количество()-1].Представление 
						= ТаблицаПрограммЗагрузки[ТаблицаПрограммЗагрузки.Количество()-1].Представление + " ; " + Выборка.ФайлЗагрузки;
				КонецЕсли;
			Иначе
				Если ТаблицаПрограммЗагрузки[ТаблицаПрограммЗагрузки.Количество()-1].Представление 
						= СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа) Тогда
					ТаблицаПрограммЗагрузки[ТаблицаПрограммЗагрузки.Количество()-1].Представление 
						= ТаблицаПрограммЗагрузки[ТаблицаПрограммЗагрузки.Количество()-1].Представление + " ; " 
						+ ОбработанныйФайлЗагрузки;
				КонецЕсли;
					
				СтрокаТаблицыПрограммЗагрузки = ТаблицаПрограммЗагрузки.Добавить();
				СтрокаТаблицыПрограммЗагрузки.Представление 
					= СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа)  + " ; " + Выборка.ФайлЗагрузки;
				СтрокаТаблицыПрограммЗагрузки.ПутьКФайлу	= Выборка.ФайлЗагрузки;
				СтрокаТаблицыПрограммЗагрузки.Программа		= Выборка.Программа;
				СтрокаТаблицыПрограммЗагрузки.Организация	= Выборка.Владелец;

				ОбработанныйФайлЗагрузки = Выборка.ФайлЗагрузки;
			КонецЕсли;	
			
			Если (ОбработанныйФайлВыгрузки = Выборка.ФайлВыгрузки) Тогда
				Если ТаблицаПрограммВыгрузки[ТаблицаПрограммВыгрузки.Количество()-1].Представление 
						= СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа) Тогда
					ТаблицаПрограммВыгрузки[ТаблицаПрограммВыгрузки.Количество()-1].Представление 
						= ТаблицаПрограммВыгрузки[ТаблицаПрограммВыгрузки.Количество()-1].Представление + " ; " + Выборка.ФайлВыгрузки;
				КонецЕсли;
			Иначе
				Если ТаблицаПрограммВыгрузки[ТаблицаПрограммВыгрузки.Количество()-1].Представление 
						= СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа) Тогда
					ТаблицаПрограммВыгрузки[ТаблицаПрограммВыгрузки.Количество()-1].Представление 
						= ТаблицаПрограммВыгрузки[ТаблицаПрограммВыгрузки.Количество()-1].Представление + " ; " 
						+ ОбработанныйФайлВыгрузки;
				КонецЕсли;
					
				СтрокаТаблицыПрограммВыгрузки = ТаблицаПрограммВыгрузки.Добавить();
				СтрокаТаблицыПрограммВыгрузки.Представление 
					= СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа)  + " ; " + Выборка.ФайлВыгрузки;
				СтрокаТаблицыПрограммВыгрузки.ПутьКФайлу	= Выборка.ФайлВыгрузки;
				СтрокаТаблицыПрограммЗагрузки.Программа		= Выборка.Программа;
				СтрокаТаблицыПрограммЗагрузки.Организация	= Выборка.Владелец;
				
				ОбработанныйФайлВыгрузки = Выборка.ФайлВыгрузки;
            КонецЕсли;	

		Иначе	
			СтрокаТаблицыПрограммЗагрузки = ТаблицаПрограммЗагрузки.Добавить();
			СтрокаТаблицыПрограммЗагрузки.Представление = СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа);
			СтрокаТаблицыПрограммЗагрузки.ПутьКФайлу	= Выборка.ФайлЗагрузки;
			СтрокаТаблицыПрограммЗагрузки.Программа		= Выборка.Программа;
			СтрокаТаблицыПрограммЗагрузки.Организация	= Выборка.Владелец;
			
			СтрокаТаблицыПрограммВыгрузки = ТаблицаПрограммВыгрузки.Добавить();
			СтрокаТаблицыПрограммВыгрузки.Представление = СокрЛП(Выборка.Владелец) + " ; " + СокрЛП(Выборка.Программа);
			СтрокаТаблицыПрограммВыгрузки.ПутьКФайлу	= Выборка.ФайлВыгрузки;
			СтрокаТаблицыПрограммВыгрузки.Программа		= Выборка.Программа;
            СтрокаТаблицыПрограммВыгрузки.Организация	= Выборка.Владелец;
			
			ОбработанныйВладелец	 = Выборка.Владелец;
			ОбработаннаяПрограмма 	 = Выборка.Программа;
			ОбработанныйФайлЗагрузки = Выборка.ФайлЗагрузки;
			ОбработанныйФайлВыгрузки = Выборка.ФайлВыгрузки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВыбораПрограммЗагрузки = Элементы.ПрограммаФайлЗагрузки.СписокВыбора;
	Для СчетчикСтрок = 0 По  ТаблицаПрограммЗагрузки.Количество()-1 Цикл
		СписокВыбораПрограммЗагрузки.Добавить(ТаблицаПрограммЗагрузки[СчетчикСтрок].Представление);
    КонецЦикла;	
    		
	СписокВыбораПрограммВыгрузки = Элементы.ПрограммаФайлВыгрузки.СписокВыбора;
	
	Для СчетчикСтрок = 0 По  ТаблицаПрограммВыгрузки.Количество()-1 Цикл
		СписокВыбораПрограммВыгрузки.Добавить(ТаблицаПрограммВыгрузки[СчетчикСтрок].Представление);
    КонецЦикла;	
           	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
