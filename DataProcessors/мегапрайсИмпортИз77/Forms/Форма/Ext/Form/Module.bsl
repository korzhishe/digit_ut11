&НаКлиенте
Перем БазаОле;
&НаКлиенте
Перем ЕстьПодключение;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РазорватьСоединение();
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСоединение()
	
	БазаОле = Неопределено;
	ЕстьПодключение = Ложь;

	Элементы.КомандаПодключитсяКБазе.Заголовок = "Подключить базу";
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьБазу() 
	
	БазаОле = Новый COMОбъект("V77.Application");
	
	Попытка   
		СтрокаПодключения = "/D"""+СокрЛП(ПутьКБазе)+""" /N"""+СокрЛП(Пользователь)+""" /P"""+СокрЛП(Пароль)+"""";
		Открыта = БазаОле.Initialize(БазаОле.RMTrade,СтрокаПодключения,"NO_SPLASH_SHOW");
		
		Если Открыта Тогда
			ЕстьПодключение = Истина;
		Иначе
			РазорватьСоединение();
		КонецЕсли;	
	Исключение
		Сообщить(ОписаниеОшибки());
		РазорватьСоединение();		
		Возврат;
	КонецПопытки;
	
	Попытка 
		БазаОле.CreateObject("Справочник.Производители");
		ЕстьРеквизитПроизводитель = Истина;
	Исключение
		ЕстьРеквизитПроизводитель = Ложь;
		Элементы.ЕстьРеквизитПроизводитель.Доступность = Ложь;
		
		Сообщить("В базе-источнике отсутствует справочник Производители");
	КонецПопытки;
	
	Элементы.КомандаПодключитсяКБазе.Заголовок = "База подключена успешно";

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодключитсяКБазе(Команда)
	
	ПодключитьБазу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Фильтр = "Файлы TXT|*.txt|Все файлы|*.*";
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог настроек'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКБазе = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСервер_Вариант1()	
	
	СправV7 = БазаОле.CreateObject("Справочник.Номенклатура");

	СправV7.ВыбратьЭлементы();	
	Пока СправV7.ПолучитьЭлемент() = 1 Цикл
		Если СправV7.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
		НоваяСтрока.Поле_Код          = СправV7.Код;
		НоваяСтрока.Поле_Артикул      = СправV7.Артикул;
		НоваяСтрока.Поле_Наименование = СправV7.Наименование;
		
		Если ЕстьРеквизитПроизводитель Тогда
			НоваяСтрока.Поле_Производитель = СправV7.Производитель.Наименование;
		КонецЕсли;	
		
	КонецЦикла; 

		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСервер_Вариант3()
	
	ТекстЗапроса = " 
	|Обрабатывать НеПомеченныеНаУдаление;
	|ЭлементСсылка        = Справочник.Номенклатура.ТекущийЭлемент;
	|Поле_Наименование  = Справочник.Номенклатура.Наименование;
	|Поле_Код           = Справочник.Номенклатура.Код;
	|Поле_Артикул       = Справочник.Номенклатура.Артикул;";
	Если ПереноситьИерархию Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Поле_Родитель5     = Справочник.Номенклатура.Родитель.Наименование;
		|Поле_Родитель4     = Справочник.Номенклатура.Родитель.Родитель.Наименование;
		|Поле_Родитель3     = Справочник.Номенклатура.Родитель.Родитель.Родитель.Наименование;
		|Поле_Родитель2     = Справочник.Номенклатура.Родитель.Родитель.Родитель.Родитель.Наименование;
		|Поле_Родитель1     = Справочник.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Наименование;";
	КонецЕсли;
	Если ЕстьРеквизитПроизводитель Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Поле_Производитель = Справочник.Номенклатура.Производитель.Наименование;";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка ЭлементСсылка БЕЗ ГРУПП;
	|";           
	
	//Запрос = БазаОле.EvalExpr("СоздатьОбъект(""Запрос"")");
	Запрос = БазаОле.CreateObject("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен!");
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = БазаОле.CreateObject("ТаблицаЗначений");
	Запрос.Выгрузить(ТаблицаЗапроса,1,0);	
	
	ТаблицаЗапроса.ВыбратьСтроки();
	Пока ТаблицаЗапроса.ПолучитьСтроку() = 1 Цикл		
		ОбработкаПрерыванияПользователя();
		
		НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
		НоваяСтрока.Поле_Код           = Строка(ТаблицаЗапроса.Поле_Код);
		НоваяСтрока.Поле_Артикул       = Строка(ТаблицаЗапроса.Поле_Артикул);
		НоваяСтрока.Поле_Наименование  = Строка(ТаблицаЗапроса.Поле_Наименование);
		НоваяСтрока.Поле_Производитель = Строка(ТаблицаЗапроса.Поле_Производитель);
		
		Если ПереноситьИерархию Тогда
			НоваяСтрока.Поле_Родитель1 = ТаблицаЗапроса.Поле_Родитель1;
			НоваяСтрока.Поле_Родитель2 = ТаблицаЗапроса.Поле_Родитель2;
			НоваяСтрока.Поле_Родитель3 = ТаблицаЗапроса.Поле_Родитель3;
			НоваяСтрока.Поле_Родитель4 = ТаблицаЗапроса.Поле_Родитель4;
			НоваяСтрока.Поле_Родитель5 = ТаблицаЗапроса.Поле_Родитель5;
		КонецЕсли;
	КонецЦикла; 
	
	
	Если ЕстьРеквизитПроизводитель Тогда
		СправV7_Производители = БазаОле.CreateObject("Справочник.Производители");
		
		СправV7_Производители.ВыбратьЭлементы();	
		Пока СправV7_Производители.ПолучитьЭлемент() = 1 Цикл			
			ОбработкаПрерыванияПользователя();
			
			НоваяСтрока = Объект.СоответствияПроизводителей.Добавить();
			НоваяСтрока.Поле_Производитель = СправV7_Производители.Наименование;			
		КонецЦикла; 
	КонецЕсли;

			
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСервер_Вариант4()
	
	//СпрНоменклатура = Справочники.Номенклатура;

	//СправV7 = БазаОле.CreateObject("Справочник.Номенклатура");
	//
	////сначала загрузим группы
	//СправV7.ВыбратьЭлементы();
	//Пока СправV7.ПолучитьЭлемент()=1 Цикл
	//	Если СправV7.ЭтоГруппа() = 0 Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НовыйЭлемент = СпрНоменклатура.СоздатьГруппу();
	//	НовыйЭлемент.Код = СправV7.Код;
	//	НовыйЭлемент.Наименование = СокрП(СправV7.Наименование);		
	//	Попытка
	//		НовыйЭлемент.Записать();
	//	Исключение
	//		Сообщить("Ошибка! Возможно код элемента справочника не уникален!");
	//	КонецПопытки;	 
	//КонецЦикла; 
	//
	////теперь группы раскидаем по группам	
	//СправV7.ВыбратьЭлементы();
	//Пока СправV7.ПолучитьЭлемент()=1 Цикл
	//	Если СправV7.ЭтоГруппа() = 0 Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если СправV7.Уровень() = 1 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НайтиЭлемент  = СпрНоменклатура.НайтиПоКоду(СправV7.Код);
	//	ЭлементОбъект = НайтиЭлемент.ПолучитьОбъект();
	//	ЭлементОбъект.Родитель = СпрНоменклатура.НайтиПоКоду(СправV7.Родитель.Код);
	//	
	//	Попытка
	//		ЭлементОбъект.Записать();
	//	Исключение
	//		Сообщить("Ошибка! Возможно код элемента справочника не уникален!");
	//	КонецПопытки;	 		
	//КонецЦикла; 
	//
	////элементы - грузим и раскидываем по группам	
	//СправV7.ВыбратьЭлементы();
	//Пока СправV7.ПолучитьЭлемент() = 1 Цикл
	//	Если СправV7.ЭтоГруппа() > 0 Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
	//	НоваяСтрока.Поле_Код          = СправV7.Код;
	//	НоваяСтрока.Поле_Артикул      = СправV7.Артикул;
	//	НоваяСтрока.Поле_Наименование = СправV7.Наименование;
	//	
	//	Если ЕстьРеквизитПроизводитель Тогда
	//		НоваяСтрока.Поле_Производитель = СправV7.Производитель.Наименование;
	//	КонецЕсли;	
	//	
	//	НоваяСтрока.ГруппаСправочника = СпрНоменклатура.НайтиПоКоду(СправV7.Родитель.Код); 
	//КонецЦикла; 	
			
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьДанные(Команда)
	
	Если ЕстьПодключение = Ложь Тогда
		Сообщить("База не подключена");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуСервер_Вариант3();
	
	РазорватьСоединение();
	
	Состояние("Обработка завершена");

КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюНоменклатуруСервер()
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Константы.мегапрайсВидНоменклатуры.Получить()) Тогда
		Сообщить("КОНСТАНТЫ: Не указан Вид номенклатуры. Заполните");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.мегапрайсЕдиницаИзмеренияПоУмолчанию.Получить()) Тогда
		Сообщить("КОНСТАНТЫ: Не указана Единица измерения! Но приоритет единица по строке, если не указана в строке берется общая.");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.мегапрайсСтавкаНДС.Получить()) Тогда
		Сообщить("КОНСТАНТЫ: Не указана Ставка НДС!");
		Отказ = Истина;
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	мегапрайсГруппаНоменклатурыПоУмолчанию = Константы.мегапрайсГруппаНоменклатурыПоУмолчанию.Получить();
	мегапрайсЕдиницаИзмеренияПоУмолчанию   = Константы.мегапрайсЕдиницаИзмеренияПоУмолчанию.Получить();
	мегапрайсКонтрольАртикулаИНаименования = Константы.мегапрайсКонтрольАртикулаИНаименования.Получить();
	мегапрайсСоздаватьШтрихкодыДляНовойНоменклатуры = Константы.мегапрайсСоздаватьШтрихкодыДляНовойНоменклатуры.Получить();
	
	СпрПроизводители = Справочники.Производители;

	//НачатьТранзакцию();
	КоличествоОбработанных = 0;

	Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл			
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
		СоздатьНоменклатуру = Истина;
		
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			СоздатьНоменклатуру = Ложь; //однозначно нельзя создавать
		КонецЕсли;
		
		Если СоздатьНоменклатуру Тогда
			НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			
			НоваяНоменклатура.Код                = Стр.Поле_Код;
			НоваяНоменклатура.Наименование       = Стр.Поле_Наименование;
			НоваяНоменклатура.НаименованиеПолное = ?(ПустаяСтрока(Стр.Поле_НаименованиеПолное),Стр.Поле_Наименование,Стр.Поле_НаименованиеПолное);
			
			Если НЕ ПустаяСтрока(Стр.Поле_Артикул) Тогда
				НоваяНоменклатура.Артикул = Стр.Поле_Артикул;
			КонецЕсли;

			НоваяНоменклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			НоваяНоменклатура.Качество           = Перечисления.ГрадацииКачества.Новый;
			НоваяНоменклатура.НаборУпаковок      = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
			НоваяНоменклатура.ВестиУчетПоГТД     = Истина;
			НоваяНоменклатура.СтавкаНДС          = Константы.мегапрайсСтавкаНДС.Получить();
			
			НоваяНоменклатура.ВидНоменклатуры    = Константы.мегапрайсВидНоменклатуры.Получить();
			НоваяНоменклатура.ТипНоменклатуры    = НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры;

			Если ЗначениеЗаполнено(Стр.ЕдиницаИзмеренияСсылка) Тогда
				НоваяНоменклатура.ЕдиницаИзмерения = Стр.ЕдиницаИзмеренияСсылка;
			Иначе
				НоваяНоменклатура.ЕдиницаИзмерения = мегапрайсЕдиницаИзмеренияПоУмолчанию;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.ПроизводительСсылка) Тогда
				НоваяНоменклатура.Производитель = Стр.ПроизводительСсылка;	
			Иначе
				НоваяНоменклатура.Производитель = СпрПроизводители.НайтиПоНаименованию(Стр.Поле_Производитель,Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.Поле_Описание) Тогда
				НоваяНоменклатура.Описание = СокрЛП(Стр.Поле_Описание);
			КонецЕсли;
									
			Если ЗначениеЗаполнено(Стр.ГруппаСправочника) Тогда
				НоваяНоменклатура.Родитель = Стр.ГруппаСправочника;	
			Иначе
				НоваяНоменклатура.Родитель = мегапрайсГруппаНоменклатурыПоУмолчанию;
			КонецЕсли;
			
			НоваяНоменклатура.Записать();
			
			//НайденнаяСсылка = НоваяНоменклатура.Ссылка;
		КонецЕсли;	
		
		//Если КоличествоОбработанных = 100 Тогда
		//	
		//	// промежуточную транзакцию закрываем и открываем новую
		//	ЗафиксироватьТранзакцию();
		//	НачатьТранзакцию();
		//	
		//	КоличествоОбработанных = 0;
		//КонецЕсли;
		
	КонецЦикла;	
	
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьЗагрузку(Команда)
	
	#Если Клиент Тогда
	Ответ = Вопрос("Создать новую номенклатуру ? Номенклатура будет введена по пустым строкам", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, "Дополнительный вопрос");		
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	СоздатьНовуюНоменклатуруСервер();
	
	Состояние("Обработка завершена");

КонецПроцедуры

&НаСервере
Процедура ВыполнитьСоздатьНовыхПроизводителей()
	
	РеквизитФормыВЗначение("Объект").УстановитьСоответствияПроизводителей(Объект.ТабличнаяЧасть,Объект.СоответствияПроизводителей);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыхПроизводителей(Команда)
	
	ВыполнитьСоздатьНовыхПроизводителей();
	
КонецПроцедуры





