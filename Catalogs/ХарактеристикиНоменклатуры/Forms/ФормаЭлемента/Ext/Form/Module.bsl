
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Элементы.ДекорацияПредупреждение.Видимость =  (ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры"));
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = Объект.Владелец.ВидНоменклатуры;
		Элементы.Владелец.Заголовок = НСтр("ru='Номенклатура'");
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ВидНоменклатуры = Объект.Владелец;
		Элементы.Владелец.Заголовок = НСтр("ru='Вид номенклатуры'");
	КонецЕсли;
	
	РеквизитыВидаНоменклатуры = Новый Структура;
	РеквизитыВидаНоменклатуры.Вставить("ШаблонНаименованияДляПечати","ШаблонНаименованияДляПечатиХарактеристики");
	РеквизитыВидаНоменклатуры.Вставить("ШаблонРабочегоНаименования","ШаблонРабочегоНаименованияХарактеристики");
	РеквизитыВидаНоменклатуры.Вставить("ЗапретРедактированияРабочегоНаименования","ЗапретРедактированияРабочегоНаименованияХарактеристики");
	РеквизитыВидаНоменклатуры.Вставить("ЗапретРедактированияНаименованияДляПечати","ЗапретРедактированияНаименованияДляПечатиХарактеристики");
	РеквизитыВидаНоменклатуры.Вставить("ТипНоменклатуры","ТипНоменклатуры");
	РеквизитыВидаНоменклатуры.Вставить("ВариантОказанияУслуг","ВариантОказанияУслуг");
	РеквизитыВидаНоменклатуры.Вставить("ОсобенностьУчета","ОсобенностьУчета");
	
	РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры,РеквизитыВидаНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыВидаНоменклатуры);
	
	Элементы.ЗаполнитьНаименованиеДляПечатиПоШаблону.Доступность = ЗначениеЗаполнено(ШаблонНаименованияДляПечати);
	Элементы.ЗаполнитьРабочееНаименованиеПоШаблону.Доступность   = ЗначениеЗаполнено(ШаблонРабочегоНаименования);
	Элементы.Наименование.ТолькоПросмотр = ЗапретРедактированияРабочегоНаименования;
	Элементы.НаименованиеПолное.ТолькоПросмотр  = ЗапретРедактированияНаименованияДляПечати;
	
	НастройкиВидимостиПоТипу = ЗначениеНастроекПовтИсп.ВсеРеквизитыХарактеристикНоменклатуры(РеквизитыВидаНоменклатуры.ТипНоменклатуры,
																								РеквизитыВидаНоменклатуры.ОсобенностьУчета,
																								РеквизитыВидаНоменклатуры.ВариантОказанияУслуг);
	//
	Для Каждого НастройкаРеквизита Из НастройкиВидимостиПоТипу Цикл
		Попытка
			Элементы[НастройкаРеквизита.Ключ].Видимость = НастройкаРеквизита.Значение.Использование;
		Исключение
		КонецПопытки;
	КонецЦикла;
 
	Если РеквизитыВидаНоменклатуры.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме Тогда
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Элементы.Принципал.ОграничениеТипа = ТипСсылкаОрганизации;
	КонецЕсли;
	
	Если РеквизитыВидаНоменклатуры.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.Партнером Тогда
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаПартнеры = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		Элементы.Принципал.ОграничениеТипа = ТипСсылкаПартнеры;
		Элементы.Контрагент.ОграничениеТипа = ТипСсылкаКонтрагенты;
	КонецЕсли;	
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
	Иначе
		АдресКартинки = "";
	Конецесли;
	


	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если 1 = 1 Тогда
				
				Объект.ФайлКартинки = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
				
							
			КонецЕсли;
			
			//ОбновитьГиперссылкиИКарточку();
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Объект.SKU = "1";

	
	ФормироватьРабочееНаименование = Ложь;
	ФормироватьНаименованиеДляПечати = Ложь;
	
	Если (Не ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(ШаблонРабочегоНаименования))
		Или ЗапретРедактированияРабочегоНаименования Тогда
		
		ФормироватьРабочееНаименование = Истина;
		
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Объект.НаименованиеПолное)
		И ЗначениеЗаполнено(ШаблонНаименованияДляПечати))
		Или ЗапретРедактированияНаименованияДляПечати Тогда
		
		ФормироватьНаименованиеДляПечати = Истина;
		
	КонецЕсли;
	
	Если ФормироватьРабочееНаименование
		И ФормироватьНаименованиеДляПечати Тогда
		
		ЗаполнитьНаименованиеПоШаблонуКлиент("Оба");
		
	ИначеЕсли ФормироватьРабочееНаименование Тогда
		
		ЗаполнитьНаименованиеПоШаблонуКлиент("Рабочее");
		
	ИначеЕсли ФормироватьНаименованиеДляПечати Тогда
		
		ЗаполнитьНаименованиеПоШаблонуКлиент("ДляПечати");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ШаблонРабочегоНаименованияХарактеристики");
	СтруктураРеквизитов.Вставить("ЗапретРедактированияРабочегоНаименованияХарактеристики");
	СтруктураРеквизитов.Вставить("ШаблонНаименованияДляПечатиХарактеристики");
	СтруктураРеквизитов.Вставить("ЗапретРедактированияНаименованияДляПечатиХарактеристики");
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры, СтруктураРеквизитов);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НаименованиеДляПечатиСформировано");
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Наименование) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Рабочее наименование"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Наименование", "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
	КонтролироватьУникальностьРабочегоНаименования = Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить();
	
	Если КонтролироватьУникальностьРабочегоНаименования
		И Не Отказ Тогда
		
		НаименованиеУникально = Справочники.ХарактеристикиНоменклатуры.РабочееНаименованиеУникально(ТекущийОбъект);
		
		Если Не НаименованиеУникально Тогда
			ТекстСообщения = НСтр("ru='Значение поля ""Рабочее наименование"" не уникально'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Наименование", "Объект"); 
			Отказ = Истина;
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеПроверено", Истина);
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура  ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПринципалПриИзменении(Элемент)
	ПринципалПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПринципалПриИзмененииНаСервере()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Принципал, Объект.Контрагент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиПоШаблону(Команда)
	ЗаполнитьНаименованиеПоШаблонуКлиент("ДляПечати");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеПоШаблону(Команда)
	ЗаполнитьНаименованиеПоШаблонуКлиент("Рабочее");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область Прочее

&НаКлиенте
Процедура ЗаполнитьНаименованиеПоШаблонуКлиент(ВариантФормирования)
	
	#Если ВебКлиент Тогда
		ЗаполнитьНаименованиеПоШаблонуСервер(ВариантФормирования);
		Возврат;
	#КонецЕсли
	
	ФормулыНаименования = ФормулыНаименования();
	
	Если ВариантФормирования = "Рабочее" Тогда
		Объект.Наименование = НоменклатураКлиент.НаименованиеПоФормуле(
								ФормулыНаименования.ФормулаРабочегоНаименования,
								ВидНоменклатуры);
	ИначеЕсли ВариантФормирования = "ДляПечати" Тогда 
		Объект.НаименованиеПолное = НоменклатураКлиент.НаименованиеПоФормуле(
								ФормулыНаименования.ФормулаНаименованияДляПечати,
								ВидНоменклатуры,
								Объект.Наименование);
	ИначеЕсли ВариантФормирования = "Оба" Тогда
		Объект.Наименование = НоменклатураКлиент.НаименованиеПоФормуле(
								ФормулыНаименования.ФормулаРабочегоНаименования,
								ВидНоменклатуры);
		Объект.НаименованиеПолное = НоменклатураКлиент.НаименованиеПоФормуле(
								ФормулыНаименования.ФормулаНаименованияДляПечати,
								ВидНоменклатуры,
								Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеПоШаблонуСервер(ВариантФормирования)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ВариантФормирования = "Рабочее" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.Наименование = НоменклатураСервер.НаименованиеПоШаблону(ШаблонРабочегоНаименования, СправочникОбъект);
		СправочникОбъект.Наименование = Объект.Наименование;
	КонецЕсли;
	Если ВариантФормирования = "ДляПечати" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.НаименованиеПолное = НоменклатураСервер.НаименованиеПоШаблону(ШаблонНаименованияДляПечати, СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормулыНаименования()
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Результат = Новый Структура;
	Результат.Вставить("ФормулаРабочегоНаименования", НоменклатураСервер.ФормулаНаименования(ШаблонРабочегоНаименования, СправочникОбъект)); 
	Результат.Вставить("ФормулаНаименованияДляПечати", НоменклатураСервер.ФормулаНаименования(ШаблонНаименованияДляПечати, СправочникОбъект)); 
	
	Возврат Результат; 
		
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


//ПРФТ++
&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	//ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = НоменклатураКлиент.ФильтрФайловИзображений();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
		Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
		СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	//ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
	//	АдресОписанияHTML  = АдресФайлаВХранилище;
	//	ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	//ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры


&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции


&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	
	ПараметрыПереходаПоГиперссылке = Новый Структура;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы");
	ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке;
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информации возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента,
																		ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		Если ПараметрыПереходаПоГиперссылке.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
			Оповестить("ФильтрПоАналогичнымСвойствам_Номенклатура", Объект.Ссылка, Объект.Ссылка);
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("НавигационнаяСсылка") Тогда
		ПерейтиПоНавигационнойСсылке(ПараметрыПереходаПоГиперссылке.НавигационнаяСсылка);		
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")
ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИЗагрузить(Команда)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайлаДопИнфо								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаДопИнфо.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайлаДопИнфо.ПолноеИмяФайла					=	ПутьККартинке;
	ДиалогВыбораФайлаДопИнфо.МножественныйВыбор = Истина;
	ДиалогВыбораФайлаДопИнфо.Фильтр = "Файлы jpg(*.jpg)|*.jpg|";
	Грузим = Ложь;
	      
	Если ДиалогВыбораФайлаДопИнфо.Выбрать() Тогда
		Грузим = Истина;

		Если ДиалогВыбораФайлаДопИнфо.ВыбранныеФайлы.Количество() > 0 ТОгда
			Для Каждого Тст Из  ДиалогВыбораФайлаДопИнфо.ВыбранныеФайлы Цикл
				//ПроверитьПолноеИмя
				Имяфайла = СтрЗаменить(Тст, ДиалогВыбораФайлаДопИнфо.Каталог, "");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".jpg","");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".JPG","");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".jpeg","");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".JPEG","");

				ТестИмениНаЦифры = ИмяБезРасширений;
				
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"1","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"2","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"3","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"4","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"5","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"6","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"7","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"8","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"9","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"0","");
				
				Если СтрДлина(ТестИмениНаЦифры) = 0 Тогда			
					Новаятт = ФайлыВыбранные.Добавить();
					Новаятт.ПутьКФайлу = Тст;
				   //Грузим = Истина;
					
				Иначе
					Предупреждение("Выберите файл только с цифрами в имени");
					Грузим = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	

	если Грузим Тогда
		ВыбратьИЗагрузитьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыбратьИЗагрузитьНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	                      |ИЗ
	                      |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                      |ГДЕ
	                      |	ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	                      |	И ШтрихкодыНоменклатуры.Партнер = &Партнер");
	Запрос.УстановитьПараметр("Партнер",Справочники.Партнеры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Характеристика",Объект.Ссылка);
	ВЫборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ШК = Выборка.Штрихкод;
		НовыйАрхив = Новый ЗаписьZipФайла(	КаталогВременныхФайлов()+ШК+ ".zip",	"","Архив создан из 1с характеристики", 	МетодСжатияZIP.Сжатие, 	УровеньСжатияZIP.Оптимальный,МетодШифрованияZIP.Zip20);	
		
		//НовыйАрхив.Добавить(ПутьККартинке);
		Для Каждого Тст ИЗ ФайлыВыбранные ЦИкл
			НовыйАрхив.Добавить(Тст.ПутьКФайлу);
		КонецЦикла;
		НовыйАрхив.Записать();
		//http://files.digit-style.ru/files/archiv/ФР-00001716/4627120600024.zip
		Артикул = СокрЛП(Объект.Ссылка.Владелец.Артикул);
		
		АдресСайта = "files.digit-style.ru" ;
		Порт = 21;
		Логин = "lisa@files.digit-style.ru";
		Пароль = "VnTJP8H6B26!";
		ИмяКаталога = Артикул;
		FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог("/" +Артикул);
		Исключение
			Попытка
				FTPСоединение.СоздатьКаталог("/" +Артикул);
				FTPСоединение.УстановитьТекущийКаталог("/" +Артикул);
				
			Исключение
			КонецПопытки;
			//Соединение.СоздатьКаталог("/" +Артикул);
		КонецПопытки;
		 //Соединение.СоздатьКаталог("/NewBin");
		FTPСоединение.Записать(КаталогВременныхФайлов()+ШК+ ".zip","" + ШК+ ".zip");
		
		
		ЗапросПоиск = Новый Запрос("ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
		|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""ссылка на фото №2 (Справочник """"Характеристики номенклатуры"""" (Общие))""");
		Выб = ЗапросПоиск.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			Св = Выб.Ссылка;	
		КонецЕсли;
		
		
		//ЗапросСв = Новый Запрос("ВЫБРАТЬ
		//                        |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Ссылка,
		//                        |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
		//                        |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
		//                        |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение,
		//                        |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
		//                        |ИЗ
		//                        |	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
		//                        |ГДЕ
		//                        |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &Владелец
		//                        |	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = &Свойство")
		//ЗапросСв.УстановитьПараметр("Владелец",Объект.Ссылка);
		//ЗапросСв.УстановитьПараметр("Свойство",Св);
		//Выбб = ЗапросСв.Выполнить().Выбрать();
		//Если Выбб.Следующий() Тогда
		//	
		реквЕсть = Ложь;
		Спр = Объект.Ссылка.ПолучитьОбъект();
		Для Каждого ТекСтрока ИЗ Объект.ДополнительныеРеквизиты ЦИкл
			Если ТекСтрока.Свойство = СВ Тогда
				реквЕсть = Истина;
				ТекСтрока.Значение = "http://files.digit-style.ru/files/archiv/"+Артикул+"/"+ ШК + ".zip";
				Спр.Записать();
				Сообщить("ссылка на фото прописана. Перезайдите в характеристику");
			КонецЕсли;
		КонецЦикла;
		
		
		Если НЕ реквЕсть Тогда
			Спр = Объект.Ссылка.ПолучитьОбъект();
			
			НоваяСтрока = Спр.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = СВ;
			НоваяСтрока.Значение = "http://files.digit-style.ru/files/archiv/"+Артикул+"/"+ ШК + ".zip";
			Спр.Записать();
			Сообщить("ссылка на фото прописана. Перезайдите в характеристику");
		КонецЕсли;
		
		
		АдресСервера = "files.digit-style.ru";//"test.shishkin-gallery.ru";
		КлючОбмена = "/files/unzip_single.php?file_path="+Артикул + "/" +ШК + ".zip"; 	//KRT7*nbdL-Bfs523m";
		//Соединение = Новый HTTPСоединение(адрес);
		//HTTPСоединение.Получить(КлючОбмена);
		
		
		HTTPСоединение = Новый HTTPСоединение(АдресСервера);
		
		HTTPЗапрос = Новый HTTPЗапрос(КлючОбмена);
		
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		
		КодСостояния = HTTPОтвет.КодСостояния;
		
		responseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		Сообщить("Номенкклатура: " + Объект.Ссылка.Владелец +" " +Объект.Ссылка + ":  " +  responseText);

		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗагрузитьТонкийКлиент(Команда)
	
		СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайлаДопИнфо								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаДопИнфо.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайлаДопИнфо.ПолноеИмяФайла					=	ПутьККартинке;
	ДиалогВыбораФайлаДопИнфо.МножественныйВыбор = Истина;
	ДиалогВыбораФайлаДопИнфо.Фильтр = "Файлы jpg(*.jpg)|*.jpg| файлы avi(*.avi)|*.avi|";
	Грузим = Ложь;
	      
	Если ДиалогВыбораФайлаДопИнфо.Выбрать() Тогда
		Грузим = Истина;

		Если ДиалогВыбораФайлаДопИнфо.ВыбранныеФайлы.Количество() > 0 ТОгда
			Для Каждого Тст Из  ДиалогВыбораФайлаДопИнфо.ВыбранныеФайлы Цикл
				
				
				//Проверка расширения
				Если Прав(СтрЗаменить(Тст, ДиалогВыбораФайлаДопИнфо.Каталог, ""),3) = "jpg" ИЛИ Прав(СтрЗаменить(Тст, ДиалогВыбораФайлаДопИнфо.Каталог, ""),3) = "avi" ТОгда
				Иначе
					Предупреждение("Выберите файл с расширениями  ТОЛЬКО '.avi'  или '.jpg'");
					
					Грузим = Ложь;
					Продолжить;
				КонецЕсли;
				
				//ПроверитьПолноеИмя
				ИмяБезРасширений = СтрЗаменить(Тст, ДиалогВыбораФайлаДопИнфо.Каталог, "");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".jpg","");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".JPG","");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".jpeg","");
				ИмяБезРасширений = СтрЗаменить(ИмяБезРасширений,".JPEG","");

				ТестИмениНаЦифры = ИмяБезРасширений;
				
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"1","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"2","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"3","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"4","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"5","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"6","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"7","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"8","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"9","");
				ТестИмениНаЦифры = СтрЗаменить(ТестИмениНаЦифры,"0","");
				
				Если СтрДлина(ТестИмениНаЦифры) = 0 Тогда			
					Новаятт = ФайлыВыбранные.Добавить();
					Новаятт.ПутьКФайлу = Тст;
				   //Грузим = Истина;
					
				Иначе
					Предупреждение("Выберите файл только с цифрами в имени");
					Грузим = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	

	если НЕ Грузим Тогда
		Возврат;
	КонецЕсли;

	
	
	
	ШК = ВернутьШК();
	Если НЕ ШК = "" Тогда
		//ШК = Выборка.Штрихкод;
		НовыйАрхив = Новый ЗаписьZipФайла(	КаталогВременныхФайлов()+ШК+ ".zip",	"","Архив создан из 1с характеристики", 	МетодСжатияZIP.Сжатие, 	УровеньСжатияZIP.Оптимальный,МетодШифрованияZIP.Zip20);	
		
		//НовыйАрхив.Добавить(ПутьККартинке);
		Для Каждого Тст ИЗ ФайлыВыбранные ЦИкл
			НовыйАрхив.Добавить(Тст.ПутьКФайлу);
		КонецЦикла;
		НовыйАрхив.Записать();
		//http://files.digit-style.ru/files/archiv/ФР-00001716/4627120600024.zip
		Артикул = ВернутьАртикул();
		
		АдресСайта = "files.digit-style.ru" ;
		Порт = 21;
		Логин = "lisa@files.digit-style.ru";
		Пароль = "VnTJP8H6B26!";
		ИмяКаталога = Артикул;
		FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог("/" +Артикул);
		Исключение
			Попытка
				FTPСоединение.СоздатьКаталог("/" +Артикул);
				FTPСоединение.УстановитьТекущийКаталог("/" +Артикул);
				
			Исключение
			КонецПопытки;
			//Соединение.СоздатьКаталог("/" +Артикул);
		КонецПопытки;
		 //Соединение.СоздатьКаталог("/NewBin");
		FTPСоединение.Записать(КаталогВременныхФайлов()+ШК+ ".zip","" + ШК+ ".zip");
		
		
		ОстальноеОтработатьНСервере(Артикул, ШК);
		
		ОтработатьЗагрузкуИзображенийХарактеристик();
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ОстальноеОтработатьНСервере(Артикул, ШК)
	СВ = ВернутьСв();	
		реквЕсть = Ложь;
		Спр = Объект.Ссылка.ПолучитьОбъект();
		Для Каждого ТекСтрока ИЗ Объект.ДополнительныеРеквизиты ЦИкл
			Если ТекСтрока.Свойство = СВ Тогда
				реквЕсть = Истина;
				ТекСтрока.Значение = "http://files.digit-style.ru/files/archiv/"+Артикул+"/"+ ШК + ".zip";
				Спр.Записать();
				Сообщить("ссылка на фото прописана. Перезайдите в характеристику");
			КонецЕсли;
		КонецЦикла;
		
		
		Если НЕ реквЕсть Тогда
			Спр = Объект.Ссылка.ПолучитьОбъект();
		
			НоваяСтрока = Спр.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = СВ;
			НоваяСтрока.Значение = "http://files.digit-style.ru/files/archiv/"+Артикул+"/"+ ШК + ".zip";
			Спр.Записать();
			Сообщить("ссылка на фото прописана. Перезайдите в характеристику");
		КонецЕсли;
		
		
		АдресСервера = "files.digit-style.ru";//"test.shishkin-gallery.ru";
		КлючОбмена = "/files/unzip_single.php?file_path="+Артикул + "/" +ШК + ".zip"; 	//KRT7*nbdL-Bfs523m";
		//Соединение = Новый HTTPСоединение(адрес);
		//HTTPСоединение.Получить(КлючОбмена);
		
		
		HTTPСоединение = Новый HTTPСоединение(АдресСервера);
		
		HTTPЗапрос = Новый HTTPЗапрос(КлючОбмена);
		
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		
		КодСостояния = HTTPОтвет.КодСостояния;
		
		responseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		Сообщить("Номенкклатура: " + ВернутьВладельца () +" " +Объект.Ссылка + ":  " +  responseText);
	
КонецПроцедуры

&НаСервере
Функция ВернутьШК()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	                      |ИЗ
	                      |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                      |ГДЕ
	                      |	ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	                      |	И ШтрихкодыНоменклатуры.Партнер = &Партнер");
	Запрос.УстановитьПараметр("Партнер",Справочники.Партнеры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Характеристика",Объект.Ссылка);
	ВЫборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Штрихкод;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция ВернутьСв()

	ЗапросПоиск = Новый Запрос("ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
		|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""ссылка на фото №2 (Справочник """"Характеристики номенклатуры"""" (Общие))""");
		Выб = ЗапросПоиск.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			Возврат ВЫб.ССылка
		КонецЕсли;
		
КонецФункции

&НаСервере
Функция ВернутьАртикул ()
	Возврат СокрЛП(Объект.Ссылка.Владелец.Артикул);
КонецФункции

&НаСервере
Функция ВернутьВладельца ()
	Возврат СокрЛП(Объект.Ссылка.Владелец);
КонецФункции



////Хрень  по характеристикам

Процедура	ОтработатьЗагрузкуИзображенийХарактеристик()
	Выборка = ПолучитьХарактеристикиДляОбновления(Истина);
	ОбработатьВыборку(Выборка);
	Выборка = ПолучитьНоменклатуруДляОбновления(Истина);	
	ОбработатьВыборку(Выборка);	
КонецПроцедуры


Функция ПолучитьХарактеристикиДляОбновления(флПоВсем = Ложь, ОбъектыНазначения = Неопределено)

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	 флПоВсем = Ложь;
	ОбъектыНазначения = Объект.Ссылка.Владелец;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ НоменклатураПоГруппамОтбора
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&ОбъектыНазначения)
		|	И НЕ Номенклатура.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка) КАК КоличествоФото,
		|	ЕСТЬNULL(ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение, """") КАК СсылкаНаФото
		|ПОМЕСТИТЬ ХарСФайлами
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК ХарактеристикиНоменклатурыПрисоединенныеФайлы
		|		ПО ХарактеристикиНоменклатуры.Ссылка = ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
		|		ПО (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = &СвойствоФото2)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &флОбъектыНазначения
		|				ТОГДА ХарактеристикиНоменклатуры.Ссылка.Владелец В (&ОбъектыНазначения)
		|						ИЛИ ХарактеристикиНоменклатуры.Ссылка.Владелец В
		|							(ВЫБРАТЬ
		|								НомОтбора.Ссылка
		|							ИЗ
		|								НоменклатураПоГруппамОтбора КАК НомОтбора)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ЕСТЬNULL(ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение, """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарСФайлами.Ссылка КАК ХарактеристикаНоменклатура,
		|	ХарСФайлами.СсылкаНаФото КАК СсылкаНаФото
		|ИЗ
		|	ХарСФайлами КАК ХарСФайлами
		|ГДЕ
		|	(ХарСФайлами.КоличествоФото = 0
		|			ИЛИ &флПоВсем)
		|	И ХарСФайлами.СсылкаНаФото <> """"";
	
	Запрос.УстановитьПараметр("флПоВсем",Истина);// флПоВсем);
	Запрос.УстановитьПараметр("СвойствоФото2", Справочники.Настройки.ДопРеквизитФото2.Значение);
	Запрос.УстановитьПараметр("ОбъектыНазначения", ОбъектыНазначения);
	Запрос.УстановитьПараметр("флОбъектыНазначения", Истина); //?(ОбъектыНазначения = Неопределено,Ложь,Истина));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	

КонецФункции // ()


Процедура ОбработатьВыборку(Знач Выборка)
	
	Перем Ид, ИмяКартинки, ИмяКартинкиБезРасширения, Расширение, СсылкаНаСкачивание, ТекСсылка, ТекХарактеристика, УстановленТекущий, ФайлКартинки;
	
	//Соединение = Новый HTTPСоединение("http://files.digit-style.ru");
	Расширение = "jpg";
	
	Пока Выборка.Следующий() Цикл
		//Формирование ссылки
		ТекХарактеристикаНоменклатура 	= Выборка.ХарактеристикаНоменклатура; 
		ТекСсылка 			= Выборка.СсылкаНаФото;
		ТекСсылка 			= СтрЗаменить(ТекСсылка,"archiv", "images_square");
		ТекСсылка 			= СтрЗаменить(ТекСсылка,".zip", "/");
		ТекСсылка			= СокрЛП(ТекСсылка);
		Если ЗначениеЗаполнено(ТекХарактеристикаНоменклатура.ФайлКартинки) и
			Не ТекХарактеристикаНоменклатура.ФайлКартинки.ПометкаУдаления Тогда
			УстановленТекущий = Истина;
		Иначе
			УстановленТекущий = Ложь;
		КонецЕсли;	
		
		//Обход с инкриментом до 10
		//Для Ид = 1 По 10 Цикл
		//	ИмяКартинки = ""+Ид+"."+Расширение;
		//	ИмяКартинкиБезРасширения = ""+Ид;
		//	СсылкаНаСкачивание = ТекСсылка+ИмяКартинки;
		//	//Скачивание изображения
		//	ФайлКартинки 	= ПолучитьКартинку(СсылкаНаСкачивание, Расширение, ИмяКартинки);
		//	//Записать файл в базу
		//	
		//	Если ФайлКартинки <> Неопределено Тогда
		//		ЗагрузитьДанныеКартинкиВБазу(ИмяКартинкиБезРасширения, ТекХарактеристика, УстановленТекущий, ФайлКартинки);
		//	Иначе
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла; 
		
		//чекаем все что можно- но загружаем только 5 шт, ок ?
		//НО все чеканные живые мы сохраняем ссылки через запятую 
		//в реквизит характеристика (новый реквизит "Прямые ссылки на фото"
		//Обход с инкриментом до 10
		СтрСсылки = "";
		КолЗагружено = 0;
		Для Ид = 1 По 10 Цикл
			ИмяКартинки = ""+Ид+"."+Расширение;
			ИмяКартинкиБезРасширения = ""+Ид;
			СсылкаНаСкачивание = ТекСсылка+ИмяКартинки;
			
			//Скачивание изображения
			ФайлКартинки 	= ПолучитьКартинку(СсылкаНаСкачивание, Расширение, ИмяКартинки);
			//Записать файл в базу
			
						
			Если ФайлКартинки <> Неопределено Тогда
				Если ЗначениеЗаполнено(СсылкаНаСкачивание) Тогда
					СтрСсылки = СтрСсылки + СсылкаНаСкачивание + ", ";	
				КонецЕсли;
				Если КолЗагружено < 5 Тогда
					ЗагрузитьДанныеКартинкиВБазу(ИмяКартинкиБезРасширения, ТекХарактеристикаНоменклатура, УстановленТекущий, ФайлКартинки);
					КолЗагружено = КолЗагружено + 1;
				КонецЕсли; 
			Иначе
				//Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрСсылки) Тогда
			ЗаписатьВДопРеквизит(ТекХарактеристикаНоменклатура, СтрСсылки);
		КонецЕсли;
		//Прервать;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКартинку(Адрес, Расширение, ИмяКартинки)
	
	СтруктураАдреса = РазложитьАдрес(Адрес);
	
	//Если ЗначениеЗаполнено(СтруктураАдреса.ИмяКартинки) Тогда
	//	ВремФайл = КаталогВременныхФайлов() + СтруктураАдреса.ИмяКартинки;
	//Иначе
		ВремФайл = ПолучитьИмяВременногоФайла(Расширение);
	//КонецЕсли;	
	
	Попытка
		Соединение = Новый HTTPСоединение(СтруктураАдреса.АдресСервера);
		Соединение.Получить(СтруктураАдреса.АдресКартинки, ВремФайл);	
		ИмяКартинки = СтруктураАдреса.ИмяКартинки;
		Возврат Новый Файл(ВремФайл);//Новый Картинка(ВремФайл);
	Исключение	
	КонецПопытки;
	
	Возврат Неопределено;//Новый Картинка();
	
КонецФункции


Процедура ЗагрузитьДанныеКартинкиВБазу(Знач ИмяФайлаКартинки, Знач ТекХарактеристикаНоменклатура, УстановленТекущий, ФайлКартинки)
	
	Перем ДопПараметры;
	
	Если ФайлКартинки.Существует() Тогда
		Если Найти(".jpg, .bmp, .jpeg, .png, .pdf", ФайлКартинки.Расширение) Тогда
			
			ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5);
			ОбъектХеш.ДобавитьФайл(ФайлКартинки.ПолноеИмя);
			MD5Файла = ОбъектХеш.ХешСумма;
			
			ПрисоединенныйФайл = Неопределено;
			
			Если Не ПроверитьНаличиеФайла(ИмяФайлаКартинки, ФайлКартинки.Размер(), ТекХарактеристикаНоменклатура, MD5Файла, ПрисоединенныйФайл) Тогда
				// Помещение файла во временное хранилище.
				АдресВременногоХранилищаФайла = "";
				
				ДвоичныеДанные = Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя);
			    АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				
				ПараметрыДобавляемогоФайла = Новый Структура;
				ПараметрыДобавляемогоФайла.Вставить("ВладелецФайлов", ТекХарактеристикаНоменклатура);
			
				ПараметрыДобавляемогоФайла.Вставить("Автор", Справочники.Настройки.АвторПользовательРеглЗадания.Значение);
				ПараметрыДобавляемогоФайла.Вставить("ИмяБезРасширения", ИмяФайлаКартинки);
				ПараметрыДобавляемогоФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ФайлКартинки.Расширение,".",""));
				ПараметрыДобавляемогоФайла.Вставить("ВремяИзменения", ТекущаяДата());
				ПараметрыДобавляемогоФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата());
				
				Если ПрисоединенныйФайл = Неопределено Тогда
					Попытка
						ФайлСсылка = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавляемогоФайла,АдресВременногоХранилищаФайла);
					Исключение
						ЗаписьЖурналаРегистрации("ОбработкаЗагрузкаИзображенийПоСылкамВеб",УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,"ЗагрузкаИзображенийПоСылкамВеб - ошибка записи данных файла. "+ОписаниеОшибки());
					КонецПопытки;
				Иначе
					ПараметрыДобавляемогоФайла.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
					ПараметрыДобавляемогоФайла.Вставить("АдресВременногоХранилищаТекста", "");
					Попытка
						РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ПараметрыДобавляемогоФайла);
					Исключение
						ЗаписьЖурналаРегистрации("ОбработкаЗагрузкаИзображенийПоСылкамВеб",УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,"ЗагрузкаИзображенийПоСылкамВеб - ошибка обновление данных файла."+ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли; 				
				
				
				Если Не УстановленТекущий Тогда
					//ВывестиЛогСообщение("Файл уже был загружен" + КаталогЗагрузки + ИмяФайлаКартинки);
					//ВывестиЛогСообщение("Устанавливаем текущим");
					УстановитьТекущимИзображением(ФайлСсылка, ТекХарактеристикаНоменклатура);
					УстановленТекущий = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры



Процедура ЗаписатьВДопРеквизит(ТекХарактеристикаНоменклатура, СтрСсылки)
	ТекХарактеристикаНоменклатураОбъект = ТекХарактеристикаНоменклатура.ПолучитьОбъект();
	
	Если ТипЗнч(ТекХарактеристикаНоменклатура) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
	 	ОтборДопРеквизит = Справочники.Настройки.ДопРеквПрямыеСсылкиНаФото.Значение;
	Иначе	
	    ОтборДопРеквизит = Справочники.Настройки.ДопРеквПрямыеСсылкиНаФотоНоменклатура.Значение;
	КонецЕсли; 
	
	ДопРеквизит = ТекХарактеристикаНоменклатураОбъект.ДополнительныеРеквизиты.Найти(ОтборДопРеквизит, "Свойство");
	
	Если ДопРеквизит = Неопределено Тогда
	     НоваяСтрока = ТекХарактеристикаНоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
		 НоваяСтрока.Свойство = ОтборДопРеквизит;
		 НоваяСтрока.Значение = СтрСсылки;
	Иначе	
	     ДопРеквизит.Значение = СтрСсылки;
	КонецЕсли; 
	 
	ТекХарактеристикаНоменклатураОбъект.Записать(); 
КонецПроцедуры


Функция РазложитьАдрес(Знач Адрес)
	
	Адрес = СтрЗаменить(Адрес, "https://", "");
	Адрес = СтрЗаменить(Адрес, "http://", "");
	
	Результат = Новый Структура();
	СтрокиАдреса = СтрЗаменить(Адрес, "/", Символы.ПС);
	Результат.Вставить("АдресСервера", СтрПолучитьСтроку(СтрокиАдреса, 1));	
	АдресКартинки = "";
	Для Сч = 2 По СтрЧислоСтрок(СтрокиАдреса) Цикл
		АдресКартинки = АдресКартинки + СтрПолучитьСтроку(СтрокиАдреса, Сч) + "/";
	КонецЦикла;
	Результат.Вставить("АдресКартинки", Лев(АдресКартинки, СтрДлина(АдресКартинки)-1));
	Результат.Вставить("ИмяКартинки", СтрПолучитьСтроку(СтрокиАдреса, СтрЧислоСтрок(СтрокиАдреса)));
	
	Возврат Результат;
	
КонецФункции


Функция ПроверитьНаличиеФайла(Имя, Размер, ТекХарактеристикаНоменклатура, MD5Файла, ПрисоединенныйФайл)
	Отбор = Новый Структура("Наименование");
	Отбор.Наименование = Имя;
	
	Если ТипЗнч(ТекХарактеристикаНоменклатура) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Выборка = Справочники.ХарактеристикиНоменклатурыПрисоединенныеФайлы.Выбрать(,,Отбор,);
	Иначе
		Выборка = Справочники.НоменклатураПрисоединенныеФайлы.Выбрать(,,Отбор,);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли; 
		
		//Если Выборка.ВладелецФайла = ТекХарактеристика и Выборка.Размер = Размер Тогда
		//	Возврат Истина;
		//КонецЕсли;
		
		Если Выборка.ВладелецФайла = ТекХарактеристикаНоменклатура Тогда
			флНетДанныхФайла = Ложь;
			
			Попытка
				ДД = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка);
			Исключение
				флНетДанныхФайла = Истина;
			КонецПопытки;	
			
			Если флНетДанныхФайла Тогда
				
			Иначе	
				ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5);
				ОбъектХеш.Добавить(ДД);
				MD5ФайлаБазы = ОбъектХеш.ХешСумма;
				
				Если MD5Файла = MD5ФайлаБазы Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЕсли; 
			
			ПрисоединенныйФайл = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции // ПроверитьНаличиеФайала()


Процедура УстановитьТекущимИзображением(ФайлСсылка, ТекХарактеристикаНоменклатура)
	
	ТекущийОбъект = ТекХарактеристикаНоменклатура.ПолучитьОбъект();
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
	ТекущийОбъект.ФайлКартинки = ФайлСсылка;
	ТекущийОбъект.Записать();
	
КонецПроцедуры



Функция ПолучитьНоменклатуруДляОбновления(флПоВсем = Ложь, ОбъектыНазначения = Неопределено)

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
		
	 флПоВсем = Ложь;
	ОбъектыНазначения = Объект.Ссылка.Владелец;
	

	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ НоменклатураПоГруппамОтбора
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&ОбъектыНазначения)
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НоменклатураПрисоединенныеФайлы.Ссылка) КАК КоличествоФото,
		|	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение, """") КАК СсылкаНаФото
		|ПОМЕСТИТЬ ХарСФайлами
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|		ПО Номенклатура.Ссылка = НоменклатураПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = Номенклатура.Ссылка)
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоФото2)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &флОбъектыНазначения
		|				ТОГДА Номенклатура.Ссылка В (&ОбъектыНазначения)
		|						ИЛИ Номенклатура.Ссылка В
		|							(ВЫБРАТЬ
		|								НомОтбора.Ссылка
		|							ИЗ
		|								НоменклатураПоГруппамОтбора КАК НомОтбора)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка,
		|	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение, """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарСФайлами.Ссылка КАК ХарактеристикаНоменклатура,
		|	ХарСФайлами.СсылкаНаФото КАК СсылкаНаФото
		|ИЗ
		|	ХарСФайлами КАК ХарСФайлами
		|ГДЕ
		|	(ХарСФайлами.КоличествоФото = 0
		|			ИЛИ &флПоВсем)
		|	И ХарСФайлами.СсылкаНаФото <> """"";
	//
	//Запрос.УстановитьПараметр("флПоВсем", флПоВсем);
	Запрос.УстановитьПараметр("СвойствоФото2", Справочники.Настройки.ДопРеквизитФотоДляНоменклатуры.Значение);
	//Запрос.УстановитьПараметр("ОбъектыНазначения", ОбъектыНазначения);
	//Запрос.УстановитьПараметр("флОбъектыНазначения", ?(ОбъектыНазначения = Неопределено,Ложь,Истина));
	//РезультатЗапроса = Запрос.Выполнить();
	//
	Запрос.УстановитьПараметр("флПоВсем",Истина);// флПоВсем);
	//Запрос.УстановитьПараметр("СвойствоФото2", Справочники.Настройки.ДопРеквизитФото2.Значение);
	Запрос.УстановитьПараметр("ОбъектыНазначения", ОбъектыНазначения);
	Запрос.УстановитьПараметр("флОбъектыНазначения", Истина); //?(ОбъектыНазначения = Неопределено,Ложь,Истина));
	РезультатЗапроса = Запрос.Выполнить();

	
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	

КонецФункции // ()
