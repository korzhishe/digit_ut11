
//============================================================================
// АВТОР

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры


&НаСервере
Процедура ИнициализироватьОбработку()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Инициализировать();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекстHTML) Тогда
		Объект.ТекстHTML = "100% загрузка прайса в 1С с помощью Мегапрайс: Расширенная загрузка прайсов в 1С";
	КонецЕсли;
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, Новый Структура);

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек)
	
	Если Объект.ВариантПрайса = "ТолькоОстатки" Тогда
		СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗапросаОстатки");
	Иначе
		СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗапроса");
	КонецЕсли;

	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьКомпоновщикНастроек(КомпоновщикНастроек)
	
	Если ЗначениеЗаполнено(Объект.Ссылка.ХранилищеНастроекКомпоновщика) Тогда
		Попытка
			КомпоновщикНастроек.ЗагрузитьНастройки(Объект.Ссылка.ХранилищеНастроекКомпоновщика.Получить());
		Исключение КонецПопытки;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект = НеОпределено)
	
	Если НЕ ТекущийОбъект = НеОпределено Тогда
		
		УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект);		
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриЧтенииСозданииНаСервере();

	Если НЕ ЗначениеЗаполнено(Объект.ВариантПрайса) Тогда
	    Объект.ВариантПрайса = "ЦеныИОстатки";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	Иначе
		ИнициализироватьОбработку();
		Объект.ВариантНаименованияКартинок = "По артикулу";
		Объект.Приоритет = 100;
	КонецЕсли;
	
	Объект.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");	
		
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Объект.УчетнаяЗапись = УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию();
		Объект.ОтправительПредставление = ПолучитьПредставлениеДляУчетнойЗаписи();
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек);
	ВосстановитьКомпоновщикНастроек(КомпоновщикНастроек);
	ТекстHTMLПриИзмененииСервер();
	
	УстановитьНадписьРегламентногоЗадания();   

	ОткрытьМакет();

КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()

	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка;

КонецФункции // ЭтотОбъект()


&НаКлиенте
Процедура ВариантПрайсаПриИзменении(Элемент)
	
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек);
	
КонецПроцедуры


&НаСервере
Процедура СформироватьОтчет()
	
	ТаблицаОтчета.Очистить();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("АдресСхемыВХранилище", КомпоновщикНастроек);
	ОбработкаОбъект.СформироватьОтчет(ТаблицаОтчета,ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчет();
	
	//Для инд = 1 по 10 Цикл
	//	ТаблицаОтчета.Область(,инд,,инд).ШиринаКолонки = инд;
	//КонецЦикла;

	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.ПрайсЛист;
	
КонецПроцедуры

//============================================================================
// РАССЫЛКА

&НаСервереБезКонтекста
Функция ВерсияПодсистемы(Знач ИдентификаторБиблиотеки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.Параметры.Вставить("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКонтакта(Контакт)

	Возврат Строка(Контакт);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт)
	
	Результат = ?(Имя = Адрес ИЛИ Имя = "", Адрес,?(ПустаяСтрока(Адрес),Имя, Имя + " <" + Адрес + ">"));
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Результат = Результат + " [" + ПолучитьПредставлениеКонтакта(Контакт) + "]";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина)

	Представление = "";
	Для Каждого Стр Из ТаблицаАдресатов Цикл
		Представление = Представление + ПолучитьПредставлениеАдресата(Стр.Представление, Стр.Адрес, ?(ВключатьИмяКонтакта, Стр.Контакт, "")) + "; ";
	КонецЦикла;

	Возврат Представление;

КонецФункции

&НаСервере
Процедура ПреобразоватьИменаПолучателей(СтрокаИмен, ИмяТаблицы)
	
	табПолучатели = РеквизитФормыВЗначение(ИмяТаблицы, Тип("ТаблицаЗначений"));

	табПолучатели.Очистить();
	Если ПустаяСтрока(СтрокаИмен) Тогда
		Возврат;
	КонецЕсли;

	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаИмен);
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Стр Из Результат Цикл
		новСтр = табПолучатели.Добавить();
		новСтр.Адрес = Стр.Адрес;
		новСтр.Представление = Стр.Представление;
		новСтр.Контакт = ПолучитьКонтактПоАдресу(Стр.Адрес);
	КонецЦикла;
	ЗначениеВРеквизитФормы(табПолучатели, ИмяТаблицы);

КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактПоАдресу(Адрес)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактов Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И (НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления)";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
		    Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектСКонтактнойИнформацией.Ссылка
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
		|ГДЕ
		|	ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
		|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
		|	И (НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Контакт = Выборка.Ссылка;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ДляПодбора)
		
	// Получим список адресатов
	СоответствиеТабличныхЧастей = Новый Соответствие;
	СоответствиеТабличныхЧастей.Вставить("Кому", Объект.ПолучателиПисьма);
	//СоответствиеТабличныхЧастей.Вставить("Копии", Объект.ПолучателиКопий);
	//СоответствиеТабличныхЧастей.Вставить("Скрытые", Объект.ПолучателиСкрытыхКопий);
	//СоответствиеТабличныхЧастей.Вставить("Ответ", Объект.ПолучателиОтвета);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабличнаяЧасть Из СоответствиеТабличныхЧастей Цикл
		СписокВыбранных.Добавить(
			УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(ТабличнаяЧасть.Значение), ТабличнаяЧасть.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	//ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить(НСтр("ru = 'Кому'"));
	
	// Откроем форму для редактирования списка адресатов.
	ИмяОбщейФормы = ?(ДляПодбора, "ОбщаяФорма.АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
	
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(соотвТабЧастей, Результат)

	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		ТабЧасть.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого Элемент Из Результат Цикл
		
		ТабЧасть = соотвТабЧастей.Получить(Элемент.Группа);
		Если ТабЧасть = Неопределено Тогда
			ТабЧасть = Объект.ПолучателиПисьма;
		КонецЕсли;
		
		новСтр = ТабЧасть.Добавить();
		новСтр.Адрес = Элемент.Адрес;
		новСтр.Представление = Элемент.Представление;
		новСтр.Контакт = Элемент.Контакт;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДляУчетнойЗаписи()

	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Представление = Выборка.ИмяПользователя;
	Если ПустаяСтрока(Представление) Тогда
		Возврат Выборка.АдресЭлектроннойПочты;
	Иначе
		Возврат Представление + " <" + Выборка.АдресЭлектроннойПочты + ">";
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Объект.ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.УчетнаяЗапись);
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлПочтаПодобратьКонтакты(Команда)
	
	РедактироватьСписокПолучателей(Истина);
	
КонецПроцедуры


&НаКлиенте
Функция ПроверитьЗаполнениеСписковАдресатов()

	//Отказ = Ложь;
	//
	//Попытка
	//	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Объект.СписокПолучателейПисьма);
	//Исключение
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "Объект.СписокПолучателейПисьма");
	//	Отказ = Истина;
	//КонецПопытки;
	//
	//Возврат Отказ;

КонецФункции



&НаСервере
Функция СохранитьВЭксельСервер()      
	
	//ОбработкаОбъект =  РеквизитФормыВЗначение("Объект");
	//ОбработкаОбъект.СохранитьПрайсВЭксель(ТаблицаОтчета);

	Если НЕ ЗначениеЗаполнено(Объект.ФорматСохранения) Тогда
		Объект.ФорматСохранения = "xls"
	КонецЕсли;

	ВременныйФайл = ПолучитьИмяВременногоФайла(Объект.ФорматСохранения);
	ТаблицаОтчета.Записать(ВременныйФайл,ТипФайлаТабличногоДокумента[Объект.ФорматСохранения]);

	ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйФайл);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные,ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВЭксель(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогНаДиске) Тогда
		Сообщить("В настройках не выбран каталог на диске");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Сообщить("Сначала дайте наименование прайсу.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФорматСохранения) Тогда
		Объект.ФорматСохранения = "xls"
	КонецЕсли;
	
	//Адрес = СохранитьВЭксельСервер();
	//ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	ИмяФайла = Объект.Наименование+"."+Объект.ФорматСохранения;
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ПолныйПуть = Объект.КаталогНаДиске+"\"+ИмяФайла; 

	ТаблицаОтчета.Записать(ПолныйПуть,ТипФайлаТабличногоДокумента[Объект.ФорматСохранения]);

	//ДвоичныеДанные.Записать(ПолныйПуть);
	
	
	Если Объект.ГенерацияCSV Тогда
		ИмяФайла = Объект.Наименование+".csv";
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		ПолныйПуть = Объект.КаталогНаДиске+"\"+ИмяФайла; 

		Разделитель = "|";	
		
		ТекстовыйФайлЗапись = Новый ЗаписьТекста(ПолныйПуть,КодировкаТекста.ANSI); 	

		Для НомерСтроки = 1 По ТаблицаОтчета.ВысотаТаблицы Цикл	
			ТекстоваяСтрока = "";
			
			Для НомерКолонки = 1 По ТаблицаОтчета.ШиринаТаблицы Цикл
				Значение = СокрЛП(ТаблицаОтчета.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(НомерКолонки,"ЧГ=")).Текст);
				
				ТекстоваяСтрока = ТекстоваяСтрока+?(НомерКолонки > 1,Разделитель,"")+Значение;
			КонецЦикла;
			ТекстовыйФайлЗапись.ЗаписатьСтроку(ТекстоваяСтрока); 
		КонецЦикла;	
		ТекстовыйФайлЗапись.Закрыть(); 		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтправкуНаСервере()
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ОбработкаОбъект.СохранитьПрайсВЭксель(ТаблицаОтчета);
	ОбработкаОбъект.ВыполнитьРассылку(ТаблицаОтчета);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогНаДиске) Тогда
		Сообщить("В настройках не выбран каталог на диске");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Сообщить("Сначала дайте наименование прайсу.");
		Возврат;
	КонецЕсли;

	Если Объект.ПолучателиПисьма.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Необходимо указать хотя бы одного получателя письма.'"),, "Объект.СписокПолучателейПисьма");
		Возврат;
	КонецЕсли;
		
	ВыполнитьОтправкуНаСервере();	
		
КонецПроцедуры






&НаКлиенте
Процедура ПодобратьКонтактыВыполнить(Команда)

	РедактироватьСписокПолучателей(Истина);

КонецПроцедуры




&НаКлиенте
Процедура СтандартныеНастройки(Команда)
	
	Объект.НастройкиКолонокЛиста.Очистить();
	Объект.ВидыНоменклатуры.Очистить();
	Объект.СвойстваХарактеристик.Очистить();
	Объект.СвойстваНоменклатуры.Очистить();

	ИнициализироватьОбработку(); 
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем СтрокаНачало, СтрокаКонец, КолонкаНачало, КолонкаКонец;
	Перем НачалоВыделения, КонецВыделения;

	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.АдреснаяКнига")
		ИЛИ ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") И ТипЗнч(ВыбранноеЗначение) <> Тип("Соответствие") Тогда
			Возврат;
		КонецЕсли;
		
		// Получим список адресатов
		СоответствиеТабличныхЧастей = Новый Соответствие;
		СоответствиеТабличныхЧастей.Вставить("Кому", Объект.ПолучателиПисьма);
		//СоответствиеТабличныхЧастей.Вставить("Копии", Объект.ПолучателиКопий);
		//СоответствиеТабличныхЧастей.Вставить("Скрытые", Объект.ПолучателиСкрытыхКопий);
		//СоответствиеТабличныхЧастей.Вставить("Ответ", Объект.ПолучателиОтвета);
		
		// Заполним адресатов
		ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, ВыбранноеЗначение);
		
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьКонтактыНаСервере()
		
	Объект.ПолучателиПисьма.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка,
	|	ПартнерыКонтактнаяИнформация.АдресЭП,
	|	ПартнерыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипКИ";
	
	Запрос.УстановитьПараметр("ТипКи", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда			
		Выборка = Результат.Выбрать();		
		Пока Выборка.Следующий() Цикл			
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
			НоваяСтрока.Партнер = Выборка.Ссылка;	
			НоваяСтрока.Контакт = Выборка.Ссылка;
			НоваяСтрока.Адрес   = Выборка.Представление;		
			НоваяСтрока.Представление = Выборка.Представление;	
		КонецЦикла;			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусПартнерамНаСервере()
			
	Для Каждого Выборка Из Объект.ПолучателиПисьма Цикл			
		ПратнерОбъект = Выборка.Партнер.ПолучитьОбъект();	
		ПратнерОбъект.Записать();	
	КонецЦикла;		
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусПартнерам(Команда)
	ИзменитьСтатусПартнерамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтакты(Команда)
	
	ЗаполнитьКонтактыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтакты(Команда)
	
	Объект.ПолучателиПисьма.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура РассылкаКлиентамПриИзмененииНаСервере()
	
	Объект.ТемаПисьма = Объект.РассылкаКлиентам.Тема;
	ТекстПисьмаФорматированныйДокумент = Объект.РассылкаКлиентам.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура РассылкаКлиентамПриИзменении(Элемент)
	РассылкаКлиентамПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КаталогНаДискеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь'");
		
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогНаДиске = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыделитьВсе(Команда)
	
	Для Каждого Строка Из Объект.ВидыНоменклатуры Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСнятьПометки(Команда)
	
	Для Каждого Строка Из Объект.ВидыНоменклатуры Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры



&НаКлиенте
Процедура ПеренестиЛистыВКнигуExcel(ПутьКниги, СписокФайлов) Экспорт
	
	Файл = Новый COMОбъект("Excel.Application");    
    
    Файл.Visible = 0;    
    Файл.DisplayAlerts = 0;
    Попытка                          
        Книга = Файл.Workbooks.Open(ПутьКниги);
    Исключение
        Книга = Файл.Workbooks.Add();
        Книга.SaveAs(ПутьКниги);
    КонецПопытки;
	
	НовоеИмяЛиста = 0;
    Для Каждого ФайлЛиста Из СписокФайлов Цикл
        НовоеИмяЛиста = НовоеИмяЛиста + 1;
        
        Попытка                          
            Лист = Файл.Workbooks.Open(ФайлЛиста.Значение);
        Исключение
            Продолжить;
        КонецПопытки;
        
        Попытка
            Лист.Worksheets(1).Name = НовоеИмяЛиста;
        Исключение
            Лист.Worksheets(1).Name = НовоеИмяЛиста+"A";
        КонецПопытки;
        Лист.Worksheets(1).Copy(Книга.Worksheets(1));
        Лист.Close(0);
        УдалитьФайлы(ФайлЛиста.Значение);
        //Книга.Save();
    КонецЦикла;
    
    Книга.Save();
    Книга.Close(-1);
    Файл = 0;
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ИспользоватьИндивидуальноеРегламентноеЗадание Тогда
		Если ТекущийОбъект.Код <> "" тогда
			Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
			Если Задание = НеОпределено Тогда
				Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("мегапрайсГенерацияПрайсовИндивидуальноеЗадание");     
				Задание.Использование = Истина;
				Задание.Ключ = Строка(Новый УникальныйИдентификатор);
				ТекущийОбъект.ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
			КонецЕсли;
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(ТекущийОбъект.Код);
			Задание.Наименование = "Мегапрайс - Генерация прайса - "+ТекущийОбъект.Наименование;
			Задание.Параметры = ПараметрыЗадания;
			Задание.Расписание = РасписаниеРегламентногоЗадания;
			Задание.Записать();			
		Иначе
			Сообщить("Код настройки не прописался в регламентном задании.");	
		КонецЕсли;
	Иначе
		Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
		Если НЕ Задание = НеОпределено Тогда
			Задание.Использование = Ложь;
			Задание.Записать();		
		КонецЕсли;			
	КонецЕсли;

	Попытка
		ТекущийОбъект.ХранилищеНастроекКомпоновщика = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Объект.ИспользоватьИндивидуальныйМакет Тогда
		Попытка
			ТекущийОбъект.ХранилищеНастроекМакетПрайса = Новый ХранилищеЗначения(МакетПрайса);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	ВложенныеИзображения = Новый Структура;
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстHTML, ВложенныеИзображения);

КонецПроцедуры


&НаСервере
Процедура ТекстПисьмаФорматированныйДокументПриИзмененииСервер()
	
	ВложенныеИзображения = Новый Структура;
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(Объект.ТекстHTML, ВложенныеИзображения);

КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаФорматированныйДокументПриИзменении(Элемент)
	
	ТекстПисьмаФорматированныйДокументПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ТекстHTMLПриИзмененииСервер()
	
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, Новый Структура);

КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLПриИзменении(Элемент)
	
	ТекстHTMLПриИзмененииСервер();

КонецПроцедуры




//============================================================================
// ОБЩЕЕ РЕГЛАМЕНТНОЕ ЗАДАНИЕ

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторРегламентногоЗадания()
	
	МетаданныеВыбор     = Метаданные.РегламентныеЗадания.мегапрайсГенерацияПрайсов;
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеВыбор);	
	Возврат Строка(РегламентноеЗадание.УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура НастроитьОбщееРегламентноеЗадание(Команда)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ПолучитьИдентификаторРегламентногоЗадания());
	ПараметрыФормы.Вставить("Действие", "Изменить");
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры


//============================================================================
// ИНДИВИДУАЛЬНОЕ РЕГЛАМЕНТНОЕ ЗАДАНИЕ

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
	
	Если НЕ Задание = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьРегламентныеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРегламентногоЗадания();
	
	Если Объект.ИспользоватьИндивидуальноеРегламентноеЗадание Тогда
		ВыполнитьНастройкуРегламентногоЗадания();
		УстановитьНадписьРегламентногоЗадания();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьИндивидуальноеРегламентноеЗадание.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРегламентногоЗадания()
	
	Элементы.НастроитьИндивидуальноеРегламентноеЗадание.Доступность = Объект.ИспользоватьИндивидуальноеРегламентноеЗадание;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьНастройкуРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписаниеLongPulling", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписаниеLongPulling(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	УстановитьНадписьРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИндивидуальноеРегламентноеЗадание(Команда)
	
	ВыполнитьНастройкуРегламентногоЗадания();
	УстановитьНадписьРегламентногоЗадания();
	Модифицированность = Истина;

КонецПроцедуры


//============================================================================
// РАБОТА С МАКЕТОМ 

&НаСервере
Функция ПолучитьСтандартныйМакетСервер()
	
	Возврат Справочники.мегапрайсПрайсЛисты.ПолучитьМакет("МакетПрайса");
	
КонецФункции

&НаКлиенте
Процедура СтандартныйМакет(Команда)
	
	МакетПрайса = ПолучитьСтандартныйМакетСервер();

КонецПроцедуры

&НаСервере
Функция ПолучитьМакетСервер()
	
	Если Объект.ИспользоватьИндивидуальныйМакет Тогда
		Возврат Объект.Ссылка.ХранилищеНастроекМакетПрайса.Получить();
	Иначе
		Возврат Справочники.мегапрайсПрайсЛисты.ПолучитьМакет("МакетПрайса");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьМакет()
		
	МакетПрайса = ПолучитьМакетСервер(); 	
	
КонецПроцедуры




 

