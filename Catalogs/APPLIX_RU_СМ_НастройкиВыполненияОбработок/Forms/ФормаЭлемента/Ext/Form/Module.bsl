
//---------------------------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Функция УстановитьЗаголовок()
	Рез = "";
	
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		ЭтаФорма.Заголовок = Объект.Наименование;
	Иначе
		ЭтаФорма.Заголовок = "СМ: Настройка запуска обработки [applix.ru]";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции



&НаКлиенте
Процедура НастроитьРасписаниеВыполнить()

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Новый ОписаниеОповещения("ОткрытьРасписаниеЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗавершение(НовоеРасписание, Контекст) Экспорт

	Если НовоеРасписание <> Неопределено Тогда
		Расписание = НовоеРасписание;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры




//---------------------------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Функция ЗаполнитьСлужебныеДанные()
	Рез = "";
	
	ПодключитьОбработчикОжидания("ЗаполнитьСлужебныеДанные_Выполнить", 0.1, Истина);
	
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Функция ЗаполнитьСлужебныеДанные_Выполнить() Экспорт 
	Рез = "";
	
	СВ = Элементы.ВстроеннаяОбработкаИмя.СписокВыбора;
	СВ.Очистить();
	СписокОбработок = APPLIX_RU_СМ_ОбщийМодульСервер.СМ_ПолучитьСписокОбработок();
	Для каждого Эл Из СписокОбработок Цикл
		СВ.Добавить(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	СВ.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Объект.ИмяМетода) Тогда
			Объект.ИмяМетода = "APPLIX_RU_СМ_ВыполнитьОбработку";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСлужебныеДанные_Выполнить_Сервер();
	
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция ЗаполнитьСлужебныеДанные_Выполнить_Сервер()
	Если Объект.ВнешняяОбработкаСсылка=Неопределено Тогда
		ИменаСправочников = Новый Массив();
		ИменаСправочников.Добавить("ДополнительныеОтчетыИОбработки");
		//ИменаСправочников.Добавить("");
		Для каждого ИмяСпр Из ИменаСправочников Цикл
			Попытка
				Объект.ВнешняяОбработкаСсылка = Справочники[ИмяСпр].ПустаяСсылка();
				ТипЗн = Новый ОписаниеТипов("СправочникСсылка."+ИмяСпр);
				Элементы.ВнешняяОбработкаСсылка.ОграничениеТипа = ТипЗн;
				Прервать;
			Исключение
				//Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецФункции



//---------------------------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Функция УстановитьВидимостьЭлементов()
	ПодключитьОбработчикОжидания("УстановитьВидимостьЭлементов_Выполнить", 0.1, Истина);
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Функция УстановитьВидимостьЭлементов_Выполнить() Экспорт
	 Элементы.ВнешняяОбработкаСсылка.Видимость = Объект.ЗапускВнешнейОбработки;
	 Элементы.ВстроеннаяОбработкаИмя.Видимость = Не Объект.ЗапускВнешнейОбработки;
КонецФункции





&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
	//	ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
	//	                             |
	//	                             |Изменение свойств регламентного задания
	//	                             |выполняется только администраторами.'");
	//КонецЕсли;
	//
	//Действие = Параметры.Действие;
	//
	//Если СтрНайти(", Добавить, Скопировать, Изменить,", ", " + Действие + ",") = 0 Тогда
	//	
	//	ВызватьИсключение НСтр("ru = 'Неверные параметры открытия формы ""Регламентное задание"".'");
	//КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.КоличествоПовторовПриАварийномЗавершении = 3;
		Объект.ИнтервалПовтораПриАварийномЗавершении = 60;
	//	
	//	//ПараметрыОтбора        = Новый Структура;
	//	//ПараметризуемыеЗадания = Новый Массив;
	//	//ЗависимостиЗаданий     = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	//	//
	//	//ПараметрыОтбора.Вставить("Параметризуется", Истина);
	//	//РезультатПоиска = ЗависимостиЗаданий.НайтиСтроки(ПараметрыОтбора);
	//	//
	//	//Для Каждого СтрокаТаблицы Из РезультатПоиска Цикл
	//	//	ПараметризуемыеЗадания.Добавить(СтрокаТаблицы.РегламентноеЗадание);
	//	//КонецЦикла;
	//	
	//	//Расписание = Новый РасписаниеРегламентногоЗадания;
	//	
	//	//Для Каждого РегламентноеЗаданиеМетаданные Из Метаданные.РегламентныеЗадания Цикл
	//	//	Если ПараметризуемыеЗадания.Найти(РегламентноеЗаданиеМетаданные) <> Неопределено Тогда
	//	//		Продолжить;
	//	//	КонецЕсли;
	//	//	
	//	//	ОписанияМетаданныхРегламентныхЗаданий.Добавить(
	//	//		РегламентноеЗаданиеМетаданные.Имя
	//	//			+ Символы.ПС
	//	//			+ РегламентноеЗаданиеМетаданные.Синоним
	//	//			+ Символы.ПС
	//	//			+ РегламентноеЗаданиеМетаданные.ИмяМетода,
	//	//		?(ПустаяСтрока(РегламентноеЗаданиеМетаданные.Синоним),
	//	//		  РегламентноеЗаданиеМетаданные.Имя,
	//	//		  РегламентноеЗаданиеМетаданные.Синоним) );
	//	//КонецЦикла;
	//Иначе
	//	//ЗаполнитьЗначенияСвойств(
	//	//	ЭтотОбъект,
	//	//	Задание,
	//	//	"Ключ,
	//	//	|Предопределенное,
	//	//	|Использование,
	//	//	|Наименование,
	//	//	|ИмяПользователя,
	//	//	|ИнтервалПовтораПриАварийномЗавершении,
	//	//	|КоличествоПовторовПриАварийномЗавершении");
	//	
	//	//Идентификатор = Строка(Задание.УникальныйИдентификатор);
	//	//Если Задание.Метаданные = Неопределено Тогда
	//	//	ИмяМетаданных        = НСтр("ru = '<нет метаданных>'");
	//	//	СинонимМетаданных    = НСтр("ru = '<нет метаданных>'");
	//	//	ИмяМетодаМетаданных  = НСтр("ru = '<нет метаданных>'");
	//	//Иначе
	//	//	ИмяМетаданных        = Задание.Метаданные.Имя;
	//	//	СинонимМетаданных    = Задание.Метаданные.Синоним;
	//	//	ИмяМетодаМетаданных  = Задание.Метаданные.ИмяМетода;
	//	//КонецЕсли;
	//	
	//	//Задание = APPLIX_RU_СМ_ОбщийМодульСервер.APPLIX_RU_СМ_РегламентноеЗаданиеПолучить(Объект.ИдентификаторРегламентногоЗадания);
	//	//Если Задание=Неопределено Тогда
	//	//	Расписание = Новый РасписаниеРегламентногоЗадания;
	//	//Иначе
	//	//	Расписание = Задание.Расписание;
	//	//КонецЕсли;
	//	
	//	//СообщенияПользователюИОписаниеИнформацииОбОшибке = РегламентныеЗаданияСлужебный
	//	//	.СообщенияИОписанияОшибокРегламентногоЗадания(Задание);
	КонецЕсли;
	
	//Если Действие <> "Изменить" Тогда
	//	Идентификатор = НСтр("ru = '<будет создан при записи>'");
	//	Использование = Ложь;
	//	
	//	Наименование = ?(
	//		Действие = "Добавить",
	//		"",
	//		РегламентныеЗаданияСлужебный.ПредставлениеРегламентногоЗадания(Задание));
	//КонецЕсли;
	
	//// Заполнение списка выбора имени пользователя.
	//МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	//
	//Для каждого Пользователь Из МассивПользователей Цикл
	//	Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя);
	//КонецЦикла;
	//
	//СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
	
	Задание = APPLIX_RU_СМ_ОбщийМодульСервер.APPLIX_RU_СМ_РегламентноеЗаданиеПолучить(Объект.ИдентификаторРегламентногоЗадания);
	Если Задание=Неопределено Тогда
		Расписание = Новый("РасписаниеРегламентногоЗадания");
	Иначе
		Расписание = Задание.Расписание;
	КонецЕсли;
	
	// Установить ограничение типа ВнешняяОбработкаСсылка
	ОТ = APPLIX_RU_СМ_ОбщийМодульСервер.СМ_СоздатьОписаниеТипаПоЗначению(APPLIX_RU_СМ_ОбщийМодульСервер.СМ_Справочник_ВнешниеОбработки_ПустаяСсылка());
	Элементы.ВнешняяОбработкаСсылка.ОграничениеТипа = ОТ;
	
	РФ_ИдентификаторРегламентногоЗадания = Объект.ИдентификаторРегламентногоЗадания;
КонецПроцедуры 


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьСлужебныеДанные();
	УстановитьВидимостьЭлементов();
	УстановитьЗаголовок();
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапускВнешнейОбработкиПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.ЗапускВнешнейОбработки Тогда
		Если Не ЗначениеЗаполнено(Объект.ВнешняяОбработкаСсылка) Тогда
			Сообщить("Не указано какую обработку запускать!");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ВстроеннаяОбработкаИмя) Тогда
			Сообщить("Не указано какую обработку запускать!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ=Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИмяМетода) Тогда
		Сообщить("Не указан метод обработки!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ=Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Если Объект.ЗапускВнешнейОбработки Тогда
			Объект.Наименование = Объект.ВнешняяОбработкаСсылка
		Иначе
			Объект.Наименование = Объект.ВстроеннаяОбработкаИмя
		КонецЕсли;
	КонецЕсли;
	
	//ЗаписатьРегламентноеЗадание();
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.ВключитьОтключитьРегламентноеЗадание(Расписание);
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	УстановитьЗаголовок();
КонецПроцедуры

