

///Метод для проверки соединения с веб сервисом
Функция Check()
	
	Лицензия = ГАЛ_ВебСервисы.GetYandexApi();
	
	Возврат Истина;	
	
	
	
КонецФункции

//Метод обмена координатами
Функция SuncCoordinates(Data)
	
	Ответ = Новый Структура;
	Ответ.Вставить("Ошибка", СтруктураОшибки());
	
	Попытка
		ДанныеОбмена = ГАЛ_ВебСервисы.ГАЛ_Десериализовать(Data.Получить());
	Исключение
		ЗаписатьОшибку(Ответ, "При десериализации пакета обмена возникла ошибка! (Код 1-1)",ОписаниеОшибки(),Истина);
	КонецПопытки;
	
	Попытка
		ФизЛицо = ПолучитьФизЛицо(Ответ,ДанныеОбмена);
	Исключение
		ЗаписатьОшибку(Ответ, "При проверки физ лица! (Код 2-1)",ОписаниеОшибки(),Истина);
	КонецПопытки;
	
	
	Если ФизЛицо <> Неопределено Тогда
		
		Попытка
			ДанныеКоординат = ГАЛ_ВебСервисы.ГАЛ_Десериализовать(ДанныеОбмена.Координаты);
		Исключение
			ЗаписатьОшибку(Ответ, "При десериализации пакета координат возникла ошибка! (Код 3-1)",ОписаниеОшибки(),Истина);
		КонецПопытки;
		
		Попытка
			ЗаписатьКоординаты(Ответ,ДанныеКоординат,ФизЛицо);
		Исключение
			ЗаписатьОшибку(Ответ, "При записи данных координат возникла ошибка! (Код 3-1)",ОписаниеОшибки(),Истина);
		КонецПопытки;
	КонецЕсли;
	
	
	Ответ = ГАЛ_ВебСервисы.ГАЛ_Сериализовать(Ответ);
	  
	Возврат Новый ХранилищеЗначения(Ответ,Новый СжатиеДанных(9));

КонецФункции

Процедура ЗаписатьКоординаты(Ответ,ДанныеКоординат,ФизЛицо)
	

	
	
	//Запись кординат
	Координаты = ДанныеКоординат;
	Если Координаты <> Неопределено Тогда
		ЗаписатьКоординат(Ответ,ФизЛицо,Координаты);
	КонецЕсли;

	
КонецПроцедуры

///Метод для обмена данными
Функция Sunc(Data)
	
	Ответ = Новый Структура;
	Ответ.Вставить("Ошибка", СтруктураОшибки());
	
	Попытка
		ДанныеОбмена = ГАЛ_ВебСервисы.ГАЛ_Десериализовать(Data.Получить());
	Исключение
		ЗаписатьОшибку(Ответ, "При десериализации пакета обмена возникла ошибка! (Код 1-1)",ОписаниеОшибки(),Истина);
	КонецПопытки;
	
	
	Попытка
		ФизЛицо = ПолучитьФизЛицо(Ответ,ДанныеОбмена);
	Исключение
		ЗаписатьОшибку(Ответ, "При проверки физ лица! (Код 2-1)",ОписаниеОшибки(),Истина);
	КонецПопытки;
	
	
	
	Если ФизЛицо <> Неопределено Тогда
		
		
		
		//Попытка
		//	ДанныеКоординат = ГАЛ_ВебСервисы.ГАЛ_Десериализовать(ДанныеОбмена.Координаты);
		//Исключение
		//	ЗаписатьОшибку(Ответ, "При десериализации пакета координат возникла ошибка! (Код 3-1)",ОписаниеОшибки(),Истина);
		//КонецПопытки;
		//
		//Попытка
		//	ЗаписатьКоординаты(Ответ,ДанныеКоординат,ФизЛицо);
		//Исключение
		//	ЗаписатьОшибку(Ответ, "При записи данных координат возникла ошибка! (Код 3-1)",ОписаниеОшибки(),Истина);
		//КонецПопытки;

		
		
		
		Попытка
			ЗаписатьДанныеОбмена(Ответ,ДанныеОбмена.Документы,ДанныеОбмена,ФизЛицо);
		Исключение
			ЗаписатьОшибку(Ответ, "При записи данных возникла ошибка! (Код 3-1)",ОписаниеОшибки(),Истина);
		КонецПопытки;
		
		
		Попытка		
			Ответ.Вставить("ПакетОбмена", СформироватьПакетОбмена(ДанныеОбмена.Дата,ФизЛицо));
		Исключение
			ЗаписатьОшибку(Ответ, "При формировании пакета обмена возникла ошибка! (Код 4-1)",ОписаниеОшибки(),Истина);		
		КонецПопытки;
	КонецЕсли;

	Ответ = ГАЛ_ВебСервисы.ГАЛ_Сериализовать(Ответ);
	  
	Возврат Новый ХранилищеЗначения(Ответ,Новый СжатиеДанных(9));

КонецФункции


Процедура ЗаписатьДанныеОбмена(Ответ,ТЗДокументы,ДанныеОбмена,ФизЛицо)
	

	
	
	Для Каждого ТекСтрока из ТЗДокументы Цикл
		Статус = ТекСтрока.Статус;
		Ссылка =  ТекСтрока.Ссылка;
		Товары =  ТекСтрока.Товары;
		//Если Статус <> Справочники.ГАЛ_СтатусыЗаявокНаДоставку.ПустаяСсылка() Тогда
			
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ГАЛ_ЗаказНаДоставку") и 
				Ссылка <> Документы.ГАЛ_ЗаказНаДоставку.ПустаяСсылка() Тогда
				     ЗаписатьНовыйСтатусДокумента(Ответ,Ссылка,Статус,Товары);	
			КонецЕсли;

		//КонецЕсли;		
	КонецЦикла;
	
	////Запись кординат
	//Координаты = ДанныеОбмена.Координаты;
	//Если Координаты <> Неопределено Тогда
	//	ЗаписатьКоординат(Ответ,Пользователь,Координаты);
	//КонецЕсли;

	
		//Если есть информация о подписчиках записываем ее
	Если СтрДлина(ДанныеОбмена.ИдентификаторПодписчика)>0 и СтрДлина(ДанныеОбмена.ИдентификаторКлиента)>0 Тогда
		  ЗаписатьИдентификаторыДляМУПуш(Ответ,ФизЛицо,ДанныеОбмена.ИдентификаторПодписчика,ДанныеОбмена.ИдентификаторКлиента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатусДокумента(Ответ,ДокументСсылка,Статус,Товары);
	
	Попытка 	
		
		ТекОбъект = ДокументСсылка.ПолучитьОбъект();
		ТекОбъект.СтатусДоставки = Статус;
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			
			Отбор = Новый Структура();
			Отбор.Вставить("КодСтроки",ТекСтрока.КодСтроки);
			Отбор.Вставить("КлючСвязи",ТекСтрока.КлючСвязи);
			НайденныеСтроки = ТекОбъект.Товары.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество()>0 Тогда
				НайденныеСтроки[0].Отменено = Истина;
			КонецЕсли;
			
			
		КонецЦикла;
		
		
		ТекОбъект.Записать();
	Исключение
		  ЗаписатьОшибку(Ответ, "При записи статуса возникла ошибка! (Код 3-2)");
	КонецПопытки;
	
КонецПроцедуры

//Функция ищет ФизЛицо в системе 
Функция ПолучитьФизЛицо(Ответ,ДанныеОбмена)
	
	Если ДанныеОбмена.Курьер = "" или ДанныеОбмена.Курьер = Неопределено Тогда
		
		ЗаписатьОшибку(Ответ, "Имя физ лица пустое! (Код 2-2)");
		Возврат Неопределено;
	КонецЕсли;
	
	//Ищем пльзователя по имени
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГАЛ_АктуальныеФизЛицаМУ.ФизЛицо
	               |ИЗ
	               |	РегистрСведений.ГАЛ_АктуальныеФизЛицаМУ КАК ГАЛ_АктуальныеФизЛицаМУ
	               |ГДЕ
	               |	ГАЛ_АктуальныеФизЛицаМУ.ФизЛицо.Наименование = &Наименование
	               |	И ГАЛ_АктуальныеФизЛицаМУ.КодДоступа = &КодДоступа";
	
	Запрос.УстановитьПараметр("Наименование", ДанныеОбмена.Курьер);
	Запрос.УстановитьПараметр("КодДоступа", ДанныеОбмена.КодДоступа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();	
		ФизЛицо = Выборка.ФизЛицо;
	Иначе
		ЗаписатьОшибку(Ответ, "Ошибка поиска физ лица. (Код 2-3)");
		ФизЛицо = Неопределено;
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции


Функция СформироватьПакетОбмена(НаДату,Водитель)
	
 УстановитьПривилегированныйРежим(Истина);
 
 
 
  /////Реализация товаров и услуг
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГАЛ_МаршрутыСрезПоследних.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	ПРЕДСТАВЛЕНИЕ(ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Контрагент) КАК Контрагент,
	               |	ПРЕДСТАВЛЕНИЕ(ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Валюта) КАК Валюта,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.СуммаДокумента КАК СуммаДокумента,
	               |	ГАЛ_МаршрутыСрезПоследних.ДатаДоставки КАК ДатаДоставки,
	               |	ПРЕДСТАВЛЕНИЕ(ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Склад) КАК Склад,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	               |	ПРЕДСТАВЛЕНИЕ(ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ФормаОплаты) КАК ФормаОплаты,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.АдресДоставки КАК АдресДоставки,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ВремяДоставкиС КАК ВремяДоставкиС,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ВремяДоставкиПо КАК ВремяДоставкиПо,
	               |	ПРЕДСТАВЛЕНИЕ(ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.КонтактноеЛицо) КАК КонтактноеЛицо,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.НомерТелефона КАК НомерТелефона,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.НомерТелефона2 КАК НомерТелефона2,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ТипДоставки КАК ТипДоставки,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.СтатусДоставки КАК СтатусДоставки,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Ссылка КАК Ссылка,
	               |	ГАЛ_МаршрутыСрезПоследних.Широта,
	               |	ГАЛ_МаршрутыСрезПоследних.Долгота,
	               |	ГАЛ_ЗаказНаДоставку.Товары.(
	               |		ПРЕДСТАВЛЕНИЕ(ГАЛ_ЗаказНаДоставку.Товары.Номенклатура) КАК Номенклатура,
	               |		НомерСтроки КАК НомерСтроки,
	               |		ДатаОтгрузки КАК ДатаОтгрузки,
	               |		ПРЕДСТАВЛЕНИЕ(ГАЛ_ЗаказНаДоставку.Товары.Характеристика) КАК Характеристика,
	               |		Количество КАК Количество,
	               |		ПРЕДСТАВЛЕНИЕ(ГАЛ_ЗаказНаДоставку.Товары.ВидЦены) КАК ВидЦены,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма,
	               |		ПРЕДСТАВЛЕНИЕ(ГАЛ_ЗаказНаДоставку.Товары.ПричинаОтмены) КАК ПричинаОтмены,
	               |		КодСтроки КАК КодСтроки,
	               |		Отменено КАК Отменено,
	               |		КлючСвязи КАК КлючСвязи,
	               |		Содержание КАК Содержание,
	               |		ПРЕДСТАВЛЕНИЕ(ГАЛ_ЗаказНаДоставку.Товары.Серия) КАК Серия,
	               |		Вес КАК Вес,
	               |		Объем КАК Объем
	               |	) КАК Товары,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Проведен КАК Проведен,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Номер КАК Номер,
	               |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.Дата КАК Дата,
	               |	ЛОЖЬ КАК ПризнакРедактирования
	               |ИЗ
	               |	РегистрСведений.ГАЛ_Маршруты.СрезПоследних КАК ГАЛ_МаршрутыСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГАЛ_ЗаказНаДоставку КАК ГАЛ_ЗаказНаДоставку
	               |		ПО ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку = ГАЛ_ЗаказНаДоставку.Ссылка
	               |ГДЕ
	               |	ГАЛ_МаршрутыСрезПоследних.СтатусМаршрута = &СтатусМаршрута
	               |	И ГАЛ_МаршрутыСрезПоследних.ДатаДоставки = &ДатаДоставки
	               |	И ГАЛ_МаршрутыСрезПоследних.КурьерЭкспедитор = &КурьерЭкспедитор
	               |	И ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.СтатусДоставки <> &СтатусДоставкиКРаспределению
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядковыйНомер";
				   
				   
				   Запрос.УстановитьПараметр("СтатусМаршрута",Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Отправлено );
				   Запрос.УстановитьПараметр("СтатусДоставкиКРаспределению",Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению );
				   Запрос.УстановитьПараметр("КурьерЭкспедитор",Водитель ); 
				   Запрос.УстановитьПараметр("ДатаДоставки",НачалоДня(НаДату) );
				  
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Выборка.Колонки.Добавить("ВремяСтрокой",Новый ОписаниеТипов("Строка"),"Время строкой");
	Выборка.Колонки.Добавить("НомерСтрокой",Новый ОписаниеТипов("Строка"),"Номер строкой");
	
	
	Для Каждого ТекСтрока из Выборка Цикл
		
		ВремяСтрокой = Строка(Формат(ТекСтрока.ВремяДоставкиС,"ДФ=ЧЧ:мм")) + "-"+ Строка(Формат(ТекСтрока.ВремяДоставкиПо,"ДФ=ЧЧ:мм"));
		НомерСтрокой = "№" + СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекСтрока.Номер,"0","Слева"); 
		
		ТекСтрока.ВремяСтрокой = ВремяСтрокой;
		ТекСтрока.НомерСтрокой = НомерСтрокой;
		
		
		
		//	ТекСтрока.Ссылка = ТекСтрока.СсылкаУдалить;
		
		//	АдресДоставкиЗначенияПолей = ТекСтрока.АдресДоставкиЗначенияПолей;
		//	АдресДоставкиЗначенияПолей = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(АдресДоставкиЗначенияПолей,);		
		//	АдресДоставкиЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(АдресДоставкиЗначенияПолей);
		//    ТекСтрока.АдресДоставкиЗначенияПолей = ГАЛ_ВебСервисы.ГАЛ_Сериализовать(АдресДоставкиЗначенияПолей);
		//
		//	ТекСтрока.Координаты = ""; 
		
		Если ТекСтрока.Широта = 0 Тогда 
			Координаты =  ГАЛ_ApiYandex.YandexGeoCode(ТекСтрока.АдресДоставки);
			Если Координаты <> Неопределено Тогда
				
				ТекСтрока.Широта  = Координаты.lat;
				ТекСтрока.Долгота = Координаты.lng;

			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
//ВызватьИсключение("ну что ошиба");
	
	СтруктураПакета = новый Соответствие;
	Если Выборка.Количество() > 0 Тогда
	СтруктураПакета.Вставить(ТипЗнч(Выборка[0].Ссылка),Выборка);
	КонецЕсли;

 
 
 
 
	
	
	
	
	///ГАЛ_СтатусыЗаявокНаДоставку
	 Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГАЛ_СтатусыЗаявокНаДоставку.Ссылка,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.ПометкаУдаления,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.Код,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.Наименование,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.R,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.G,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.B,
	               |	ГАЛ_СтатусыЗаявокНаДоставку.КонечныйСтатус
	               |ИЗ
	               |	Справочник.ГАЛ_СтатусыЗаявокНаДоставку КАК ГАЛ_СтатусыЗаявокНаДоставку
	               |ГДЕ
	               |	ГАЛ_СтатусыЗаявокНаДоставку.ПометкаУдаления = ЛОЖЬ";
	
	//Запрос.УстановитьПараметр("Пользователь",Пользователь );
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
		
	Если Выборка.Количество() > 0 Тогда
	СтруктураПакета.Вставить(ТипЗнч(Выборка[0].Ссылка),Выборка);
	КонецЕсли;

	
	
	
	
	 СтруктураПакета.Вставить(ТипЗнч(Константы.ГАЛ_МинимальноеРасстояниеОбновленияКоординат),Константы.ГАЛ_МинимальноеРасстояниеОбновленияКоординат.Получить());
	 СтруктураПакета.Вставить(ТипЗнч(Константы.ГАЛ_МинимальныйПериодВремениОбновленияКоординат),Константы.ГАЛ_МинимальныйПериодВремениОбновленияКоординат.Получить());
	 СтруктураПакета.Вставить(ТипЗнч(Константы.ГАЛ_ЧастотаОбменаКоординатами),Константы.ГАЛ_ЧастотаОбменаКоординатами.Получить());
	
	
	Возврат (СтруктураПакета);
	
	
КонецФункции


//Записываем ИД в регистр для ПУШ
Процедура  ЗаписатьИдентификаторыДляМУПуш(Ответ,ФизЛицо,ИдентификаторПодписчика,ИдентификаторКлиента)
	
	//Парсим ИдентификаторПодписчика
	
	deviceID = "";
	databaseID = "";
	
	
	Попытка
		ИД = ГАЛ_ВебСервисы.ГАЛ_Десериализовать(ИдентификаторПодписчика);
		deviceID = ИдентификаторПодписчика;
		databaseID = ИД.ИдентификаторИнформационнойБазы;
	Исключение
		
		ЗаписатьОшибку(Ответ, "При записи ИД возникла ошибка! (Код 4-1)"); 
	КонецПопытки;
	
	
	Если СтрДлина(deviceID) > 0 Тогда
		
		НаборЗаписей = РегистрыСведений.ГАЛ_ИдентификаторыДляМУПуш.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.ФизЛицо.Установить(ФизЛицо); 
		//НаборЗаписей.Отбор.ИдентификаторКлиента.Установить(ИдентификаторКлиента); 
		НаборЗаписей.Отбор.ИДБазыДанных.Установить(databaseID);
		
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.ФизЛицо = ФизЛицо; 
		НоваяЗапись.ИдентификаторКлиента = ИдентификаторКлиента; 
		НоваяЗапись.ИДБазыДанных = databaseID; 
		НоваяЗапись.ИДПодписчика = deviceID;
	Попытка
			
			НаборЗаписей.Записать();
		Исключение
			
			ЗаписатьОшибку(Ответ, "При записи ИД возникла ошибка! (Код 4-2)"); 
		КонецПопытки;	
	КонецЕсли;
			
КонецПроцедуры

Функция СтруктураОшибки()
	Структура = Новый Структура;
	Структура.Вставить("ЕстьОшибка", Ложь);
	Структура.Вставить("ТекстОшибки","");
	Возврат Структура;	
КонецФункции

Процедура ЗаписатьОшибку(Ответ, Текст, ОписаниеОшибки = "", ВерхняяОшибка = Ложь)
	//Нас интересуют ошибки более глубокого уровня.
	//Т.е. если у нас есть ошибка в дочерней функции, которая вызывает ошибку в родительской,
	//То нас интересует - что случилось в дочерней.
	Если ВерхняяОшибка И НЕ Ответ.Ошибка.ЕстьОшибка Тогда
		Ответ.Ошибка.ЕстьОшибка	= Истина;
		Ответ.Ошибка.ТекстОшибки = Текст + Символы.ПС + "При сообщении ошибки администратору - назовите код ошибки!";
		ЗаписьЖурналаРегистрации("Регистрация мобильного устройства",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	КонецЕсли;
	
	Если Ответ.Ошибка.ЕстьОшибка Тогда Возврат КонецЕсли;
	Ответ.Ошибка.ЕстьОшибка	= Истина;
	Ответ.Ошибка.ТекстОшибки = Текст + Символы.ПС + "При сообщении ошибки администратору - назовите код ошибки!";
	ЗаписьЖурналаРегистрации("Регистрация мобильного устройства", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	
	Если НЕ ВерхняяОшибка Тогда		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
КонецПроцедуры

	
//Запись координат мастера
Процедура  ЗаписатьКоординат(Ответ,ФизЛицо,Координаты)
		
		Попытка		
			Для Каждого ТекСтрока из Координаты Цикл
				НаборЗаписей = РегистрыСведений.ГАЛ_ИсторияПеремещенияМУ.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизЛицо.Установить(ФизЛицо); 
				НаборЗаписей.Отбор.Период.Установить(ТекСтрока.Период);
				
				
				НовЗапись = НаборЗаписей.Добавить(); 
				НовЗапись.ФизЛицо = ФизЛицо; 
				НовЗапись.Период = ТекСтрока.Период; 
				НовЗапись.Широта = ТекСтрока.Широта; 
				НовЗапись.Долгота  = ТекСтрока.Долгота; 
				//НовЗапись.Документ = ТекСтрока.Документ;
				
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
			
			
		Исключение
			
			ЗаписатьОшибку(Ответ, "При записи Координат возникла ошибка! (Код 4-7)"); 
		КонецПопытки;	
		
		
	КонецПроцедуры
