
Процедура ДатаМобайл_Автообработка() Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ДатаМобайл_ДокументыТСД.Ссылка КАК ДМСсылка,
	                    |	ДатаМобайл_ДокументыТСД.Шаблон.ПроводитьРоботом
	                    |ИЗ
	                    |	Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
	                    |ГДЕ
	                    |	ДатаМобайл_ДокументыТСД.ДатаЗавершенияСбора <> ДАТАВРЕМЯ(1, 1, 1)
	                    |	И ДатаМобайл_ДокументыТСД.Шаблон.ОбрабатыватьРоботом
	                    |	И ДатаМобайл_ДокументыТСД.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)");
	Рез=Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		Об=Рез.ДМссылка.ПолучитьОбъект();
		Об.ДатаПриемкиОператором=ТекущаяДата();
		Об.Записать();
		СтрокаОшибок="";
		Док=Обработки.ДатаМобайл_АРМДиспетчера.ВнестиДокументВБазу(Об,СтрокаОшибок);	
	КонецЦикла;
	
	
	ЗапросНужныхШаблонов=Новый Запрос("ВЫБРАТЬ
	                                  |	ДатаМобайл_ШаблоныДокументов.УсловиеВыгрузки,
	                                  |	ДатаМобайл_ШаблоныДокументов.ВидДокумента,
	                                  |	ДатаМобайл_ШаблоныДокументов.Ссылка
	                                  |ИЗ
	                                  |	Справочник.ДатаМобайл_ШаблоныДокументов КАК ДатаМобайл_ШаблоныДокументов
	                                  |ГДЕ
	                                  |	ДатаМобайл_ШаблоныДокументов.ВыгружатьРоботом");
	Шаблоны=ЗапросНужныхШаблонов.Выполнить().Выгрузить();
	Для Каждого Шаблон из Шаблоны цикл
		ТекстЗапросаПоДокументам="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	Документ1С.Ссылка КАК ИсходныйДокумент,
		                         |	Документ1С.Дата КАК Дата,
		                         |	Документ1С.Номер КАК Номер,
		                         |	Документ1С.Комментарий КАК Комментарий
		                         |ИЗ
		                         |	Документ.ПриобретениеТоваровУслуг КАК Документ1С
		                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДатаМобайл_ДокументыТСД КАК ДатаМобайл_ДокументыТСД
		                         |		ПО Документ1С.Ссылка = ДатаМобайл_ДокументыТСД.ИсходныйДокумент
		                         |ГДЕ
		                         |	НЕ Документ1С.ПометкаУдаления
		                         |	И (&УсловиеВключения)
		                         |	И ДатаМобайл_ДокументыТСД.Ссылка ЕСТЬ NULL ";
		ТекстЗапросаПоДокументам=СтрЗаменить(ТекстЗапросаПоДокументам,"ПриобретениеТоваровУслуг",Шаблон.ВидДокумента);
		ТекстЗапросаПоДокументам=СтрЗаменить(ТекстЗапросаПоДокументам,"&УсловиеВключения",?(СокрЛП(Шаблон.УсловиеВыгрузки)="","1=1",Шаблон.УсловиеВыгрузки));
		ЗапросДокументов=Новый Запрос(ТекстЗапросаПоДокументам);
		ЗапросДокументов.УстановитьПараметр("Шаблон",Шаблон.Ссылка);
		Для Каждого СтрПараметра из Шаблон.Ссылка.ПараметрыУсловияВыгрузки цикл
			ЗапросДокументов.УстановитьПараметр(СтрПараметра.ИмяПараметра,СтрПараметра.ЗначениеПараметра);
		КонецЦикла;	
		СписокДоков=ЗапросДокументов.Выполнить().Выбрать();
		Пока СписокДоков.Следующий() цикл
			ДокТСД=Справочники.ДатаМобайл_ДокументыТСД.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ДокТСД,СписокДоков);
			ДокТСД.Шаблон=Шаблон.Ссылка;
			ДокТСД.Записать();
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

Процедура ДатаМобайлСозданиеНоменклатурыОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Источник,Источник.ВидНоменклатуры);
		Если НЕ ЗначениеЗаполнено(Источник.ЕдиницаИзмерения) Тогда
			Попытка
			Если НЕ ДанныеЗаполнения.ЭтоГруппа Тогда
			Источник.ЕдиницаИзмерения = ДанныеЗаполнения.ЕдиницаИзмерения;
		КонецЕсли;
	Исключение
		КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

Процедура ОчиститьЗаписиГрупповогоДокумента(ДокументТСД) Экспорт
	
	СтруктураОтбора = Новый Структура("ДокументТСД", ДокументТСД);
	
	ВыборкаЗаписейСтрок = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.Выбрать(СтруктураОтбора);
	Пока ВыборкаЗаписейСтрок.Следующий() Цикл
		ВыборкаЗаписейСтрок.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОчиститьЗаписиТСДГрупповогоДокумента(ДокументТСД, ТСД = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура("ДокументТСД", ДокументТСД);

	ВыборкаЗаписейТСД = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.Выбрать(СтруктураОтбора);
	Пока ВыборкаЗаписейТСД.Следующий() Цикл
		Если ТСД = Неопределено Тогда
		ВыборкаЗаписейТСД.ПолучитьМенеджерЗаписи().Удалить();
		Иначе
			Если ВыборкаЗаписейТСД.ПолучитьМенеджерЗаписи().ТСД = ТСД Тогда
				ВыборкаЗаписейТСД.ПолучитьМенеджерЗаписи().Удалить();
			КонецЕсли;            
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЗаписиГрупповогоДокумента(СтруктураСтроки) Экспорт
		
	//ЗАПИСЬ ДАННЫХ
	Запись = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СтруктураСтроки);
	Запись.Записать(Истина);	
	
	
	//ЗАПИСЬ ДАННЫХ ДЛЯ ОБМЕНА С ДРУГИМИ ТСД
	ЗапросУзлов = Новый Запрос;
	ЗапросУзлов.УстановитьПараметр("Узел", СтруктураСтроки.ТСД);
	ЗапросУзлов.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ДатаМобайл_СписокТСД.Ссылка КАК Узел
	                    |ИЗ
	                    |	ПланОбмена.ДатаМобайл_СписокТСД КАК ДатаМобайл_СписокТСД
	                    |ГДЕ
	                    |	ДатаМобайл_СписокТСД.Ссылка <> &Узел
	                    |	И ДатаМобайл_СписокТСД.Код <> """""; 
	ВыборкаУзлов = ЗапросУзлов.Выполнить().Выбрать();	 
	Пока ВыборкаУзлов.Следующий() Цикл
		Запись = РегистрыСведений.ДатаМобайл_СтрокиГрупповыхДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураСтроки);
		Запись.ТСД = ВыборкаУзлов.Узел;
		Запись.ДляОбмена = Истина;
		Запись.Записать(Истина);	 
	КонецЦикла;	 
	
КонецПроцедуры

Функция ПолучитьДатуГрупповогоДокумента(КодУзла, ДокументТСД, ДатаПолучения) Экспорт
	
	
	Запрос = Новый ЗАпрос;
	
	Запрос.УстановитьПараметр("КодУзла", КодУзла);
	Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ДатаНачалаСбора,
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ДатаЗавершенияСбора
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ДатаМобайл_ТСДГрупповыхДокументов
	               |ГДЕ
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ТСД.Код = &КодУзла
	               |	И ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД = &ДокументТСД";
				   
	РезультатЗапроса = ЗАпрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Попытка 
			Возврат ВыборкаЗапроса[ДатаПолучения];	
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

Процедура СоздатьНачальнуюЗаписьТСДГрупповыхДокументов(КодУзла, ДокументТСД, Пользователь) Экспорт
	
	МенеджерЗаписиТСД = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписиТСД.ТСД = ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду(КодУзла);
	МенеджерЗаписиТСД.ДокументТСД = ДокументТСД;
	МенеджерЗаписиТСД.ДатаНачалаСбора = ТекущаяДата();
	МенеджерЗаписиТСД.Пользователь = Пользователь;
	МенеджерЗаписиТСД.Записать(Истина);
	
КонецПроцедуры

Функция ПроверитьЗавершенностьГрупповогоДокумента(ДокументТСД) Экспорт

	Запрос = Новый ЗАпрос;
	Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ДатаЗавершенияСбора
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ДатаМобайл_ТСДГрупповыхДокументов
	               |ГДЕ
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД = &ДокументТСД
	               |	И ДатаМобайл_ТСДГрупповыхДокументов.ДатаЗавершенияСбора = ДАТАВРЕМЯ(1, 1, 1)";
				   
				   Если Запрос.Выполнить().Пустой() Тогда
					   Возврат Истина;
				   Иначе 
					   Возврат Ложь;
				   КонецЕсли;	
				   
КонецФункции
			   
Процедура ОбновитьЗаписьТСДГрупповогоДокумента(КодУзла, ДокументТСД, ДатаЗавершенияСбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТСД", ПланыОбмена.ДатаМобайл_СписокТСД.НайтиПоКоду(КодУЗла));
	Запрос.УстановитьПараметр("ДокументТСД", ДокументТСД);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ТСД,
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД,
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ДатаНачалаСбора,
	               |	ДатаМобайл_ТСДГрупповыхДокументов.Пользователь
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_ТСДГрупповыхДокументов КАК ДатаМобайл_ТСДГрупповыхДокументов
	               |ГДЕ
	               |	ДатаМобайл_ТСДГрупповыхДокументов.ТСД = &ТСД
	               |	И ДатаМобайл_ТСДГрупповыхДокументов.ДокументТСД = &ДокументТСД";
				   
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДатаМобайл_ТСДГрупповыхДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.ДатаЗавершенияСбора = ДатаЗавершенияСбора;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;		

КонецПроцедуры
	   
Функция ПолучитьЯчейкуПоШтрихкоду(Штрихкод10) Экспорт
	
	Попытка
	Штрихкод16 = ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Штрихкод10);
	
	Если СтрДлина(Штрихкод16) < 32 Тогда
			
			Пока СтрДлина(Штрихкод16) < 32 Цикл
				Штрихкод16 = Строка("0")+Штрихкод16;
			КонецЦикла;
			
	КонецЕсли;

	ГУИД = Сред(Штрихкод16, 1,  8)
	+ "-" + Сред(Штрихкод16, 9,  4)
	+ "-" + Сред(Штрихкод16, 13, 4)
	+ "-" + Сред(Штрихкод16, 17, 4)
	+ "-" + Сред(Штрихкод16, 21, 12);
	Исключение
		
		Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
	Конецпопытки;
	
Попытка	
	Возврат Справочники.СкладскиеЯчейки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
Исключение
	Возврат Справочники.СкладскиеЯчейки.ПустаяСсылка();
КонецпопыткИ;

	
КонецФункции

Функция ПреобразоватьДесятичноеЧислоВШестнадцатиричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";    
	Если ДесятичноеЧисло <> "" Тогда
		Пока Число(ДесятичноеЧисло) > 0 цикл
			ОстатокОтДеления = ДесятичноеЧисло % 16;
			ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
			Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПеренестиДанныеПоДокументуВСправочник(Объект,СтрокаОшибок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДок", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	*
	               |ИЗ
	               |	РегистрСведений.ДатаМобайл_СтрокиГрупповыхДокументов КАК ДатаМобайл_СтрокиГрупповыхДокументов
	               |ГДЕ
	               |	ДатаМобайл_СтрокиГрупповыхДокументов.ДокументТСД = &ССылкаНаДок
				   |	И НЕ ДатаМобайл_СтрокиГрупповыхДокументов.ДляОбмена";
				   
				   
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
			Если Рез.ИмяТаблицы = "Select" тогда
				НоваяСтрока = Объект.СобранныеДанныеПодбор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Рез);			
			Иначе
				НоваяСтрока = Объект.СобранныеДанныеПриемка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Рез);	
			КонецЕсли;	
	КонецЦикла;
	
	Попытка
		 Объект.Записать();
	 Исключение
		 СтрокаОшибок="Ошибка записи групповых данных: "+ОписаниеОшибки();
		 Возврат Ложь;
	КонецПопытки;
	
	ОчиститьЗаписиГрупповогоДокумента(Объект.Ссылка);
	Возврат Истина;
	
КонецФункции
Функция ЧистаяСтрока(Знач ГрязнаяСтрока) Экспорт
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"'","-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ВК," ");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.ПС,"-");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,Символы.НПП," ");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,";","");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"""","''");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"%","");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"&","");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,"<","[");
	ГрязнаяСтрока=СтрЗаменить(ГрязнаяСтрока,">","]");
	возврат Грязнаястрока;
КонецФункции	

Функция ПолучитьСерию(ШтрихкодСерии) Экспорт
		Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		ЗапросСерий = Новый Запрос;
		ЗапросСерий.Текст =  "ВЫБРАТЬ
		                           |	СерииНоменклатуры.Ссылка
		                           |ИЗ
		                           |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		                           |ГДЕ
		                           |	СерииНоменклатуры.Номер = &ШК";
		ЗапросСерий.УстановитьПараметр("ШК", ШтрихкодСерии);
		Выборка = ЗапросСерий.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл	
			Серия = Выборка.Ссылка;			
		КонецЦикла;
	Возврат Серия;
КонецФункции

Процедура ЗапуститьПроверкуМарок() Экспорт
	
	ДатаМобайл_МодульПроверкиМарок.ПроверитьМаркиРегл();
	
КонецПроцедуры


//ЕГАИС
Функция ПолучитьНоменклатуруПоЕГАИС(НоменклатураЕГАИС) Экспорт    	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &НоменклатураЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
	Запрос.УстановитьПараметр("НоменклатураЕГАИС",НоменклатураЕГАИС);
	ТаблицаСоответствий =  Запрос.Выполнить().Выгрузить();
	Если ТаблицаСоответствий.Количество() > 0 Тогда
		Возврат ТаблицаСоответствий[0].Номенклатура;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕГАИСПоНоменклатуре(Номенклатура) Экспорт    	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		
	ТаблицаСоответствий =  Запрос.Выполнить().Выгрузить();
	Если ТаблицаСоответствий.Количество() > 0 Тогда
		Возврат ТаблицаСоответствий[0].АлкогольнаяПродукция;
	Иначе
		Возврат Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Функция ПолучитьМаркиВходящейТТН_ЕГАИС(ДокументВыгрузки) Экспорт
	
ТЗМарок = Новый ТаблицаЗначений;
ТЗМарок.Колонки.Добавить("АлкогольнаяПродукция");
ТЗМарок.Колонки.Добавить("Марка");
ТЗМарок.Колонки.Добавить("Короб");
ТЗМарок.Колонки.Добавить("Палета");
ТЗМарок.Колонки.Добавить("Номенклатура");
ТЗМарок.Колонки.Добавить("Характеристика");
ТЗМарок.Колонки.Добавить("Серия");
ТЗМарок.Колонки.Добавить("Справка2");
ТЗМарок.Колонки.Добавить("ТипУпаковки");


	
ДанныеПроверяемогоДокумента = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ДокументВыгрузки);

//ПЕРВЫЙ УРОВЕНЬ
ТекущаяПалета = "";
ТекущийКороб = "";
Для каждого СтрокаПоДаннымДокументаПервыйУровень Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл
	Если СтрДлина(СтрокаПоДаннымДокументаПервыйУровень.ЗначениеШтрихкода)=68 или СтрДлина(СтрокаПоДаннымДокументаПервыйУровень.ЗначениеШтрихкода)=150 тогда
   		СтрокаМарки = ТЗМарок.Добавить();
    	ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаПервыйУровень);
    	СтрокаМарки.Марка = СтрокаПоДаннымДокументаПервыйУровень.ЗначениеШтрихкода;
    	СтрокаМарки.Короб = ТекущийКороб;
		СтрокаМарки.Палета = ТекущаяПалета;
	Иначе
		//ВТОРОЙ УРОВЕНЬ
		ТекущаяПалета = "";
		ТекущийКороб = СтрокаПоДаннымДокументаПервыйУровень.ЗначениеШтрихкода;
		Для каждого СтрокаПоДаннымДокументаВторойУровень Из СтрокаПоДаннымДокументаПервыйУровень.Строки Цикл
			Если СтрДлина(СтрокаПоДаннымДокументаВторойУровень.ЗначениеШтрихкода)=68 или СтрДлина(СтрокаПоДаннымДокументаВторойУровень.ЗначениеШтрихкода)=150 тогда
				СтрокаМарки = ТЗМарок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаВторойУровень);
				СтрокаМарки.Марка = СтрокаПоДаннымДокументаВторойУровень.ЗначениеШтрихкода;
				СтрокаМарки.Короб = ТекущийКороб;
				СтрокаМарки.Палета = ТекущаяПалета;
			Иначе
				//ТРЕТИЙ УРОВЕНЬ
				ТекущаяПалета = ТекущийКороб;
				ТекущийКороб = СтрокаПоДаннымДокументаВторойУровень.ЗначениеШтрихкода;	
				Для каждого СтрокаПоДаннымДокументаТретийУровень Из СтрокаПоДаннымДокументаВторойУровень.Строки Цикл
					Если СтрДлина(СтрокаПоДаннымДокументаТретийУровень.ЗначениеШтрихкода)=68 или СтрДлина(СтрокаПоДаннымДокументаТретийУровень.ЗначениеШтрихкода)=150 тогда
						СтрокаМарки = ТЗМарок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаМарки,СтрокаПоДаннымДокументаТретийУровень);
						СтрокаМарки.Марка = СтрокаПоДаннымДокументаТретийУровень.ЗначениеШтрихкода;
						СтрокаМарки.Короб = ТекущийКороб;
						СтрокаМарки.Палета = ТекущаяПалета;
					Иначе
						//ДАЛЕЕ ВЛОЖЕННОСТЬ НЕ УЧИТЫВАЕМ
						Продолжить;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецЦикла;


Возврат ТЗМарок;

КонецФункции

Функция СформироватьСписокНепроверяемыхМарокЕГАИС() Экспорт
	
	СписокМарок = Новый СписокЗначений();                                                                     
	
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("261")); //261 Сидр
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("262")); //262 Пуаре
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("263")); //263 Медовуха                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("500")); //500 Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("510")); //510 Пиво с содержанием объемной доли этилового спирта свыше 8,6%                                                                               
	СписокМарок.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду("520")); //520 Напитки, изготавливаемые на основе пива     
	
	Возврат СписокМарок;
	
КонецФункции	

//SSCC
Функция ПолучитьНовыйUPL() Экспорт
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = "ВЫБРАТЬ   
	| ЕстьNULL(Максимум(Коды.ВнутреннийНомер),0) Как Номер
	| ИЗ
	| Документ.ДатаМобайл_УпаковочныйЛист Как Коды
	|ГДЕ
	| Коды.ВнутреннийНомер<> """"
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		НомерUPL = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НомерUPL = Выборка.Номер;
	КонецЕсли; 	
	
	НомерUPL = НомерUPL + 1 ;
	Если НомерUPL < 1 Тогда
	     Возврат Неопределено;
	КонецЕсли;
		
	Возврат НомерUPL;
КонецФункции

Функция МаксимальныйSSCC() Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ   
	| ЕстьNULL(Максимум(Коды.IDSSCC),0) Как IDSSCC
	|ИЗ
	| Документ.ДатаМобайл_УпаковочныйЛист Как Коды
	|ГДЕ
	| Коды.IDSSCC<> """"
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат  0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДелениеНаОснову = (Выборка.IDSSCC + 1) / 10000000;
		Если (Цел(ДелениеНаОснову) = ДелениеНаОснову) И Цел(ДелениеНаОснову) > 0  Тогда  //избежать нулевых SSCC 
			Возврат Выборка.IDSSCC + 1; 
		Иначе
			Возврат Выборка.IDSSCC;
		КонецЕсли; 
	КонецЕсли; 	

КонецФункции

Функция КонтрольноеЧислоSSCC(СтрБазаКода) Экспорт
	
	Сумма = 0;
	
	Для НомПоз = 1 По СтрДлина(СтрБазаКода) Цикл
		
		Симв = Сред(СтрБазаКода, НомПоз, 1); 
		
		ЧислСимв = 0;
		Попытка
			ЧислСимв = Число(Симв);
		Исключение
			//Сообщить("Не верная база КЧ SSCC: "+СтрБазаКода);
			Возврат Неопределено;
		КонецПопытки; 
		
		Если НомПоз / 2  = Цел(НомПоз / 2) Тогда // чет
		     Сумма = Сумма + ЧислСимв;
		Иначе  // нечет
		     Сумма = Сумма + ЧислСимв * 3;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Цел10  =  Цел(Сумма / 10)*10;
	Если Цел10 <  Сумма  Тогда
		БольшееКратноеДесяти = 	Цел10 + 10;
	Иначе
		БольшееКратноеДесяти = Цел10;		
	КонецЕсли; 
	КЧ = БольшееКратноеДесяти - Сумма;

	Если  (КЧ > 9) Или (КЧ < 0)  Тогда
		//Сообщить("Не верно подсчитано КЧ "+Строка(КЧ)+" ("+Строка(БольшееКратноеДесяти)+"-"+Строка(Сумма)+") "+"в SSCC: "+СтрБазаКода+"  ");
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат СокрЛП(КЧ);
	
КонецФункции
 
Функция ПолучитьНовыйSSCC(Префикс) Экспорт
	
	НовыйНомер = МаксимальныйSSCC() + 1 ;
	Если НовыйНомер < 1 Тогда
	     Возврат Неопределено;
	КонецЕсли;
	Попытка
	    ЧислПрефикс =  Число(Префикс);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	СтрПрефикс = Формат(ЧислПрефикс,"ЧЦ=9; ЧДЦ=; ЧВН=; ЧГ=0");
	СтрНовыйНомер =  Формат(НовыйНомер,"ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
	ЦифраРасш = Лев(СтрНовыйНомер,1);
	Остальное = Прав(СтрНовыйНомер,7);
	СтрБазаКода = ЦифраРасш + СтрПрефикс + Остальное;
	КС = КонтрольноеЧислоSSCC(СтрБазаКода);
	Если КС = Неопределено Тогда
	     Возврат Неопределено;
	КонецЕсли; 
	
	Результат = Новый Структура("SSCC,IDSSCC");
	Результат.SSCC = "00" + СтрБазаКода + КС;
	Результат.IDSSCC = НовыйНомер;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКодSSCC(Префикс, УпаковочныйЛист, ТЗ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Префикс) Тогда
		Возврат Неопределено;
	КонецЕсли; 
		
	
	НачатьТранзакцию();
	НовыйSSCC =  ПолучитьНовыйSSCC(Префикс);
	
	Если НовыйSSCC  = Неопределено Тогда	
		ОтменитьТранзакцию();
		Возврат Неопределено;	
	КонецЕсли; 
		
	НоваяЗапись = УпаковочныйЛист.ПолучитьОбъект();
	НоваяЗапись.IDSSCC = НовыйSSCC.IDSSCC;
	НоваяЗапись.ВнешнийНомер = НовыйSSCC.SSCC;
	
	Для каждого CтрокаCборки из ТЗ цикл
		Если CтрокаCборки.Количество = 0 тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяЗапись.Товары.Добавить();        
		НоваяСтрока.Штрихкод = CтрокаCборки.Штрихкод;
		НоваяСтрока.Номенклатура = CтрокаCборки.Номенклатура;
		НоваяСтрока.Количество  = CтрокаCборки.Количество;
		НоваяСтрока.ЕГАИС_Номенклатура = CтрокаCборки.НоменклатураЕГАИС;
		НоваяСтрока.Марка = CтрокаCборки.ЕгаисПолныйКод;
		НоваяСтрока.Короб = CтрокаCборки.Короб;
	КонецЦикла;	

		
	Попытка
		НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки; 
		  	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйSSCC.SSCC;
	
КонецФункции 

Функция ПолучитьКодGS1(Штрихкод,УпаковочныйЛист, ТЗ) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод)  Тогда
		Возврат Неопределено;
	КонецЕсли; 

	НачатьТранзакцию();
	Если СтрДлина(Штрихкод)=13 тогда 
		Barcode =  "01"+"0"+Штрихкод+"UPL"+ Формат(УпаковочныйЛист.ВнутреннийНомер,"ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
	ИначеЕсли СтрДлина(Штрихкод)=14 тогда 
		Штрихкод = Сред(Штрихкод,2,12);
		Штрихкод = Штрихкод + КонтрольныйСимволEAN(Штрихкод,13);
		Barcode =  "01"+"0"+Штрихкод+"UPL"+ Формат(УпаковочныйЛист.ВнутреннийНомер,"ЧЦ=8; ЧДЦ=; ЧВН=; ЧГ=0");
	Иначе
		ОтменитьТранзакцию();
		Возврат Неопределено;	
	КонецЕсли;

	
	НоваяЗапись = УпаковочныйЛист.ПолучитьОбъект();
	НоваяЗапись.ВнешнийНомер = Barcode;
	
	Для каждого CтрокаCборки из ТЗ цикл
		Если CтрокаCборки.Количество = 0 тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяЗапись.Товары.Добавить();        
		НоваяСтрока.Штрихкод = CтрокаCборки.Штрихкод;
		НоваяСтрока.Номенклатура = CтрокаCборки.Номенклатура;
		НоваяСтрока.Количество  = CтрокаCборки.Количество;
		НоваяСтрока.ЕГАИС_Номенклатура = CтрокаCборки.НоменклатураЕГАИС;
		НоваяСтрока.Марка = CтрокаCборки.ЕгаисПолныйКод;
		НоваяСтрока.Короб = CтрокаCборки.Короб;
	КонецЦикла;	
		
	Попытка
		НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки; 
	
	Возврат Barcode;
	
КонецФункции

Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

//Фото
Функция ПолучитьДвоичныеДанныеКартинки(ГУИДТовара) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НМ=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(ГУИДТовара,4,36)));

	Выборка = ПолучитьПрисоединенныеФайлы(НМ);
	Если Выборка.Следующий() Тогда	
		ДанныеКартинки = ПолучитьИзвременногоХранилища(ДанныеФайла(Выборка.Файл, Новый УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла);	
		Возврат ДанныеКартинки;	
	КонецЕсли;

	ПустаяКартинка = Новый Картинка;
	Возврат ПустаяКартинка.ПолучитьДвоичныеДанные();

КонецФункции
Функция ПолучитьПрисоединенныеФайлы(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст ="ВЫБРАТЬ 
	              |	Номенклатура.ФайлКартинки КАК ФайлКартинки
	              |ПОМЕСТИТЬ ВременнаяТаблицаОсновныеИзображения
	              |ИЗ
	              |	Справочник.Номенклатура КАК Номенклатура
	              |ГДЕ
	              |	Номенклатура.Ссылка = &Номенклатура
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	ФайлКартинки
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Файлы.ВладелецФайла КАК Номенклатура,
	              |	Файлы.Ссылка КАК Файл,
	              |	Файлы.Наименование КАК Наименование,
	              |	Файлы.Описание КАК Описание,
	              |	Файлы.Том КАК Том,
	              |	Файлы.Расширение КАК Расширение,
	              |	Файлы.ПутьКФайлу КАК ПутьКФайлу
	              |ИЗ
	              |	Справочник.НоменклатураПрисоединенныеФайлы КАК Файлы
	              |ГДЕ
	              |	Файлы.ВладелецФайла = &Номенклатура
	              |	И Файлы.Ссылка В
	              |			(ВЫБРАТЬ
	              |				ВременнаяТаблицаОсновныеИзображения.ФайлКартинки
	              |			ИЗ
	              |				ВременнаяТаблицаОсновныеИзображения КАК ВременнаяТаблицаОсновныеИзображения)
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Номенклатура";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции
Функция ДанныеФайла(Знач ПрисоединенныйФайл,
                    Знач ИдентификаторФормы = Неопределено,
                    Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
                    Знач ДляРедактирования = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
		
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ОбщегоНазначенияКлиентСервер.Проверить(ФайлОбъект <> Неопределено, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден присоединенный файл ""%1"" (%2)'"),
			Строка(ПрисоединенныйФайл), ПрисоединенныйФайл.Метаданные()));
	
	Если ДляРедактирования И Не ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
		ФайлОбъект.Заблокировать();
		РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(ФайлОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		Если ПрисоединенныйФайл.ХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл.ТекущаяВерсия);
		Иначе
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
		КонецЕсли;
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",                       ПрисоединенныйФайл);
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	//Результат.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	Результат.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	Результат.Вставить("Наименование",                 ФайлОбъект.Наименование);
	Результат.Вставить("Расширение",                   ФайлОбъект.Расширение);
	Результат.Вставить("Размер",                       ФайлОбъект.Размер);
	Результат.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	Результат.Вставить("ПодписанЭП",                   ФайлОбъект.ПодписанЭП);
	Результат.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	Результат.Вставить("ХранитьВерсии",                ФайлОбъект.ХранитьВерсии);
	Результат.Вставить("ПометкаУдаления",              ФайлОбъект.ПометкаУдаления);
	Результат.Вставить("ДатаЗаема",                    ФайлОбъект.ДатаЗаема);
	Результат.Вставить("Владелец",                     ФайлОбъект.ВладелецФайла);
	Результат.Вставить("АвторТекущейВерсии",           ФайлОбъект.Изменил);
	Результат.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
		
	Возврат Результат;
	
КонецФункции
Функция ДобавитьФайл(ПараметрыФайла,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт

	Автор =              ПараметрыФайла.Автор;
	ВладелецФайлов =     ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения  =  ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	ГруппаФайлов = Неопределено;
	Если ПараметрыФайла.Свойство("ГруппаФайлов") 
		И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
		И Не РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда
		ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
	КонецЕсли;
	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;

	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
			НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = РаботаСФайламиСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	Если ГруппаФайлов <> Неопределено Тогда
		ПрисоединенныйФайл.Родитель = ГруппаФайлов;
	КонецЕсли;
	
	
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		НачатьТранзакцию();
		Попытка
			СвояТранзакцияОткрыта = Истина;
			РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
				ИзвлеченныйТекст = РаботаСФайламиСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				
			ИначеЕсли НЕ РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				// Тексты извлекаются сразу, а не в фоновом задании.
				СтатусИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(
					ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
			КонецЕсли;
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			
			ПрисоединенныйФайл.Автор = Автор;
			
			//ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
				|%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	Иначе
		Попытка
			// Добавление в один из томов (где есть свободное место).
			СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
				ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
			ПрисоединенныйФайл.Том = СведенияОФайле.Том;
			ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
				ИзвлеченныйТекст = РаботаСФайламиСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				
			ИначеЕсли НЕ РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				// Тексты извлекаются сразу, а не в фоновом задании.
				СтатусИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(
					ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
			КонецЕсли;
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ПрисоединенныйФайл.Автор = Автор;
			ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
				|%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции
