



// СЛУЖЕБНЫЕ

Функция СМ_ПолучитьЗначениеРеквизитаОбъекта(Объект, ВозможныеИменаРеквизита, ЭтоТабЧасть=Ложь, ЗначениеПоУмолчанию=Неопределено) Экспорт 
	Значение = Неопределено;
	
	ТипСпискаИмен = ТипЗнч(ВозможныеИменаРеквизита);
	
	Если ТипСпискаИмен=Тип("Строка") Тогда
		//Мас = Новый Структура(ВозможныеИменаРеквизита);
		Мас = СМ_РазложитьСтрокуВМассивПодстрок
		(ВозможныеИменаРеквизита, ",");
	ИначеЕсли (ТипСпискаИмен=Тип("Структура")) или (ТипСпискаИмен=Тип("Соответствие")) Тогда
		Мас = Новый Массив;
		Для каждого Эл Из ВозможныеИменаРеквизита Цикл
			Мас.Добавить(Эл.Ключ);
		КонецЦикла;
	Иначе
		Мас = ВозможныеИменаРеквизита;
	КонецЕсли;
	
	Для каждого Эл Из Мас Цикл
		Попытка
			Значение = Объект[Эл];
			Прервать;
		Исключение
			Значение = Неопределено;
		КонецПопытки;
	КонецЦикла;
	
	Если Значение=Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ЭтоТабЧасть=Истина Тогда
		Возврат Значение.Выгрузить();
	КонецЕсли;
	
	Если Значение=Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция СМ_УстановитьЗначениеСтруктуры(пСтруктура, Имя, Зн) Экспорт
	Попытка
		пСтруктура[Имя] = Зн;
	Исключение
	КонецПопытки;

	Попытка
		пСтруктура.Вставить(Имя, Зн);
	Исключение
	КонецПопытки;
КонецФункции

Функция СМ_ПолучитьЗначениеСтруктуры(пСтруктура, Индекс, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Попытка
		Возврат пСтруктура[Индекс];
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

Функция СМ_РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

Функция СМ_ФайлСуществует(ИмяФайла, РазмерФайла=0) Экспорт
	ф = Новый Файл(ИмяФайла);
	Попытка
		РазмерФайла = ф.Размер();
	Исключение
		РазмерФайла = 0;
	КонецПопытки;
	Возврат ф.Существует();
КонецФункции

// Формирует структуру параметров подключения к сайту по URL.
//
// Параметры:
//	АдресСайта - Строка, URL
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция СМ_РазобратьАдресСайта(URL) Экспорт
	Рез = Новый Структура("ЕстьОшибка,ОписаниеОшибки", Ложь, "");
	
	АдресСайта = СокрЛП(URL);

	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			Рез.Вставить("ЕстьОшибка", Истина); 
			Рез.Вставить("ОписаниеОшибки", ОписаниеОшибки()); 
			Возврат Рез;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	Рез.Вставить("Сервер", Сервер); 
	Рез.Вставить("Порт", Порт);
	Рез.Вставить("АдресСтраницы", АдресСкрипта);
	Рез.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Рез;
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_ПолучитьРасширениеФайла(ИмяФайла, РасширениеЕслиНеОпределено="") Экспорт
	Расширение = "";
	
	Мас = СМ_РазложитьСтрокуВМассивПодстрок(ИмяФайла, ".");
	Если Мас.Количество()>1 Тогда
		Расширение = СМ_ПолучитьЗначениеСтруктуры(Мас, Мас.Количество()-1, "");
		Поз = Найти(Расширение, "&");
		Если Поз>0 Тогда
			Расширение = Лев(Расширение, Поз-1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Расширение) Тогда
		Расширение = РасширениеЕслиНеОпределено;
	КонецЕсли;
	
	Возврат Расширение;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_СоздатьОписаниеТипаПоЗначению(Зн) Экспорт 
	Рез = Неопределено;
	
	Попытка
		МасТипов = Новый Массив();
		МасТипов.Добавить(ТипЗнч(Зн));
		Рез = Новый ОписаниеТипов(МасТипов);
		
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	
	Возврат Рез;
КонецФункции


//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_СкопироватьЗначенияИзСтруктурыВСтруктуру(Источник, Приемник) Экспорт 
	
	Для каждого КЗ Из Источник Цикл
		Приемник.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СМ_СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0", СтрокаВерсии2);
	Версия1 = СМ_РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 3 Тогда
		ВызватьИсключение "Неправильный формат параметра СтрокаВерсии1: " + СтрокаВерсии1;
	КонецЕсли;
	Версия2 = СМ_РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 3 Тогда
		ВызватьИсключение "Неправильный формат параметра СтрокаВерсии2: " + СтрокаВерсии2;
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 2 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Процедура СМ_ВнешниеОбработки_ОткрытьФормуОбработки(ОбработкаСсылка, ПараметрыФормы = Неопределено, ФормаВладелец = Неопределено) Экспорт
	
    ИмяОбработки = APPLIX_RU_СМ_ОбщийМодульСервер.СМ_Справочник_ВнешниеОбработки_Подключить(ОбработкаСсылка);
	
	ОткрытьФорму("ВнешняяОбработка."+ИмяОбработки+".Форма", ПараметрыФормы, ФормаВладелец);//, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры


// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура СМ_ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()


//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_СлучайноеЧисло(Длина, ВернутьКакСтроку = Ложь) Экспорт 
	Рез = "";
	
	ТД = ТекущаяДата();
	
	НачальноеЧисло = Год(ТД) + Месяц(ТД) + День(ТД) + Час(ТД) + Минута(ТД) + Секунда(ТД);
	МинимальноеЧисло = 0;
	МаксимальноеЧисло = 10;
	Для Н = 1 По Длина Цикл
		МаксимальноеЧисло = МаксимальноеЧисло * 10;	
	КонецЦикла;
	
	Ген = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
	Рез = Ген.СлучайноеЧисло(МинимальноеЧисло, МаксимальноеЧисло-1);
	
	Если ВернутьКакСтроку=Истина Тогда
		Рез = Прав("00000000000000000000" + Формат(Рез, "ЧГ=0"), Длина);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции




// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ XML

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_XML_ЗаписатьТекстовыйУзел(Запись, ИмяУзла, Зн) Экспорт
	Запись.ЗаписатьНачалоЭлемента(ИмяУзла);
	Запись.ЗаписатьТекст(Зн);
	Запись.ЗаписатьКонецЭлемента();
КонецФункции

