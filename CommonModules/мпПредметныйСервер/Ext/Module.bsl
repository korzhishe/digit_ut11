
Функция ПолучитьФизлицоПоПаролю(Пароль) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка
	               |ИЗ
	               |	Справочник.Партнеры КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.ПарольМП = &ПарольМП
	               |	И НЕ ФизическиеЛица.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПарольМП", Пароль);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого ТекСтр Из ТЗ Цикл
		Возврат ТекСтр.Ссылка;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

//Функция ПолучитьПользователяПоФизлицу(Физлицо) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	Пользователи.Ссылка
//	               |ИЗ
//	               |	Справочник.Пользователи КАК Пользователи
//	               |ГДЕ
//	               |	Пользователи.ФизЛицо = &ФизЛицо";
//	Запрос.УстановитьПараметр("Физлицо", Физлицо);
//	ТЗ = Запрос.Выполнить().Выгрузить();
//	Для каждого ТекСтр Из ТЗ Цикл
//		Возврат ТекСтр.Ссылка;
//	КонецЦикла;	
//	
//	Возврат Неопределено;
//	
//КонецФункции

Функция ПолучитьФизлицоДляМП(Пароль) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);	
	Если Агент = Неопределено Тогда
		СтрокаДанные = мпОбщегоНазначения.ДанныеПереводимВСтроку("2");
		Возврат СтрокаДанные;
	Иначе
		//не позволяем дважды привязываться расзных устр
		//Если Агент.УстройствоПривязаноМП Тогда
		//	СтрокаДанные = мпОбщегоНазначения.ДанныеПереводимВСтроку("1");
		//	Возврат СтрокаДанные;
		//КонецЕсли;	
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ФИО",   Агент.Наименование);
		СтруктураДанных.Вставить("Релиз", Агент.РелизМП);
		
		//Если НЕ ЗначениеЗаполнено(Агент.ТипПользователяМП) Тогда
		//	СтруктураДанных.Вставить("Тип", 2);
		//Иначе
		//	СтруктураДанных.Вставить("Тип", Перечисления.мпТипПользователя.Индекс(Агент.ТипПользователяМП));
		//КонецЕсли;	
		
		СтрокаДанные = мпОбщегоНазначения.ДанныеПереводимВСтроку(СтруктураДанных);
		Возврат СтрокаДанные;
	КонецЕсли;
	
КонецФункции

//Процедура ПривязатьУстройствоКФизлицу(Пароль) Экспорт
//	
//	 Агент = ПолучитьФизлицоПоПаролю(Пароль);
//	 Если Агент <> Неопределено Тогда
//		Об = Агент.ПолучитьОбъект();
//		Об.УстройствоПривязаноМП = ИСТИНА;
//		Об.Записать();
//	 КонецЕсли;
//	 
//КонецПроцедуры	

//Процедура СнятьПривязкуУстройстваКФизлицу(Пароль) Экспорт
//	
//	 Агент = ПолучитьФизлицоПоПаролю(Пароль);
//	 Если Агент <> Неопределено Тогда
//		Об = Агент.ПолучитьОбъект();
//		Об.УстройствоПривязаноМП = ЛОЖЬ;
//		Об.Записать();
//	 КонецЕсли;
//	 
// КонецПроцедуры
// 


Функция ПолучитьСоглашениеПоКлиенту(Клиент) Экспорт
	
	Запрос = Новый Запрос;
	
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	СоглашенияСКлиентами.Ссылка
	//               |ИЗ
	//               |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	//               |ГДЕ
	//               |	СоглашенияСКлиентами.Партнер = &Партнер
	//               |	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	СоглашенияСКлиентами.ДатаНачалаДействия УБЫВ";
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоглашенияСКлиентами.Ссылка
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	               |ГДЕ
	               |	СоглашенияСКлиентами.Партнер = &Партнер
	               |	И СоглашенияСКлиентами.АктуальноеМП
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СоглашенияСКлиентами.ДатаНачалаДействия УБЫВ";
	Запрос.УстановитьПараметр("Партнер", Клиент);			   
	ТЗСерии = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтр Из ТЗСерии Цикл
		Возврат ТекСтр.Ссылка;
	КонецЦикла;	

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСписокАкссесуаров() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатурыГруппа)";
	Запрос.УстановитьПараметр("ВидНоменклатурыГруппа", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("1.Аксессуары для электроники", ИСТИНА));
	 
	ТЗСерии = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗСерии;
	
КонецФункции

Функция ПолучитьСписокПартнеровМП() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Партнеры.Ссылка
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.ПарольМП <> """"";
	 
	ТЗСерии = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗСерии;
	
КонецФункции

Функция ПолучитьДанныеПоСправочникам(Пароль, ДатаДень, ДатаМесяц, ДатаГод) Экспорт
	
	ДатаВыборки = Дата(число(ДатаГод), число(ДатаМесяц), число(ДатаДень));
	ПустаяДата = ДатаГод = "1" И ДатаМесяц = "1" И ДатаДень = "1";
	
	//////////////////////////////////////////////////////////////////
	//НЗ = РегистрыСведений.ЛогиМП.СоздатьНаборЗаписей();
	//НЗ.Отбор.Текст.Установить(ПустаяДата);
	//НС = НЗ.Добавить();
	//НС.Текст = ПустаяДата;
	//НЗ.Записать();

	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	
	Соглашение = ПолучитьСоглашениеПоКлиенту(Агент);
	Если Соглашение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныТоваров.Цена,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остатки,
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Товар,
	               |	ТоварыНаСкладахОстатки.Характеристика,
	               |	ШтрихкодыТоваров.Штрихкод,
	               |	ТоварыНаСкладахОстатки.Номенклатура.Наименование КАК ТоварИмя,
	               |	ТоварыНаСкладахОстатки.Характеристика.Наименование КАК СвойствоИмя
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |			ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	               |			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	               |		ИЗ
	               |			РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |		ГДЕ
	               |			ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены) КАК ЦеныТоваров
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныТоваров.Номенклатура
	               |			И ТоварыНаСкладахОстатки.Характеристика = ЦеныТоваров.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	               |			ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	               |			ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	               |		ИЗ
	               |			РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |		ГДЕ
	               |			ШтрихкодыНоменклатуры.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК ШтрихкодыТоваров
	               |		ПО ТоварыНаСкладахОстатки.Номенклатура = ШтрихкодыТоваров.Номенклатура
	               |			И ТоварыНаСкладахОстатки.Характеристика = ШтрихкодыТоваров.Характеристика
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток > 0";	
	Запрос.УстановитьПараметр("ВидЦены", Соглашение.ВидЦен);
	Запрос.УстановитьПараметр("Склад",   Соглашение.Склад);
	Запрос.УстановитьПараметр("Пользователь", Агент);
	Запрос.УстановитьПараметр("НаДату",  КонецДня(ТекущаяДата()));

	ТЗСерии = Запрос.Выполнить().Выгрузить();
		
	СтруктураСправочников = Новый Структура;
	
	
	КС = Новый КвалификаторыСтроки(350);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));//Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	
	ТЗСерии.Колонки.Добавить("ТоварID", ОписаниеТиповС);
	ТЗСерии.Колонки.Добавить("СвойствоID", ОписаниеТиповС);
	
		Для каждого ТекСтрСправочник Из ТЗСерии Цикл			
			ID = ТекСтрСправочник.Товар.УникальныйИдентификатор();			
			ТекСтрСправочник.ТоварID = ID;
			
			Если ЗначениеЗаполнено(ТекСтрСправочник.Характеристика) Тогда
				ID = ТекСтрСправочник.Характеристика.УникальныйИдентификатор();			
				ТекСтрСправочник.СвойствоID = ID;
			КонецЕсли;
		КонецЦикла;
	
	
	СтруктураСправочников = Новый Структура;
	//СтруктураСправочников.Вставить("ТЗСправочники", ТЗСправочники);
	СтруктураСправочников.Вставить("ТЗТоваров", 		ТЗСерии);
	
	СтрокаДанные = мпОбщегоНазначения.ДанныеПереводимВСтроку(СтруктураСправочников);
	
	Возврат СтрокаДанные;
	//
КонецФункции


Функция СохранитьДанныеСМобильногоПриложения(Пароль, ДанныеСтрока) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат "1";
	КонецЕсли;
	
	Соглашение = ПолучитьСоглашениеПоКлиенту(Агент);
	
	//
	//Пользователь = ПолучитьПользователяПоФизлицу(Агент);
	//Если Пользователь = Неопределено Тогда
	//	Возврат "2";
	//КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	Данные = мпОбщегоНазначения.ИзСтрокиВДанные(ДанныеСтрока);
	ТЗПродажа  	   = Данные.ТЗПродажа;
	
	
	Для каждого ТекСтр ИЗ ТЗПродажа Цикл
		
		//проверим продаи
		//МассивТоваров = ТекСтр.МассивТоваров;
		//Для каждого ТекСтрТовары Из МассивТоваров Цикл
		//		
		//	ИД = Новый УникальныйИдентификатор(ТекСтрТовары.ТоварID);
		//	Товар = Справочники.Номенклатура.ПолучитьСсылку(ИД);		
		//				
		//	ИД = Новый УникальныйИдентификатор(ТекСтрТовары.СвойствоID);
		//	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИД);
		// 
		//КонецЦикла;	
			
		
			Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			Док.Заполнить(Соглашение);
			
		Док.Дата  		  = ТекСтр.Дата;
		Док.Релиз  		  = ТекСтр.Релиз;
		Док.Комментарий   = ТекСтр.Комментарий;
		//Док.Статус	= Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;				
		Док.Товары.Очистить();
		МассивТоваров = ТекСтр.МассивТоваров;
		Для каждого ТекСтрТовары Из МассивТоваров Цикл
					
			НоваяСтрока = Док.Товары.Добавить();
			
	
			ИД = Новый УникальныйИдентификатор(ТекСтрТовары.ТоварID);
			Ссылка = Справочники.Номенклатура.ПолучитьСсылку(ИД);		
			НоваяСтрока.Номенклатура       = Ссылка;
			
			ИД = Новый УникальныйИдентификатор(ТекСтрТовары.СвойствоID);
			Ссылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИД);
		
			НоваяСтрока.Характеристика     = Ссылка;
	
			НоваяСтрока.Количество         = ТекСтрТовары.Количество;
			НоваяСтрока.КоличествоУпаковок = ТекСтрТовары.Количество;
			
			Если Док.Релиз Тогда
				НоваяСтрока.ЦенаКлиента    = ТекСтрТовары.Цена;
			КонецЕсли;
			
			//НоваяСтрока.Цена               = ТекСтрТовары.Цена;
			//НоваяСтрока.Сумма              = ТекСтрТовары.Сумма;
			НоваяСтрока.Склад              = Док.Склад;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
			СтруктураЗаполненияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Док);
			
			СтруктураДействий = Новый Структура;
			//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Док.НалогообложениеНДС);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
			
			//НоваяСтрока.Цена               = ТекСтрТовары.Цена;
			//НоваяСтрока.Сумма              = ТекСтрТовары.Цена * ТекСтрТовары.Количество;
			
			КэшированныеЗначения = Неопределено;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			
		КонецЦикла;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
		
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Док.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Док.Дата,
			Док.Валюта,
			Док.Соглашение.ВидЦен,
			"Цена, ВидЦены"
		),
		СтруктураДействий);
				
		Если НЕ ТекСтр.ЭтоВозврат Тогда
			Док.Записать(РежимЗаписиДокумента.Проведение);
			//Док.Записать();
		Иначе
			ДокВозврат = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
			ДокВозврат.Дата = ТекущаяДата();

			//СтруктураДок = Новый Структура;
			//СтруктураДок.Вставить("Партнер", Док.Партнер);
			//ДокВозврат.Заполнить(Док);
			ЗаполнитьЗначенияСвойств(ДокВозврат, Док);
			ДокВозврат.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
			Для Каждого ТекСтр Из Док.Товары Цикл
				НоваяСтрока = ДокВозврат.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
			КонецЦикла;	
			//ДокВозврат.Товары.Загрузить(Док.Товары);
			//ДокВозврат.Записать();
			ДокВозврат.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;	
	
		
Возврат "";

КонецФункции	

Функция ПолучитьФото(Пароль, КодСерии) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СерияТовара = Справочники.СерииНоменклатуры.НайтиПоКоду(КодСерии);
	
	Если ЗначениеЗаполнено(СерияТовара.ОсновноеИзображение) Тогда
		
		ХранилищеФото = СерияТовара.ОсновноеИзображение.Хранилище;
	
		СтруктураФото = Новый Структура;
	
		СтруктураФото.Вставить("ИмяФото", 	   СерияТовара.ОсновноеИзображение.ИмяФайла);
		СтруктураФото.Вставить("Фото", 	       ХранилищеФото);
	Иначе
	
		СтруктураФото = "";
	КонецЕсли;
	
	Возврат мпОбщегоНазначения.ДанныеПереводимВСтроку(СтруктураФото);
		 
КонецФункции	

Функция СохранитьФото(Пароль, КодСерии, Данные) Экспорт
	
	СерияТовара = Справочники.СерииНоменклатуры.НайтиПоКоду(КодСерии);
	Если ЗначениеЗаполнено(СерияТовара.ОсновноеИзображение) Тогда
		НовыйОбъект = СерияТовара.ОсновноеИзображение.ПолучитьОбъект();
	Иначе
		НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		НовыйОбъект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
		НовыйОбъект.Объект	  = СерияТовара;
		
		НовыйОбъект.ИмяФайла = "foto from mobile.jpg";	
	КонецЕсли;	
	
	Фото = мпОбщегоНазначения.ИзСтрокиВДанные(Данные);
	
	ФотоКартинка = Новый Картинка(Фото, Ложь);
	НовыйОбъект.Хранилище = Новый ХранилищеЗначения(ФотоКартинка, Новый СжатиеДанных);
	
	НовыйОбъект.Записать();
	
	Об = СерияТовара.ПолучитьОбъект();
	Об.ОсновноеИзображение = НовыйОбъект.Ссылка;
	Об.Записать();
	
	Возврат "";
	
КонецФункции


///////////////////////////////////РАБОТА С ПАКЕТАМИ////////////////////////////////

Функция ПолучитьПоследнийПакет(Пароль) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетыДанныхМобильное.НомерПакета КАК НомерПакета
	               |ИЗ
	               |	РегистрСведений.ПакетыДанныхМобильное КАК ПакетыДанныхМобильное
	               |ГДЕ
	               |    ПакетыДанныхМобильное.Агент = &Агент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерПакета УБЫВ";
	Запрос.УстановитьПараметр("Агент", Агент);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
//Текстов = Новый ТекстовыйДокумент;
//Текстов.ДобавитьСтроку(строка(ТЗ.Количество()));
Если ТЗ.Количество() = 0 Тогда
//Текстов.ДобавитьСтроку("0");	
//Текстов.Записать("c:\1\123.txt");
		Возврат 0;
	Иначе
		
//Текстов.ДобавитьСтроку("строка " + строка(ТЗ[0].НомерПакета));		
//Текстов.Записать("c:\1\123.txt");
Возврат ТЗ[0].НомерПакета;
	КонецЕсли;	
	
КонецФункции

Функция ДобавитьПакетПоУзлу(Пароль, Пакет, НомерПакета) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	НаборЗаписейРегистра = РегистрыСведений.ПакетыДанныхМобильное.СоздатьНаборЗаписей();
	
	НаборЗаписейРегистра.Отбор.Агент.Установить(Агент); 
	НаборЗаписейРегистра.Отбор.НомерПакета.Установить(НомерПакета);
	
	НоваяЗапись = НаборЗаписейРегистра.Добавить();
	НоваяЗапись.Агент       = Агент;
	НоваяЗапись.НомерПакета = НомерПакета;
	НоваяЗапись.Пакет 		= Пакет;
	
	Попытка
		НаборЗаписейРегистра.Записать();	
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	Возврат ИСТИНА;
	
КонецФункции

Функция СобратьПакетыПоУзлу(Пароль) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПакетыДанныхМобильное.Пакет,
	               |	ПакетыДанныхМобильное.НомерПакета
	               |ИЗ
	               |	РегистрСведений.ПакетыДанныхМобильное КАК ПакетыДанныхМобильное
	               |ГДЕ
	               |	ПакетыДанныхМобильное.Агент = &Агент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПакетыДанныхМобильное.НомерПакета";
	Запрос.УстановитьПараметр("Агент",  Агент);
	
	ТЗПакетов = Запрос.Выполнить().Выгрузить();
	
	//Текстов = Новый ТекстовыйДокумент;

	СтрокаПакетов = "";
	Для каждого ТекСтр Из ТЗПакетов Цикл
		СтрокаПакетов = СтрокаПакетов + ТекСтр.Пакет;
		
	//Текстов.ДобавитьСтроку(ТекСтр.НомерПакета);
		
	КонецЦикла;	
	
	Если СтрокаПакетов = "" Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;	
	          
//СохранитьДанныеСМобильногоПриложения(Пароль, СтрокаПакетов);		
	УдалитьПакетПоУзлу(Пароль);
	
	Возврат ИСТИНА;
	
КонецФункции

Функция УдалитьПакетПоУзлу(Пароль) Экспорт
	
	Агент = ПолучитьФизлицоПоПаролю(Пароль);
	Если Агент = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПакетыДанныхМобильное.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Агент.Установить(Агент); 
	
	НаборЗаписей.Записать(); 

	Возврат "";
	
КонецФункции