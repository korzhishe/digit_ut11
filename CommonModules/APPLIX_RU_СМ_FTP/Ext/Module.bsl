// FTP

// ОбъектСсылка = объект на основании которого создается структура
Функция FTP_ПолучитьСтруктуруПараметровДляСоединения(ОбъектСсылка) Экспорт
	
	СтруктураПараметровСайта = Новый Структура;
	СтруктураПараметровСайта.Вставить("Сервер"		, APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTPСервер", Ложь, ""));
	СтруктураПараметровСайта.Вставить("Пользователь", APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTPПользователь", Ложь, ""));
	СтруктураПараметровСайта.Вставить("Пароль"		, APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTPПароль", Ложь, ""));
	СтруктураПараметровСайта.Вставить("Порт"		, APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTPПорт", Ложь, Неопределено));
	СтруктураПараметровСайта.Вставить("Пассивное"	, APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTPПассивноеСоединение", Ложь, Ложь));
	СтруктураПараметровСайта.Вставить("Защищенное"	, APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTPЗащищенноеСоединение", Ложь, Ложь));
	СтруктураПараметровСайта.Вставить("Каталог"		, APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеРеквизитаОбъекта(ОбъектСсылка, "FTP_Каталог", Ложь, ""));
	
	
	Возврат СтруктураПараметровСайта;
	
КонецФункции


Функция FTP_УстановитьСоединение(СтруктураПараметровСайта) Экспорт
	
	Соединение = НеОпределено;
	
	Порт = ?(ЗначениеЗаполнено(СтруктураПараметровСайта.Порт), СтруктураПараметровСайта.Порт, Неопределено); 
	Сервер = СтруктураПараметровСайта.Сервер;
	Пользователь = СтруктураПараметровСайта.Пользователь;
	Пароль = СтруктураПараметровСайта.Пароль;
	
	ssl = Неопределено;
	ЗащищенноеСоединение = APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеСтруктуры(СтруктураПараметровСайта, "ЗащищенноеСоединение", Ложь);
	Если ЗащищенноеСоединение=Истина Тогда
		Попытка
			ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		Исключение
			ssl = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Соединение = Новый FTPСоединение(Сервер, Порт, Пользователь, Пароль, , , , ssl);
		//Сообщить("соединение установлено");
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить соединение с сервером " + СтруктураПараметровСайта.Сервер + ":" + Строка(СтруктураПараметровСайта.Порт) + ".
			|Проверьте правильность адреса сервера, порт, имя пользователя и пароль.");
			
		Соединение = Неопределено;
	КонецПопытки;
					
	Возврат Соединение;
	
КонецФункции


Функция FTP_СоздатьКаталог(Соединение, Каталог) Экспорт
	Если FTP_ПроверитьНаличиеКаталогаНаСервере(Соединение, Каталог) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Соединение.СоздатьКаталог(Каталог); 
	Возврат FTP_ПроверитьНаличиеКаталогаНаСервере(Соединение, Каталог);
КонецФункции


// функция проверяет наличие катаога на FTP сервере
Функция FTP_ПроверитьНаличиеКаталогаНаСервере(Соединение, Знач ИмяКаталогаСервера, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина, СтруктураОбменаДанными = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяКаталогаСервера) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//надо сначала проверить что сам каталог доступа есть
	Попытка
		
		МассивНайденныхКаталогов = Соединение.НайтиФайлы(ИмяКаталогаСервера, "");
		
	Исключение
		
		// ошибка при подключении к ftp
        Сообщить("Ошибка при соединении с FTP : " + ИмяКаталогаСервера + " ! " + ОписаниеОшибки());
        Возврат Ложь;
		
	КонецПопытки;
	
	Для Каждого НайденныйКаталог Из МассивНайденныхКаталогов Цикл
		
		// если не каталог - то дальше ищем
		Если НЕ НайденныйКаталог.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		// большие и маленькие буквы считаются различными
		Если НайденныйКаталог.Имя <> ИмяКаталогаСервера Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЦикла;
	
	// если не найден каталог для обмена
	//Сообщить("Не найден FTP каталог обмена информацией: " + ИмяКаталогаСервера);
		
	Возврат Ложь;
	
КонецФункции


Функция FTP_УдалитьФайлыВКаталоге(Соединение, Каталог, Маска="*.*") Экспорт
	
	Соединение.Удалить(Каталог, Маска);
	
КонецФункции



Функция FTP_ОтправитьФайлыНаСервер(СтруктураПараметровСайта, МассивФайлов) Экспорт
	//СтруктураПараметровСайта = FTP_ПолучитьСтруктуруПараметровДляСоединения();
	Соединение = FTP_УстановитьСоединение(СтруктураПараметровСайта);
	
	КаталогОбмена = APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьЗначениеСтруктуры(СтруктураПараметровСайта, "Каталог", "");
	
	//Если Не FTP_ПроверитьНаличиеКаталогаНаСервере(Соединение, КаталогОбмена) Тогда 
	//	Возврат Ложь;
	//КонецЕсли;
	Если Не FTP_СоздатьКаталог(Соединение, КаталогОбмена) Тогда 
		Сообщить("Не удалось создать каталог на FTP сервере: "+КаталогОбмена);
		Возврат Ложь;
	КонецЕсли;
	
	//Если Прав(КаталогОбмена, 1)<>"/" Тогда
	//	КаталогОбмена = КаталогОбмена + "/";
	//КонецЕсли;
	
	Соединение.УстановитьТекущийКаталог(КаталогОбмена);
	
	Для каждого ЭлИмяФайла Из МассивФайлов Цикл
		ИмяФайла = APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ПолучитьИмяФайлаИзПолногоПути(ЭлИмяФайла);
		ИмяФайла = APPLIX_RU_СМ_ОбщийМодульКлиентСервер.СМ_ЗаменитьСимволыВСтроке(ИмяФайла, "(),;:№[]{}", "");
		ИмяФайлаFTPЗаписи = ИмяФайла; //КаталогОбмена + ИмяФайла;
		
		Соединение.Записать(ЭлИмяФайла, ИмяФайлаFTPЗаписи);
	КонецЦикла;
	
КонецФункции


