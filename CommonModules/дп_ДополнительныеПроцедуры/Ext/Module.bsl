Процедура ЗаполнитьКомментарийОрдераИзРаспоряжений(Источник) Экспорт
	
	Если Источник = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		
		Для каждого СтрокаРаспоряжение Из Источник.ТоварыПоРаспоряжениям Цикл
			
			Если ЗначениеЗаполнено(СтрокаРаспоряжение.Распоряжение) Тогда
				Если СтрокаРаспоряжение.Распоряжение = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					
					Если ЗначениеЗаполнено(СтрокаРаспоряжение.Распоряжение.Комментарий) Тогда
						
						Источник.Комментарий = СтрокаРаспоряжение.Распоряжение.Комментарий;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьКомментарийОрдераИзРаспоряжений()

#Область СозданиеЗаказовНаПеремещение
//Кожемякин А.Г. agkozhemyakin@gmail.com {
//10.03.2016 19:34:29
Процедура СоздатьЗаказНаПремещение(Источник) Экспорт
	ДокЗаказНаПеремещение 	= ПолучитьЗаказНаПеремещение(Источник);
	Если ДокЗаказНаПеремещение.Ссылка.Пустая() Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создаем.2");
		ТаблицаНовыхПозиций 	= ПолучитьНовыеПозиции(Источник);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("кол новых."+ТаблицаНовыхПозиций.Количество());
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("кол товары."+ДокЗаказНаПеремещение.Товары.Количество());
		Если ТаблицаНовыхПозиций.Количество() 
			//и Не ДокЗаказНаПеремещение.Товары.Количество() = ТаблицаНовыхПозиций.Количество() 
			Тогда
			ЗаполнитьЗаказНаПеремещение(ДокЗаказНаПеремещение, ТаблицаНовыхПозиций);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

Функция ПолучитьЗаказНаПеремещение(Источник)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ИсточникПоиск = Источник.Распоряжение;
	Иначе
		ИсточникПоиск = Источник;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Источник) КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ЗаказНаПеремещение";
	
	Запрос.УстановитьПараметр("Источник", ИсточникПоиск);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе
		НовыйЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		
		НовыйЗаказНаПеремещение.Заполнить(Новый Структура("Основание,Склад",ИсточникПоиск,ИсточникПоиск.Склад));
		Возврат НовыйЗаказНаПеремещение;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	

Функция ПолучитьНовыеПозиции(Источник)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика
	|ПОМЕСТИТЬ НоменклатураПоступления
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Источник
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	СУММА(ТоварыНаСкладахОбороты.ВНаличииПриход) КАК ВНаличииОборот
	|ПОМЕСТИТЬ ОборотПоТоварамПпоступления
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			,
	|			&ГраницаОкончания,
	|			,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					НомПоступления.Номенклатура,
	|					НомПоступления.Характеристика
	|				ИЗ
	|					НоменклатураПоступления КАК НомПоступления)) КАК ТоварыНаСкладахОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоступления.Номенклатура,
	|	НоменклатураПоступления.Характеристика
	|ИЗ
	|	НоменклатураПоступления КАК НоменклатураПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотПоТоварамПпоступления КАК ОборотПоТоварамПпоступления
	|		ПО НоменклатураПоступления.Номенклатура = ОборотПоТоварамПпоступления.Номенклатура
	|			И НоменклатураПоступления.Характеристика = ОборотПоТоварамПпоступления.Характеристика
	|ГДЕ
	|	ЕСТЬNULL(ОборотПоТоварамПпоступления.ВНаличииОборот, 0) = 0";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ГраницаОкончания", Новый Граница(Источник.Дата, ВидГраницы.Исключая));
	
	Возврат Запрос.Выполнить().Выгрузить();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	

Процедура ЗаполнитьЗаказНаПеремещение(ДокЗаказНаПеремещение, ТаблицаНовыхПозиций)
	МассивСтрокиНаУдаление = Новый Массив;
	Для Каждого СтрокаТовара из ДокЗаказНаПеремещение.Товары Цикл	
		НайденныеСтроки = ТаблицаНовыхПозиций.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",СтрокаТовара.Номенклатура, СтрокаТовара.Характеристика));	
		Если НайденныеСтроки.Количество() = 0 Тогда
			МассивСтрокиНаУдаление.Добавить(СтрокаТовара);
		Иначе
			СтрокаТовара.Количество = 1;
			СтрокаТовара.КоличествоУпаковок = 1;
			СтрокаТовара.НачалоОтгрузки = ТекущаяДата();
			СтрокаТовара.ОкончаниеПоступления = ТекущаяДата();
			СтрокаТовара.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Строка из МассивСтрокиНаУдаление Цикл
		ДокЗаказНаПеремещение.Товары.Удалить(Строка);
	КонецЦикла;	
	
	ДокЗаказНаПеремещение.СкладПолучатель = Справочники.Склады.СкладФотографа;
	ДокЗаказНаПеремещение.Дата			  = ТекущаяДата();	
	
	Попытка
		
		ДокЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Запись);
		ДокЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В поступлении новые позиции! Создан заказ на перемещение фотографу."+Символы.ПС+""+ДокЗаказНаПеремещение.Ссылка, ДокЗаказНаПеремещение.Ссылка);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть ошибки при создании заказа на перемещение для фотосессии: "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры	

Функция СоздаватьЗаказНаПремещение(Источник) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дпСоздаватьЗаказыНаПремещения.флСоздаватьЗаказНаПеремещение
	|ИЗ
	|	РегистрСведений.дпСоздаватьЗаказыНаПремещения КАК дпСоздаватьЗаказыНаПремещения
	|ГДЕ
	|	дпСоздаватьЗаказыНаПремещения.Основание = &Поступление";
	
	//Запрос.УстановитьПараметр("Поступление", Источник.УникальныйИдентификатор());
	Запрос.УстановитьПараметр("Поступление", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.флСоздаватьЗаказНаПеремещение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	
//}Кожемякин А.Г.
#КонецОбласти

#Область СозданиеЗаданийНаОснованииОрдеров
//Кожемякин А.Г. agkozhemyakin@gmail.com {
//14.04.2016 14:54:45
Процедура СоздатьЗадание(Источник) Экспорт
	
	Если ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") 
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") 
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		НовоеЗадание = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
		НовоеЗадание.Дата = ТекущаяДата();
		НовоеЗадание.Предмет = Источник.Распоряжение;
		НовоеЗадание.Исполнитель = ПолучитьИсполнтеляЗадачи(Источник);
		НовоеЗадание.Наименование = НСтр("ru = 'Осуществлен приход на склад по операции: " + Источник.СкладскаяОперация + "'");
		НовоеЗадание.Содержание = НСтр("ru = 'На складе " + Источник.Склад + " приняты товары по распоряжению " + Источник.Распоряжение + ". Оформите или перезаполните финансовые документы!'");
		НовоеЗадание.СрокИсполнения = ТекущаяДата();
		НовоеЗадание.Автор = ПолучитьАвтораЗадания();
		НовоеЗадание.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
		НовоеЗадание.Записать();
		НовоеЗадание.Старт();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Сформировано задание на оформите или перезаполние финансовых документов'"), 
		УровеньЖурналаРегистрации.Информация,
		НовоеЗадание.Метаданные(),
		НовоеЗадание.Ссылка,
		НСтр("ru = 'Сформировано задание на оформите или перезаполние финансовых документов'"),
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецЕсли;
КонецПроцедуры	

Функция ПолучитьИсполнтеляЗадачи(Источник)
	Если ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Возврат Источник.Распоряжение.Ответственный;
		
	ИначеЕсли ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") 
		или ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Возврат Источник.Распоряжение.Менеджер;
		
	КонецЕсли;	
КонецФункции	

Функция ПолучитьАвтораЗадания()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсполнителиЗадач.Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Запрос.УстановитьПараметр("РольИсполнителя", Справочники.РолиИсполнителей.СогласующийЛогистическиеУсловияПродаж);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Исполнитель;
	Иначе
		Возврат Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	

Функция СоздаватьЗадание(Источник) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дпСоздаватьЗадания.флСоздаватьЗадание
	|ИЗ
	|	РегистрСведений.дпСоздаватьЗадания КАК дпСоздаватьЗадания
	|ГДЕ
	|	дпСоздаватьЗадания.Основание = &Основание";
	
	//Запрос.УстановитьПараметр("Поступление", Источник.УникальныйИдентификатор());
	Запрос.УстановитьПараметр("Основание", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.флСоздаватьЗадание;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции
//}Кожемякин А.Г.
#КонецОбласти

//Кожемякин А.Г. agkozhemyakin@gmail.com {
//25.04.2016 17:56:06
Процедура дпДопПроверкаЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если Не РольДоступна("ПолныеПрава")
			и Не РольДоступна("ПроведениеДокументовВозвратаБезРеализаций")Тогда
			ПроверяемыеРеквизиты.Добавить("ВозвращаемыеТовары.ДокументРеализации");
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		Если Не РольДоступна("ПолныеПрава")
			и Не РольДоступна("ПроведениеДокументовВозвратаБезРеализаций")Тогда
			ПроверяемыеРеквизиты.Добавить("Товары.ДокументРеализации");
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		Если Источник.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			и Не Источник.ЭтоГруппа Тогда
			
			ПроверяемыеРеквизиты.Добавить("СкладскаяГруппа");
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//}Кожемякин А.Г.

#Область ЗагрузкаДанныхСЯндексМаркетаВМатрицуАппаратов

Функция ПолучитьТаблицуМаркетаДляПроверки(ИмяФайла = Неопределено, Адрес, АдресФайла = Неопределено) Экспорт
	Если АдресФайла <> Неопределено Тогда
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		ИмяФайла 	= ПолучитьИмяВременногоФайла();
		ДанныеФайла.Записать(ИмяФайла);
		
	ИначеЕсли ИмяФайла = Неопределено и АдресФайла = Неопределено Тогда
		
		ИмяФайла = "C:\Matrix_client\Таблица с результатом.csv";
		
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ПолучитьКолонки() Цикл
		ТаблицаДанных.Колонки.Добавить(Колонка.Значение);
	КонецЦикла;	
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Владелец");
	ТаблицаДанных.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ВладелецНаименование");
	
	ТекПродавец 		= Неопределено;
	ТекПродавецСсылка 	= Справочники.Партнеры.ПустаяСсылка();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	
	Для НомерСтроки = 1 по ТекстовыйДокумент.КоличествоСтрок() Цикл
		СтрокаТекста = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		СтрокаТекста = СтрЗаменить(СтрокаТекста, ";",Символы.ПС);
		Наименование = СтрПолучитьСтроку(СтрокаТекста,1);
		Если Лев(Наименование,1) = """" 
			и Прав(Наименование,1) = """" Тогда
			Наименование = Сред(Наименование,2,СтрДлина(Наименование));
			Наименование = Лев(Наименование,СтрДлина(Наименование)-1);
		КонецЕсли;
		
		Продавец 	 = СтрПолучитьСтроку(СтрокаТекста,3);
		Если Лев(Продавец,1) = """" 
			и Прав(Продавец,1) = """" Тогда
			Продавец = Сред(Продавец,2,СтрДлина(Продавец));
			Продавец = Лев(Продавец,СтрДлина(Продавец)-1);
		КонецЕсли;
		
		Если ТекПродавец <> Продавец 
			и ЗначениеЗаполнено(Продавец) Тогда
			
			ТекПродавецСсылка 	= ПолучитьПродавца(Продавец);
			ТекПродавец 		= Продавец;
			
		КонецЕсли;
		
		Если Не ТекПродавецСсылка.Пустая() Тогда
			НоваяСтрока 						= ТаблицаДанных.Добавить();
			НоваяСтрока.НомерСтроки             = НомерСтроки;
			НоваяСтрока.Наименование 			= Наименование;
			НоваяСтрока.ВладелецНаименование 	= Продавец;
			НоваяСтрока.Владелец 				= ТекПродавецСсылка;
			НоваяСтрока.Ссылка 					= ПолучитьСоответствие(НоваяСтрока.Наименование, НоваяСтрока.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанных, Адрес);
	
КонецФункции

Функция ПолучитьИзСоответсвияПоМатрице(ТекАппарат)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дпСоответствиеМатриц.АппаратКлиента,
	|	дпСоответствиеМатриц.АппаратОрганизации
	|ИЗ
	|	РегистрСведений.дпСоответствиеМатриц КАК дпСоответствиеМатриц
	|ГДЕ
	|	дпСоответствиеМатриц.АппаратКлиента = &ТекАппарат
	|	ИЛИ дпСоответствиеМатриц.АппаратОрганизации = &ТекАппарат";
	
	Запрос.УстановитьПараметр("ТекАппарат", ТекАппарат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ТекАппарат.Владелец = Справочники.Партнеры.НашеПредприятие Тогда
			Возврат ВыборкаДетальныеЗаписи.АппаратКлиента;
		Иначе
			Возврат ВыборкаДетальныеЗаписи.АппаратОрганизации;
		КонецЕсли;
	Иначе
		Возврат Справочники.МатрицаАппаратов.ПустаяСсылка();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции // ПолучитьИзСоответсвияПоМатрице()

Функция ПолучитьТаблицуМаркетаДляПроверки_Версия2(ИмяФайла = Неопределено, Адрес, АдресФайла = Неопределено) Экспорт
	Если АдресФайла <> Неопределено Тогда
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		ИмяФайла 	= ПолучитьИмяВременногоФайла();
		ДанныеФайла.Записать(ИмяФайла);
		
	ИначеЕсли ИмяФайла = Неопределено и АдресФайла = Неопределено Тогда
		
		ИмяФайла = "C:\Matrix_client\Таблица с результатом.csv";
		
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ПолучитьКолонки() Цикл
		ТаблицаДанных.Колонки.Добавить(Колонка.Значение);
	КонецЦикла;	
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("СсылкаНашегоПредприятия");
	ТаблицаДанных.Колонки.Добавить("Владелец");
	ТаблицаДанных.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ВладелецНаименование");
	//ТаблицаДанных.Колонки.Добавить("ИДМодели");
	//ТаблицаДанных.Колонки.Добавить("Цена");
	ТаблицаДанных.Колонки.Добавить("Регион");
	//ТаблицаДанных.Колонки.Добавить("СсылкаНаМодельЯМ");
	
	ТекПродавец 		= Неопределено;
	ТекПродавецСсылка 	= Справочники.Партнеры.ПустаяСсылка();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	//ТекНаим 	= "";
	//ТекСсылка 	= "";
	СсылкиНаМодельЯМ = Новый Соответствие();	
	Для НомерСтроки = 1 по ТекстовыйДокумент.КоличествоСтрок() Цикл
		СтрокаТекста = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		СтрокаТекста = СтрЗаменить(СтрокаТекста, ";",Символы.ПС);
		
		Наименование = СтрПолучитьСтроку(СтрокаТекста,1);
		УбратьОбрамлениеКавычками(Наименование);
		
		//Если ТекНаим <> Наименование Тогда
		//	ТекНаим 	= Наименование;
		//	ТекСсылка 	= "";
		//КонецЕсли;
		
		ИДМодели = СтрПолучитьСтроку(СтрокаТекста,2);
		УбратьОбрамлениеКавычками(ИДМодели);
		
		Продавец 	 = СтрПолучитьСтроку(СтрокаТекста,4);
		УбратьОбрамлениеКавычками(Продавец);
		
		Цена 	 = СтрПолучитьСтроку(СтрокаТекста,5);
		УбратьОбрамлениеКавычками(Цена);
		
		Регион 	 = СтрПолучитьСтроку(СтрокаТекста,6);
		УбратьОбрамлениеКавычками(Регион);
		
		СсылкаНаМодельЯМ 	 = СтрПолучитьСтроку(СтрокаТекста,7);
		УбратьОбрамлениеКавычками(СсылкаНаМодельЯМ);
		
		Если Не ЗначениеЗаполнено(СсылкаНаМодельЯМ) Тогда
			СсылкаНаМодельЯМ = СсылкиНаМодельЯМ.Получить(Наименование); 	
		Иначе
			СсылкиНаМодельЯМ.Вставить(Наименование,СсылкаНаМодельЯМ);
		КонецЕсли;	
		
		Если ТекПродавец <> Продавец Тогда
			Если Не ЗначениеЗаполнено(Продавец) Тогда
				ТекПродавецСсылка 	= Справочники.Партнеры.ПустаяСсылка();
			Иначе
				ТекПродавецСсылка 	= ПолучитьПродавца(Продавец);
			КонецЕсли;
			ТекПродавец 		= Продавец;
		КонецЕсли;
		
		
		//Если Не ТекПродавецСсылка.Пустая() Тогда
		Если ЗначениеЗаполнено(ТекПродавец) Тогда
			НоваяСтрока 						= ТаблицаДанных.Добавить();
			НоваяСтрока.НомерСтроки             = НомерСтроки;
			НоваяСтрока.Наименование 			= Наименование;
			НоваяСтрока.ВладелецНаименование 	= Продавец;
			НоваяСтрока.Владелец 				= ТекПродавецСсылка;
			
			НоваяСтрока.Цена 					= Цена;
			НоваяСтрока.Регион 					= Регион;
			НоваяСтрока.СсылкаНаМодель	 		= СсылкаНаМодельЯМ;
			НоваяСтрока.IDЯМ	                = ИДМодели;
			
			Если Не НоваяСтрока.Владелец.Пустая() Тогда
				НоваяСтрока.Ссылка 					= ПолучитьСоответствие(НоваяСтрока.Наименование, НоваяСтрока.Владелец);
				
				Если НоваяСтрока.Ссылка.Пустая() Тогда
					НоваяСтрока.СсылкаНашегоПредприятия	= ПолучитьСоответствие(НоваяСтрока.Наименование, Справочники.Партнеры.НашеПредприятие);
					Если Не ЗначениеЗаполнено(НоваяСтрока.СсылкаНашегоПредприятия) Тогда
						НоваяСтрока.Ссылка 	= СоздатьАппаратПоАналогии(НоваяСтрока, НоваяСтрока.Владелец);
					Иначе
						НоваяСтрока.Ссылка 	= СоздатьАппаратПоАналогии(НоваяСтрока, НоваяСтрока.Владелец, НоваяСтрока.СсылкаНашегоПредприятия);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Ссылка) Тогда
				НоваяСтрока.СсылкаНашегоПредприятия	= ПолучитьИзСоответсвияПоМатрице(НоваяСтрока.Ссылка);
				дп_ДополнительныеПроцедуры.ОбновитьДатуАктуальностиАппарата(НоваяСтрока.Ссылка);
			Иначе	
				НоваяСтрока.СсылкаНашегоПредприятия	= ПолучитьСоответствие(НоваяСтрока.Наименование, Справочники.Партнеры.НашеПредприятие);
			КонецЕсли;	
			
			
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанных, Адрес);
	
КонецФункции

Функция СоздатьАппаратПоАналогии(НоваяСтрока, Владелец, ОбразецНашегоПредприятия = Неопределено)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ВыборкаДетальныеЗаписи = ЗапросДанныеАппарата(НоваяСтрока, ОбразецНашегоПредприятия);
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекОбъект = СоздатьКопиюАппаратПоАналогии(Владелец, ВыборкаДетальныеЗаписи, НоваяСтрока);
		
		Возврат ТекОбъект.Ссылка;
	Иначе
		Возврат Справочники.МатрицаАппаратов.ПустаяСсылка();
	КонецЕсли;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции

Функция ЗапросДанныеАппарата(Знач НоваяСтрока, Знач ОбразецНашегоПредприятия)
	
	Перем ВыборкаДетальныеЗаписи, Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МатрицаАппаратов.ПометкаУдаления,
	|	МатрицаАппаратов.Владелец,
	|	МатрицаАппаратов.Наименование,
	|	МатрицаАппаратов.Артикул,
	|	МатрицаАппаратов.Цена,
	|	МатрицаАппаратов.Дата,
	|	МатрицаАппаратов.СсылкаНаМодель,
	|	МатрицаАппаратов.СсылкаНаГрафикМоделиЯМ,
	|	МатрицаАппаратов.IDЯМ,
	|	МатрицаАппаратов.Модель,
	|	МатрицаАппаратов.Бренд,
	|	МатрицаАппаратов.ТипАппарата
	|ИЗ
	|	Справочник.МатрицаАппаратов КАК МатрицаАппаратов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОбрНашегоОтбор
	|				ТОГДА МатрицаАппаратов.Ссылка = &ОбразецНашегоПредприятия
	|			ИНАЧЕ МатрицаАппаратов.Наименование = &Наименование
	|					И МатрицаАппаратов.Владелец <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Наименование", НоваяСтрока.Наименование);
	Запрос.УстановитьПараметр("ОбразецНашегоПредприятия", ОбразецНашегоПредприятия);
	Запрос.УстановитьПараметр("ОбрНашегоОтбор", ?(ОбразецНашегоПредприятия = Неопределено, Ложь,Истина));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПолучитьЦенуИзСтроки(текзнч) Экспорт
	
	текзнч=стрзаменить(текзнч,"руб.","");
	текзнч=стрзаменить(текзнч,символы.НПП,"");
	текзнч=стрзаменить(текзнч," ","");
	текзнч=число(текзнч);
	
	Возврат текзнч;
КонецФункции

Функция СоздатьКопиюАппаратПоАналогии(Знач Владелец, Знач ВыборкаДетальныеЗаписи, Знач НоваяСтрока)
	
	Перем ТекОбъект;
	
	ТекОбъект = Справочники.МатрицаАппаратов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ТекОбъект, ВыборкаДетальныеЗаписи);
	//ЗаполнитьЗначенияСвойств(ТекОбъект, НоваяСтрока);
	ТекОбъект.Цена = ПолучитьЦенуИзСтроки(НоваяСтрока.Цена);
	ТекОбъект.Владелец = Владелец;
	ТекОбъект.УстановитьНовыйКод();
	ТекОбъект.Записать();
	Возврат ТекОбъект;
	
КонецФункции	

Процедура УбратьОбрамлениеКавычками(Наименование)
	
	Если Лев(Наименование,1) = """" 
		и Прав(Наименование,1) = """" Тогда
		Наименование = Сред(Наименование,2,СтрДлина(Наименование));
		Наименование = Лев(Наименование,СтрДлина(Наименование)-1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеСЯндексМаркета(ИмяФайла = Неопределено) Экспорт
	Если ИмяФайла = Неопределено Тогда
		
		ИмяФайла = "C:\Matrix_client\Таблица с результатом.csv";
		
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ПолучитьКолонки() Цикл
		ТаблицаДанных.Колонки.Добавить(Колонка.Значение);
	КонецЦикла;	
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Владелец");
	
	ТекПродавец 		= Неопределено;
	ТекПродавецСсылка 	= Справочники.Партнеры.ПустаяСсылка();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	
	Для НомерСтроки = 1 по ТекстовыйДокумент.КоличествоСтрок() Цикл
		СтрокаТекста = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		СтрокаТекста = СтрЗаменить(СтрокаТекста, ";",Символы.ПС);
		Наименование = СтрПолучитьСтроку(СтрокаТекста,1);
		Если Лев(Наименование,1) = """" 
			и Прав(Наименование,1) = """" Тогда
			Наименование = Сред(Наименование,2,СтрДлина(Наименование));
			Наименование = Лев(Наименование,СтрДлина(Наименование)-1);
		КонецЕсли;
		
		Продавец 	 = СтрПолучитьСтроку(СтрокаТекста,3);
		Если Лев(Продавец,1) = """" 
			и Прав(Продавец,1) = """" Тогда
			Продавец = Сред(Продавец,2,СтрДлина(Продавец));
			Продавец = Лев(Продавец,СтрДлина(Продавец)-1);
		КонецЕсли;
		
		Если ТекПродавец <> Продавец 
			и ЗначениеЗаполнено(Продавец) Тогда
			
			ТекПродавецСсылка 	= ПолучитьПродавца(Продавец);
			ТекПродавец 		= Продавец;
			
		КонецЕсли;
		
		Если Не ТекПродавецСсылка.Пустая() Тогда
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.Наименование 	= Наименование;
			НоваяСтрока.Владелец 		= ТекПродавецСсылка;
			НоваяСтрока.Ссылка = ПолучитьСоответствие(НоваяСтрока.Наименование, НоваяСтрока.Владелец);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьДанные(ТаблицаДанных);
КонецПроцедуры	

Процедура ПроверитьАппаратыНаДатуЗагрузки()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаАппаратов.Ссылка
	|ИЗ
	|	Справочник.МатрицаАппаратов КАК МатрицаАппаратов
	|ГДЕ
	|	НЕ МатрицаАппаратов.Неактивен
	|	И МатрицаАппаратов.ДатаПоследнейЗагрузки < &ДатаПроверки
	|	И МатрицаАппаратов.Владелец <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)";
	
	Запрос.УстановитьПараметр("ДатаПроверки", ТекущаяДата()-(86400*60));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекОбъект.Неактивен = Истина;
		ТекОбъект.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры

Функция ПолучитьПродавца(НаименованиеВЯМ)
	НазваниеВЯМ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Название в ЯМ");
	
	НаименованиеВЯМЗначение = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(НаименованиеВЯМ,Истина,,НазваниеВЯМ);
	Если НаименованиеВЯМЗначение.Пустая() Тогда
		НаименованиеВЯМЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		НаименованиеВЯМЗначение.Владелец = НазваниеВЯМ;
		НаименованиеВЯМЗначение.Наименование = НаименованиеВЯМ;
		НаименованиеВЯМЗначение.Записать();
	КонецЕсли;	
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ДополнительныеРеквизиты.Свойство = &Свойство
	|	И Партнеры.ДополнительныеРеквизиты.Значение = &Значение
	|
	|СГРУППИРОВАТЬ ПО
	|	Партнеры.Ссылка";
	
	Запрос.УстановитьПараметр("Значение", НаименованиеВЯМЗначение.Ссылка);
	Запрос.УстановитьПараметр("Свойство", НазваниеВЯМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	

Процедура ОбновитьСоответствие(Соответствие, ТабличныйДокумент, Владелец) Экспорт
	
	ДляБренда = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Для бренда");
	ДляАппарата = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Для аппарата");	
	ДляМоделиУстроиства = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Для модели устройства");
	
	Соответствие.Очистить();
	
	Колонки = ПолучитьКолонки();
	
	Для Номер = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		НоваяСтрока = Соответствие.Добавить();
		
		Для Номер2 = 0 По Колонки.Количество()-1 Цикл
			
			Значение = ТабличныйДокумент.Область(Номер, Номер2+1).Текст;
			
			Если Колонки[Номер2].Значение = "Дата" Тогда
				НоваяСтрока[Колонки[Номер2].Значение] = ПолучитьДатуИзСтроки(Значение);
			ИначеЕсли Колонки[Номер2].Значение = "Бренд" Тогда
				НоваяСтрока[Колонки[Номер2].Значение] = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Значение, Истина, , ДляБренда);
			ИначеЕсли Колонки[Номер2].Значение = "Модель" Тогда
				НоваяСтрока[Колонки[Номер2].Значение] = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Значение, Истина, , ДляМоделиУстроиства);
			ИначеЕсли Колонки[Номер2].Значение = "ТипАппарата" Тогда
				НоваяСтрока[Колонки[Номер2].Значение] = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Значение, Истина, , ДляАппарата);
			Иначе
				НоваяСтрока[Колонки[Номер2].Значение] = Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.Ссылка = ПолучитьСоответствие(НоваяСтрока.Наименование, Владелец);
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьСоответствие(Наименование, Владелец) Экспорт
	
	Возврат Справочники.МатрицаАппаратов.НайтиПоНаименованию(Наименование, , , Владелец);
	
КонецФункции

Процедура ОбновитьДанные(Соответствие, ОбновлятьДанные = Истина, Владелец = Неопределено) Экспорт
	
	//Кожемякин А.Г. agkozhemyakin@gmail.com {
	//02.09.2016 18:33:35
	//может быть передан адрес хранилища значений а может быть сама таблица
	Если Не ТипЗнч(Соответствие) = Тип("ТаблицаЗначений") 
		и ЗначениеЗаполнено(Соответствие) Тогда
		Адрес = Соответствие;
		Соответствие = ПолучитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	//}Кожемякин А.Г.
	
	
	НачатьТранзакцию();
	
	Для Каждого Строка Из Соответствие Цикл
		
		Если Владелец = Неопределено и Не ЗначениеЗаполнено(Строка.Владелец) Тогда
			Продолжить;
		КонецЕсли;	
		
		Объект = Неопределено;
		
		Если Строка.Ссылка.Пустая() Тогда
			Объект = Справочники.МатрицаАппаратов.СоздатьЭлемент();
		ИначеЕсли ОбновлятьДанные Тогда
			Объект = Строка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если Объект <> Неопределено Тогда
			
			Для Каждого Колонка Из ПолучитьКолонки() Цикл
				Если Строка(Строка[Колонка.Значение]) <> "" И Строка[Колонка.Значение] <> 0 И Строка[Колонка.Значение] <> Дата(1,1,1) Тогда
					Объект[Колонка.Значение] = Строка[Колонка.Значение];
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Владелец = Неопределено Тогда
				Объект.Владелец = Владелец;
			Иначе
				Объект.Владелец = Строка.Владелец;
			КонецЕсли;	
			
			Объект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Кожемякин А.Г. agkozhemyakin@gmail.com {
	//12.04.2016 10:14:02
	Если НЕ Владелец = Неопределено Тогда
		УстановитьСоотвествиеМатриц(Владелец);
	Иначе
		МассивВладельцев = Соответствие.ВыгрузитьКолонку("Владелец");
		Для Каждого Владелец из МассивВладельцев Цикл 
			Если Не ЗначениеЗаполнено(Владелец) Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьСоотвествиеМатриц(Владелец);
		КонецЦикла;	
	КонецЕсли;
	//}Кожемякин А.Г.
	
	ЗафиксироватьТранзакцию(); 
	
КонецПроцедуры

Процедура УстановитьСоотвествиеМатриц(Владелец = Неопределено) Экспорт
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаАппаратов.Ссылка КАК АппаратКлиента
	|ПОМЕСТИТЬ АппаратыБезСоответствия
	|ИЗ
	|	Справочник.МатрицаАппаратов КАК МатрицаАппаратов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дпСоответствиеМатриц КАК дпСоответствиеМатриц
	|		ПО (дпСоответствиеМатриц.АппаратКлиента = МатрицаАппаратов.Ссылка)
	|ГДЕ
	|	МатрицаАппаратов.Владелец <> &ВладелецОрганизация
	|	И дпСоответствиеМатриц.АппаратОрганизации ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	МатрицаАппаратов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатрицаАппаратов.Ссылка КАК АппаратОрганизации
	|ПОМЕСТИТЬ АппаратыОрганизации
	|ИЗ
	|	Справочник.МатрицаАппаратов КАК МатрицаАппаратов
	|ГДЕ
	|	МатрицаАппаратов.Владелец = &ВладелецОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	МатрицаАппаратов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АппаратыБезСоответствия.АппаратКлиента,
	|	МАКСИМУМ(АппаратыОрганизации.АппаратОрганизации) КАК АппаратОрганизации,
	|	МАКСИМУМ(дпСоответствиеМатриц.АппаратОрганизации) КАК АппаратОрганизации2
	|ИЗ
	|	АппаратыБезСоответствия КАК АппаратыБезСоответствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ АппаратыОрганизации КАК АппаратыОрганизации
	|		ПО АппаратыБезСоответствия.АппаратКлиента.Наименование = АппаратыОрганизации.АппаратОрганизации.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дпСоответствиеМатриц КАК дпСоответствиеМатриц
	|		ПО АппаратыБезСоответствия.АппаратКлиента.Наименование = дпСоответствиеМатриц.АппаратКлиента.Наименование
	|ГДЕ
	|	(АппаратыОрганизации.АппаратОрганизации ЕСТЬ НЕ NULL 
	|			ИЛИ дпСоответствиеМатриц.АппаратОрганизации ЕСТЬ НЕ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	АппаратыБезСоответствия.АппаратКлиента";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ВладелецОрганизация", Справочники.Партнеры.НашеПредприятие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АппаратКлиента)
			и (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АппаратОрганизации)
			или ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АппаратОрганизации2)) Тогда
			
			МенеджерЗаписи = РегистрыСведений.дпСоответствиеМатриц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.АппаратКлиента 		= ВыборкаДетальныеЗаписи.АппаратКлиента;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.АппаратОрганизации) Тогда
				МенеджерЗаписи.АппаратОрганизации 	= ВыборкаДетальныеЗаписи.АппаратОрганизации;
			Иначе
				МенеджерЗаписи.АппаратОрганизации 	= ВыборкаДетальныеЗаписи.АппаратОрганизации2;
			КонецЕсли;	
			МенеджерЗаписи.Записать();
			
			
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры

Функция ПолучитьКолонки() Экспорт
	
	Колонки = Новый СписокЗначений();
	Колонки.Добавить("Наименование", "Наименование");
	
	Для Каждого Реквизит Из Метаданные.Справочники.МатрицаАппаратов.Реквизиты Цикл
		Колонки.Добавить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Возврат Колонки;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Стр) 
	
	Д = Дата("00010101000000");
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат Д;
	КонецЕсли;
	
	Если Найти(Стр,".") > 0 Тогда
		
		Если Найти(Стр,":") > 0 И Найти(Стр," ") > 0 Тогда 
			М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр," ");
			Возврат ПолучитьДатуИзСтроки(М[0]);
		КонецЕсли;
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,".");
		
	ИначеЕсли Найти(Стр,"/")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"/");
		
	ИначеЕсли Найти(Стр,",")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,",");
		
	ИначеЕсли Найти(Стр,"-")>0 Тогда
		
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"-");
		
	КонецЕсли; 
	
	Попытка
		
		Если М.Количество() = 3 Тогда //"01.02.13" или "01.02.2013"
			Год = ?(СтрДлина(М[2]) = 2,2000 + М[2],М[2]);
			Д = Дата(Год,М[1],М[0]);
		ИначеЕсли М.Количество() = 2 Тогда //"02.13" или "02.2013";
			Год = ?(СтрДлина(М[1]) = 2,2000 + М[1],М[1]);
			Д = Дата(Год,М[0],1);
		КонецЕсли;
		
	Исключение
	КонецПопытки; 
	
	Возврат Д; 
	
КонецФункции

#КонецОбласти

#Область СозданиеЗадач
Процедура ЗаписатьВремяПечати(МассивОбъектов, Макет)  Экспорт
	//МассивМакетов = Новый Массив;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дпВремяПечати КАК дпВремяПечати
	|		ПО (РасходныйОрдерНаТовары.Ссылка = дпВремяПечати.Документ
	|				И дпВремяПечати.Макет = &Макет)
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|	И дпВремяПечати.Документ ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТовары.Ссылка";
	
	Запрос.УстановитьПараметр("Макет", Макет);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Для Каждого Макет из МассивМакетов Цикл
		МенеджерЗаписи 				= РегистрыСведений.дпВремяПечати.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ 	= ВыборкаДетальныеЗаписи.Ссылка;
		МенеджерЗаписи.Макет 		= Макет;
		МенеджерЗаписи.ДатаВремя 	= ТекущаяДата();
		МенеджерЗаписи.Записать();
		//КонецЦикла;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры

Функция ЕстьОрдераПоРаспоряжению(Распоряжение) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки = &Распоряжение) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОбороты.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКОтгрузкеОбороты.Регистратор.Дата";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	

Процедура ЗаполнитьВремяВМакете(ОбластьЗаголовок, Ссылка, Макет) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(дпВремяРаспоряженияВАРМ.ДатаВремя) КАК ДатаВремя
	|ИЗ
	|	РегистрСведений.дпВремяРаспоряженияВАРМ КАК дпВремяРаспоряженияВАРМ
	|ГДЕ
	|	дпВремяРаспоряженияВАРМ.Распоряжение = &СсылкаРаспоряжение
	//|	и дпВремяРаспоряженияВАРМ.Пользователь = &ТекПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(дпВремяПечати.ДатаВремя) КАК ДатаВремя
	|ИЗ
	|	РегистрСведений.дпВремяПечати КАК дпВремяПечати
	|ГДЕ
	|	дпВремяПечати.Документ = &Ссылка
	|	И дпВремяПечати.Макет = &Макет";
	
	Запрос.УстановитьПараметр("Макет", Макет);
	Запрос.УстановитьПараметр("СсылкаРаспоряжение", Ссылка.Распоряжение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТекПользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОбластьЗаголовок.Параметры.ВремяВАРМ = ВыборкаДетальныеЗаписи.ДатаВремя;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОбластьЗаголовок.Параметры.ВремяПечати = ВыборкаДетальныеЗаписи.ДатаВремя;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура СоздатьЗаданиеДляРасходногоОрдера(Источник, ИсточникРаспоряжение) Экспорт
	
	НовоеЗадание 				= БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
	НовоеЗадание.Дата 			= ТекущаяДата();
	НовоеЗадание.Предмет 		= ИсточникРаспоряжение;
	
	ПолностьюОтгружен 			= Ложь;
	НовоеЗадание.Исполнитель 	= ПолучитьИсполнтеляЗадачиРасходногоОрдера(Источник, ПолностьюОтгружен, ИсточникРаспоряжение);
	
	ЗаполнитьЗадание(Источник, НовоеЗадание, ПолностьюОтгружен,ИсточникРаспоряжение);
	
	Если ПолностьюОтгружен Тогда
		Если  ТипЗнч(ИсточникРаспоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Если НовоеЗадание.Исполнитель <> ИсточникРаспоряжение.Партнер.ОсновнойМенеджер 
				и ЗначениеЗаполнено(ИсточникРаспоряжение.Партнер.ОсновнойМенеджер) Тогда
				НовоеЗадание2 				= БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
				НовоеЗадание2.Дата 			= ТекущаяДата();
				НовоеЗадание2.Предмет 		= ИсточникРаспоряжение;
				
				НовоеЗадание2.Исполнитель 	= ИсточникРаспоряжение.Партнер.ОсновнойМенеджер;
				
				ЗаполнитьЗадание(Источник, НовоеЗадание2, ПолностьюОтгружен, ИсточникРаспоряжение);
			КонецЕсли;
			
			Если ИсточникРаспоряжение.Менеджер <> ИсточникРаспоряжение.Партнер.ОсновнойМенеджер 
				и ИсточникРаспоряжение.Менеджер <> НовоеЗадание.Исполнитель
				и ЗначениеЗаполнено(ИсточникРаспоряжение.Менеджер) Тогда
				
				НовоеЗадание3 				= БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
				НовоеЗадание3.Дата 			= ТекущаяДата();
				НовоеЗадание3.Предмет 		= ИсточникРаспоряжение;
				
				НовоеЗадание3.Исполнитель 	= ИсточникРаспоряжение.Менеджер;
				
				ЗаполнитьЗадание(Источник, НовоеЗадание3, ПолностьюОтгружен, ИсточникРаспоряжение);
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'Сформировано задание на оформите или перезаполние финансовых документов'"), 
	УровеньЖурналаРегистрации.Информация,
	НовоеЗадание.Метаданные(),
	НовоеЗадание.Ссылка,
	НСтр("ru = 'Сформировано задание на оформите или перезаполние финансовых документов'"),
	РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

Процедура ЗаполнитьЗадание(Знач Источник, Знач НовоеЗадание, Знач ПолностьюОтгружен, Знач ИсточникРаспоряжение)
	
	Если ТипЗнч(ИсточникРаспоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если Не ПолностьюОтгружен Тогда
			НовоеЗадание.Наименование 	= НСтр("ru = 'Неполная сборка\отгрузка по заказу!'");
			НовоеЗадание.Содержание 	= НСтр("ru = 'Склад не полностью собрал\отгрузил товары по заказу "+ ИсточникРаспоряжение.номер + " от " +ИсточникРаспоряжение.Дата +" клиента "+ИсточникРаспоряжение.Партнер +". Просмотрите состояние выполнения заказа и согласуйте с клиентов изменения. Если клиент согласен на ""недогруз"" и не требует замен, то исправьте заказ и после этого отправьте его на оформление документов. Если требуется замена - исправьте заказ, добавив в него замену.'");
		Иначе	
			НовоеЗадание.Наименование 	= НСтр("ru = 'Оформите реализацию товаров и услуг по заказу!'");
			НовоеЗадание.Содержание		= НСтр("ru = 'Склад полностью собрал\отгрузил товары по заказу "+ ИсточникРаспоряжение.номер + " от " +ИсточникРаспоряжение.Дата +" клиента "+ИсточникРаспоряжение.Партнер +". Оформите документ Реализация товаров и услуг, а также сопроводительные транспортные документы (при необходимости).'");
		КонецЕсли;
	Иначе	
		НовоеЗадание.Наименование 	= НСтр("ru = 'Осуществлена отгрузка со склада по операции: " + Источник.СкладскаяОперация + "'");
		НовоеЗадание.Содержание 	= НСтр("ru = 'На складе " + Источник.Склад + " отгружены товары по распоряжению " + ИсточникРаспоряжение + ". Оформите или перезаполните финансовые документы!'");
	КонецЕсли;	
	НовоеЗадание.СрокИсполнения = ТекущаяДата();
	НовоеЗадание.Автор 			= ПолучитьАвтораЗаданияАдмин();
	НовоеЗадание.Важность 		= Перечисления.ВариантыВажностиЗадачи.Обычная;
	
	Если ЗначениеЗаполнено(НовоеЗадание.Исполнитель) Тогда
		НовоеЗадание.Записать();
		НовоеЗадание.Старт();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИсполнтеляЗадачиРасходногоОрдера(Источник,ПолностьюОтгружен,ИсточникРаспоряжение)
	
	Если ТипЗнч(ИсточникРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		или ТипЗнч(ИсточникРаспоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат ИсточникРаспоряжение.Менеджер;
	ИначеЕсли  ТипЗнч(ИсточникРаспоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыТовары.Номенклатура,
		|	РасходныйОрдерНаТоварыТовары.Характеристика,
		|	СУММА(РасходныйОрдерНаТоварыТовары.Количество) КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ТоваровОтгружено
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыТовары.Распоряжение = &ИсточникРаспоряжение
		|	И (РасходныйОрдерНаТоварыТовары.Ссылка.Статус = &Отгружен
		|			ИЛИ РасходныйОрдерНаТоварыТовары.Ссылка.Статус = &КОтгрузке)
		|	И РасходныйОрдерНаТоварыТовары.Ссылка.Проведен
		//|	И НЕ РасходныйОрдерНаТоварыТовары.НеОтгружать = 1
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерНаТоварыТовары.Номенклатура,
		|	РасходныйОрдерНаТоварыТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика,
		|	СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеПриход) КАК КОтгрузкеПриход
		|ПОМЕСТИТЬ ТоваровНадоОтгрузить
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Запись, ДокументОтгрузки = &ИсточникРаспоряжение) КАК ТоварыКОтгрузкеОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОбороты.Номенклатура,
		|	ТоварыКОтгрузкеОбороты.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоваровНадоОтгрузить.Номенклатура,
		|	ТоваровНадоОтгрузить.Характеристика
		|ИЗ
		|	ТоваровНадоОтгрузить КАК ТоваровНадоОтгрузить
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоваровОтгружено КАК ТоваровОтгружено
		|		ПО ТоваровНадоОтгрузить.Номенклатура = ТоваровОтгружено.Номенклатура
		|			И ТоваровНадоОтгрузить.Характеристика = ТоваровОтгружено.Характеристика
		|ГДЕ
		|	ТоваровНадоОтгрузить.КОтгрузкеПриход - ЕСТЬNULL(ТоваровОтгружено.КоличествоУпаковок, 0) > 0";
		
		Запрос.УстановитьПараметр("Источник", Источник);
		Запрос.УстановитьПараметр("ИсточникРаспоряжение", ИсточникРаспоряжение);
		Запрос.УстановитьПараметр("КОтгрузке", Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
		Запрос.УстановитьПараметр("Отгружен", Перечисления.СтатусыРасходныхОрдеров.Отгружен);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ИсточникРаспоряжение.Менеджер;
		Иначе
			ПолностьюОтгружен = Истина;
			Возврат ПолучитьОператора();
		КонецЕсли;
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Иначе
		Возврат ИсточникРаспоряжение.Ответственный;
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьОператора()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеСведения.Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Пользователи";
	
	Запрос.УстановитьПараметр("Значение", Истина);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Оператор"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Объект;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции // ()

Функция ЭтоПервоеПроведение(Источник) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дпПервоеПроведениеДокумента.ДатаВремя
	|ИЗ
	|	РегистрСведений.дпПервоеПроведениеДокумента КАК дпПервоеПроведениеДокумента
	|ГДЕ
	|	дпПервоеПроведениеДокумента.Документ = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Ложь;
	Иначе	
		МенеджерЗаписи = РегистрыСведений.дпПервоеПроведениеДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Источник;
		МенеджерЗаписи.ДатаВремя = ТекущаяДата();
		МенеджерЗаписи.Записать();
		Возврат Истина;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции // ЭтоПервоеПроведение(Источник)

Функция ПолучитьАвтораЗаданияАдмин()
	Возврат Справочники.Пользователи.НайтиПоНаименованию("Администратор",Истина);	
КонецФункции	

Процедура ЗаписатьСтатусРасходногоОрдера(Источник) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дпСтатусыРасходныхОрдеров.Ордер
	|ИЗ
	|	РегистрСведений.дпСтатусыРасходныхОрдеров КАК дпСтатусыРасходныхОрдеров
	|ГДЕ
	|	дпСтатусыРасходныхОрдеров.Ордер = &Источник
	|	И дпСтатусыРасходныхОрдеров.Статус = &ИсточникСтатус";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("ИсточникСтатус", Источник.Статус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.дпСтатусыРасходныхОрдеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ордер = Источник;
		МенеджерЗаписи.Статус = Источник.Статус;
		МенеджерЗаписи.ДатаВремя = ТекущаяДата();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры	

Функция ПолучитьРеализацииЗаказов(МассивОбъектов) Экспорт
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.ЗаказКлиента В (&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() Тогда
		Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции // ПолучитьРеализацииЗаказов(МассивОбъектов)

Функция ЕстьНаличиеВсехДокументов(ТекРаспоряжение, ТекстОшибки, Отказ) Экспорт
	
	//ВНИМАНИЕ: опишу на всякий случай предполагаемое поведение обработки в различных случаях:
	//а) Орагнизация выделенного распоряжения = ЧЛ, по выдлеенному распоряжению отсуствуют документы РТиУ:
	//выводим на печать только Заказ покупателя, ничего не сообщаем пользователю.
	//б) Орагнизация выделенного распоряжения = ЧЛ, есть созданные документы РТиУ:
	//выводим на печать только Заказ покупателя, ничего не сообщаем пользователю.
	//в) Орагнизация выдленного распоряжения = ИП Мацуль, нет созданных документов РТиУ:
	//Выводим сообщение пользователю: "По выделенному распоряжению не созданы требуемые документы продажи", ничего не выводим на печать.
	//г) Орагнизация выделнного распоряжения = ИП Мацуль, есть все требуемые ждокументы РТиУ, нет счет-фактур:
	//выводим на печать Заказ покупателя и по два экземпляра ТОРГ-12 на каждый документ РТиУ. Пользователю ничего не сообщаем.
	//д) Орагнизация выдлееного распоряжения = ООО "Диджистайл" (юр лицо), есть созданные РТиУ (по всем отгружаемым строкам заказа), по одному из документов РТиУ нет созданной Счет-фактуры:
	//Выводим сообщение пользователю: "Не оформлены требуемые счет-фактуры!", ничего не выводим на печать.
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварыЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ТекРаспоряжение
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = &ВариантОбеспеченияОтгрузить
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика,
	|	СУММА(РеализацияТоваровУслугТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварыРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = &ТекРаспоряжение
	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ РТиУ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.ЗаказКлиента = &ТекРаспоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РТиУ.Ссылка
	|ИЗ
	|	РТиУ КАК РТиУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО РТиУ.Ссылка = СчетФактураВыданный.ДокументОснование
	|			И (СчетФактураВыданный.Проведен)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Номенклатура,
	|	ТоварыЗаказа.Характеристика,
	|	ТоварыЗаказа.КоличествоУпаковок - ЕСТЬNULL(ТоварыРеализации.КоличествоУпаковок, 0) КАК КоличествоНеОформлено
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыРеализации КАК ТоварыРеализации
	|		ПО ТоварыЗаказа.Номенклатура = ТоварыРеализации.Номенклатура
	|			И ТоварыЗаказа.Характеристика = ТоварыРеализации.Характеристика
	|ГДЕ
	|	ТоварыЗаказа.КоличествоУпаковок - ЕСТЬNULL(ТоварыРеализации.КоличествоУпаковок, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РТиУ.Ссылка
	|ИЗ
	|	РТиУ КАК РТиУ";
	
	Запрос.УстановитьПараметр("ВариантОбеспеченияОтгрузить", Перечисления.ВариантыОбеспечения.Отгрузить);
	Запрос.УстановитьПараметр("ТекРаспоряжение", ТекРаспоряжение);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаРТиУБезСчетФактур = РезультатыЗапроса[3];
	РезультатЗапросаТоварыНеОформлено = РезультатыЗапроса[4];
	РезультатЗапросаРТиУ			  = РезультатыЗапроса[5];
	
	Если ТекРаспоряжение.Организация.Наименование = "ЧЛ" Тогда
		//Возврат Истина;
	ИначеЕсли ТекРаспоряжение.Организация.Наименование = "ИП Мацуль Артем Викторович" Тогда
		Если Не РезультатЗапросаТоварыНеОформлено.Пустой() Тогда
			ТекстОшибки = "По выделенному распоряжению не созданы требуемые документы продажи";
			Отказ = Истина;
		КонецЕсли;
		//ИначеЕсли ТекРаспоряжение.Организация.Наименование = "ООО ""Диджитстайл""" 
	ИначеЕсли ТекРаспоряжение.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если Не РезультатЗапросаТоварыНеОформлено.Пустой() Тогда
			ТекстОшибки = "По выделенному распоряжению не созданы требуемые документы продажи";
			Отказ = Истина;
		ИначеЕсли РезультатЗапросаТоварыНеОформлено.Пустой()
			и Не РезультатЗапросаРТиУБезСчетФактур.Пустой() Тогда
			ТекстОшибки = "Не оформлены требуемые счет-фактуры!";
			Отказ = Истина;		
		КонецЕсли;
	Иначе
		//Возврат Истина;
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат Не Отказ;
КонецФункции // ЕстьНаличиеВсехДокументов(ТекРаспоряжение, ТекстОшибки, Отказ)

Функция ПровестиВсеОрдераУстановитьСтатусПоРаспоряжениям(Знач МассивРаспоряжений, Отказ)  Экспорт
	ТаблицаНеУдалось = Новый ТаблицаЗначений;
	ТаблицаНеУдалось.Колонки.Добавить("Ссылка");
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение В (&МассивРаспоряжений)
	|	И ПриходныйОрдерНаТовары.Проведен
	|	И ПриходныйОрдерНаТовары.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка";
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений.ВыгрузитьЗначения());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			
			ТекОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ТекОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			НоваяСтрока = ТаблицаНеУдалось.Добавить();
			НоваяСтрока.Ссылка = ТекОбъект.Сылка; 
			Отказ = Истина;
			
		КонецПопытки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНеУдалось);
КонецФункции	

Функция ПолучитьСписокОрдеров(СписокРаспоряжений) Экспорт
	СписокОрдеров = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение В (&МассивРаспоряжений)
	|	И ПриходныйОрдерНаТовары.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка";
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", СписокРаспоряжений.ВыгрузитьЗначения());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокОрдеров.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат СписокОрдеров;
	
КонецФункции // ()

Функция ОтфильтроватьОрдераПоНоменклатуреИХарактеристике(СписокОрдеров, Номенклатура, Характеристика) Экспорт
	ФильтрСписокОРдеров = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В (&СписокОрдеров)
	|	И ПриходныйОрдерНаТовары.Номенклатура = &Номенклатура
	|	И ПриходныйОрдерНаТовары.Характеристика = &Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка";
	
	Запрос.УстановитьПараметр("СписокОрдеров", СписокОрдеров.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФильтрСписокОРдеров.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;	
	
	Возврат ФильтрСписокОРдеров;
КонецФункции

#КонецОбласти

&НаСервере
Процедура ВвестиСчетФактуру(Реализация) Экспорт
	Если Реализация.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС //И Реализация.Проведен 
		Тогда
		
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(СчетФактура, Реализация);
		СчетФактура.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		СчетФактура.ДокументОснование = Реализация.Ссылка;
		//СчетФактура.Дата = Реализация.ДатаОтгрузки;
		СчетФактура.УстановитьНовыйНомер();
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Реализация.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация",       Реализация.Организация);
		ДанныеСчетаФактуры.Вставить("Дата",              Реализация.Дата);
		ДанныеСчетаФактуры.Вставить("Выставлен",         Истина);
		ДанныеСчетаФактуры.Вставить("ДатаВыставления",   Реализация.Дата);
		
		СчетФактура.Заполнить(ДанныеСчетаФактуры);
		СчетФактура.Записать();
		Попытка
			Если Реализация.Проведен Тогда 
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПРоцедуры

&НаСервере
Функция НалогооблажениеБезНДС(НалогообложениеНДС) Экспорт
	Возврат НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
КонецФункции	

Процедура дпОбработкаЗапонения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") и ДанныеЗаполнения <> Неопределено Тогда
		//Проверить есл пользователь принадлежит роли "Склад контроль формирования реализации"
		//мТекущийПользователь = Пользователи.ТекущийПользователь();
		Если допРольДоступна("СкладКонтрольФормированияРеализации") Тогда 
			ТекРаспоряжение = ДанныеЗаполнения.ДокументОснование;
			Если БылиОшибкиПриОтбореПоРаспоряжению(ТекРаспоряжение) Тогда
				СтрокаИсключения = НСтр("ru='Не достаточно прав для формированяи реализации по данному распоряжению.'");
				
				Если ЗначениеЗаполнено(СтрокаИсключения) Тогда
					//СтрокаИсключения = СтрЗаменить(СтрокаИсключения, "%1", Распоряжение);
					ВызватьИсключение СтрокаИсключения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ДокОснование = ДанныеЗаполнения.ДокументОснование[0];
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Источник.ОснованиеДата 	= ДокОснование.Дата;	
				Источник.ОснованиеНомер = ДокОснование.Номер;
				Источник.Основание 		= ДокОснование.Ссылка;
				Источник.АдресДоставки	= ДокОснование.АдресДоставки;
				
			КонецЕсли;
		Исключение
		КонецПопытки;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") и ДанныеЗаполнения <> Неопределено Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ЗаполнитьПеремещениеТоваров(Источник, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПеремещениеТоваров(ЭтотОбъект, ДанныеЗаполнения)
	
	ДокОснование = ДанныеЗаполнения;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("Склад", ДанныеЗаполнения.Склад);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Распоряжение.Организация КАК Организация,
	//|	ПоступлениеТоваровУслуг.Сделка КАК Сделка,
	|	ПоступлениеТоваровУслуг.Склад КАК СкладОтправитель,
	|	ПоступлениеТоваровУслуг.Распоряжение.Подразделение КАК Подразделение,
	|
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен
	|
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование
	|
	|////////////////////////////////////////////////
	|;
	|ВЫБРАТЬ
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Назначение          КАК Назначение,
	//|	Товары.Склад               КАК Склад,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Количество          КАК Количество,
	|	Товары.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	Товары.Упаковка            КАК Упаковка,
	|	Товары.Назначение          КАК НазначениеОтправителя
	|
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	//|	И Товары.Склад = &Склад
	//|;
	//|
	//|////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Серии.Номенклатура          КАК Номенклатура,
	//|	Серии.Характеристика        КАК Характеристика,
	//|	Серии.Назначение            КАК Назначение,
	//|	Серии.Склад                 КАК Склад,
	//|	Серии.Серия                 КАК Серия,
	//|	Серии.Количество            КАК Количество
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг.Серии КАК Серии
	//|ГДЕ
	//|	Серии.Ссылка = &ДокументОснование
	//|	И Серии.Склад = &Склад";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ТоварыОснования = ПакетРезультатов[1].Выгрузить();
	Если ТоварыОснования.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не содержит товаров. Ввод на основании документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокОснование);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Шапка = ПакетРезультатов[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
	Шапка.Ссылка,
	,
	Шапка.ЕстьОшибкиПроведен,);
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	ДокументОснование = ДокОснование;
	СкладОтправитель  = ДанныеЗаполнения.Склад;
	
	// Разбиение строк, заполнение серий со статусом 10.
	ИндексыСтрок = Новый Массив();
	Для Каждого СтрокаТовары Из ТоварыОснования Цикл
		
		Если СтрокаТовары.СтатусУказанияСерий = 10 Тогда
			ИндексыСтрок.Вставить(0, ТоварыОснования.Индекс(СтрокаТовары));
		КонецЕсли;
		
	КонецЦикла;
	
	//СерииОснования = ПакетРезультатов[2].Выгрузить();
	//
	//Если ИндексыСтрок.Количество() > 0 Тогда
	//	
	//	КлючСерии = "Номенклатура, Характеристика, Склад, Назначение";
	//	ОбеспечениеСервер.ПеренестиСерииИзТаблицыВСтроки(ТоварыОснования, ИндексыСтрок, СерииОснования, КлючСерии);
	//	
	//КонецЕсли;
	
	ЭтотОбъект.Товары.Загрузить(ТоварыОснования);
	
	//Для Каждого СтрокаСерии Из СерииОснования Цикл
	//	Если СтрокаСерии.Количество > 0 Тогда
	//		НоваяСтрока = Серии.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
	//		НоваяСтрока.НазначениеОтправителя = НоваяСтрока.Назначение;
	//	КонецЕсли;
	//КонецЦикла;
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Функция БылиОшибкиПриОтбореПоРаспоряжению(РаспоряжениПроверка)
	Результат = Ложь;
	//Формируем две таблицы
	//Товары по заказу к отгузке (приход регистра товары к отгрузке ресурс к отгрузке)
	//Товары по отборам без ошибок (приход регистра товары к отбору ресурс к отобрано)
	//Минусуем товары заказа товарами отборов
	//Результат запроса только строки с остатком
	//Если результат на выходе ноль, тогда возврат истина иначе ложь
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеОбороты.КОтгрузкеПриход КАК КОтгрузке
	|ПОМЕСТИТЬ ТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Авто, ДокументОтгрузки = &Распоряжение) КАК ТоварыКОтгрузкеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК ДокОтбор
	|ПОМЕСТИТЬ РаспоряженияОтборы
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Распоряжение) КАК СвязанныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОбороты.Номенклатура,
	|	ТоварыКОтборуОбороты.Характеристика,
	|	ТоварыКОтборуОбороты.ОтобраноПриход,
	|	ТоварыКОтборуОбороты.Распоряжение
	|ПОМЕСТИТЬ ОтобраноБезОшибок
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.ОстаткиИОбороты(
	|			,
	|			,
	|			Регистратор,
	|			,
	|			Распоряжение В
	|				(ВЫБРАТЬ
	|					ДокОт.ДокОтбор
	|				ИЗ
	|					РаспоряженияОтборы КАК ДокОт)) КАК ТоварыКОтборуОбороты
	|ГДЕ
	|	ТоварыКОтборуОбороты.Регистратор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.КОтгрузке - ЕСТЬNULL(ОтобраноБезОшибок.ОтобраноПриход, 0) КАК ОстатокСОшибками
	|ИЗ
	|	ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтобраноБезОшибок КАК ОтобраноБезОшибок
	|		ПО ТоварыКОтгрузке.Номенклатура = ОтобраноБезОшибок.Номенклатура
	|			И ТоварыКОтгрузке.Характеристика = ОтобраноБезОшибок.Характеристика
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузке - ЕСТЬNULL(ОтобраноБезОшибок.ОтобраноПриход, 0) > 0";
	
	Запрос.УстановитьПараметр("Распоряжение", РаспоряжениПроверка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
	КонецЕсли; 
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Возврат Результат;		
КонецФункции

Функция допРольДоступна(Роль,Пользователь="")   Экспорт
	РольМД = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя",Роль);
	Если РольМД.Пустая() Тогда
		Возврат ЛОЖЬ;
	Конецесли;
	
	Если Пользователь = "" Тогда
		ПользовательОтбор = ПараметрыСеанса.ТекущийПользователь;
	Иначе
		ПользовательОтбор = ПОльзователь;
	КОнецЕсли;
	
	
	запрос = новый запрос;
	запрос.Текст = "ВЫБРАТЬ
	|    ГруппыДоступаПользователи.Ссылка
	|ИЗ
	|    Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|    ГруппыДоступаПользователи.Пользователь = &Пользователь
	|    И ГруппыДоступаПользователи.Ссылка.Профиль В
	|            (ВЫБРАТЬ
	|                ПрофилиГруппДоступаРоли.Ссылка
	|            ИЗ
	|                Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|            ГДЕ
	|                ПрофилиГруппДоступаРоли.Роль = &Роль)
	|    И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("роль",РольМД);               
	Запрос.УстановитьПараметр("Пользователь",ПользовательОтбор);
	Выборка = Запрос.Выполнить().Выбрать();
	результат = Выборка.Следующий();
	
	ВОзврат результат;    
	
КонецФункции

Процедура ПроверитьЖелаемуюДатуОтгрузки(Отказ, ЭтотОбъект) Экспорт
	
	Перем СтрокиСОтгрузкой, ТекстОшибки;
	
	СтрокиСОтгрузкой = ЭтотОбъект.Товары.НайтиСтроки(Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить));
	Если СтрокиСОтгрузкой.Количество() и Не ЗначениеЗаполнено(ЭтотОбъект.ЖелаемаяДатаОтгрузки) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть заполнена.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		ЭтотОбъект,
		"ЖелаемаяДатаОтгрузки",
		,
		Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура дпСоздатьКодЦСПриЗаписиСправочникаПриЗаписи(Источник, Отказ) Экспорт
	РегистрыСведений.КодыЦентральногоСправочника.СформироватьКодЦС(Источник);
КонецПроцедуры

Функция ПолучитьКодЦС(Номенклатура, Характеристика) Экспорт
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыЦентральногоСправочника.КодЦС
	|ИЗ
	|	РегистрСведений.КодыЦентральногоСправочника КАК КодыЦентральногоСправочника
	|ГДЕ
	|	КодыЦентральногоСправочника.Номенклатура = &Номенклатура
	|	И КодыЦентральногоСправочника.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КодЦС;
	Иначе
		Возврат "";
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецФункции	

Функция ПолучитьШтрихКодНоменклатуры(Номенклатура, Характеристика, флСвойШК=ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ШтрихкодыНоменклатуры.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|				ТОГДА ШтрихкодыНоменклатуры.Штрихкод
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК Штрихкод,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ШтрихкодыНоменклатуры.Производитель <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|				ТОГДА ШтрихкодыНоменклатуры.Штрихкод
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ШтрихкодПроизводителя
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);	
	Запрос.УстановитьПараметр("Характеристика", Характеристика);	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		
		
		Возврат "";
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	если флСвойШК тогда
		Возврат Выборка.Штрихкод;
	иначе
		Если ЗначениеЗаполнено(Характеристика) Тогда		
			Возврат ?(ЗначениеЗаполнено(Выборка.ШтрихкодПроизводителя), Выборка.ШтрихкодПроизводителя,Выборка.Штрихкод);
		Иначе
			ЗапросШК = Новый Запрос("ВЫБРАТЬ
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ШтрихкодыНоменклатуры.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|				ТОГДА ШтрихкодыНоменклатуры.Штрихкод
			|			ИНАЧЕ """"
			|		КОНЕЦ) КАК Штрихкод,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ШтрихкодыНоменклатуры.Производитель <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|				ТОГДА ШтрихкодыНоменклатуры.Штрихкод
			|			ИНАЧЕ """"
			|		КОНЕЦ) КАК ШтрихкодПроизводителя
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура");
			ЗапросШК.УстановитьПараметр("Номенклатура", Номенклатура);
			Выб = ЗапросШК.Выполнить().Выбрать();
			Выб.Следующий();

			если флСвойШК тогда
				Возврат Выб.Штрихкод;
			иначе
				Возврат ?(ЗначениеЗаполнено(Выб.ШтрихкодПроизводителя), Выб.ШтрихкодПроизводителя,Выб.Штрихкод);
			конецесли;	
		КонецЕсли;
	конецесли;	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ШтрихкодыНоменклатуры.Штрихкод
	//	|ИЗ
	//	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	//	|ГДЕ
	//	|	ШтрихкодыНоменклатуры.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	//	|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	//	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);	
	//Запрос.УстановитьПараметр("Характеристика", Характеристика);	
	//
	//Результат = Запрос.Выполнить();
	//Если Результат.Пустой() Тогда
	//	Возврат "";
	//КонецЕсли;	
	
	//Выборка = Результат.Выбрать();
	//Выборка.Следующий();
	//
	//Возврат Выборка.Штрихкод;
	
КонецФункции

Функция ПолучитьСпецУсловияОтгрузки(Получатель) Экспорт
	
	Перем ДопРеквизитРозничногоПокупетеля;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ДопРеквизитРозничногоПокупетеля = Получатель.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Специальные условия отгрузки (Клиенты)"), "Свойство");
	КонецЕсли;
	
	Возврат ДопРеквизитРозничногоПокупетеля;
КонецФункции

Функция ПолучитьИмяРеквизитаСпецУсловияОтгрузки() Экспорт
	ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Специальные условия отгрузки (Клиенты)");
	ИмяУникальнаяЧасть = СтрЗаменить(ВРег(Строка(ТекСвойство.НаборСвойств.УникальныйИдентификатор())), "-", "x")
	+ "_"
	+ СтрЗаменить(ВРег(Строка(ТекСвойство.УникальныйИдентификатор())), "-", "x");
	
	ИмяРеквизитаЗначение =
	"ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;	
	
	Возврат ИмяРеквизитаЗначение;
КонецФункции

Функция ПроверитьЗаказПоставщикуПоГТД(Знач ЗаказПоставщику) Экспорт
	
	Для каждого СтрокаТоваров Из ЗаказПоставщику.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.дпНомерГТД) и СтрокаТоваров.Номенклатура.ВестиУчетПоГТД Тогда
			
			Возврат Ложь;	
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // ПроверитьЗаказПоставщикуПоГТД()

Процедура ОбновитьДатуАктуальностиАппарата(ТекАппарат) Экспорт
	ТекАппаратОбъект = ТекАппарат.ПолучитьОбъект();
	ТекАппаратОбъект.ДатаАктуальности = ТекущаяДата();
	ТекАппаратОбъект.Записать();
КонецПроцедуры	

Процедура ДобавитьПараметрыВДерево(Дерево) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Параметры.Ссылка,
	|	""парам_""+Параметры.Идентификатор как Идентификатор
	|ИЗ
	|	Справочник.Параметры КАК Параметры
	|ГДЕ
	|	НЕ Параметры.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Параметры'"));
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ВыборкаДетальныеЗаписи.Ссылка.Наименование,    "["+ВыборкаДетальныеЗаписи.Идентификатор+"]");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрыВМассив(Массив) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Параметры.Ссылка,
	|	""парам_""+Параметры.Идентификатор как Идентификатор
	|ИЗ
	|	Справочник.Параметры КАК Параметры
	|ГДЕ
	|	НЕ Параметры.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Массив.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПотенциальныхКлиентовПоМодели(Номенклатура) Экспорт
	
	РезМассив = Новый Массив;
	
	ДопРеквизит = Номенклатура.ДополнительныеРеквизиты.Найти(Справочники.Настройки.ДляМоделиУстройства.Значение, "Свойство");
	
	Если ДопРеквизит = Неопределено Тогда
		Возврат РезМассив;
	Иначе
		Модель = ДопРеквизит.Значение;
	КонецЕсли;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаАппаратов.Ссылка КАК АппаратаПредприятия
	|ПОМЕСТИТЬ АппаратыНашегоПредприятия
	|ИЗ
	|	Справочник.МатрицаАппаратов КАК МатрицаАппаратов
	|ГДЕ
	|	МатрицаАппаратов.Владелец = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И МатрицаАппаратов.Модель = &Модель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	дпСоответствиеМатриц.АппаратКлиента.Владелец КАК ИнтернетМагазин,
	|	АппаратыНашегоПредприятия.АппаратаПредприятия КАК Аппарат
	|ИЗ
	|	АппаратыНашегоПредприятия КАК АппаратыНашегоПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дпСоответствиеМатриц КАК дпСоответствиеМатриц
	|		ПО АппаратыНашегоПредприятия.АппаратаПредприятия = дпСоответствиеМатриц.АппаратОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	дпСоответствиеМатриц.АппаратКлиента.Владелец,
	|	АппаратыНашегоПредприятия.АппаратаПредприятия
	|ИТОГИ ПО
	|	ИнтернетМагазин";
	
	Запрос.УстановитьПараметр("Модель", Модель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИнтернетМагазин = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИнтернетМагазин.Следующий() Цикл
		// Вставить обработку выборки ВыборкаИнтернетМагазин
		РезМассив.Добавить(ВыборкаИнтернетМагазин.ИнтернетМагазин);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	Возврат РезМассив;
КонецФункции	

Процедура ЗаполнитьСтатусДляЗаказа(Объект) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("ДокументОбъект.ЗаказКлиента") Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = ПолучитьСтатусыДляЗаказа();
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Значение = Неопределено;
		
		Если Свойства.Свойство("ДляНоменклатуры") Тогда
			Значение = ПолучитьЗначениеДополнительногоРеквизита(Строка.Номенклатура, Свойства.ДляНоменклатуры);
		КонецЕсли;
		
		Если Значение = Неопределено И Свойства.Свойство("ДляХарактеристик") Тогда
			Значение = ПолучитьЗначениеДополнительногоРеквизита(Строка.Характеристика, Свойства.ДляХарактеристик);
		КонецЕсли;
		
		Строка.СтатусДляЗаказа = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеДополнительногоРеквизита(Ссылка, Свойство)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Свойство",Свойство);
	Массив = Ссылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
	
	Если Массив.Количество() > 0 Тогда
		Возврат Массив[0].Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтатусыДляЗаказа()
	
	Результат = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка,
	|	ДополнительныеРеквизитыИСведения.НаборСвойств.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование", "%Статус для заказа%");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Найти(НРег(Выборка.Наименование), "характер") > 0 Тогда
			Результат.Вставить("ДляХарактеристик", Выборка.Ссылка);
		Иначе
			Результат.Вставить("ДляНоменклатуры", Выборка.Ссылка);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

Процедура ДополнитьЗапросДопДаннымиАРМОтгрузки(Запрос) Экспорт
	ТекстЗапроса = Запрос.Текст; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"0 КАК ИндексКартинки", "0 КАК ИндексКартинки
	|Поместить Рапоряжения");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"УПОРЯДОЧИТЬ ПО
	|	РеестрДокументов.ДатаДокументаИБ","");
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Рапоряжения.Распоряжение,
	////|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК ДокументОтгрузки,
	//|	"""" КАК ДокументОтгрузки,
	//|	Рапоряжения.Дата,
	//|	Рапоряжения.ИндексКартинки,
	//|	Рапоряжения.Номер,
	//|	Рапоряжения.Получатель,
	////|	Рапоряжения.ЗаданиеНаПеревозку,
	//|	"""" как ЗаданиеНаПеревозку,
	//|	Рапоряжения.ТипДокумента,
	//|	Рапоряжения.Состояние,
	////|	Рапоряжения.СтатусОтгрузки,
	//|	0 как СтатусОтгрузки,
	////|	Рапоряжения.СтатусЕстьКОтгрузке,
	//|	0 как СтатусЕстьКОтгрузке,
	////|	Рапоряжения.СтатусЕстьКПроверке,
	//|	0 как СтатусЕстьКПроверке,
	////|	Рапоряжения.ЖелаемаяДатаОтгрузки
	//|	0 как ЖелаемаяДатаОтгрузки
	//|ПОМЕСТИТЬ ЗаказыДляЗаданий
	//|ИЗ
	//|	Рапоряжения КАК Рапоряжения
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	//|		ПО Рапоряжения.Распоряжение = ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	//|ГДЕ
	////|	Рапоряжения.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку
	//|	ТИПЗНАЧЕНИЯ(Рапоряжения.Распоряжение) = ТИП(Документ.ЗаданиеНаПеревозку)
	//Кожемякин А.Г. agkozhemyakin@gmail.com {
	//21.07.2016 17:17:39
	//
	//|;
	//|//////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
	|	МИНИМУМ(ВЫБОР 	КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.КОтбору) ТОГДА 0
	|			КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.КПроверке) ТОГДА 1
	|			КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.КОтгрузке) ТОГДА 2
	|			КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.Отгружен) ТОГДА 3 КОНЕЦ) КАК Статус,
	|	МАКСИМУМ(ВЫБОР КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.КПроверке) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) как СтатусЕстьКПроверке,
	|	МАКСИМУМ(ВЫБОР КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.КОтгрузке) ТОГДА ИСТИНА
	|					КОГДА ТоварыКОтгрузкеОбороты.Регистратор.Статус = Значение(Перечисление.СтатусыРасходныхОрдеров.Отгружен) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) как СтатусЕстьКОтгрузке
	|ПОМЕСТИТЬ ВтСтатусы
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						ВТРаспоряженияКОтгрузке.Распоряжение КАК ДокументОтгрузки
	|					ИЗ
	|						Рапоряжения КАК ВТРаспоряженияКОтгрузке)) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки
	//}Кожемякин А.Г.
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ТаблицаРегистра.КОтгрузкеОстаток, 0) - ЕСТЬNULL(ТаблицаРегистра.СобираетсяОстаток, 0) - ЕСТЬNULL(ТаблицаРегистра.СобраноОстаток, 0) - ЕСТЬNULL(ТаблицаРегистра.КСборкеОстаток, 0)) КАК ЕстьОрдера,
	|	ВремРапоряжения.Дата,
	|	ВремРапоряжения.ИндексКартинки,
	|	ВремРапоряжения.Номер,
	|	ВремРапоряжения.Получатель,
	|	ВремРапоряжения.Распоряжение,
	|	"""" как ЗаданиеНаПеревозку,
	|	ВремРапоряжения.ТипДокумента,
	|	ВремРапоряжения.Состояние,
	//Кожемякин А.Г. agkozhemyakin@gmail.com {
	//22.07.2016 19:01:52
	|	ВЫБОР 	КОГДА ВтСтатусы.Статус =  0 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.КОтбору)
	|			КОГДА ВтСтатусы.Статус =  1 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
	|			КОГДА ВтСтатусы.Статус =  2 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.КОтгрузке)
	|			КОГДА ВтСтатусы.Статус =  3 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.Отгружен) ИНАЧЕ Значение(Перечисление.СтатусыРасходныхОрдеров.ПустаяСсылка) КОНЕЦ как СтатусОтгрузки,
	|	ВтСтатусы.СтатусЕстьКПроверке,
	|	ВтСтатусы.СтатусЕстьКОтгрузке,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВремРапоряжения.Распоряжение) = ТИП(Документ.ЗаказКлиента)
	|			ТОГДА ВремРапоряжения.Распоряжение.ЖелаемаяДатаОтгрузки
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ЖелаемаяДатаОтгрузки
	//}Кожемякин А.Г.
	|ПОМЕСТИТЬ ПредварительныеДанные
	|ИЗ
	|	Рапоряжения КАК ВремРапоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				,
	|				ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						ВремРасп.Распоряжение
	|					ИЗ
	|						Рапоряжения КАК ВремРасп)) КАК ТаблицаРегистра
	|		ПО ВремРапоряжения.Распоряжение = ТаблицаРегистра.ДокументОтгрузки
	//Кожемякин А.Г. agkozhemyakin@gmail.com {
	//22.07.2016 19:01:32
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСтатусы КАК ВтСтатусы
	|		ПО ВремРапоряжения.Распоряжение = ВтСтатусы.ДокументОтгрузки		
	//}Кожемякин А.Г.
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремРапоряжения.Распоряжение,
	|	ВремРапоряжения.Дата,
	|	ВремРапоряжения.ИндексКартинки,
	|	ВремРапоряжения.Номер,
	|	ВремРапоряжения.Получатель,
	|	ВремРапоряжения.ТипДокумента,
	|	ВремРапоряжения.Состояние,
	|	ВЫБОР 	КОГДА ВтСтатусы.Статус =  0 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.КОтбору)
	|			КОГДА ВтСтатусы.Статус =  1 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
	|			КОГДА ВтСтатусы.Статус =  2 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.КОтгрузке)
	|			КОГДА ВтСтатусы.Статус =  3 ТОГДА Значение(Перечисление.СтатусыРасходныхОрдеров.Отгружен) ИНАЧЕ Значение(Перечисление.СтатусыРасходныхОрдеров.ПустаяСсылка) КОНЕЦ,
	|	ВтСтатусы.СтатусЕстьКПроверке,
	|	ВтСтатусы.СтатусЕстьКОтгрузке,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВремРапоряжения.Распоряжение) = ТИП(Документ.ЗаказКлиента)
	|			ТОГДА ВремРапоряжения.Распоряжение.ЖелаемаяДатаОтгрузки
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ
	|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	СУММА(ЕСТЬNULL(ТоварыКОтгрузкеОстаткиПоЗаданиям.КОтгрузкеОстаток, 0) - ЕСТЬNULL(ТоварыКОтгрузкеОстаткиПоЗаданиям.СобираетсяОстаток, 0) - ЕСТЬNULL(ТоварыКОтгрузкеОстаткиПоЗаданиям.СобраноОстаток, 0) - ЕСТЬNULL(ТоварыКОтгрузкеОстаткиПоЗаданиям.КСборкеОстаток, 0)),
	//|	ЗаказыДляЗаданий.Дата,
	//|	ЗаказыДляЗаданий.ИндексКартинки,
	//|	ЗаказыДляЗаданий.Номер,
	//|	ЗаказыДляЗаданий.Получатель,
	//|	ЗаказыДляЗаданий.Распоряжение,
	//|	ЗаказыДляЗаданий.ЗаданиеНаПеревозку,
	//|	ЗаказыДляЗаданий.ТипДокумента,
	//|	ЗаказыДляЗаданий.Состояние,
	//|	ЗаказыДляЗаданий.СтатусОтгрузки,
	//|	ЗаказыДляЗаданий.СтатусЕстьКОтгрузке,
	//|	ЗаказыДляЗаданий.СтатусЕстьКПроверке,
	//|	ДАТАВРЕМЯ(1, 1, 1)
	//|ИЗ
	//|	ЗаказыДляЗаданий КАК ЗаказыДляЗаданий
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки(
	//|				,
	//|				ДокументОтгрузки В
	//|					(ВЫБРАТЬ
	//|						ВремРасп.ДокументОтгрузки
	//|					ИЗ
	//|						ЗаказыДляЗаданий КАК ВремРасп)) КАК ТоварыКОтгрузкеОстаткиПоЗаданиям
	//|		ПО ЗаказыДляЗаданий.ДокументОтгрузки = ТоварыКОтгрузкеОстаткиПоЗаданиям.ДокументОтгрузки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗаказыДляЗаданий.Дата,
	//|	ЗаказыДляЗаданий.ИндексКартинки,
	//|	ЗаказыДляЗаданий.Номер,
	//|	ЗаказыДляЗаданий.Получатель,
	//|	ЗаказыДляЗаданий.ЗаданиеНаПеревозку,
	//|	ЗаказыДляЗаданий.ТипДокумента,
	//|	ЗаказыДляЗаданий.Состояние,
	//|	ЗаказыДляЗаданий.Распоряжение,
	//|	ЗаказыДляЗаданий.СтатусОтгрузки,
	//|	ЗаказыДляЗаданий.СтатусЕстьКОтгрузке,
	//|	ЗаказыДляЗаданий.СтатусЕстьКПроверке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПредварительныеДанные.ЕстьОрдера) КАК ЕстьОрдера,
	|	ПредварительныеДанные.ТипДокумента,
	|	ПредварительныеДанные.Состояние,
	|	ПредварительныеДанные.Дата,
	|	ПредварительныеДанные.ИндексКартинки,
	|	ПредварительныеДанные.Номер,
	|	ПредварительныеДанные.Получатель,
	|	ПредварительныеДанные.Распоряжение,
	|	ПредварительныеДанные.ЗаданиеНаПеревозку,
	|	МИНИМУМ(дпВремяРаспоряженияВАРМ.ДатаВремя) КАК ВремяВАРМ,
	|	ПредварительныеДанные.СтатусОтгрузки,
	|	ПредварительныеДанные.СтатусЕстьКОтгрузке,
	|	ПредварительныеДанные.СтатусЕстьКПроверке,
	|	ПредварительныеДанные.ЖелаемаяДатаОтгрузки
	|ПОМЕСТИТЬ ПредварительныеДанные2
	|ИЗ
	|	ПредварительныеДанные КАК ПредварительныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дпВремяРаспоряженияВАРМ КАК дпВремяРаспоряженияВАРМ
	|		ПО ПредварительныеДанные.Распоряжение = дпВремяРаспоряженияВАРМ.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныеДанные.Распоряжение,
	|	ПредварительныеДанные.Получатель,
	|	ПредварительныеДанные.ТипДокумента,
	|	ПредварительныеДанные.Состояние,
	|	ПредварительныеДанные.Номер,
	|	ПредварительныеДанные.ЗаданиеНаПеревозку,
	|	ПредварительныеДанные.ИндексКартинки,
	|	ПредварительныеДанные.Дата,
	|	ПредварительныеДанные.СтатусОтгрузки,
	|	ПредварительныеДанные.СтатусЕстьКОтгрузке,
	|	ПредварительныеДанные.СтатусЕстьКПроверке,
	|	ПредварительныеДанные.ЖелаемаяДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныеДанные.ЕстьОрдера КАК ЕстьОрдера,
	|	ПредварительныеДанные.ТипДокумента,
	|	ПредварительныеДанные.Состояние,
	|	ПредварительныеДанные.Дата,
	|	ПредварительныеДанные.ИндексКартинки,
	|	ПредварительныеДанные.Номер,
	|	ПредварительныеДанные.Получатель,
	|	ПредварительныеДанные.Распоряжение,
	|	ПредварительныеДанные.ЗаданиеНаПеревозку,
	|	ПредварительныеДанные.ВремяВАРМ КАК ВремяВАРМ,
	|	ПредварительныеДанные.СтатусОтгрузки,
	|	ПредварительныеДанные.СтатусЕстьКОтгрузке,
	|	ПредварительныеДанные.СтатусЕстьКПроверке,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения = &КОтгрузке
	|				ТОГДА ЕСТЬNULL(ЗаказКлиентаТовары.КоличествоУпаковок, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ + ЕСТЬNULL(ПеремещениеТоваровТовары.КоличествоУпаковок, 0) + ЕСТЬNULL(РеализацияТоваровУслугТовары.КоличествоУпаковок, 0) + ЕСТЬNULL(ЗаказНаПеремещениеТовары.КоличествоУпаковок, 0)) КАК КоличествоВРаспоряжении,
	|	ПредварительныеДанные.ЖелаемаяДатаОтгрузки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиентаТовары.НомерСтроки) КАК ЗаказКлиентаКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНаПеремещениеТовары.НомерСтроки) КАК ЗаказНаПеремещениеКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровТовары.НомерСтроки) КАК ПеремещениеКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.НомерСтроки) КАК РеализацияКоличество
	|ПОМЕСТИТЬ вт_Сводно
	|ИЗ
	|	ПредварительныеДанные2 КАК ПредварительныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ПредварительныеДанные.Распоряжение = ЗаказКлиентаТовары.Ссылка
	|			И (ЗаказКлиентаТовары.ВариантОбеспечения = &КОтгрузке)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО ПредварительныеДанные.Распоряжение = ПеремещениеТоваровТовары.Ссылка
	|			И (НЕ ПеремещениеТоваровТовары.КоличествоУпаковок ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ПредварительныеДанные.Распоряжение = РеализацияТоваровУслугТовары.Ссылка
	|			И (НЕ РеализацияТоваровУслугТовары.КоличествоУпаковок ЕСТЬ NULL)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|		ПО ПредварительныеДанные.Распоряжение = ЗаказНаПеремещениеТовары.Ссылка
	|			И (НЕ ЗаказНаПеремещениеТовары.КоличествоУпаковок ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныеДанные.Распоряжение,
	|	ПредварительныеДанные.Получатель,
	|	ПредварительныеДанные.ТипДокумента,
	|	ПредварительныеДанные.Состояние,
	|	ПредварительныеДанные.Номер,
	|	ПредварительныеДанные.ЗаданиеНаПеревозку,
	|	ПредварительныеДанные.ИндексКартинки,
	|	ПредварительныеДанные.Дата,
	|	ПредварительныеДанные.ВремяВАРМ,
	|	ПредварительныеДанные.ЕстьОрдера,
	|	ПредварительныеДанные.СтатусОтгрузки,
	|	ПредварительныеДанные.СтатусЕстьКОтгрузке,
	|	ПредварительныеДанные.СтатусЕстьКПроверке,
	|	ПредварительныеДанные.ЖелаемаяДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ЕСТЬNULL(вт_Сводно.ЕстьОрдера,0) <> 0 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ЕстьОрдера,
	|	вт_Сводно.ТипДокумента,
	|	вт_Сводно.Состояние,
	|	вт_Сводно.Дата,
	|	вт_Сводно.ИндексКартинки,
	|	вт_Сводно.Номер,
	|	вт_Сводно.Получатель,
	|	вт_Сводно.Распоряжение,
	|	вт_Сводно.ЗаданиеНаПеревозку,
	|	вт_Сводно.ВремяВАРМ КАК ВремяВАРМ,
	|	вт_Сводно.СтатусОтгрузки,
	|	вт_Сводно.СтатусЕстьКОтгрузке,
	|	вт_Сводно.СтатусЕстьКПроверке,
	|	вт_Сводно.КоличествоВРаспоряжении,
	|	вт_Сводно.ЖелаемаяДатаОтгрузки,
	|	вт_Сводно.ЗаказКлиентаКоличество + вт_Сводно.ПеремещениеКоличество + вт_Сводно.РеализацияКоличество + вт_Сводно.ЗаказНаПеремещениеКоличество КАК СтрокВРаспоряжении,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПартнерыДополнительныеРеквизиты.Значение, ЛОЖЬ) = ИСТИНА
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеСпецУсловий
	|ИЗ
	|	вт_Сводно КАК вт_Сводно
	|   		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|		ПО (ВЫБОР
	|				КОГДА вт_Сводно.Распоряжение ССЫЛКА Документ.ЗаказКлиента
	|					ТОГДА вт_Сводно.Распоряжение.Партнер = ПартнерыДополнительныеРеквизиты.Ссылка
	|							И ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоНаличиеСпецУсловий
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	
	|УПОРЯДОЧИТЬ ПО
	|	ВремяВАРМ УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("СвойствоНаличиеСпецУсловий", Справочники.Настройки.НаличиеСпецУсловийОтгрузки.Значение);
	Запрос.УстановитьПараметр("КОтгрузке", Перечисления.ВариантыОбеспечения.Отгрузить);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
КонецПроцедуры

Функция ПолучитьИмпортера(Знач Результат) Экспорт
	
	Возврат Результат.Импортер;
	
КонецФункции

Функция ПолучитьСтатьюДДСПоКонтрагентуИХозОперации(Контрагент,ХозяйственнаяОперация) Экспорт
	мРезультат = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	дп_НастройкаСтатейДДСДляЗагрузкиИзБанка.СтатьяДДС КАК СтатьяДДС
	|ИЗ
	|	РегистрСведений.дп_НастройкаСтатейДДСДляЗагрузкиИзБанка КАК дп_НастройкаСтатейДДСДляЗагрузкиИзБанка
	|ГДЕ
	|	дп_НастройкаСтатейДДСДляЗагрузкиИзБанка.Контрагент = &Контрагент
	|	И дп_НастройкаСтатейДДСДляЗагрузкиИзБанка.ХозяйственнаяОперация = &ХозяйственнаяОперация";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		мРезультат = ВыборкаДетальныеЗаписи.СтатьяДДС;
		Прервать;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат мРезультат;
КонецФункции	

Функция ПолучитьСсылкуДляСайта(ТекНоменклатура, ТекХарактеристика) Экспорт
	ИсточникСсылок = ТекНоменклатура;
	РеквизитСсылок = Справочники.Настройки.ДопРеквПрямыеСсылкиНаФотоНоменклатура.Значение;
	
	Если ЗначениеЗаполнено(ТекХарактеристика) Тогда
		ИсточникСсылок = ТекХарактеристика;
		РеквизитСсылок = Справочники.Настройки.ДопРеквПрямыеСсылкиНаФото.Значение;
	КонецЕсли; 		
	
	ДопРеквизит = ИсточникСсылок.ДополнительныеРеквизиты.Найти(РеквизитСсылок, "Свойство");
	
	РезультатСсылка = "";
	
	Если ДопРеквизит <> Неопределено Тогда
		СсылкиДляСайта = ДопРеквизит.Значение;
		СсылкиДляСайтаМассив = СтрРазделить(СсылкиДляСайта,",");
		Если СсылкиДляСайтаМассив.Количество() >= 1 Тогда
			РезультатСсылка = СсылкиДляСайтаМассив[0];	
		КонецЕсли; 
	КонецЕсли; 

	Возврат РезультатСсылка; 
КонецФункции // ПолучитьСсылкуДляСайта()

//Share Point
Процедура ОсновныеДействияФормыПолучитьCookie(ПараметрыПодключения)
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	//ПараметрыПодключения.Вставить("BinarySecurityToken", "");
	//ПараметрыПодключения.Вставить("Cookie", "");
	//ПараметрыПодключения.Вставить("XRequestDigest", "");
	
	ПолучитьCookieШаг1(SSL, ПараметрыПодключения);
	ПолучитьCookieШаг2(SSL, ПараметрыПодключения);
	ПолучитьCookieШаг3(SSL, ПараметрыПодключения);
	
КонецПроцедуры

Функция ПолучитьТекстloginmicrosoftonlinecom()
	Возврат "<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope""
	|      xmlns:a=""http://www.w3.org/2005/08/addressing""
	|      xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
	|  <s:Header>
	|    <a:Action s:mustUnderstand=""1"">http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue</a:Action>
	|    <a:ReplyTo>
	|      <a:Address>http://www.w3.org/2005/08/addressing/anonymous</a:Address>
	|    </a:ReplyTo>
	|    <a:To s:mustUnderstand=""1"">https://login.microsoftonline.com/extSTS.srf</a:To>
	|    <o:Security s:mustUnderstand=""1""
	|       xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
	|      <o:UsernameToken>
	|        <o:Username>[Логин]</o:Username>
	|        <o:Password>[Пароль]</o:Password>
	|      </o:UsernameToken>
	|    </o:Security>
	|  </s:Header>
	|  <s:Body>
	|    <t:RequestSecurityToken xmlns:t=""http://schemas.xmlsoap.org/ws/2005/02/trust"">
	|      <wsp:AppliesTo xmlns:wsp=""http://schemas.xmlsoap.org/ws/2004/09/policy"">
	|        <a:EndpointReference>
	|          <a:Address>https://[Домен]/</a:Address>
	|        </a:EndpointReference>
	|      </wsp:AppliesTo>
	|      <t:KeyType>http://schemas.xmlsoap.org/ws/2005/05/identity/NoProofKey</t:KeyType>
	|      <t:RequestType>http://schemas.xmlsoap.org/ws/2005/02/trust/Issue</t:RequestType>
	|      <t:TokenType>urn:oasis:names:tc:SAML:1.0:assertion</t:TokenType>
	|    </t:RequestSecurityToken>
	|  </s:Body>
	|</s:Envelope>";
КонецФункции

Процедура ПолучитьCookieШаг1(SSL, ПараметрыПодключения) 
	
	ЛогинSP = ПараметрыПодключения.Логин;
	ПарольSP = ПараметрыПодключения.Пароль;
	Домен = ПараметрыПодключения.Сервер;
	BinarySecurityToken = "";
	
	Если ПараметрыПодключения.Свойство("BinarySecurityToken", BinarySecurityToken) Тогда
		Если ЗначениеЗаполнено(BinarySecurityToken) Тогда
			Return;	
		КонецЕсли; 	
	КонецЕсли; 
	
	ТексЗапроса = ПолучитьТекстloginmicrosoftonlinecom();
	ТексЗапроса = СтрЗаменить(ТексЗапроса, "[Логин]", ЛогинSP);
	ТексЗапроса = СтрЗаменить(ТексЗапроса, "[Пароль]", ПарольSP);
	ТексЗапроса = СтрЗаменить(ТексЗапроса, "[Домен]", Домен);
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Accept", "application/json; odata=verbose");
	HTTPОтвет = ВыполнитьHTTPЗапрос("https://login.microsoftonline.com/extSTS.srf", ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	ДанныеОтветаСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	ТекстНачало = "<wsse:BinarySecurityToken Id=""Compact0"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">";
	НачалоТекста = Найти(ДанныеОтветаСтрокой, ТекстНачало);
	Если НачалоТекста = 0 Тогда 
		Возврат;
	КонецЕсли;
	НачалоТекста = НачалоТекста + СтрДлина(ТекстНачало);
	ТекстКонец = "</wsse:BinarySecurityToken>";
	КонецТекста = Найти(ДанныеОтветаСтрокой, ТекстКонец);
	Если КонецТекста = 0 Тогда 
		Возврат;
	КонецЕсли;
	BinarySecurityToken = Сред(ДанныеОтветаСтрокой, НачалоТекста, КонецТекста - НачалоТекста);
	
	ПараметрыПодключения.Вставить("BinarySecurityToken", BinarySecurityToken); 
КонецПроцедуры

Процедура ПолучитьCookieШаг2(SSL, ПараметрыПодключения) 
	
	BinarySecurityToken = ПараметрыПодключения.BinarySecurityToken;
	Домен = ПараметрыПодключения.Сервер;
	Cookie = "";
	Если ПараметрыПодключения.Свойство("Cookie", Cookie) Тогда
		Если ЗначениеЗаполнено(Cookie) Тогда
			Return;	
		КонецЕсли; 	
	КонецЕсли;
	
	HTTPОтвет = ВыполнитьHTTPЗапрос("https://"+Домен+"/_forms/default.aspx?wa=wsignin1.0", BinarySecurityToken, , SSL);
	Cookie = HTTPОтвет.Заголовки.Получить("Set-Cookie");
	Cookie = СтрЗаменить(Cookie, "domain=sharepoint.com; path=/; secure; HttpOnly,", "");
	Cookie = СтрЗаменить(Cookie, "; path=/; secure; HttpOnly, RpsContextCookie=; path=/", "");	
	
	ПараметрыПодключения.Вставить("Cookie", Cookie); 
КонецПроцедуры

Процедура ПолучитьCookieШаг3(SSL, ПараметрыПодключения) 
	
	Cookie = ПараметрыПодключения.Cookie;
	Домен = ПараметрыПодключения.Сервер;
	XRequestDigest = "";
	Если ПараметрыПодключения.Свойство("XRequestDigest", XRequestDigest) Тогда
		Если ЗначениеЗаполнено(XRequestDigest) Тогда
			Return;	
		КонецЕсли; 	
	КонецЕсли;
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Cookie", Cookie);
	HTTPОтвет = ВыполнитьHTTPЗапрос("https://"+Домен+"/_api/contextinfo",,ЗаголовкиHTTPЗапрос, SSL, "Get");
	//HTTPОтвет = ВыполнитьHTTPЗапрос("https://"+Домен+"/_api/web/lists",,ЗаголовкиHTTPЗапрос, SSL);
	
	ДанныеОтветаСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
	ТекстНачало = "<d:FormDigestValue>";
	НачалоТекста = Найти(ДанныеОтветаСтрокой, ТекстНачало);
	Если НачалоТекста = 0 Тогда 
		Возврат;
	КонецЕсли;
	НачалоТекста = НачалоТекста + СтрДлина(ТекстНачало);
	ТекстКонец = "</d:FormDigestValue>";
	КонецТекста = Найти(ДанныеОтветаСтрокой, ТекстКонец);
	Если КонецТекста = 0 Тогда 
		Сообщить("В HTTPОтвет не удалось найти конец FormDigestValue");
		Возврат;
	КонецЕсли;
	XRequestDigest = Сред(ДанныеОтветаСтрокой, НачалоТекста, КонецТекста - НачалоТекста);	
	
	ПараметрыПодключения.Вставить("XRequestDigest", XRequestDigest);
КонецПроцедуры	

Функция ВыполнитьHTTPЗапрос(ПолныйАдресРесурса, ТексHTTPЗапроса = Неопределено, ЗаголовкиHTTPЗапрос = Неопределено, SSL = Неопределено, Метод = Неопределено, ЭтоРекурсия = Ложь) 
	
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	
	Если SSL = Неопределено Тогда 
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, ,,,,); 
	Иначе 
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, ,,,,SSL); 
	КонецЕсли;
	
	Если ЗаголовкиHTTPЗапрос = Неопределено Тогда 
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	Иначе 
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, ЗаголовкиHTTPЗапрос);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТексHTTPЗапроса) Тогда 
		Если ТипЗнч(ТексHTTPЗапроса) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТексHTTPЗапроса);
		Иначе	
			HTTPЗапрос.УстановитьТелоИзСтроки(ТексHTTPЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если Метод = "Get" Тогда 
			Попытка
				HTTPОтвет =  HTTPСоединение.Получить(HTTPЗапрос);
			Исключение
				ТекстСообщения = "Ошибка при выполнении HTTPСоединение "+ПолныйАдресРесурса+"! " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Сообщить(ТекстСообщения);
			КонецПопытки;
		ИначеЕсли Метод = "PUT" Тогда	
			Попытка
				HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("PUT ", HTTPЗапрос);
			Исключение
				ТекстСообщения = "Ошибка при выполнении HTTPСоединение "+ПолныйАдресРесурса+"! " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Сообщить(ТекстСообщения);
			КонецПопытки;	
		Иначе 
			Попытка
				HTTPОтвет =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			Исключение
				ТекстСообщения = "Ошибка при выполнении HTTPСоединение "+ПолныйАдресРесурса+"! " + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	Исключение
		
		ТекстСообщения = "Ошибка при выполнении HTTPСоединение "+ПолныйАдресРесурса+"! " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("HTTPСоединение", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Сообщить(ТекстСообщения);
		
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		Сообщить("Произошла сетевая ошибка!");
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат HTTPОтвет;  
	
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) 
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	HTTPОтвет = Новый Структура;
	HTTPОтвет.Вставить("Схема", Схема);
	HTTPОтвет.Вставить("Логин", Логин);
	HTTPОтвет.Вставить("Пароль", Пароль);
	HTTPОтвет.Вставить("ИмяСервера", ИмяСервера);
	HTTPОтвет.Вставить("Хост", Хост);
	HTTPОтвет.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	HTTPОтвет.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат HTTPОтвет;
	
КонецФункции

Процедура ОтправитьДанныеНаSharePoint(ПараметрыПодключения, Данные = Неопределено) Экспорт
	//Кожемякин А.Г. agkozhemyakin@gmail.com {
	//12/21/2019 1:22:52 PM
	//с 21.12.2019 используем новый API Sharepoint
	ОтправитьДанныеНаSharePointREST(ПараметрыПодключения, Данные);
	Возврат;
	//}Кожемякин А.Г.
	
	Если Данные = Неопределено Тогда
		АдресДанныхВременноеХранилище 	= ПараметрыПодключения.АдресДанныхВременноеХранилище;
		Данные 							= ПолучитьИзВременногоХранилища(АдресДанныхВременноеХранилище)
	КонецЕсли;	
	
	ОсновныеДействияФормыПолучитьCookie(ПараметрыПодключения);
	
	//Если Не ЗначениеЗаполнено(ПараметрыПодключения.Cookie) Тогда 
	Если Не ЗначениеЗаполнено(ПараметрыПодключения.Cookie) Или Не ЗначениеЗаполнено(ПараметрыПодключения.XRequestDigest) Тогда 
		ТекстСообщения = "Данные не отрпавлены так как не были получены Cookie";
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Возврат;
	Иначе
		ОтправитьФайлНаSharePoint(ПараметрыПодключения, Данные);
	КонецЕсли;
КонецПроцедуры

Функция СоздатьКатлогВSharePoint(ПараметрыПодключения)
	Cookie 				= ПараметрыПодключения.Cookie;
	Домен 				= ПараметрыПодключения.Сервер;
	Каталог 			= ПараметрыПодключения.Каталог;
	XRequestDigest 		= ПараметрыПодключения.XRequestDigest;	
	НаименованиеКлиента = ПараметрыПодключения.НаименованиеКлиента;
	
	URLЗапроса = "https://"+Домен+"/sites/General/_vti_bin/DWS.asmx";	
	
	SSLСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	Попытка
		Определения = Новый WSОпределения(URLЗапроса+ "?WSDL",,,,,SSLСоединение,);
	Исключение
		ТекстСообщения = "Не удалось создать WSОпределения";
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Cookie) Или Не ЗначениеЗаполнено(XRequestDigest) Тогда 
		ТекстСообщения = "Обмен не выполнен так как не были получены Cookie";
		Сообщить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	Если Прав(Каталог,1) <> "/" Тогда
		Каталог = Каталог + "/";
	КонецЕсли;
	
	Каталог = Сред(Каталог,Найти(Каталог,"Shared Documents"));
	
	//Каталог = СтрРазделить(Каталог,"/");
	
	///Получить таблицу данних как она есть в ШП
	ТексЗапроса = "<?xml version='1.0' encoding='utf-8'?>
	|<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'>
	|  <soap:Body>
	|    <CreateFolder xmlns='http://schemas.microsoft.com/sharepoint/soap/dws/'>
	//|      <url>Shared Documents/"+Каталог[Каталог.Количество()-1]+"/"+НаименованиеКлиента+"</url>
	|      <url>"+Каталог+НаименованиеКлиента+"</url>
	|    </CreateFolder>
	|  </soap:Body>
	|</soap:Envelope>";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Cookie", Cookie);
	ЗаголовкиHTTPЗапрос.Вставить("X-RequestDigest", XRequestDigest);
	
	ЗаголовкиHTTPЗапрос.Вставить("Content-Type", "text/xml;charset=utf-8");
	ЗаголовкиHTTPЗапрос.Вставить("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/dws/CreateFolder");
	ЗаголовкиHTTPЗапрос.Вставить("Host", Домен);
	//ЗаголовкиHTTPЗапрос.Вставить("Content-Length", СтрДлина(ТексЗапроса));
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
КонецФункции	

Процедура ОтправитьФайлНаSharePoint(ПараметрыПодключения, Файл)
	
	НаименованиеКлиентаКаталог = ""; 
	
	Если ПараметрыПодключения.Свойство("НаименованиеКлиента",НаименованиеКлиентаКаталог) Тогда
		НаименованиеКлиентаКаталог = НаименованиеКлиентаКаталог + "/";
		Если Не СоздатьКатлогВSharePoint(ПараметрыПодключения) Тогда
			ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,"Не удалось создать каталог для клиента");
			Возврат;	
		КонецЕсли;	
		
	КонецЕсли; 
	
	Cookie 			= ПараметрыПодключения.Cookie;
	Домен 			= ПараметрыПодключения.Сервер;
	Каталог			= ПараметрыПодключения.Каталог;
	
	Если Прав(Каталог,1) <> "/" Тогда
		Каталог = Каталог + "/";
	КонецЕсли;
	
	Если Лев(Каталог,1) <> "/" Тогда
		Каталог =  "/" + Каталог;
	КонецЕсли;
	
	XRequestDigest 	= ПараметрыПодключения.XRequestDigest;
	
	URLЗапроса = "https://"+Домен+"/_vti_bin/Copy.asmx";	
	
	SSLСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	Попытка
		Определения = Новый WSОпределения(URLЗапроса+ "?WSDL",,,,,SSLСоединение,);
	Исключение
		ТекстСообщения = "Не удалось создать WSОпределения";
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		Соединение  = Новый WSПрокси(Определения, "http://schemas.microsoft.com/sharepoint/soap/", "Copy", "CopySoap", ,,SSLСоединение,,);
	Исключение
		ТекстСообщения = "Не удалось создать WSПрокси WSОпределения";
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Возврат;
	КонецПопытки;
	ФабрикаXDTOДляЧтенияОтветов = Соединение.ФабрикаXDTO;
	
	Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
		вуДД = Файл;
	Иначе	
		вуФайл = Новый Файл(Файл);
		Если Не вуФайл.Существует() Тогда
			ТекстСообщения = "Выбранный файл не существует " + Файл;
			ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		вуДД = Новый ДвоичныеДанные(Файл);
	КонецЕсли; 
	
	вуСтрим = Base64Строка(вуДД);
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	///Получить таблицу данних как она есть в ШП
	ТексЗапроса = "<?xml version='1.0' encoding='utf-8'?>
	|<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:soap='http://www.w3.org/2003/05/soap-envelope'>
	|  <soap:Body>
	|<CopyIntoItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>
	|	<SourceUrl>Компьютер пользователя</SourceUrl>
	|	<DestinationUrls>
	|		<string>https://"+ Домен + Каталог + НаименованиеКлиентаКаталог+ ПараметрыПодключения.ИмяФайла + "</string>
	|	</DestinationUrls>
	|	<Fields>
	//|		<FieldInformation Type='File' DisplayName='TextTestExcel' InternalName='TextTestExcel_name' Value='Загружено из 1С' />
	|	</Fields>
	|	<Stream>" + вуСтрим + "</Stream>
	|</CopyIntoItems>
	|  </soap:Body>
	|</soap:Envelope>";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Cookie", Cookie);
	//ЗаголовкиHTTPЗапрос.Вставить("X-RequestDigest", XRequestDigest);
	
	ЗаголовкиHTTPЗапрос.Вставить("Content-Type", "text/xml;charset=utf-8");
	ЗаголовкиHTTPЗапрос.Вставить("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/CopyIntoItems");
	ЗаголовкиHTTPЗапрос.Вставить("Host", Домен);
	//ЗаголовкиHTTPЗапрос.Вставить("Content-Length", СтрДлина(ТексЗапроса));
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	//HTTPОтвет.КодСостояния
КонецПроцедуры

//процедуры и функции по новому API REST
Процедура ОтправитьДанныеНаSharePointREST(ПараметрыПодключения, Данные = Неопределено)
	Если Данные = Неопределено Тогда
		АдресДанныхВременноеХранилище 	= ПараметрыПодключения.АдресДанныхВременноеХранилище;
		Данные 							= ПолучитьИзВременногоХранилища(АдресДанныхВременноеХранилище)
	КонецЕсли;
	
	ОсновныеДействияФормыПолучитьТокен(ПараметрыПодключения);
	
	Если Не ЗначениеЗаполнено(ПараметрыПодключения.Токен) Тогда 
		ТекстСообщения = "Данные не отрпавлены так как не был получен accessToken";
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Возврат;
	Иначе
		ОтправитьФайлНаSharePointREST(ПараметрыПодключения, Данные);
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыПолучитьТокен(ПараметрыПодключения)
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	ПараметрыПодключения.Вставить("Токен", "");
	
	ПолучитьТокенДоступа(SSL, ПараметрыПодключения);
	
КонецПроцедуры

Процедура ПолучитьТокенДоступа(SSL, ПараметрыПодключения)

	Попытка
		ИДКлиента 		= СокрЛП(ПараметрыПодключения.ИДКлиента);
	Исключение
	    ИДКлиента 		= "";
	КонецПопытки;
	
	Попытка
		СекретКлиента 		= СокрЛП(ПараметрыПодключения.СекретКлиента);
	Исключение
	    СекретКлиента 		= "";
	КонецПопытки;
	
	Попытка
		ТенантИД 		= СокрЛП(ПараметрыПодключения.ТенантИД);
	Исключение
	    ТенантИД 		= "";
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ИДКлиента) Тогда
		ИДКлиента = "a2922c3d-f343-40b1-bd96-9acc6d69da18";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СекретКлиента) Тогда
		СекретКлиента = "45JyNXxH9TSfWQsGwR8phhWYFjw7heJmONOu35hJaB8=";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТенантИД) Тогда
		ТенантИД = "8926ec30-1c47-412a-8946-59c85a45309b";
	КонецЕсли;
	
	ТексЗапроса = "grant_type=client_credentials
	|&resource=00000003-0000-0ff1-ce00-000000000000/digitstyle.sharepoint.com@"+ТенантИД+"
	|&client_id="+ИДКлиента+"@"+ТенантИД+"
	|&client_secret="+СекретКлиента;
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPОтвет = ВыполнитьHTTPЗапрос("https://accounts.accesscontrol.windows.net/"+ТенантИД+"/tokens/OAuth/2", ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		Token = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ПараметрыПодключения.Вставить("Токен", Token.access_token);
	 Иначе
		 ТекстСообщения = "Произошла ошибка обращения к серверу," + "Токен не получен" +
		 Символы.ПС + "Статус ответа сервера: " + HTTPОтвет.КодСостояния;
		 ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьФайлНаSharePointREST(ПараметрыПодключения, Файл)
	
	НаименованиеКлиентаКаталог = ""; 
	
	Если ПараметрыПодключения.Свойство("НаименованиеКлиента",НаименованиеКлиентаКаталог) Тогда
		НаименованиеКлиентаКаталог = НаименованиеКлиентаКаталог + "/";
		Если Не СоздатьКатлогВSharePointREST(ПараметрыПодключения) Тогда
			ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,"Не удалось создать каталог для клиента");
			Возврат;	
		КонецЕсли;	
	КонецЕсли; 
	
	Токен 			= ПараметрыПодключения.Токен;
	Домен 			= ПараметрыПодключения.Сервер;
	Каталог			= ПараметрыПодключения.Каталог;
	
	Если Прав(Каталог,1) <> "/" Тогда
		Каталог = Каталог + "/";
	КонецЕсли;
	
	УдалитьЛевыйСлеш(Каталог);
	
	ПочиститьКаталогREST(Каталог);

	УдалитьЛевыйСлеш(Каталог);
	
	Если Прав(Каталог,1) <> "/" Тогда
		Каталог = Каталог + "/";
	КонецЕсли;
	
	Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
		вуДД = Файл;
	Иначе	
		вуФайл = Новый Файл(Файл);
		Если Не вуФайл.Существует() Тогда
			ТекстСообщения = "Выбранный файл не существует " + Файл;
			ЗаписьЖурналаРегистрации("ОтправкаФайлаНаSharePoint",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		вуДД = Новый ДвоичныеДанные(Файл);
	КонецЕсли; 
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	URLЗапроса = "http://"+Домен+"/sites/General/_api/web/GetFolderByServerRelativeUrl('"+Каталог+НаименованиеКлиентаКаталог+"')/Files/add(url='"+ПараметрыПодключения.ИмяФайла+"',overwrite=true)";	
	
	ТексЗапроса = "";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Authorization", "Bearer " + Токен);
	ЗаголовкиHTTPЗапрос.Вставить("content-type", "application/json;odata=verbose");
	ЗаголовкиHTTPЗапрос.Вставить("content-length", Формат(вуДД.Размер(), "ЧГ=0"));
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, вуДД, ЗаголовкиHTTPЗапрос, SSL);
	//HTTPОтвет.КодСостояния
КонецПроцедуры

Процедура УдалитьЛевыйСлеш(Каталог)
	
	Если Лев(Каталог,1) = "/" Тогда
		Каталог =  Сред(Каталог,2);
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьПравыйСлеш(Каталог)
	
	Если Прав(Каталог,1) = "/" Тогда
		Каталог =  Сред(Каталог,1,СтрДлина(Каталог)-1);
	КонецЕсли;

КонецПроцедуры

Процедура ПочиститьКаталогREST(Каталог)
	
	Каталог = СтрЗаменить(Каталог,"sites/General/","");

КонецПроцедуры

Функция СоздатьКатлогВSharePointREST(ПараметрыПодключения)
	Токен 				= ПараметрыПодключения.Токен;
	Домен 				= ПараметрыПодключения.Сервер;
	Каталог 			= ПараметрыПодключения.Каталог;
	НаименованиеКлиента = ПараметрыПодключения.НаименованиеКлиента;
	
	Если Не ЗначениеЗаполнено(Токен) Тогда 
		ТекстСообщения = "Обмен не выполнен так как не был получен accessToken";
		Сообщить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Прав(Каталог,1) <> "/" Тогда
		Каталог = Каталог + "/";
	КонецЕсли;
	
	УдалитьЛевыйСлеш(Каталог);
	
	ПочиститьКаталогREST(Каталог);
	
	УдалитьЛевыйСлеш(Каталог);
	
	Если Прав(Каталог,1) <> "/" Тогда
		Каталог = Каталог + "/";
	КонецЕсли;
	
	//Каталог = Сред(Каталог,Найти(Каталог,"Shared Documents"));
	
	ТексЗапроса = "";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Authorization", "Bearer " + Токен);
	ЗаголовкиHTTPЗапрос.Вставить("content-type", "application/json;odata=verbose");
	ЗаголовкиHTTPЗапрос.Вставить("accept", "application/json;odata=verbose");
	
	URLЗапроса = "http://"+Домен+"/sites/General/_api/web/folders/add('"+Каталог+НаименованиеКлиента+"')";	
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
КонецФункции	

//процедуры и функции по OneDrive API REST
Процедура ОтправитьДанныеНаOneDrive(ПараметрыПодключения, Данные = Неопределено) Экспорт
	ОтправитьДанныеНаOneDriveREST(ПараметрыПодключения, Данные);
КонецПроцедуры

Процедура ОтправитьДанныеНаOneDriveREST(ПараметрыПодключения, Данные = Неопределено)
	Если Данные = Неопределено Тогда
		АдресДанныхВременноеХранилище 	= ПараметрыПодключения.АдресДанныхВременноеХранилище;
		Данные 							= ПолучитьИзВременногоХранилища(АдресДанныхВременноеХранилище)
	КонецЕсли;
	
	ОсновныеДействияФормыПолучитьТокенOneDrive(ПараметрыПодключения);
	
	Если Не ЗначениеЗаполнено(ПараметрыПодключения.Токен) Тогда 
		ТекстСообщения = "Данные не отрпавлены так как не был получен accessToken";
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Возврат;
	Иначе
		ОтправитьФайлНаOneDriveREST(ПараметрыПодключения, Данные);
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыПолучитьТокенOneDrive(ПараметрыПодключения)
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	ПараметрыПодключения.Вставить("Токен", "");
	
	ПолучитьТокенДоступаOneDrive(SSL, ПараметрыПодключения);
	
КонецПроцедуры

Процедура ПолучитьТокенДоступаOneDrive(SSL, ПараметрыПодключения)

	Попытка
		ИДКлиента 		= СокрЛП(ПараметрыПодключения.ИДКлиента);
	Исключение
	    ИДКлиента 		= "";
	КонецПопытки;
	
	Попытка
		СекретКлиента 		= СокрЛП(ПараметрыПодключения.СекретКлиента);
	Исключение
	    СекретКлиента 		= "";
	КонецПопытки;
	
	Попытка
		ТенантИД 		= СокрЛП(ПараметрыПодключения.ТенантИД);
	Исключение
	    ТенантИД 		= "";
	КонецПопытки;
	
	//Если Не ЗначениеЗаполнено(ИДКлиента) Тогда
	//	ИДКлиента = "a2922c3d-f343-40b1-bd96-9acc6d69da18";
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(СекретКлиента) Тогда
	//	СекретКлиента = "45JyNXxH9TSfWQsGwR8phhWYFjw7heJmONOu35hJaB8=";
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(ТенантИД) Тогда
	//	ТенантИД = "8926ec30-1c47-412a-8946-59c85a45309b";
	//КонецЕсли;
	
	ТексЗапроса = "grant_type=client_credentials&client_id="+ИДКлиента+"&client_secret="+СекретКлиента+"&scope =https://graph.microsoft.com/.default";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPОтвет = ВыполнитьHTTPЗапрос("https://accounts.accesscontrol.windows.net/"+ТенантИД+"/tokens/OAuth/2", ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		Token = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ПараметрыПодключения.Вставить("Токен", Token.access_token);
	 Иначе
		 ТекстСообщения = "Произошла ошибка обращения к серверу," + "Токен не получен" +
		 Символы.ПС + "Статус ответа сервера: " + HTTPОтвет.КодСостояния;
		 ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьФайлНаOneDriveREST(ПараметрыПодключения, Файл)
	
	Отказ = Ложь;
	
	СоздатьКатлогВOneDriveREST(ПараметрыПодключения, Отказ);
		
	Если Отказ Тогда	
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,"Не удалось создать каталог для клиента");
		Возврат;
	КонецЕсли;
   
	Токен 			= ПараметрыПодключения.Токен;
	Домен 			= ПараметрыПодключения.Сервер;
	Логин			= ПараметрыПодключения.Логин;
	ИДКаталога		= ПараметрыПодключения.ИДКаталога;
	
	Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
		вуДД = Файл;
	Иначе	
		вуФайл = Новый Файл(Файл);
		Если Не вуФайл.Существует() Тогда
			ТекстСообщения = "Выбранный файл не существует " + Файл;
			ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		вуДД = Новый ДвоичныеДанные(Файл);
	КонецЕсли; 
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	
	URLЗапроса = "https://graph.microsoft.com/v1.0/users/"+Логин+"/drive/items/"+ИДКаталога+":/"+вуФайл.Имя+":/content";
	
	ТексЗапроса = "";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Authorization", "Bearer " + Токен);
	ЗаголовкиHTTPЗапрос.Вставить("content-type", "application/json;odata=verbose");
	ЗаголовкиHTTPЗапрос.Вставить("content-length", Формат(вуДД.Размер(), "ЧГ=0"));
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, вуДД, ЗаголовкиHTTPЗапрос, SSL,"PUT");
	//HTTPОтвет.КодСостояния
КонецПроцедуры

Процедура СоздатьКатлогВOneDriveREST(ПараметрыПодключения, Отказ)
	Токен 				= ПараметрыПодключения.Токен;
	Каталог 			= ПараметрыПодключения.Каталог;
	Логин 				= ПараметрыПодключения.Логин;
	НаименованиеКлиента = ПараметрыПодключения.НаименованиеКлиента;
		
	Если Не ЗначениеЗаполнено(Токен) Тогда 
		ТекстСообщения = "Обмен не выполнен так как не был получен accessToken";
		Сообщить(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УдалитьЛевыйСлеш(Каталог);
	УдалитьПравыйСлеш(Каталог);
	
	СтрокиКаталог 	= СтрЗаменить(Каталог,"/",Символы.ПС);
	ЧислоКаталогов 	= СтрЧислоСтрок(СтрокиКаталог);
	
	Если ЧислоКаталогов = 0 Тогда
		Отказ = Истина;
		Возврат;
	Иначе
		ИмяПапки = СокрЛП(СтрПолучитьСтроку(СтрокиКаталог,1));
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ИмяПапки) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТексЗапроса = "{
  	|""name"": """+ИмяПапки+""",
  	|""folder"": { },
  	|""@microsoft.graph.conflictBehavior"": ""fail""
	|}";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Authorization", "Bearer " + Токен);
	ЗаголовкиHTTPЗапрос.Вставить("content-type", "application/json");
	
	URLЗапроса = "https://graph.microsoft.com/v1.0/users/"+Логин+"/drive/root/children";	
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	ИДКаталога = "";
	
	Если HTTPОтвет.КодСостояния = 201 Тогда
		Ответ 		= HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON	= новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ОтветJSON 		= ПрочитатьJSON(ЧтениеJSON, Истина);
		ИДКаталога 	= ОтветJSON.Получить("id");
	ИначеЕсли HTTPОтвет.КодСостояния = 409 Тогда	
		Ответ 			= HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON		= новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ОтветJSON 		= ПрочитатьJSON(ЧтениеJSON, Истина);
		code 			= ОтветJSON.Получить("error").Получить("code");
		Если code = "nameAlreadyExists" Тогда
			ПолучитьИДКаталога(ПараметрыПодключения,ИмяПапки,ИДКаталога,Отказ);
		КонецЕсли;	
	Иначе
		ТекстСообщения = "Произошла ошибка обращения к серверу," + "Папка не создана: " + ИмяПапки +
		Символы.ПС + "Статус ответа сервера: " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	
	Если ЗначениеЗаполнено(ИДКаталога) Тогда
		ТекКаталог = 2;
		Пока ЧислоКаталогов >= ТекКаталог Цикл 
			Если Не Отказ Тогда 
				ИмяПапки 	= СокрЛП(СтрПолучитьСтроку(СтрокиКаталог,ТекКаталог));
				СоздатьВложенныйКаталогВOneDriveREST(ПараметрыПодключения, ИДКаталога, ИмяПапки, Отказ);
				ТекКаталог 	= ТекКаталог + 1;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НаименованиеКлиента) и Не Отказ Тогда
		СоздатьВложенныйКаталогВOneDriveREST(ПараметрыПодключения, ИДКаталога, НаименованиеКлиента, Отказ);
	КонецЕсли;	
	
	ПараметрыПодключения.Вставить("ИДКаталога", ИДКаталога);	
КонецПроцедуры	

Процедура СоздатьВложенныйКаталогВOneDriveREST(ПараметрыПодключения, ИДКаталога, ИмяПапки, Отказ)
	Токен 				= ПараметрыПодключения.Токен;
	Логин 				= ПараметрыПодключения.Логин;
	
	Если Не ЗначениеЗаполнено(Токен) Тогда 
		ТекстСообщения = "Обмен не выполнен так как не был получен accessToken";
		Сообщить(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИДКаталога) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТексЗапроса = "{
  	|""name"": """+ИмяПапки+""",
  	|""folder"": { },
  	|""@microsoft.graph.conflictBehavior"": ""fail""
	|}";
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Authorization", "Bearer " + Токен);
	ЗаголовкиHTTPЗапрос.Вставить("content-type", "application/json");
	
	URLЗапроса = "https://graph.microsoft.com/v1.0/users/"+Логин+"/drive/items/"+ИДКаталога+"/children";
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, ТексЗапроса, ЗаголовкиHTTPЗапрос, SSL);
	
	Если HTTPОтвет.КодСостояния = 201 Тогда
		Ответ 		= HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON	= новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ОтветJSON 		= ПрочитатьJSON(ЧтениеJSON, Истина);
		ИДКаталога 	= ОтветJSON.Получить("id");
	ИначеЕсли HTTPОтвет.КодСостояния = 409 Тогда	
		Ответ 			= HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON		= новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ОтветJSON 		= ПрочитатьJSON(ЧтениеJSON, Истина);
		code 			= ОтветJSON.Получить("error").Получить("code");
		Если code = "nameAlreadyExists" Тогда
			ПолучитьИДКаталога(ПараметрыПодключения,ИмяПапки,ИДКаталога,Отказ);
		КонецЕсли;	
	Иначе
		ТекстСообщения = "Произошла ошибка обращения к серверу," + "Папка не создана: " + ИмяПапки +
		Символы.ПС + "Статус ответа сервера: " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ПолучитьИДКаталога(ПараметрыПодключения, ИмяПапки, ИДКаталога, Отказ)
	Токен 				= ПараметрыПодключения.Токен;
	Логин 				= ПараметрыПодключения.Логин;
	
	Если Не ЗначениеЗаполнено(Токен) Тогда 
		ТекстСообщения = "Обмен не выполнен так как не был получен accessToken";
		Сообщить(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИДКаталога) тогда
		URLЗапроса = "https://graph.microsoft.com/v1.0/users/"+Логин+"/drive/items/"+ИДКаталога+"/children";
	Иначе
		URLЗапроса = "https://graph.microsoft.com/v1.0/users/"+Логин+"/drive/root/children";
	КонецЕсли;	
	
	ЗаголовкиHTTPЗапрос = Новый Соответствие;
	ЗаголовкиHTTPЗапрос.Вставить("Authorization", "Bearer " + Токен);
	ЗаголовкиHTTPЗапрос.Вставить("content-type", "application/json");
		
	SSL = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPОтвет = ВыполнитьHTTPЗапрос(URLЗапроса, "", ЗаголовкиHTTPЗапрос, SSL,"Get");
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ 		= HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON	= новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Ответ);
		ОтветJSON 		= ПрочитатьJSON(ЧтениеJSON, Истина);
		Папки = ОтветJSON.Получить("value");
		Для Каждого Папка из Папки Цикл
			Если Папка.Получить("name") = СокрЛП(ИмяПапки) Тогда
				ИДКаталога = Папка.Получить("id");
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстСообщения = "Произошла ошибка обращения к серверу," + "не удалось получить идентификатор папки" +
		Символы.ПС + "Статус ответа сервера: " + HTTPОтвет.КодСостояния;
		ЗаписьЖурналаРегистрации("ОтправкаФайлаНаOneDrive",УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры
