// ИСТОРИЯ ВЕРСИЙ

//---------------------------------------------------------------------------------------------------------------------------------------
Функция ВерсияМодуля() Экспорт 
	
	История = ИсторияВерсий(Истина);
	
	Возврат История[0].Номер;
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция ИсторияВерсий(ТолькоПоследнийНомер = Ложь) Экспорт 
	Рез = Новый Массив;
	
	ИсторияВерсий_Добавить(Рез, "1.2.0", "15.05.2018", "Добавлен механизм позволяющий настроить запуск любых обработок автоматически по расписанию");
	Если ТолькоПоследнийНомер = Истина Тогда
		Возврат Рез;
	КонецЕсли;
	ИсторияВерсий_Добавить(Рез, "1.1.0", "06.04.2018", "Добавлен механизм хранения произвольных данных - Хранилище настроек");
	ИсторияВерсий_Добавить(Рез, "1.0.0", "16.02.2018", "Выпуск первой версии");
	
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция ИсторияВерсий_Добавить(История, Номер, ДатаВыпуска, Описание)
	
	Стр = Новый Структура("Номер,ДатаВыпуска,Описание", Номер, ДатаВыпуска, Описание); 
	История.Добавить(Стр);
	
КонецФункции



// Хранилище настроек

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_ХранилищеНастроек_Сохранить(КлючОбъекта, КлючНастроек, ИмяПользователя, Данные, ОписаниеНастроек="") Экспорт 
	Рез = Истина;
	
	З = РегистрыСведений.APPLIX_RU_СМ_ХранилищеНастроек.СоздатьМенеджерЗаписи();
	З.Активность = Истина;
	З.КлючОбъекта = КлючОбъекта;
	З.КлючНастроек = КлючНастроек;
	З.ИмяПользователя = ИмяПользователя;
	З.ОписаниеНастроек = ОписаниеНастроек;
	З.Данные = Новый ХранилищеЗначения(Данные);
	Попытка
		З.Записать(Истина);
	Исключение
		т = ОписаниеОшибки();
		Сообщить("Ошибка записи данных в хранилище настроек: " + т);
		Рез = Ложь;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции


//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_ХранилищеНастроек_Восстановить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт 
	Рез = Новый Структура("Данные,ОписаниеНастроек", Неопределено, Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	APPLIX_RU_СМ_ХранилищеНастроек.КлючОбъекта,
	|	APPLIX_RU_СМ_ХранилищеНастроек.КлючНастроек,
	|	APPLIX_RU_СМ_ХранилищеНастроек.ИмяПользователя,
	|	APPLIX_RU_СМ_ХранилищеНастроек.Данные,
	|	APPLIX_RU_СМ_ХранилищеНастроек.ОписаниеНастроек
	|ИЗ
	|	РегистрСведений.APPLIX_RU_СМ_ХранилищеНастроек КАК APPLIX_RU_СМ_ХранилищеНастроек
	|ГДЕ
	|	APPLIX_RU_СМ_ХранилищеНастроек.КлючОбъекта = &КлючОбъекта
	|	И APPLIX_RU_СМ_ХранилищеНастроек.КлючНастроек = &КлючНастроек
	|	И APPLIX_RU_СМ_ХранилищеНастроек.ИмяПользователя = &ИмяПользователя");
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("КлючОбъекта", КлючОбъекта);
	Запрос.УстановитьПараметр("КлючНастроек", КлючНастроек);
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяПользователя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез.Вставить("Данные", Выборка.Данные.Получить());
		Рез.Вставить("ОписаниеНастроек", Выборка.ОписаниеНастроек);
	КонецЦикла;
		
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_ХранилищеНастроек_Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт 
	Рез = Истина;
	
	Попытка
		НЗ = РегистрыСведений.APPLIX_RU_СМ_ХранилищеНастроек.СоздатьНаборЗаписей();
		НЗ.Отбор.КлючОбъекта.Установить(КлючОбъекта);
		НЗ.Отбор.КлючНастроек.Установить(КлючНастроек);
		НЗ.Отбор.ИмяПользователя.Установить(ИмяПользователя);
		НЗ.Очистить();
		НЗ.Записать(Истина);
	Исключение
		т = ОписаниеОшибки();
		Рез = Ложь;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции








// Регламентные задания

// Процедура - APPLIX_RU_СМ_ВыполнениеОбработок
//
// Параметры:
//  КодНастройки - код справочника настроек выполнения
//
Процедура APPLIX_RU_СМ_ВыполнениеОбработок(КодНастройки="") Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		ВызватьИсключение("Нет ключа настройки");
		Возврат;
	КонецЕсли;
	
	// Найти настройку по коду
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	APPLIX_RU_СМ_НастройкиВыполненияОбработок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.APPLIX_RU_СМ_НастройкиВыполненияОбработок КАК APPLIX_RU_СМ_НастройкиВыполненияОбработок
	|ГДЕ
	|	APPLIX_RU_СМ_НастройкиВыполненияОбработок.Ключ = &Ключ");
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("Ключ", КодНастройки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпрСсылка = Выборка.Ссылка;
	Иначе
		ВызватьИсключение("Не найдена настройка по ключу " + КодНастройки);
		Возврат;
	КонецЕсли;
		
	
	Если Не ЗначениеЗаполнено(СпрСсылка.ИмяМетода) Тогда
		// сообщить об ошибке
		ВызватьИсключение "Не указано имя метода. Ключ " + КодНастройки;
		Возврат;
	КонецЕсли;
	
	// Выполнить вызов метода обработки с передачей параметров
	Если СпрСсылка.ЗапускВнешнейОбработки Тогда 
		
		Если ЗначениеЗаполнено(СпрСсылка.ВнешняяОбработкаСсылка) Тогда
			ВыполненоУспешно = Ложь;
			
			ВнешняяОбработкаСсылка = СпрСсылка.ВнешняяОбработкаСсылка;
			
			ВозможныеИмена = Новый Массив();
			ВозможныеИмена.Добавить("ХранилищеОбработки"); // УТ11
			ВозможныеИмена.Добавить("ХранилищеВнешнейОбработки"); // УТ10
			
			Для каждого ИмяРеквизита Из ВозможныеИмена Цикл
				Попытка
					Дв = ВнешняяОбработкаСсылка[ИмяРеквизита].Получить();
					ВыполненоУспешно = Истина;
					Прервать;
				Исключение
					т = ОписаниеОшибки();
				КонецПопытки;
			КонецЦикла;
			
			Если Не ВыполненоУспешно Тогда
				// сообщить об ошибке
				ВызватьИсключение("Какая то ошибка. Ключ " + КодНастройки);
				Возврат;
			КонецЕсли;
			
			//Дв = Новый ДвоичныеДанные("");
			тмпФайл = ПолучитьИмяВременногоФайла();
			Дв.Записать(тмпФайл);
			////ОЗО = СМ_ОписаниеЗащитыБезПредупреждений();
			////Если ОЗО = Неопределено Тогда
			////	Обр = ВнешниеОбработки.Создать(тмпФайл, Ложь);
			////Иначе
			////	Попытка
			////		Обр = ВнешниеОбработки.Создать(тмпФайл, Ложь, ОЗО);
			////	Исключение
			////		Обр = ВнешниеОбработки.Создать(тмпФайл, Ложь);
			////		т = ОписаниеОшибки();
			////	КонецПопытки;
			////КонецЕсли;
			// Подключаем и создаем объект обработки
			Попытка
				ИмяОбработки = СМ_ПодключитьВнешнююОбработку(тмпФайл);
				Обр = ВнешниеОбработки.Создать(ИмяОбработки);
			Исключение
				т = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СпрСсылка.ВстроеннаяОбработкаИмя) Тогда 
		
		Обр = Обработки[СпрСсылка.ВстроеннаяОбработкаИмя].Создать();
		
	Иначе
		ВызватьИсключение("Не понятно что запускать. Ключ " + КодНастройки);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Неопределено;
	Если СпрСсылка.ПараметрыВыполнения.Количество()>0 Тогда
		ПараметрыВыполнения = Новый Структура;
		Для каждого СтрТЧ Из СпрСсылка.ПараметрыВыполнения Цикл
			ПараметрыВыполнения.Вставить(СтрТЧ.ИмяПараметра, СтрТЧ.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыВыполнения = Неопределено Тогда
		КодВыполнения = "Обр." + СпрСсылка.ИмяМетода + "();";
	Иначе	
		КодВыполнения = "Обр." + СпрСсылка.ИмяМетода + "(ПараметрыВыполнения);";
	КонецЕсли;
	
	Выполнить(КодВыполнения);
КонецПроцедуры

// Возвращает РегламентноеЗадание из информационной базы.
// Не предназначена для использования в модели сервиса.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Функция APPLIX_RU_СМ_РегламентноеЗаданиеПолучить(Знач Идентификатор) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Попытка
			Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
		Исключение
			т = ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	//Если РегламентноеЗадание = Неопределено Тогда
	//	ВызватьИсключение( НСтр("ru = 'Регламентное задание не найдено.
	//	                              |Возможно, оно удалено другим пользователем.'") );
	//КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Добавляет новое задание в очередь или как регламентное.
// 
// Параметры: 
//  Параметры - Структура - Параметры добавляемого задания, возможные ключи:
//   Использование
//   Метаданные - обязательно для указания.
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении.
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении.
//
// Возвращаемое значение: 
//  РегламентноеЗадание, СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор
//  добавленного задания.
// 
Функция APPLIX_RU_СМ_РегламентноеЗаданиеДобавить(ПараметрыЗадания) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	//
	//ПараметрыЗадания = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
		
	//МетаданныеЗадания = Метаданные.РегламентныеЗадания.APPLIX_RU_СМ_ВыполнениеОбработок;
	МетаданныеЗадания = ПараметрыЗадания.Метаданные;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
	
	Если ПараметрыЗадания.Свойство("Наименование") Тогда
		Задание.Наименование = ПараметрыЗадания.Наименование;
	Иначе
		Задание.Наименование = МетаданныеЗадания.Наименование;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Использование") Тогда
		Задание.Использование = ПараметрыЗадания.Использование;
	Иначе
		Задание.Использование = МетаданныеЗадания.Использование;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Ключ") Тогда
		Задание.Ключ = ПараметрыЗадания.Ключ;
	Иначе
		Задание.Ключ = МетаданныеЗадания.Ключ;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
		Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
		Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
	Иначе
		Задание.ИнтервалПовтораПриАварийномЗавершении = МетаданныеЗадания.ИнтервалПовтораПриАварийномЗавершении;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
		Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
	Иначе
		Задание.КоличествоПовторовПриАварийномЗавершении = МетаданныеЗадания.КоличествоПовторовПриАварийномЗавершении;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Параметры") Тогда
		Задание.Параметры = ПараметрыЗадания.Параметры;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Расписание") Тогда
		Задание.Расписание = ПараметрыЗадания.Расписание;
	КонецЕсли;
	
	Задание.Записать();
	
	
	Возврат Задание;
	
КонецФункции

// Изменяет задание с указанным идентификатором.
// В случае вызова в транзакции на задание устанавливается объектная блокировка.
// 
// Параметры: 
//  Идентификатор - СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор задания
//  Параметры     - Структура - Параметры, которые следует установить заданию, 
//   возможные ключи:
//   Использование
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении.
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении.
//   
//   В случае если задание создано на основе шаблона или предопределенное, могут быть указаны
//   только следующие ключи: Использование.
// 
Процедура APPLIX_RU_СМ_РегламентноеЗаданиеИзменить(Знач Идентификатор, Знач ПараметрыЗадания) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	//
	//ПараметрыЗадания = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
		
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание <> Неопределено Тогда
		
		Если ПараметрыЗадания.Свойство("Наименование") Тогда
			Задание.Наименование = ПараметрыЗадания.Наименование;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Использование") Тогда
			Задание.Использование = ПараметрыЗадания.Использование;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Ключ") Тогда
			Задание.Ключ = ПараметрыЗадания.Ключ;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
			Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
			Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
			Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Параметры") Тогда
			Задание.Параметры = ПараметрыЗадания.Параметры;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Расписание") Тогда
			Задание.Расписание = ПараметрыЗадания.Расписание;
		КонецЕсли;
		
		Задание.Записать();
	
	КонецЕсли; 
		
	
КонецПроцедуры

// Удаляет РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  не предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание, которое нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
//
Процедура APPLIX_RU_СМ_РегламентноеЗаданиеУдалить(Знач Идентификатор) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
		ВызватьИсключение( НСтр("ru = 'Предопределенное регламентное задание удалить невозможно.'") );
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
		Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
			РегламентноеЗадание.Удалить();
		КонецЦикла; 
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		Если РегламентноеЗадание <> Неопределено Тогда
			РегламентноеЗадание.Удалить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В локальном режиме работы возвращает регламентные задания, соответствующие отбору.
// В модели сервиса - таблицу значений, в которой содержится описание найденных заданий
// в справочниках ОчередьЗаданий (если не установлены разделители) или ОчередьЗаданийОбластейДанных.
//
// Параметры:
//  Отбор - Структура - со свойствами: 
//          1) Общие для любого режима работы:
//             * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор регламентного задания
//                                            в локальном режиме работы.
//                                       - СправочникСсылка.ОчередьЗаданий,
//                                         СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//                                            очереди в модели сервиса.
//             * Метаданные              - ОбъектМетаданных: РегламентноеЗадание - метаданные регламентного задания.
//                                       - Строка - имя регламентного задания.
//             * Использование           - Булево - если Истина, задание включено.
//             * Ключ                    - Строка - прикладной идентификатор задания.
//          2) Возможные ключи только локального режима:
//             * Наименование            - Строка - наименование регламентного задания.
//             * Предопределенное        - Булево - если Истина, регламентное задание определено в метаданных.
//          3) Возможные ключи только для модели сервиса:
//             * ИмяМетода               - Строка - имя метода (или псевдоним) обработчика очереди задании.
//             * ОбластьДанных           - Число - значение разделителя области данных задания.
//             * СостояниеЗадания        - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
//             * Шаблон                  - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания, используется только
//                                            для разделенных заданий очереди.
//
// Возвращаемое значение:
//     Массив - в локальном режиме работы массив регламентных заданий.
//              см. описание метода РегламентноеЗадание в синтакс-помощнике.
//     ТаблицаЗначений - в модели сервиса таблица значений со свойствами:
//        * ИнтервалПовтораПриАварийномЗавершении - Число - Интервал в секундах, через который нужно перезапускать
//                                                     задание в случае его аварийного завершения.
//        * Использование                         - Булево - если Истина, задание включено.
//        * Ключ                                  - Строка - прикладной идентификатор задания.
//        * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//        * Параметры                             - Массив - параметры, передаваемые в обработчик задания.
//        * Расписание                            - Расписание - расписание задания.
//        * УникальныйИдентификатор               - УникальныйИдентификатор - идентификатор регламентного задания
//                                                     в локальном режиме работы.
//                                                - СправочникСсылка.ОчередьЗаданий,
//                                                  СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//                                                     очереди в модели сервиса.
//        * ЗапланированныйМоментЗапуска          - Дата - дата и время запланированного запуска задания
//                                                     (в часовом поясе области данных).
//        * ИмяМетода                             - Строка - имя метода (или псевдоним) обработчика очереди задании.
//        * ОбластьДанных                         - Число - значение разделителя области данных задания.
//        * СостояниеЗадания                      - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
//        * Шаблон                                - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания,
//                                                     используется только для разделенных заданий очереди.
//        * ЭксклюзивноеВыполнение                - Булево - при установленном флаге задание будет выполнено 
//                                                     даже при установленной блокировке начала сеансов в области
//                                                     данных. Так же если в области есть задания с таким флагом
//                                                     сначала будут выполнены они.
//
Функция APPLIX_RU_СМ_РегламентноеЗаданиеНайти(КопияОтбора) Экспорт
	
	//ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	//КопияОтбора = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	
	СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(КопияОтбора);
		
	Возврат СписокЗаданий;
	
КонецФункции

Процедура APPLIX_RU_СМ_ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	ТекстЗаголовка = "Дополнительные настройки расписания ...";
	
	Если Задание = Неопределено Тогда
		
		//ТекстЗаголовка = "Создать регламентную настройку ...";	
		ТекстРасписания = "<Расписание не задано>";
		
	Иначе
		
		//ТекстЗаголовка = "Дополнительные настройки расписания ...";
		Если Задание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
			РасписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;	
	
КонецПроцедуры

//---------------------------------------------------------------------------------------------------------------------------------------
Функция APPLIX_RU_СМ_РегламентноеЗаданиеРасписание(Идентификатор) Экспорт
	Рез = "";
	
	Попытка
		РЗ = APPLIX_RU_СМ_РегламентноеЗаданиеПолучить(Идентификатор);
		Рез = РЗ.Расписание;
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Рез;
КонецФункции




// Служебные

// Возвращает Истина, если информационная база - файловая.
//
// Параметры:
//    СтрокаСоединенияСБД - Строка - строка соединения. Если параметр не задан, 
//                                   то используется текущая информационная база.
//
Функция СМ_ЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_ПолучитьСписокОбработок() Экспорт
	Рез = Новый Соответствие;
	
	Для каждого ОМ Из Метаданные.Обработки Цикл
		Рез.Вставить(ОМ.Имя, ОМ.Синоним);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Возвращает описание защиты от опасных действий с отключенными предупреждениями.
// Функция не приводит к ошибке компиляции при отсутствии в платформе механизмов
// предупреждений безопасности.
//
// Возвращаемое значение:
//  ОписаниеЗащитыОтОпасныхДействий - со свойством ПредупреждатьОбОпасныхДействиях = Ложь.
//
Функция СМ_ОписаниеЗащитыБезПредупреждений() Экспорт
	
	Попытка
		ИмяТипа = "ОписаниеЗащитыОтОпасныхДействий";
		ОписаниеЗащиты = Новый(ИмяТипа);
		ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		Возврат ОписаниеЗащиты;
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

Функция СМ_ПодключитьВнешнююОбработку(ИмяОбработки) Экспорт
		
	// Подключение
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ИмяОбработки;
	#КонецЕсли
	
	Дв = Новый ДвоичныеДанные(ИмяОбработки);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Дв);
	
	БезопасныйРежим = Ложь;
	
	//Если ОбщегоНазначения.ЕстьЗащитаОтОпасныхДействий() Тогда
	//	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим,
	//		ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	//Иначе
	//	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , БезопасныйРежим);
	//КонецЕсли;
	Попытка
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , БезопасныйРежим, СМ_ОписаниеЗащитыБезПредупреждений());
	Исключение
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , БезопасныйРежим);
		//т = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ИмяОбработки;
	
КонецФункции


Функция СМ_СоздатьОписаниеТипаПоЗначению(Зн) Экспорт
	Рез = Неопределено;
	
	Попытка
		МасТипов = Новый Массив();
		МасТипов.Добавить(ТипЗнч(Зн));
		Рез = Новый ОписаниеТипов(МасТипов);
		
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	
	Возврат Рез;
КонецФункции

// Предназначена для получения пустого значения заданного типа:
// примитивного, или ссылочного.
//
// Параметры:
//  ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция СМ_ПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат Новый (ЗаданныйТип);
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеТипа();


Функция СМ_ПолучитьЗначениеРеквизитаОбъекта(Объект, ВозможныеИменаРеквизита, ЭтоТабЧасть=Ложь, ЗначениеПоУмолчанию=Неопределено)
	Значение = Неопределено;
	
	//Мас = РазложитьСтрокуВМассивПодстрок(ВозможныеИменаРеквизита, ",");
	Если ТипЗнч(ВозможныеИменаРеквизита)=Тип("Строка") Тогда
		Мас = Новый Структура(ВозможныеИменаРеквизита);
	Иначе
		Мас = ВозможныеИменаРеквизита;
	КонецЕсли;
	
	Для каждого Эл Из Мас Цикл
		Попытка
			Значение = Объект[Эл.Ключ];
			Прервать;
		Исключение
			Значение = Неопределено;
		КонецПопытки;
	КонецЦикла;
	
	Если Значение=Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ЭтоТабЧасть=Истина Тогда
		Возврат Значение.Выгрузить();
	КонецЕсли;
	
	Если Значение=Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция СМ_УстановитьЗначениеСтруктуры(пСтруктура, Имя, Зн) Экспорт
	Попытка
		пСтруктура[Имя] = Зн;
	Исключение
	КонецПопытки;

	Попытка
		пСтруктура.Вставить(Имя, Зн);
	Исключение
	КонецПопытки;
КонецФункции

Функция СМ_ПолучитьЗначениеСтруктуры(пСтруктура, Индекс, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Попытка
		Возврат пСтруктура[Индекс];
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция СМ_ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт 
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = Новый Структура(Реквизиты);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункции_ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции




// ДВИЖЕНИЯ ПО РЕГИСТРАМ

// Выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений               - набор движений регистра,
//  ПустыеКолонкиСоставногоТипа - структура, содержащая имена измерений,ресурсов и
//  реквизитов составного типа, которые могут содержать пустые ссылки.
//
Процедура СМ_ВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено,
	                                  ПустыеКолонкиСоставногоТипа = Неопределено, ЗаполнитьПериод = истина) Экспорт

	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеКолонкиСоставногоТипа = Неопределено Тогда
		ПустыеКолонкиСоставногоТипа = Новый Структура;
	КонецЕсли;
	
	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если (МетаИзм.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаИзм.Имя)) Тогда
			ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРек Из МетаРег.Реквизиты Цикл
		Если (МетаРек.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРек.Имя)) Тогда
			ИзмеренияСостТипа.Вставить(МетаРек.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если (МетаРес.Тип.Типы().Количество() > 1)
		   И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРес.Имя)) Тогда
			ИзмеренияСостТипа.Вставить(МетаРес.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Откопируем остальные колонки (структура таблиц совпадает).
	ПерваяКолонка = Истина;
	МассивСтрок   = Новый Массив(ТаблицаДвижений.Количество());
	ЕстьПериод    = НЕ ТаблицаДвижений.Колонки.Найти("Период") = Неопределено;
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл

		ИмяКолонки = Колонка.Имя;
		Если ИмяКолонки <> "Период"
		   И ИмяКолонки <> "Активность"
		   И ИмяКолонки <> "НомерСтроки"
		   И ИмяКолонки <> ""
		   И ?(ИмяКолонки = "ВидДвижения", ВидДвижения = Неопределено, Истина)
		   И ИмяКолонки <> "МоментВремени" Тогда
		   
			Если ИзмеренияСостТипа.Свойство(ИмяКолонки) Тогда
				ФлагКолонкиСостТипа = Истина;
			Иначе
				ФлагКолонкиСостТипа = Ложь;
			КонецЕсли;
			
			Индекс = 0;
			Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

				Если ПерваяКолонка Тогда
					
					Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						СтрокаДвижения = НаборДвижений.ДобавитьПриход();
					ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
						СтрокаДвижения = НаборДвижений.ДобавитьРасход();
					Иначе
						СтрокаДвижения = НаборДвижений.Добавить(); // Для оборотных регистров
					КонецЕсли;
					
					МассивСтрок[Индекс] = СтрокаДвижения;
					СтрокаДвижения.Период = НаборДвижений.мПериод;
					Если не ЗаполнитьПериод и ЕстьПериод И НЕ СтрокаТаблицы.Период = '00010101' Тогда
						СтрокаДвижения.Период = СтрокаТаблицы.Период;
					Иначе
						СтрокаДвижения.Период = НаборДвижений.мПериод;
					КонецЕсли; 
					
				Иначе
					
					СтрокаДвижения = МассивСтрок[Индекс];
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
				ЗначКолонки = СтрокаТаблицы[ИмяКолонки];
				Если ФлагКолонкиСостТипа Тогда

					Очистить = Ложь;
					Если ТипЗнч(ЗначКолонки) = Тип("Число")Тогда
						Если ЗначКолонки = 0 Тогда
							Очистить = Истина;
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЗначКолонки) = Тип("Строка") Тогда
						Если ЗначКолонки = "" Тогда
							Очистить = Истина;
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЗначКолонки) = Тип("Дата") Тогда
						Если ЗначКолонки = '00010101000000' Тогда
							Очистить = Истина;
						КонецЕсли;
					ИначеЕсли ЗначКолонки = Неопределено Или ЗначКолонки.Пустая() Тогда
						Очистить = Истина;
					КонецЕсли;

					Если Очистить Тогда
						СтрокаДвижения[ИмяКолонки] = Неопределено;
					Иначе
						СтрокаДвижения[ИмяКолонки] = ЗначКолонки;
					КонецЕсли;
				Иначе
					СтрокаДвижения[ИмяКолонки] = ЗначКолонки;
				КонецЕсли;
				
			КонецЦикла;
			
			ПерваяКолонка = Ложь;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВыполнитьДвижениеПоРегистру()







// Служебные - строки

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция СтроковыеФункции_ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = СтроковыеФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция СтроковыеФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция СМ_ЗаменитьСимволыВСтроке(тСтрока, тСимволы, ЗаменитьНа="")
	Кол = СтрДлина(тСимволы);
	Рез = тСтрока;
	Для Н = 1 По Кол Цикл
		с = Сред(тСимволы, Н, 1);
		Рез = СтрЗаменить(Рез, с, ЗаменитьНа);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// функция возвращает часть строки после последнего встреченного символа в строке
Функция СМ_ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска, ЕслиНетСимволаТоВсюСтроку = Ложь) Экспорт 
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат ?(ЕслиНетСимволаТоВсюСтроку, ИсходнаяСтрока, "");
  	
КонецФункции



// Служебные - файлы

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция СМ_ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = СМ_ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\", Истина);
	ИмяФайла = СМ_ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла,   "/", Истина);
	
	Возврат ИмяФайла;
	
КонецФункции



// Служебные - метаданные

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_Менеджер(ВозможныеИмена) Экспорт 
	
	Рез = СМ_ПолучитьЗначениеРеквизитаОбъекта(Справочники, ВозможныеИмена);
	
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_ВнешниеОбработки_Менеджер() Экспорт 
	
	Возврат СМ_Справочник_Менеджер("ДополнительныеОтчетыИОбработки,ВнешниеОбработки");
	
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_ВнешниеОбработки_ПустаяСсылка() Экспорт 
	Рез = Неопределено;
	
	СпрМД = СМ_Справочник_ВнешниеОбработки_Менеджер();
	Попытка
		Рез = СпрМД.ПустаяСсылка();
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_ВнешниеОбработки_НайтиПоИдентификатору(Ид) Экспорт
	Рез = Неопределено;
	
	// УТ 11
	СпрМенеджер = APPLIX_RU_СМ_ОбщийМодульСервер.СМ_Справочник_ВнешниеОбработки_Менеджер();
	Попытка
		СпрСсылка = СпрМенеджер.НайтиПоРеквизиту("ИмяОбъекта", Ид);
		Возврат СпрСсылка;
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	// УТ10
	Попытка
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнешниеОбработки.Ссылка
		|ИЗ
		|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		|ГДЕ
		|	ВнешниеОбработки.ВидОбработки = &ВидОбработки
		|	И ВнешниеОбработки.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
		Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка);
		
		ИмяФайлаВнешнейОбработки = ПолучитьИмяВременногоФайла();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				Дв = Выборка.Ссылка.ХранилищеВнешнейОбработки.Получить();
				Дв.Записать(ИмяФайлаВнешнейОбработки);
				ВО = ВнешниеОбработки.Создать(ИмяФайлаВнешнейОбработки);
				Если ВО.Метаданные().Имя = Ид Тогда
					Возврат Выборка.Ссылка;
				КонецЕсли;
			Исключение
				т = ОписаниеОшибки();
			КонецПопытки;
		КонецЦикла;
	Исключение
		т = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_ВнешниеОбработки_НайтиЭкспотор() Экспорт 
	Рез = СМ_Справочник_ВнешниеОбработки_НайтиПоИдентификатору("APPLIX_RU_Выгрузка_номенклатуры");
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_ВнешниеОбработки_НайтиЭкселон() Экспорт 
	Рез = СМ_Справочник_ВнешниеОбработки_НайтиПоИдентификатору("APPLIX_RU_ЗагрузкаИзExcel");
	Возврат Рез;
КонецФункции

//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_Справочник_ВнешниеОбработки_НайтиПечатьПрайсЛистов() Экспорт 
	Рез = СМ_Справочник_ВнешниеОбработки_НайтиПоИдентификатору("APPLIX_RU_ПрайсЗаказExcel");
	Возврат Рез;
КонецФункции

Функция СМ_Справочник_ВнешниеОбработки_Подключить(ОбработкаСсылка) Экспорт

	ВозможныеИмена = Новый Массив();
	ВозможныеИмена.Добавить("ХранилищеОбработки"); // УТ11
	ВозможныеИмена.Добавить("ХранилищеВнешнейОбработки"); // УТ10
	
	Для каждого ИмяРеквизита Из ВозможныеИмена Цикл
		Попытка
			Дв = ОбработкаСсылка[ИмяРеквизита].Получить();
			ВыполненоУспешно = Истина;
			Прервать;
		Исключение
			т = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если Не ВыполненоУспешно Тогда
		// сообщить об ошибке
		ВызватьИсключение("Какая то ошибка.");
		Возврат Неопределено;
	КонецЕсли;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Дв);
	
	// // Подключение
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//	Возврат ИмяОбработки;
	//#КонецЕсли
	
	
	БезопасныйРежим = Ложь;
	
	Попытка
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , БезопасныйРежим, СМ_ОписаниеЗащитыБезПредупреждений());
	Исключение
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресВоВременномХранилище, , БезопасныйРежим);
		//т = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ИмяОбработки; 

КонецФункции 



Функция СМ_ОпределитьПустуюСсылкуОбъектаМД(МенеджерОбъектаМД, ВозможныеИмена)
	Если ТипЗнч(ВозможныеИмена)<>Тип("Массив") Тогда
		Мас = Новый Массив;
		Мас.Добавить(ВозможныеИмена);
	Иначе 
		Мас = ВозможныеИмена;
	КонецЕсли;
	
	Рез = Неопределено;
	Для каждого ИмяСпр Из Мас Цикл
		Попытка
			Рез = МенеджерОбъектаМД[ИмяСпр].ПустаяСсылка();
			Прервать;
		Исключение
			т = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции


//---------------------------------------------------------------------------------------------------------------------------------------
Функция СМ_МодульУстановлен_СМСРассылка() Экспорт 
	Рез = Ложь;
	
	Попытка
		ПС = Метаданные.Подсистемы.APPLIX_RU_РС;
		Рез = Истина;
	Исключение
	КонецПопытки;
	
	Возврат Рез;
КонецФункции




