
Функция ЭтоКопияБазы()
	
	Результат = Ложь;
	
	ИнформацияОБазе = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	Если ИнформацияОБазе <> Неопределено тогда
		Результат =  ИнформацияОБазе.РаботаСВнешнимиРесурсамиЗаблокирована;
	КонецЕсли;	

	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьРегДанные() 
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Subsystems","Регистрация","Регистрационные данные","Пользователь");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Процедура МегапрайсЗаписатьСобытиеВЖурнал(Объект,ТекстСообщения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.мегапрайсЖурналСобытий.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.Дата   = ТекущаяДата();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.ТекстСообщения = ТекстСообщения;
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры

//============================================================================
// ЗАГРУЗКА ПРАЙСОВ

Процедура УдалитьСтарыеПрайсы() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	мегапрайсКоличествоДнейХранения = Константы.мегапрайсКоличествоДнейХранения.Получить();
	Если мегапрайсКоличествоДнейХранения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЦеныПоставщиковОграничениеПоДате = ТекущаяДата();
	ЦеныПоставщиковОграничениеПоДате = ЦеныПоставщиковОграничениеПоДате - 86400*мегапрайсКоличествоДнейХранения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.Период
	               |ИЗ
	               |	РегистрСведений.мегапрайсЦеныНоменклатурыПоставщиков.СрезПоследних(, ) КАК мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних
	               |ГДЕ
	               |	мегапрайсЦеныНоменклатурыПоставщиковСрезПоследних.Период < &ЦеныПоставщиковОграничениеПоДате";
	
	Запрос.УстановитьПараметр("ЦеныПоставщиковОграничениеПоДате",ЦеныПоставщиковОграничениеПоДате);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();    
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.мегапрайсЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Записать(Истина);
		Сообщить("Прайсы удалены, дата - "+Выборка.Период);
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьПрайсЛист(ПрайсПартнера) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.мегапрайсЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ПрайсПартнера.Установить(ПрайсПартнера);
	//НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);

КонецПроцедуры


Процедура РазрезатьФайлНаЧасти(ПрайсПартнера,ПутьИсходник) Экспорт
	
	ПутьРезультат = ПрайсПартнера.ФайлКаталогНаЛокальномДиске;
	ФайлИспользоватьФильтр = ПрайсПартнера.ФайлИспользоватьФильтр;
	ФайлИсключитьДанныеФильтра = ПрайсПартнера.ФайлИсключитьДанныеФильтра;
	ФильтрацияДанныхФайла = ПрайсПартнера.ФильтрацияДанныхФайла;
	КоличествоСтрок = ПрайсПартнера.ФайлМаксимальноеКоличествоСтрок;
	
	Файл = Новый Файл(ПутьИсходник);
	ИтераторЦикла = 0;
	ИтераторНомераФайла = 1;
	
	ФайловыйПотокЧтение = Новый ФайловыйПоток(ПутьИсходник,РежимОткрытияФайла.Открыть);
	ЧтениеТекста = Новый ЧтениеТекста(ФайловыйПотокЧтение,КодировкаТекста.ANSI);
	
	ИмяФайлаЗаписи = ПутьРезультат + "\" + Файл.ИмяБезРасширения + "_мегапрайсчасть_" +  Формат(ИтераторНомераФайла,"ЧЦ=3; ЧВН=; ЧГ=0") + Файл.Расширение;
	ФайловыйПотокЗапись = Новый ФайловыйПоток(ИмяФайлаЗаписи,РежимОткрытияФайла.ОткрытьИлиСоздать);
	ЗаписьТекста = Новый ЗаписьТекста(ФайловыйПотокЗапись,КодировкаТекста.ANSI);
	
	НачалоЗагрузки = ТекущаяДата();

	ВыборкаСтрока = ЧтениеТекста.ПрочитатьСтроку();	
	Пока ВыборкаСтрока <> Неопределено Цикл// строки читаются до символа перевода строки
		
		Если ФайлИспользоватьФильтр Тогда     
			СтрокаУсловие = 0;
			
			Для Каждого ВыборкаФильтр Из ФильтрацияДанныхФайла Цикл
				Если СтрокаУсловие > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыборкаФильтр.НомерЗначения > 0 Тогда
					ВыборкаМассивКолонок = СтрРазделить(ВыборкаСтрока,";");
					ПолучитьЗначениеПоНомеру = ВыборкаМассивКолонок.Получить(ВыборкаФильтр.НомерЗначения-1);	
					СтрокаУсловие = Найти(ПолучитьЗначениеПоНомеру,ВыборкаФильтр.ЗначениеФильтра);
				Иначе
					СтрокаУсловие = Найти(ВыборкаСтрока,ВыборкаФильтр.ЗначениеФильтра);
				КонецЕсли;
			КонецЦикла;
			
			Если ФайлИсключитьДанныеФильтра Тогда
				Если НЕ СтрокаУсловие = 0 Тогда
					ВыборкаСтрока = ЧтениеТекста.ПрочитатьСтроку();
					Продолжить;
				КонецЕсли;
			Иначе
				Если СтрокаУсловие = 0 Тогда
					ВыборкаСтрока = ЧтениеТекста.ПрочитатьСтроку();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ЗаписьТекста.ЗаписатьСтроку(ВыборкаСтрока);

		Если КоличествоСтрок > 0 Тогда
			Если ИтераторЦикла >= КоличествоСтрок Тогда
				ИтераторНомераФайла = ИтераторНомераФайла + 1;
				
				ЗаписьТекста.Закрыть();
				ФайловыйПотокЗапись.Закрыть();
				
				ИмяФайлаЗаписи = ПутьРезультат + "\" + Файл.ИмяБезРасширения + "_мегапрайсчасть_" +  Формат(ИтераторНомераФайла,"ЧЦ=3; ЧВН=; ЧГ=0") + Файл.Расширение; 
				ФайловыйПотокЗапись = Новый ФайловыйПоток(ИмяФайлаЗаписи,РежимОткрытияФайла.ОткрытьИлиСоздать);
				ЗаписьТекста = Новый ЗаписьТекста(ФайловыйПотокЗапись,КодировкаТекста.ANSI);
				
				ИтераторЦикла = 0;
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаСтрока = ЧтениеТекста.ПрочитатьСтроку();
		ИтераторЦикла = ИтераторЦикла + 1; 		
		
	КонецЦикла;
	
	КонецЗагрузки = ТекущаяДата();
	ВремяВыполнения = КонецЗагрузки - НачалоЗагрузки;

	Сообщить("Разделение файла выполнено - (скорость "+ВремяВыполнения+")");
	
	ЧтениеТекста.Закрыть();
	ФайловыйПотокЧтение.Закрыть();
	
	ЗаписьТекста.Закрыть();
	ФайловыйПотокЗапись.Закрыть();
	
КонецПроцедуры


Процедура ЗаполнитьМассивУникальнымиЗначениями(МассивПриемник, МассивИсточник) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Для каждого Значение Из МассивПриемник Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для каждого Значение Из МассивИсточник Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			МассивПриемник.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура мегапрайсИмпортЗагрузкаПрайсовВыборка(ПрайсПартнера) Экспорт		
	
	ИспользоватьВебсервис = Константы.мегапрайсИспользоватьВебсервис.Получить();
	мегапрайсТрансформацияПрайсов = Константы.мегапрайсТрансформацияПрайсов.Получить();
	
	//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();

	ПутьККаталогу = ПрайсПартнера.ФайлКаталогНаЛокальномДиске;
	Если НЕ ЗначениеЗаполнено(ПутьККаталогу) Тогда
		МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - В профиле пустой путь к каталогу файлов");
		Возврат;
	КонецЕсли;
	
	Если ПрайсПартнера.ФайлВидРасположения = "НаЛокальномДиске" Тогда
		КаталогНаДиске = Новый Файл(ПутьККаталогу);
		Если НЕ КаталогНаДиске.Существует() Тогда			
			МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - Указанный каталог не существует");
			Возврат;
		КонецЕсли;
	Иначе
		ПутьККаталогу = ПолучитьИмяВременногоФайла();		
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;
	
	ПолныйПутьКФайлуНаДиске = ПрайсПартнера.ФайлПутьКФайлу;
	
	ОбработкаОбъект = Обработки.мегапрайсРасширеннаяЗагрузкаИзExcel.Создать();		
	ОбработкаОбъект.ИспользоватьМегапрайс = Истина;
	ОбработкаОбъект.ПрайсПартнера         = ПрайсПартнера;
	ОбработкаОбъект.ИспользоватьВебсервис = ИспользоватьВебсервис;
	ОбработкаОбъект.Мегапрайс_ПолучитьНастройкиПрофиляПрайса();
	ОбработкаОбъект.ТабличнаяЧасть.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ОбработкаОбъект.Партнер) Тогда 
		МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - в профиле не указан партнер.");
	КонецЕсли;


	Если ПрайсПартнера.ФайлВидРасположения = "ПоСсылке" Тогда		
		СтрПуть = ПрайсПартнера.ФайлПутьКФайлу;
		
		МногострочнаяСтрока = СтрЗаменить(СтрПуть,"/",Символы.ПС);
		ИмяФайла = СтрПолучитьСтроку(МногострочнаяСтрока,СтрЧислоСтрок(МногострочнаяСтрока));
		ПолныйПутьКФайлуНаДиске = ПутьККаталогу+"\"+ИмяФайла;
		
		//ЗАГРУЖАЕМ ВАРИАНТ 1
		ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
		ПараметрыПолучения.Вставить("ПутьДляСохранения", ПолныйПутьКФайлуНаДиске);
		ПараметрыПолучения.Вставить("Пользователь", ПрайсПартнера.ФайлДоступЛогин);
		ПараметрыПолучения.Вставить("Пароль", ПрайсПартнера.ФайлДоступПароль);
		//ПараметрыПолучения.Вставить("Порт", Неопределено);
		//ПараметрыПолучения.Вставить("Таймаут", 1);
		//ПараметрыПолучения.Вставить("ЗащищенноеСоединение", Неопределено);
		//ПараметрыПолучения.Вставить("ПассивноеСоединение", Неопределено);
		//ПараметрыПолучения.Вставить("Заголовки", Новый Соответствие);
		//ПараметрыПолучения.Вставить("ИспользоватьАутентификациюОС", Ложь);
		// ПараметрыПолучения.Вставить("УровеньИспользованияЗащищенногоСоединения", Неопределено);
		
		ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(СтрПуть,ПараметрыПолучения);
		
		//ЗАГРУЖАЕМ ВАРИАНТ 2
		//КопироватьФайл(ПрайсПартнера.ФайлПутьКФайлу,СтрПуть);
		
		//ЗАГРУЖАЕМ ВАРИАНТ 3
		//Если СтрНайти(ИмяСервера,"http") > 0 Тогда
		//    Соединение = Новый HTTPСоединение(ИмяСервера,,Объект.ФайлДоступЛогин,Объект.ФайлДоступПароль,,,,);
		//    Соединение.Получить(ПутьКФайлуБезДомена, ВыбранныйПутьКФайлу);
		//ИначеЕсли СтрНайти(ИмяСервера,"ftp") > 0 Тогда
		//    Соединение = Новый FTPСоединение(ИмяСервера,,Объект.ФайлДоступЛогин,Объект.ФайлДоступПароль);
		//    Соединение.Получить(ПутьКФайлуБезДомена, ВыбранныйПутьКФайлу);
		//КонецЕсли;
		
		МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ - Файл скачан по ссылке - "+ПолныйПутьКФайлуНаДиске);
	КонецЕсли;	
	
	Если ПрайсПартнера.ФайлРазархивировать Тогда
		МассивФайлов = Новый Массив;
		МассивМасок = Новый Массив;
		МассивМасок.Добавить("*.ZIP*");
		
		Для Каждого Маска Из МассивМасок Цикл
			ЗаполнитьМассивУникальнымиЗначениями(МассивФайлов, НайтиФайлы(ПутьККаталогу, Маска, Истина)); 
		КонецЦикла;  
		
		Для Каждого ВыборкаФайл Из МассивФайлов Цикл
			ФайлПутьКФайлу = ВыборкаФайл.ПолноеИмя;
			ИмяФайла = ВыборкаФайл.Имя;

			ФайлАрхива = Новый ЧтениеZIPФайла(ФайлПутьКФайлу,ПрайсПартнера.ФайлАрхивПароль); 
			ФайлАрхива.ИзвлечьВсе(ПутьККаталогу, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
			ФайлАрхива.Закрыть();     
		КонецЦикла;  		
	КонецЕсли;

	Если ПрайсПартнера.ИспользоватьПотоковуюЗагрузку Тогда
		РазрезатьФайлНаЧасти(ПрайсПартнера,ПолныйПутьКФайлуНаДиске);
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайловВыполнить = Новый Массив;
	Если ПрайсПартнера.ФайлВидРасположения = "НаЛокальномДиске" ИЛИ ПрайсПартнера.ФайлВидРасположения = "ПоСсылке" Тогда
		МассивМасок = Новый Массив;
		МассивМасок.Добавить("*.xls*");
		//МассивМасок.Добавить("*.xlsx");
		//МассивМасок.Добавить("*.xlsm");
		МассивМасок.Добавить("*.ODS");
		МассивМасок.Добавить("*.XML");
		МассивМасок.Добавить("*.CSV");
		МассивМасок.Добавить("*.TXT");
		
		Для Каждого Маска Из МассивМасок Цикл
			ЗаполнитьМассивУникальнымиЗначениями(МассивФайлов, НайтиФайлы(ПутьККаталогу, Маска, Истина)); 
		КонецЦикла;    
	КонецЕсли;
	
	Если ПрайсПартнера.ФайлВидРасположения = "НаЛокальномДиске" ИЛИ ПрайсПартнера.ФайлВидРасположения = "ПоСсылке" Тогда
		Если МассивФайлов.Количество() = 0 Тогда
			МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - В каталоге нет файлов для импорта (1)");
			Возврат;
		КонецЕсли;	
		
		КоличествоФайлов = 0;	                                     
		СтрокаДляСообщения = "";
		Для Каждого ВыборкаФайл Из МассивФайлов Цикл
			ФайлПутьКФайлу      = ВыборкаФайл.ПолноеИмя;
			ИмяФайла            = ВыборкаФайл.Имя;
			ВремяИзмененияФайла = ВыборкаФайл.ПолучитьВремяИзменения();
			РазмерФайла         = ВыборкаФайл.Размер();
			ИдентификаторПрайса = ""+РазмерФайла+"/"+ВремяИзмененияФайла;
			
			Если ПрайсПартнера.ИспользоватьПотоковуюЗагрузку Тогда
				Если СтрНайти(ИмяФайла,"_мегапрайсчасть_") > 0 Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			ФайлМаска = СокрЛП(ПрайсПартнера.ФайлМаска);
			Если НЕ ПустаяСтрока(ФайлМаска) И СтрНайти(ИмяФайла,ФайлМаска) = 0 Тогда
				МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - По указанной в профиле маске не найдено ни одного файла.");
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПрайсПартнера.ИспользоватьПотоковуюЗагрузку Тогда
				Если ПрайсПартнера.ИдентификаторПрайса = ИдентификаторПрайса Тогда
					МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - Файл уже загружался. Если вы хотите его загрузить, необходимо в профиле очистить данные о последнем импорте.");
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрНайти(ИмяФайла,"загружен") > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			КоличествоФайлов = КоличествоФайлов + 1;	
			СтрокаДляСообщения = СтрокаДляСообщения+" "+ИмяФайла;
			
			МассивФайловВыполнить.Добавить(ВыборкаФайл);
		КонецЦикла;
		
		Если НЕ ПрайсПартнера.ИспользоватьПотоковуюЗагрузку И КоличествоФайлов > 1 Тогда
			МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - В каталоге прайса обнаружено несколько файлов. Операция ПРЕРВАНА - "+СтрокаДляСообщения);
			Возврат;
		КонецЕсли;
		
		Если КоличествоФайлов = 0 Тогда
			//МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"ИМПОРТ ПРЕРВАН - В каталоге нет файлов для импорта (2)");
			Возврат;
		КонецЕсли;
		
		ОбработкаОбъект.ИдентификаторПрайса = ИдентификаторПрайса;
	КонецЕсли;	
	
	
		
	
	Если ПрайсПартнера.ИспользоватьПотоковуюЗагрузку Тогда
		УдалитьПрайсЛист(ПрайсПартнера);
	КонецЕсли;
	
	НачалоЗагрузки = ТекущаяДата();
	
	Если ПрайсПартнера.ФайлВидРасположения = "НаЛокальномДиске" ИЛИ ПрайсПартнера.ФайлВидРасположения = "ПоСсылке" Тогда
		Для Каждого ВыборкаФайл Из МассивФайловВыполнить Цикл
			ФайлПутьКФайлу = ВыборкаФайл.ПолноеИмя;
			
			ОбработкаОбъект.АдресДанныхВХранилище = ОбработкаОбъект.ЧтениеФайлов_ВыполнитьЗагрузкуТаблиц(ФайлПутьКФайлу,ОбработкаОбъект.ТаблицаЛистовФайла);
			
			ОбработкаОбъект.ЗаполнениеТаблиц_ЗагрузитьМассивТаблиц();		
			ОбработкаОбъект.ВыполнитьСинхронизациюЗамен();
			ОбработкаОбъект.мСинхронизироватьСервер();
			
			Если ПрайсПартнера.РоботСоздатьНоменклатуру Тогда
				ОбработкаОбъект.СоздатьНовуюНоменклатуруСервер();
			КонецЕсли;
			
			Если ПрайсПартнера.РоботЗагрузитьДополнительныеСвойства Тогда
				ОбработкаОбъект.СинхронизироватьТаблицуСвойствСНоменклатурой();
				ОбработкаОбъект.ВыполнитьЗаписатьДопРеквизитыНаСервере();
			КонецЕсли;
			
			ОбработкаОбъект.Результат_РегистрацияЦенПоставщикаМегапрайс(Истина);
			
			КонецЗагрузки = ТекущаяДата();
			ВремяВыполнения = КонецЗагрузки - НачалоЗагрузки;
			
			Если ПрайсПартнера.РоботЗагрузитьЦеныПоставщикаТиповая Тогда
				ОбработкаОбъект.Результат_ДокументРегистрацияЦенПоставщикаТиповая();
			КонецЕсли;
			
			Если ПрайсПартнера.РоботЗагрузитьЦеныНоменклатуры Тогда
				ОбработкаОбъект.Результат_ДокументУстановкаЦенНоменклатуры();
			КонецЕсли;
			
			Если ПрайсПартнера.РоботЗагрузитьЗаказКлиента Тогда
				ОбработкаОбъект.Результат_ДокументЗаказПокупателя();
			КонецЕсли;
			
			Если ПрайсПартнера.РоботАлгоритмРезультат Тогда
				ОбработкаОбъект.Результат_ПроизвольныйАлгоритм();
			КонецЕсли;
			
			Если мегапрайсТрансформацияПрайсов Тогда
				ОбработкаОбъект.ТрансформацияПрайса();
			КонецЕсли;

			МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"Прайс успешно загружен (РОБОТ) - (скорость "+ВремяВыполнения+") "+СтрокаДляСообщения);
			
		КонецЦикла;   
	Иначе
		ОбработкаОбъект.АдресДанныхВХранилище = ОбработкаОбъект.ЧтениеФайлов_ВыполнитьЗагрузкуТаблиц("",ОбработкаОбъект.ТаблицаЛистовФайла);
		
		ОбработкаОбъект.ЗаполнениеТаблиц_ЗагрузитьМассивТаблиц();		
		ОбработкаОбъект.ВыполнитьСинхронизациюЗамен();
		ОбработкаОбъект.мСинхронизироватьСервер();
		
		Если ПрайсПартнера.РоботСоздатьНоменклатуру Тогда
			ОбработкаОбъект.СоздатьНовуюНоменклатуруСервер();
		КонецЕсли;
		
		Если ПрайсПартнера.РоботЗагрузитьДополнительныеСвойства Тогда
			ОбработкаОбъект.СинхронизироватьТаблицуСвойствСНоменклатурой();
			ОбработкаОбъект.ВыполнитьЗаписатьДопРеквизитыНаСервере();
		КонецЕсли;
		
		ОбработкаОбъект.Результат_РегистрацияЦенПоставщикаМегапрайс(Истина);
		
		КонецЗагрузки = ТекущаяДата();
		ВремяВыполнения = КонецЗагрузки - НачалоЗагрузки;
		
		Если ПрайсПартнера.РоботЗагрузитьЦеныПоставщикаТиповая Тогда
			ОбработкаОбъект.Результат_ДокументРегистрацияЦенПоставщикаТиповая();
		КонецЕсли;
		
		Если ПрайсПартнера.РоботЗагрузитьЦеныНоменклатуры Тогда
			ОбработкаОбъект.Результат_ДокументУстановкаЦенНоменклатуры();
		КонецЕсли;
		
		Если ПрайсПартнера.РоботАлгоритмРезультат Тогда
			ОбработкаОбъект.Результат_ПроизвольныйАлгоритм();
		КонецЕсли;
		
		Если мегапрайсТрансформацияПрайсов Тогда
			ОбработкаОбъект.ТрансформацияПрайса();
		КонецЕсли;

		МегапрайсЗаписатьСобытиеВЖурнал(ПрайсПартнера,"Прайс успешно загружен (РОБОТ) - (скорость "+ВремяВыполнения+") "+СтрокаДляСообщения);
	КонецЕсли;
	
	Если ПрайсПартнера.ФайлВидРасположения = "НаЛокальномДиске" Тогда
		Если НЕ ПрайсПартнера.НеУдалятьФайлПослеЗагрузки Тогда
			УдалитьФайлы(ПутьККаталогу,ИмяФайла);
		КонецЕсли;
	Иначе
		УдалитьФайлы(ПутьККаталогу);
	КонецЕсли;
	
КонецПроцедуры

Процедура мегапрайсИмпортЗагрузкаПрайсов() Экспорт
	
	УдалитьСтарыеПрайсы();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	мегапрайсПрофилиПрайсов.Ссылка КАК ПрофильПрайса,
	|	мегапрайсПрофилиПрайсов.ЗаданиеВремяНачало КАК ЗаданиеВремяНачало,
	|	мегапрайсПрофилиПрайсов.Приоритет КАК Приоритет
	|ИЗ
	|	Справочник.мегапрайсПрофилиПрайсов КАК мегапрайсПрофилиПрайсов
	|ГДЕ
	|	мегапрайсПрофилиПрайсов.ПометкаУдаления = ЛОЖЬ
	|	И мегапрайсПрофилиПрайсов.ИспользоватьРегламентноеЗадание = ИСТИНА
	|	И мегапрайсПрофилиПрайсов.ИспользоватьИндивидуальноеРегламентноеЗадание = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ЗаданиеВремяНачало) Тогда
			ТекущаяДата = ТекущаяДата();
			
			ТекущееВремя =  Дата('00010101') + (ТекущаяДата-НачалоДня(ТекущаяДата));
			ЗаданиеВремяНачало = Выборка.ЗаданиеВремяНачало;
			
			Разница = ЗаданиеВремяНачало - ТекущееВремя; 
			Если Разница > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		мегапрайсИмпортЗагрузкаПрайсовВыборка(Выборка.ПрофильПрайса);
	КонецЦикла;
	
КонецПроцедуры

Процедура мегапрайсИмпортИндивидуальноеЗадание(КодПрофиля) Экспорт
		
	//Если ЭтоКопияБазы() Тогда
	//	Возврат;
	//КонецЕсли;
	
	УдалитьСтарыеПрайсы();

	Если НЕ ЗначениеЗаполнено(КодПрофиля) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПрофиля = Справочники.мегапрайсПрофилиПрайсов.НайтиПоКоду(КодПрофиля);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПрофиля) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПрофиля.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПрофиля.ИспользоватьИндивидуальноеРегламентноеЗадание Тогда
		Возврат;
	КонецЕсли;
	
	мегапрайсИмпортЗагрузкаПрайсовВыборка(ПараметрыПрофиля);
	
КонецПроцедуры



//============================================================================
//СОЗДАНИЕ ПРАЙСОВ

Процедура мегапрайсГенерацияПрайсовВыборка(ПрофильПрайсаСсылка) Экспорт
	
	//ПрофильПрайса = Справочники.мегапрайсПрайсЛисты.СоздатьЭлемент();
	
	ПрофильПрайса = ПрофильПрайсаСсылка.ПолучитьОбъект();
	ПрофильПрайса.Инициализировать();
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	СхемаКомпоновкиДанных = ПрофильПрайса.ПолучитьМакет("СхемаЗапроса");
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ЗначениеЗаполнено(ПрофильПрайса.ХранилищеНастроекКомпоновщика) Тогда
		Попытка
			КомпоновщикНастроек.ЗагрузитьНастройки(ПрофильПрайса.ХранилищеНастроекКомпоновщика.Получить());
		Исключение КонецПопытки;
	КонецЕсли;

	ТаблицаОтчета = Новый ТабличныйДокумент;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("АдресСхемыВХранилище", КомпоновщикНастроек);
	ПрофильПрайса.СформироватьОтчет(ТаблицаОтчета,ПараметрыЗапроса);
		
	ПрофильПрайса.СохранитьПрайсВЭксель(ТаблицаОтчета);
	
	МегапрайсЗаписатьСобытиеВЖурнал(ПрофильПрайсаСсылка,"Автоматическая генерация прайса - выполнено.");
	
	Если ПрофильПрайса.РоботРассылкаПрайса Тогда
		ПрофильПрайса.ВыполнитьРассылку();
		МегапрайсЗаписатьСобытиеВЖурнал(ПрофильПрайсаСсылка,"Автоматическая генерация прайса - рассылка завершена.");
	КонецЕсли;
	
КонецПроцедуры

Процедура мегапрайсГенерацияПрайсов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	мегапрайсПрайсЛисты.Ссылка КАК ПрофильПрайса,
	|	мегапрайсПрайсЛисты.Приоритет КАК Приоритет
	|ИЗ
	|	Справочник.мегапрайсПрайсЛисты КАК мегапрайсПрайсЛисты
	|ГДЕ
	|	мегапрайсПрайсЛисты.ПометкаУдаления = ЛОЖЬ
	|	И мегапрайсПрайсЛисты.ИспользоватьРегламентноеЗадание = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		мегапрайсГенерацияПрайсовВыборка(Выборка.ПрофильПрайса);
	КонецЦикла;
	
КонецПроцедуры

Процедура мегапрайсГенерацияПрайсовИндивидуальноеЗадание(КодПрофиля) Экспорт
		
	//Если ЭтоКопияБазы() Тогда
	//	Возврат;
	//КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КодПрофиля) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПрофиля = Справочники.мегапрайсПрайсЛисты.НайтиПоКоду(КодПрофиля);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПрофиля) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПрофиля.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПрофиля.ИспользоватьИндивидуальноеРегламентноеЗадание Тогда
		Возврат;
	КонецЕсли;
	
	мегапрайсГенерацияПрайсовВыборка(ПараметрыПрофиля);
	
КонецПроцедуры





//============================================================================
//ФОРМИРОВАНИЕ ЦЕН

Процедура мегапрайсУстановкаЦенВыборка(ПравилоЦен) Экспорт 
		
	//ПравилоЦен = Справочники.мегапрайсРасширенныеВидыЦен.СоздатьЭлемент();
	
	ОбработкаОбъект = Обработки.мегапрайсАнализаторПрайсов.Создать();
	ОбработкаОбъект.РасширенныйВидЦен = ПравилоЦен;	
	ОбработкаОбъект.ИнициализироватьОбработку();
	
	ОбработкаОбъект.ВидЦенЗакупочная = ПравилоЦен.ВидЦенЗакупочная;
	ОбработкаОбъект.ВидЦенПродажи = ПравилоЦен.ВидЦенПродажи;
	
	ОбработкаОбъект.ПроцентСкидкиНаценки = ПравилоЦен.ПроцентСкидкиНаценки;
	ОбработкаОбъект.ПорядокОкругления = ПравилоЦен.ПорядокОкругления;	
	
	ОбработкаОбъект.ПрайсыПоставщиков.Загрузить(ПравилоЦен.ПрайсыПоставщиков.Выгрузить());	
	ОбработкаОбъект.ПрайсыКонкурентов.Загрузить(ПравилоЦен.ПрайсыКонкурентов.Выгрузить());
	ОбработкаОбъект.ПравилаРасчетаЦены.Загрузить(ПравилоЦен.ПравилаРасчетаЦены.Выгрузить());
	ОбработкаОбъект.ПорогиСрабатывания.Загрузить(ПравилоЦен.ПорогиСрабатывания.Выгрузить());	
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СхемаЗапроса");
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	ОбработкаОбъект.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	ОбработкаОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ЗначениеЗаполнено(ПравилоЦен.ХранилищеНастроекАнализаторПрайсов) Тогда
		Попытка
			ОбработкаОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПравилоЦен.ХранилищеНастроекАнализаторПрайсов.Получить());
		Исключение КонецПопытки;
	КонецЕсли;	
		
	ОбработкаОбъект.СформироватьТаблицуНаСервере();	
	
	ОбработкаОбъект.ВыполнитьУстановкаЦенНоменклатуры();
	
	//МегапрайсЗаписатьСобытиеВЖурнал(ПравилоЦен,"Автоматическое создание цен - выполнено.");
	
КонецПроцедуры

Процедура мегапрайсУстановкаЦен() Экспорт
	
	УдалитьСтарыеПрайсы();

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	мегапрайсРасширенныеВидыЦен.Ссылка КАК ПравилоЦен,
	|	мегапрайсРасширенныеВидыЦен.Приоритет КАК Приоритет,
	|	мегапрайсРасширенныеВидыЦен.ОтслеживатьКурсВалюты КАК ОтслеживатьКурсВалюты,
	|	мегапрайсРасширенныеВидыЦен.Валюта КАК Валюта,
	|	мегапрайсРасширенныеВидыЦен.ПредидущийКурсВалюты КАК ПредидущийКурсВалюты,
	|	мегапрайсРасширенныеВидыЦен.РазницаВКурсе КАК РазницаВКурсе
	|ИЗ
	|	Справочник.мегапрайсРасширенныеВидыЦен КАК мегапрайсРасширенныеВидыЦен
	|ГДЕ
	|	мегапрайсРасширенныеВидыЦен.ПометкаУдаления = ЛОЖЬ
	|	И мегапрайсРасширенныеВидыЦен.ИспользоватьРегламентноеЗадание = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		
		Если Выборка.ОтслеживатьКурсВалюты Тогда
			СтруктураВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, ТекущаяДата());
			ТекущийКурсВалюты = СтруктураВалюты.Курс;

			РазницаКурса = ТекущийКурсВалюты - Выборка.ПредидущийКурсВалюты;
			Если РазницаКурса < Выборка.РазницаВКурсе Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		мегапрайсУстановкаЦенВыборка(Выборка.ПравилоЦен);
	КонецЦикла;
	
КонецПроцедуры

Процедура мегапрайсУстановкаЦенИндивидуальноеЗадание(КодПрофиля) Экспорт
		
	//Если ЭтоКопияБазы() Тогда
	//	Возврат;
	//КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КодПрофиля) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПрофиля = Справочники.мегапрайсРасширенныеВидыЦен.НайтиПоКоду(КодПрофиля);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПрофиля) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПрофиля.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПрофиля.ИспользоватьИндивидуальноеРегламентноеЗадание Тогда
		Возврат;
	КонецЕсли;
	
	мегапрайсУстановкаЦенВыборка(ПараметрыПрофиля);
	
КонецПроцедуры




//============================================================================
//ПОМОЩНИК ЗАКУПОК

Процедура мегапрайсАвтозаказ() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры



