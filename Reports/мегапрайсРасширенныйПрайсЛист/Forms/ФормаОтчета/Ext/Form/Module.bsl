
//============================================================================
// АВТОР

&НаКлиенте
Процедура SubSysSkype(Команда)
	
	ЗапуститьПриложение("skype:shekineugeniy?chat");

КонецПроцедуры

&НаКлиенте
Процедура SubSysПерейтиНаСайтРазработчика(Команда)
	
	ЗапуститьПриложение("http://subsystems.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysОткрытьРММПоЗакупкам(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширенныйПомощникЗакупок.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРасширенныйПомощникЗакупок.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;

	Результат = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysОткрытьРММПоПродажам(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширенныйПомощникПродаж.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРасширенныйПомощникПродаж.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;

	Результат = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysОткрытьАнализЦен(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяУстановкаЦенНоменклатуры.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРасширеннаяУстановкаЦенНоменклатуры.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;

	Результат = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура SubSysОткрытьЗагрузкуДокументов(Команда)
	
	Результат = Ложь;
	
	Попытка
		ОткрытьФорму("ВнешняяОбработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.Форма"); 
		Результат = Истина;
	Исключение
	КОнецПопытки;
	
	Если Результат = Ложь Тогда
		Попытка
			ОткрытьФорму("Обработка.мегапрайсРасширеннаяЗагрузкаИзExcel.Форма.Форма"); 
			Результат = Истина;
		Исключение 
		КОнецПопытки;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Сообщить("Данная разработка отсутствует или не подключена");
	Конецесли;

	Результат = Ложь;
	
КонецПроцедуры

//============================================================================
// ФОРМА

&НаСервере
Процедура Инициализировать()
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");

	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Артикул";
	НовКолонка.Представление = "Артикул";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Код";
	НовКолонка.Представление = "Код";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "КодДляПоиска";
	НовКолонка.Представление = "Код для поиска";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Штрихкод";
	НовКолонка.Представление = "Штрихкод";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Характеристика";
	НовКолонка.Представление = "Характеристика";
	НовКолонка.Использование = ИспользоватьХарактеристикиНоменклатуры;
	НовКолонка.ШиринаКолонки = 0;  
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Производитель";
	НовКолонка.Представление = "Производитель";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;

	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Группа";
	НовКолонка.Представление = "Группа";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "Описание";
	НовКолонка.Представление = "Описание";
	НовКолонка.Использование = Истина;
	НовКолонка.ШиринаКолонки = 0;
	
	НовКолонка = НастройкаКолонок.Добавить();
	НовКолонка.Колонка = "ЕдиницаИзмерения";
	НовКолонка.Представление = "Ед.изм.";
	НовКолонка.Использование = Ложь;
	НовКолонка.ШиринаКолонки = 0;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализировать();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию();
		ОтправительПредставление = ПолучитьПредставлениеДляУчетнойЗаписи(УчетнаяЗапись);
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
	
	ТекстПисьмаФорматированныйДокумент.Добавить("100% загрузка прайса в 1С с помощью обработки Мегапрайс: Многофункциональная загрузка в 1С из Excel прайсов, цен, номенклатуры, документов для 1С УТ11 (Управление торговлей 11)");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) И ЗначениеЗаполнено(ИмяФайлаТекстаПисьма) Тогда
		ЗагрузитьHTMLНаСервере(ИмяФайлаТекстаПисьма);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()

	Обработка = РеквизитФормыВЗначение("Отчет");
	Возврат Обработка;

КонецФункции // ЭтотОбъект()

&НаСервере
Процедура СформироватьОтчет()
	
	ТаблицаОтчета.Очистить();
	ОбъектОтчет =  РеквизитФормыВЗначение("Отчет");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("АдресСхемыВХранилище", Отчет.КомпоновщикНастроек);
	ПараметрыЗапроса.Вставить("НастройкиОтображенияОстатков", НастройкиОтображенияОстатков);
	ПараметрыЗапроса.Вставить("НастройкаКолонок", НастройкаКолонок);

	ОбъектОтчет.СформироватьОтчет(ТаблицаОтчета,ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчет();
	
	ТаблицаОтчета.Показать();

КонецПроцедуры
 
//============================================================================
// РАССЫЛКА

&НаСервереБезКонтекста
Функция ВерсияПодсистемы(Знач ИдентификаторБиблиотеки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.Параметры.Вставить("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКонтакта(Контакт)

	Возврат Строка(Контакт);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт)
	
	Результат = ?(Имя = Адрес ИЛИ Имя = "", Адрес,?(ПустаяСтрока(Адрес),Имя, Имя + " <" + Адрес + ">"));
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Результат = Результат + " [" + ПолучитьПредставлениеКонтакта(Контакт) + "]";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина)

	Представление = "";
	Для Каждого Стр Из ТаблицаАдресатов Цикл
		Представление = Представление + ПолучитьПредставлениеАдресата(Стр.Представление, Стр.Адрес, ?(ВключатьИмяКонтакта, Стр.Контакт, "")) + "; ";
	КонецЦикла;

	Возврат Представление;

КонецФункции

&НаСервере
Процедура ЗагрузитьHTMLНаСервере(ИмяФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ЧтениеТекста.Прочитать(), Новый Структура);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьИменаПолучателей(СтрокаИмен, ИмяТаблицы)
	
	табПолучатели = РеквизитФормыВЗначение(ИмяТаблицы, Тип("ТаблицаЗначений"));

	табПолучатели.Очистить();
	Если ПустаяСтрока(СтрокаИмен) Тогда
		Возврат;
	КонецЕсли;

	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаИмен);
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Стр Из Результат Цикл
		новСтр = табПолучатели.Добавить();
		новСтр.Адрес = Стр.Адрес;
		новСтр.Представление = Стр.Представление;
		новСтр.Контакт = ПолучитьКонтактПоАдресу(Стр.Адрес);
	КонецЦикла;
	ЗначениеВРеквизитФормы(табПолучатели, ИмяТаблицы);

КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактПоАдресу(Адрес)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактов Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И (НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления)";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
		    Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектСКонтактнойИнформацией.Ссылка
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
		|ГДЕ
		|	ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
		|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
		|	И (НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Контакт = Выборка.Ссылка;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ДляПодбора)
	
	// Получим список адресатов
	соотвТабЧастей = Новый Соответствие;
	соотвТабЧастей.Вставить("Кому",    ПолучателиПисьма);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(ТабЧасть.Значение), ТабЧасть.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",   УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет",         Неопределено);
	
	Попытка
		ИмяОбщейФормы = ?(ДляПодбора, "ВнешнийОтчет.мегапрайсРасширенныйПрайсЛист.Форма.АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
		
		Результат = ОткрытьФормуМодально(ИмяОбщейФормы, ПараметрыОткрытия);
		Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
			Возврат;
		КонецЕсли;
	Исключение
		ИмяОбщейФормы = ?(ДляПодбора, "Отчет.мегапрайсРасширенныйПрайсЛист.Форма.АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
		
		Результат = ОткрытьФормуМодально(ИмяОбщейФормы, ПараметрыОткрытия);
		Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
			Возврат;
		КонецЕсли;
	КонецПопытки;

	// Заполним адресатов
	Если ДляПодбора Тогда
		ЗаполнитьПодобранныхПолучателей(соотвТабЧастей, Результат);
	Иначе
		ЗаполнитьУточненныеКонтакты(соотвТабЧастей, Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(соотвТабЧастей, Результат)

	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		ТабЧасть.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого Элемент Из Результат Цикл
		
		ТабЧасть = соотвТабЧастей.Получить(Элемент.Группа);
		Если ТабЧасть = Неопределено Тогда
			ТабЧасть = ПолучателиПисьма;
		КонецЕсли;
		
		новСтр = ТабЧасть.Добавить();
		новСтр.Адрес = Элемент.Адрес;
		новСтр.Представление = Элемент.Представление;
		новСтр.Контакт = Элемент.Контакт;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУточненныеКонтакты(соотвТабЧастей, соотвКонтактов)

	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		Для Каждого Стр Из ТабЧасть.Значение Цикл
			УправлениеЭлектроннойПочтойКлиент.ИсправитьКонтакт(Стр.Адрес, Стр.Представление, Стр.Контакт, соотвКонтактов);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДляУчетнойЗаписи(УчетнаяЗапись)

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Представление = Выборка.ИмяПользователя;
	Если ПустаяСтрока(Представление) Тогда
		Возврат Выборка.АдресЭлектроннойПочты;
	Иначе
		Возврат Представление + " <" + Выборка.АдресЭлектроннойПочты + ">";
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	Перем мТекстHTML;
	
	Настройки.Вставить("ИмяФайлаТекстаПисьма.СписокВыбора", Элементы.ИмяФайлаТекстаПисьма.СписокВыбора.ВыгрузитьЗначения());
	Настройки.Вставить("Тема.СписокВыбора", Элементы.Тема.СписокВыбора.ВыгрузитьЗначения());
	
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(мТекстHTML, Новый Структура);
	Настройки.Вставить("ТекстHTML.HTML", мТекстHTML);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Перем мТекстHTML;
	
	СписокВыбора = Настройки.Получить("ИмяФайлаТекстаПисьма.СписокВыбора");
	Если СписокВыбора <> Неопределено И ТипЗнч(СписокВыбора) = Тип("Массив") Тогда
		Элементы.ИмяФайлаТекстаПисьма.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли; 
			
	СписокВыбора = Настройки.Получить("Тема.СписокВыбора");
	Если СписокВыбора <> Неопределено И ТипЗнч(СписокВыбора) = Тип("Массив") Тогда
		Элементы.Тема.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли; 
	
	мТекстHTML = Настройки.Получить("ТекстHTML.HTML");
	Если ТипЗнч(мТекстHTML) = Тип("Строка") Тогда
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(мТекстHTML, Новый Структура);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УчетнаяЗапись);
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаТекстаПисьмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
	ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.txt; *.html; *.htm)|*.txt; *.html; *.htm'");
	ВыборФайла.ПолноеИмяФайла = ИмяФайлаТекстаПисьма;
	
	Если ВыборФайла.Выбрать() Тогда
		
		ИмяФайлаТекстаПисьма = ВыборФайла.ПолноеИмяФайла;
		ЗагрузитьHTMLНаСервере(ИмяФайлаТекстаПисьма);
		Элемент_ОбщийПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлПочтаПодобратьКонтакты(Команда)
	
	РедактироватьСписокПолучателей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Элемент_ОбщийПриИзменении(Элемент)
	
	СписокВыбора = Элемент.СписокВыбора;
	ЗначениеЭлемента = ЭтаФорма[Элемент.Имя];
	Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		ПозицияСтроки = СписокВыбора.НайтиПоЗначению(ЗначениеЭлемента);
		Если ПозицияСтроки = Неопределено Тогда
			СписокВыбора.Вставить(0, ЗначениеЭлемента);
		Иначе
			СписокВыбора.Сдвинуть(ПозицияСтроки, - СписокВыбора.Индекс(ПозицияСтроки));
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеСписковАдресатов()

	//Отказ = Ложь;
	//
	//Попытка
	//	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Объект.СписокПолучателейПисьма);
	//Исключение
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "Объект.СписокПолучателейПисьма");
	//	Отказ = Истина;
	//КонецПопытки;
	//
	//Возврат Отказ;

КонецФункции



&НаСервере
Процедура ВыполнитьОтправкуНаСервере(СтруктураПараметров)
		
	Для Каждого Получатель Из ПолучателиПисьма Цикл	
		//Сообщить(Получатель.Адрес); 
		
		Адресаты = Новый Массив;		
		Адресаты.Добавить(Новый Структура("Адрес,Представление", Получатель.Адрес, Получатель.Представление));
		
		ПараметрыПисьма = Новый Структура;		
		ПараметрыПисьма.Вставить("Кому", Адресаты);

		ВложенныеИзображения = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенныеИзображения);
		
		ПараметрыПисьма.Вставить("Тема",      СтруктураПараметров.Тема);
		ПараметрыПисьма.Вставить("Тело",      СтруктураПараметров.ТекстHTML);
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками);
		ПараметрыПисьма.Вставить("Кодировка", "utf-8");
		ПараметрыПисьма.Вставить("Важность",  УправлениеЭлектроннойПочтой.ПолучитьВажность(Перечисления.ВариантыВажностиВзаимодействия.Обычная));
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
		
		Если ВложенияВПисьмо.Количество() > 0 Тогда
			Вложения = Новый Соответствие;
			Для Каждого ЭлементВложение Из ВложенияВПисьмо Цикл
				Если ЭлементВложение.Пометка Тогда
					ДвоичныеДанные = Новый ДвоичныеДанные(ЭлементВложение.Значение);
					Вложения.Вставить(ЭлементВложение.Представление, ДвоичныеДанные);
				Иначе
					Вложения.Вставить(ЭлементВложение.Представление, ЭлементВложение.Значение);
				КонецЕсли;
			КонецЦикла;
			ПараметрыПисьма.Вставить("Вложения", Вложения);
		КонецЕсли;
		
		Если УведомитьОДоставке Тогда
			ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
		КонецЕсли;
		
		Если УведомитьОПрочтении Тогда
			ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
		КонецЕсли;

		Результат = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СтруктураПараметров.УчетнаяЗапись, ПараметрыПисьма);
		
		Если Результат <> "" Тогда
			//Сообщить(Результат);
		Иначе
			Сообщить(""+Получатель+"  Письмо успешно отправлено.");
		КонецЕсли;			
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыполнить(Команда)
	
	ОчиститьСообщения();
	
	//Если ПроверитьЗаполнениеСписковАдресатов() Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ПолучателиПисьма.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Необходимо указать хотя бы одного получателя письма.'"),, "Объект.СписокПолучателейПисьма");
		Возврат;
	КонецЕсли;

	Состояние("Отправка письма ...");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	СтруктураПараметров.Вставить("Тема", Тема);
	СтруктураПараметров.Вставить("ТекстHTML", ТекстHTML);

	
	ВыполнитьОтправкуНаСервере(СтруктураПараметров);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКонтактыВыполнить(Команда)

	РедактироватьСписокПолучателей(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстПисьма(Команда)
	
	Перем ТекстHTMLДляСохранения;
	
	Если ЗначениеЗаполнено(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла для сохранения'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.txt; *.html; *.htm)|*.txt; *.html; *.htm'");
		ВыборФайла.ПолноеИмяФайла = ИмяФайлаТекстаПисьма;
		
		Если ВыборФайла.Выбрать() Тогда
			
			ВложенияHTML = Новый Структура;
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTMLДляСохранения, ВложенияHTML);
			
			ФайлДляЗаписи = Новый ЗаписьТекста(ВыборФайла.ПолноеИмяФайла, КодировкаТекста.UTF8, , Ложь);
			ФайлДляЗаписи.ЗаписатьСтроку(ТекстHTMLДляСохранения);
			ФайлДляЗаписи.Закрыть();

		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

//РАБОТА С ВЛОЖЕНИЯМИ

&НаКлиенте
Процедура ПриложитьФайлВыполнить()
	
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВложениеПрайсаСервер()
	
	ТабличныеДокументы = Новый СписокЗначений;
    ТабличныеДокументы.Добавить(ТаблицаОтчета);
	
	СписокВложений = Новый СписокЗначений;

	РеквизитФормыВЗначение("Отчет").ПодготовитьФайлыКОтправке(СписокВложений, ТабличныеДокументы);

	ВложенияВПисьмо = СписокВложений;
	
	// помечаем те вложения, которые являются путями к файлам на клиенте
	Для Каждого ОписаниеВложение из ВложенияВПисьмо Цикл
		Если ТипЗнч(ОписаниеВложение.Значение) = Тип("Строка") Тогда
			Если ЭтоАдресВременногоХранилища(ОписаниеВложение.Значение) Тогда
				ОписаниеВложение.Значение = ПолучитьИзВременногоХранилища(ОписаниеВложение.Значение);
			Иначе
				ОписаниеВложение.Пометка = Истина; // Это путь к файлу в локальной файловой системе
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВложениеПрайса(Команда)
	
	СформироватьВложениеПрайсаСервер();
	
	Элементы.Закладки.ТекущаяСтраница = Элементы.Закладки.ПодчиненныеЭлементы.Рассылка;
	
	ОбновитьПредставлениеВложений();
		
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	НаименованиеВложения = Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя];
	
	Для Каждого ЭлементВложение Из ВложенияВПисьмо Цикл
		Если ЭлементВложение.Представление = НаименованиеВложения Тогда
			ВложенияВПисьмо.Удалить(ЭлементВложение);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьВложение();
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		АдресВременногоХранилища = "";
		Если ПоместитьФайл(АдресВременногоХранилища, ПараметрыПеретаскивания.Значение.ПолноеИмя, , Ложь) Тогда
			Файлы = Новый Массив;
			ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ПараметрыПеретаскивания.Значение.Имя, АдресВременногоХранилища);
			Файлы.Добавить(ПередаваемыйФайл);
			ДобавитьФайлыВСписок(Файлы);
			ОбновитьПредставлениеВложений();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущиеДанные <> Неопределено Тогда
		НаименованиеВложения = Элементы.Вложения.ТекущиеДанные[Элементы.Вложения.ТекущийЭлемент.Имя];
		
		Для Каждого ЭлементСпискаВложений Из ВложенияВПисьмо Цикл
			Если ЭлементСпискаВложений.Представление = НаименованиеВложения Тогда
				Если ТипЗнч(ЭлементСпискаВложений.Значение) = Тип("ДвоичныеДанные") Тогда
#Если ВебКлиент Тогда
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ЭлементСпискаВложений.Значение);
					ПолучитьФайл(АдресВоВременномХранилище, , Истина)
#Иначе
					Файл = Новый Файл(ЭлементСпискаВложений.Представление);
					Если Файл.Расширение = "mxl" Тогда
						ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ЭлементСпискаВложений.Значение);
						ТабличныйДокумент.ТолькоПросмотр = Истина;
						ТабличныйДокумент.Показать(ЭлементСпискаВложений.Представление);
					Иначе
						ИмяФайлаДляОткрытия = ПолучитьИмяВременногоФайла(Файл.Расширение);
						ЭлементСпискаВложений.Значение.Записать(ИмяФайлаДляОткрытия);
						ЗапуститьПриложение(ИмяФайлаДляОткрытия);
					КонецЕсли;
#КонецЕсли
				Иначе
#Если НЕ ВебКлиент Тогда
					Если Прав(СокрЛП(ЭлементСпискаВложений.Значение), 4) = ".mxl" Тогда
						ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(Новый ДвоичныеДанные(ЭлементСпискаВложений.Значение));
						ТабличныйДокумент.ТолькоПросмотр = Истина;
						ТабличныйДокумент.Показать(ЭлементСпискаВложений.Представление, ЭлементСпискаВложений.Значение);
					Иначе
#КонецЕсли
						ЗапуститьПриложение(ЭлементСпискаВложений.Значение);
#Если НЕ ВебКлиент Тогда
					КонецЕсли;
#КонецЕсли
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеВложений()
	
	ПредставлениеВложений.Очистить();
	
	индекс = 0;
	
	Для Каждого ЭлементВложение Из ВложенияВПисьмо Цикл
		Если Индекс = 0 Тогда
			СтрокаПредставления = ПредставлениеВложений.Добавить();
		КонецЕсли;
		
		СтрокаПредставления["Вложение" + Строка(Индекс + 1)] = ЭлементВложение.Представление;
		
		Индекс = Индекс + 1;
		Если Индекс = 2 тогда
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(ДвоичныеДанные)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	Перем ПомещенныеФайлы;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ПомещенныеФайлы = Новый Массив;
		Если ПоместитьФайлы(, ПомещенныеФайлы, "", Истина, ) Тогда
			ДобавитьФайлыВСписок(ПомещенныеФайлы);
			ОбновитьПредставлениеВложений();
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ВложенияВПисьмо.Добавить(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), Файл.Имя);
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЭксель(Команда)
	
	ИмяФайла = "Прайс "+ТекущаяДата()+".xlsx";
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);	
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;
	//ДиалогОткрытияФайла.Каталог = ПутьКрабочемуСтолу();
	ДиалогОткрытияФайла.Фильтр = "Файлы Microsoft Excel (*.xlsx)|*.xlsx|Все файлы (*.*)|*.*";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	Если ДиалогОткрытияФайла.Выбрать() тогда
		ТаблицаОтчета.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройки(Команда)
	Инициализировать();
КонецПроцедуры







