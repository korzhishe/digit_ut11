&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);

КонецПроцедуры


// При создании на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);

	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	УстановитьЗаголовкиКолонокВесОбъемСервер();

	ОбновитьИтогиВесОбъемСервер();
	
	//Константы.ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками.Получить()
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");

	Если ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками Тогда
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТипДоставки = Перечисления.ГАЛ_ТипДоставки.Прочее;
	КонецЕсли;
	
	  Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		    Объект.ДатаОтгрузки = ТекущаяДата();
		КонецЕсли;

		// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	Если Метаданные.Имя = "УправлениеТорговлей" Тогда
		
			// СтандартныеПодсистемы.Печать
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	// Конец СтандартныеПодсистемы.Печать

		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если  Параметры.Ключ.Пустая() Тогда
		Объект.Подразделение = ПараметрыСеанса.ТекущийПользователь.Подразделение;
		Объект.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Новый;
	КонецЕсли;
	
КонецПроцедуры


#Область РаботаСАдресом

//Адрес начало выбора
&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИмяРеквизитаАдресаДоставки = "АдресДоставки";
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

//При изменении Адреса
&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)    
	
	ИмяРеквизитаАдресаДоставки = "АдресДоставкиПолучателя";
		
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект["АдресДоставки"],
		Объект["АдресДоставкиЗначенияПолей"]);
	
КонецПроцедуры

//Очистка адреса
&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставкиПриИзменении(Элемент);
КонецПроцедуры


#КонецОбласти


//Устанавливает заголовки веса и объема с ед. изм
&НаСервере
Процедура УстановитьЗаголовкиКолонокВесОбъемСервер()
	
	ТекстВес = НСтр("ru = 'Вес,'") + " " + ЕдиницаИзмеренияВеса;
	ТекстОбъем = НСтр("ru = 'Объем,'") + " " + ЕдиницаИзмеренияОбъема;
	Элементы.ТоварыВес.Заголовок = ТекстВес;
	Элементы.ТоварыОбъем.Заголовок = ТекстОбъем;
	
	Элементы.ВесДокумента.Заголовок = ТекстВес;
	Элементы.ОбъемДокумента.Заголовок = ТекстОбъем;
	//
	//Элементы.РаспоряженияВЗаданияхНаПеревозкуВес.Заголовок = ТекстВес;
	//Элементы.РаспоряженияВЗаданияхНаПеревозкуОбъем.Заголовок = ТекстОбъем;
	//
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
		
КонецПроцедуры


//Обновление Итоговых данным по объему и весу
&НаСервере
Процедура ОбновитьИтогиВесОбъемСервер()
	
	//ПРФТ++
	
	//ПРФТ--
	
	
	
	Отбор = Новый Структура();
    Отбор.Вставить("Отменено",Ложь);


	ТемпТовары = Объект.Товары.Выгрузить(Отбор,);
	ВесДокумента = ТемпТовары.Итог("Вес");
	ОбъемДокумента = ТемпТовары.Итог("Объем");
	Объект.СуммаДокумента = ТемпТовары.Итог("Сумма");
КонецПроцедуры


//при изменении данных в табличной части Товары
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	ОбновитьИтогиВесОбъемСервер();
КонецПроцедуры

//При чтении на сервере
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	      ПриЧтенииСозданииНаСервере();
	  КонецПроцедуры
	  
	  
	  
#Область ЗаполниитьПоТипуЦен
&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
		Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		Объект.ЦенаВключаетНДС,
		//Истина,
		Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		,
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

 #КонецОбласти

	  
	  
#Область ЗаполниитТабличнуюЧасть

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИзОснованияНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	
	ДокументОбъект.ЗаполнитьТабличнуюЧастьИзОснованияНаСервере(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
			 	
КонецПроцедуры   
				 

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьИзОснования(Команда)
	ЗаполнитьТабличнуюЧастьИзОснованияНаСервере();
КонецПроцедуры

#КонецОбласти

	  
	  // СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	
	
	Если ПолучитьИмяКонфигурации() = "УправлениеТорговлей" Тогда
		//ПодключаемыеКомандыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	Если ПолучитьИмяКонфигурации() = "УправлениеТорговлей" Тогда
		//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
		
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьИмяКонфигурации()
	Возврат Метаданные.Имя;	
КонецФункции


//Начало выбора адреса
&НаКлиенте
Процедура НомерТелефона2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
		
	Список = ПолучитьСписокТелефонов(Объект.Контрагент);
	
	ДополнительныеПараметры = новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",Элементы.НомерТелефона2);
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораТелефона2", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(Оп, Список, Элемент);
	

	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораТелефона2(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт 	
 Объект.НомерТелефона2 = ВыбранныйЭлемент;
КонецПроцедуры



&НаКлиенте
Процедура НомерТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	
		
	Список = ПолучитьСписокТелефонов(Объект.Контрагент);
	
	ДополнительныеПараметры = новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",Элементы.НомерТелефона);
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(Оп, Список, Элемент);
	

	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораТелефона(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт 	
	
	//Если СтрДлина(ВыбранныйЭлемент) > 5 Тогда
	//	Если СтрНайти(ВыбранныйЭлемент,"+7") = 0 Тогда
	//		 ВыбранныйЭлемент = "+7" + ВыбранныйЭлемент;
	//	КонецЕсли;	
	//КонецЕсли;
	
	
	Объект.НомерТелефона = ВыбранныйЭлемент;
КонецПроцедуры



//Получает список телефонов конрагента
&НаСервере
Функция ПолучитьСписокТелефонов(Контрагент)
	  Список = Новый СписокЗначений;

	   Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	              // |	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	               |	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
    Запрос.УстановитьПараметр("Ссылка", Контрагент);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
		Пока Выборка.Следующий() Цикл
			
			НомерТелефона = Выборка.Представление;
			Если СтрДлина(НомерТелефона) > 0 Тогда
				
				НомерТелефона = ГАЛ_ДополнительныеФункцииСервер.ТолькоЧислаВСтроке(НомерТелефона);
				Если СтрДлина(НомерТелефона) = 11 Тогда
					НомерТелефона = Прав(НомерТелефона,СтрДлина(НомерТелефона)-1);
				Иначе
					
				КонецЕсли;
			КонецЕсли;
			
			  Список.Добавить(НомерТелефона);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;

КонецФункции

//Получает список адресов доставки
&НаСервере
Функция ПолучитьСписокАдресовДоставки(Контрагент)
	  Список = Новый СписокЗначений;

	   Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	              // |	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	               |	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
    Запрос.УстановитьПараметр("Ссылка", Контрагент);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
		Пока Выборка.Следующий() Цикл
			
			Представление = Выборка.Представление;
			Список.Добавить(Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;

КонецФункции

//Получает список Email
&НаСервере
Функция ПолучитьСписокEmail(Контрагент)
	  Список = Новый СписокЗначений;

	   Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	              // |	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	               |	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
    Запрос.УстановитьПараметр("Ссылка", Контрагент);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
		Пока Выборка.Следующий() Цикл
			
			АдресЭлектроннойПочты = Выборка.Представление;
			
			
			  Список.Добавить(АдресЭлектроннойПочты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;

КонецФункции



//Начало выбора из списка адреса
&НаКлиенте
Процедура АдресДоставкиПолучателяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	
		
	Список = ПолучитьСписокАдресовДоставки(Объект.Контрагент);
	
	ДополнительныеПараметры = новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",Элементы.АдресДоставкиПолучателя);
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(Оп, Список, Элемент);

КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеВыбораАдреса(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт 	
 Объект.АдресДоставки = ВыбранныйЭлемент;
КонецПроцедуры

&НаКлиенте
Процедура ПодборАдреса(Команда)
	СтандартнаяОбработка = Ложь;
	
		
	Список = ПолучитьСписокАдресовДоставки(Объект.Контрагент);
	
	ДополнительныеПараметры = новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",Элементы.АдресДоставкиПолучателя);
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(Оп, Список, Элементы.АдресДоставкиПолучателя);

КонецПроцедуры


//Начало выбора Емала
&НаКлиенте
Процедура EmailНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	
		
	Список = ПолучитьСписокEmail(Объект.Контрагент);
	
	ДополнительныеПараметры = новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",Элементы.Email);
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораEmail", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзСписка(Оп, Список, Элемент);
	

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораEmail(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт 	
 Объект.Email = ВыбранныйЭлемент;
КонецПроцедуры


