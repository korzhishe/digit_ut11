

//Обработка заполнения
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		// Заполнение шапки
		//Автор = ДанныеЗаполнения.Автор;
		ДокументОснование  = ДанныеЗаполнения.Ссылка;
		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		АдресДоставкиЗначенияПолей = ДанныеЗаполнения.АдресДоставкиЗначенияПолей;
		Валюта = ДанныеЗаполнения.Валюта;
		ВернутьМногооборотнуюТару = ДанныеЗаполнения.ВернутьМногооборотнуюТару;
		ВремяДоставкиПо = ДанныеЗаполнения.ВремяДоставкиПо;
		ВремяДоставкиС = ДанныеЗаполнения.ВремяДоставкиС;
		Грузоотправитель = ДанныеЗаполнения.Грузоотправитель;
		Грузополучатель = ДанныеЗаполнения.Грузополучатель;
		ДатаОтгрузки = ДанныеЗаполнения.ДатаОтгрузки;
		ДатаПоДаннымКлиента = ДанныеЗаполнения.ДатаПоДаннымКлиента;
		ДополнительнаяИнформация = ДанныеЗаполнения.ДополнительнаяИнформация;
		ДополнительнаяИнформацияПоДоставке = ДанныеЗаполнения.ДополнительнаяИнформацияПоДоставке + Символы.ПС + ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Комментарий = ДанныеЗаполнения.Комментарий;
		
		//КонтактноеЛицо = ДанныеЗаполнения.КонтактноеЛицо;
		КонтактноеЛицо = ПолучитьКонтактноеЛицо(ДанныеЗаполнения.ПеревозчикПартнер);
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		Менеджер = ДанныеЗаполнения.Менеджер;
		НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
		НомерПоДаннымКлиента = ДанныеЗаполнения.НомерПоДаннымКлиента;
		Организация = ДанныеЗаполнения.Организация;
		ОсобыеУсловияПеревозки = ДанныеЗаполнения.ОсобыеУсловияПеревозки;
		ОсобыеУсловияПеревозкиОписание = ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Партнер = ДанныеЗаполнения.Партнер;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Склад = ДанныеЗаполнения.Склад;
		СпособДоставки = ДанныеЗаполнения.СпособДоставки;
		СуммаАвансаДоОбеспечения = ДанныеЗаполнения.СуммаАвансаДоОбеспечения;
		СуммаВозвратнойТары = ДанныеЗаполнения.СуммаВозвратнойТары;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		СуммаПредоплатыДоОтгрузки = ДанныеЗаполнения.СуммаПредоплатыДоОтгрузки;
		ТребуетсяЗалогЗаТару = ДанныеЗаполнения.ТребуетсяЗалогЗаТару;
		ФормаОплаты = ДанныеЗаполнения.ФормаОплаты;
		ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
		СкидкиРассчитаны = ДанныеЗаполнения.СкидкиРассчитаны;
		
		ТипДоставки = Перечисления.ГАЛ_ТипДоставки.ЗаказКлиента;
		НомерТелефона = ПолучитьНомерТелефона(Контрагент);
		СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Новый;
		
		ЗаполнитьТабличнуюЧастьИзОснованияНаСервере(ДокументОснование);
		
		//Если адрес доставки пустой заполняем
		Если СтрДлина(АдресДоставки) = 0 Тогда
			  АдресДоставки = ПолучитьАдресДоставкиКонрагента(Контрагент);	
		КонецЕсли;
		Email = ПолучитьEMAIL(Контрагент);
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			ОсновнойМенеджер = Партнер.ОсновнойМенеджер;
			Если ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
				 НомерТелефонаМенеджер = ПолучитьНомерТелефонаПользователя(ОсновнойМенеджер);
			КонецЕсли;
		КонецЕсли;
		
		
		СпособДоставки  = Перечисления.ГАЛ_СпособыДоставки.ДоКлиента;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		// Заполнение шапки
		//Автор = ДанныеЗаполнения.Автор;
		ДокументОснование  = ДанныеЗаполнения.Ссылка;
		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		АдресДоставкиЗначенияПолей = ДанныеЗаполнения.АдресДоставкиЗначенияПолей;
		Валюта = ДанныеЗаполнения.Валюта;
		ВернутьМногооборотнуюТару = ДанныеЗаполнения.ВернутьМногооборотнуюТару;
		ВремяДоставкиПо = ДанныеЗаполнения.ВремяДоставкиПо;
		ВремяДоставкиС = ДанныеЗаполнения.ВремяДоставкиС;
		Грузоотправитель = ДанныеЗаполнения.Грузоотправитель;
		Грузополучатель = ДанныеЗаполнения.Грузополучатель;
		//ДатаОтгрузки = ДанныеЗаполнения.ДатаОтгрузки;
		//ДатаПоДаннымКлиента = ДанныеЗаполнения.ДатаПоДаннымКлиента;
		//ДополнительнаяИнформация = ДанныеЗаполнения.ДополнительнаяИнформация;
		//ДополнительнаяИнформацияПоДоставке = ДанныеЗаполнения.ДополнительнаяИнформацияПоДоставке + Символы.ПС + ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Комментарий = ДанныеЗаполнения.Комментарий;
		КонтактноеЛицо = ПолучитьКонтактноеЛицо(ДанныеЗаполнения.Партнер);
		//КонтактноеЛицо = ДанныеЗаполнения.КонтактноеЛицо;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Менеджер = ДанныеЗаполнения.Менеджер;
		НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
		//НомерПоДаннымКлиента = ДанныеЗаполнения.НомерПоДаннымКлиента;    
		Организация = ДанныеЗаполнения.Организация;
		ОсобыеУсловияПеревозки = ДанныеЗаполнения.ОсобыеУсловияПеревозки;
		ОсобыеУсловияПеревозкиОписание = ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Партнер = ДанныеЗаполнения.Партнер;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Склад = ДанныеЗаполнения.Склад;
		СпособДоставки = ДанныеЗаполнения.СпособДоставки;
		//СуммаАвансаДоОбеспечения = ДанныеЗаполнения.СуммаАвансаДоОбеспечения;
		//СуммаВозвратнойТары = ДанныеЗаполнения.СуммаВозвратнойТары;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		//СуммаПредоплатыДоОтгрузки = ДанныеЗаполнения.СуммаПредоплатыДоОтгрузки;
		ТребуетсяЗалогЗаТару = ДанныеЗаполнения.ТребуетсяЗалогЗаТару;
		ФормаОплаты = ДанныеЗаполнения.ФормаОплаты;
		ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
		СкидкиРассчитаны = ДанныеЗаполнения.СкидкиРассчитаны;
		
		ТипДоставки = Перечисления.ГАЛ_ТипДоставки.Реализация;
		НомерТелефона = ПолучитьНомерТелефона(Контрагент);
		СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Новый;
		
		ЗаполнитьТабличнуюЧастьИзОснованияНаСервере(ДокументОснование);
		
		//Если адрес доставки пустой заполняем
		Если СтрДлина(АдресДоставки) = 0 Тогда
			  АдресДоставки = ПолучитьАдресДоставкиКонрагента(Контрагент);
			
		КонецЕсли;
	    Email = ПолучитьEMAIL(Контрагент);
		СпособДоставки  = Перечисления.ГАЛ_СпособыДоставки.ДоКлиента;

				Если ЗначениеЗаполнено(Партнер) Тогда
			ОсновнойМенеджер = Партнер.ОсновнойМенеджер;
			Если ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
				 НомерТелефонаМенеджер = ПолучитьНомерТелефонаПользователя(ОсновнойМенеджер);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// Заполнение шапки
		ДокументОснование  = ДанныеЗаполнения.Ссылка;

		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		АдресДоставкиЗначенияПолей = ДанныеЗаполнения.АдресДоставкиЗначенияПолей;
		Валюта = ДанныеЗаполнения.Валюта;
		ВернутьМногооборотнуюТару = ДанныеЗаполнения.ВернутьМногооборотнуюТару;
		ВремяДоставкиПо = ДанныеЗаполнения.ВремяДоставкиПо;
		ВремяДоставкиС = ДанныеЗаполнения.ВремяДоставкиС;
		ДополнительнаяИнформация = ДанныеЗаполнения.ДополнительнаяИнформация;
		ДополнительнаяИнформацияПоДоставке = ДанныеЗаполнения.ДополнительнаяИнформацияПоДоставке + Символы.ПС + ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Менеджер = ДанныеЗаполнения.Менеджер;
		НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
		Организация = ДанныеЗаполнения.Организация;
		ОсобыеУсловияПеревозки = ДанныеЗаполнения.ОсобыеУсловияПеревозки;
		ОсобыеУсловияПеревозкиОписание = ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Партнер = ДанныеЗаполнения.Партнер;
		КонтактноеЛицо = ПолучитьКонтактноеЛицо(ДанныеЗаполнения.Партнер);

		Подразделение = ДанныеЗаполнения.Подразделение;
		Склад = ДанныеЗаполнения.Склад;
		СпособДоставки = ДанныеЗаполнения.СпособДоставки;
		СуммаВозвратнойТары = ДанныеЗаполнения.СуммаВозвратнойТары;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		ТребуетсяЗалогЗаТару = ДанныеЗаполнения.ТребуетсяЗалогЗаТару;
		ФормаОплаты = ДанныеЗаполнения.ФормаОплаты;
		ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
		
		ТипДоставки = Перечисления.ГАЛ_ТипДоставки.ЗаказПоставщику;
		НомерТелефона = ПолучитьНомерТелефона(Контрагент);
		СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Новый;
	
		ЗаполнитьТабличнуюЧастьИзОснованияНаСервере(ДокументОснование);
		
		//Если адрес доставки пустой заполняем
		Если СтрДлина(АдресДоставки) = 0 Тогда
			  АдресДоставки = ПолучитьАдресДоставкиКонрагента(Контрагент);	
		КонецЕсли;
        Email = ПолучитьEMAIL(Контрагент);
		СпособДоставки  = Перечисления.ГАЛ_СпособыДоставки.ДоКлиента;
		
				Если ЗначениеЗаполнено(Партнер) Тогда
			ОсновнойМенеджер = Партнер.ОсновнойМенеджер;
			Если ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
				 НомерТелефонаМенеджер = ПолучитьНомерТелефонаПользователя(ОсновнойМенеджер);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		// Заполнение шапки
		ДокументОснование  = ДанныеЗаполнения.Ссылка;

		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		АдресДоставкиЗначенияПолей = ДанныеЗаполнения.АдресДоставкиЗначенияПолей;
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		//ВернутьМногооборотнуюТару = ДанныеЗаполнения.ВернутьМногооборотнуюТару;
		ВремяДоставкиПо = ДанныеЗаполнения.ВремяДоставкиПо;
		ВремяДоставкиС = ДанныеЗаполнения.ВремяДоставкиС;
		//ДополнительнаяИнформация = ДанныеЗаполнения.ДополнительнаяИнформацияПоДоставке;
		ДополнительнаяИнформацияПоДоставке = ДанныеЗаполнения.ДополнительнаяИнформацияПоДоставке + Символы.ПС + ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		Комментарий = ДанныеЗаполнения.Комментарий;
		//Контрагент = ДанныеЗаполнения.Контрагент;
		//Менеджер = ДанныеЗаполнения.Менеджер;
		//НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
		Организация = ДанныеЗаполнения.Организация;
		ОсобыеУсловияПеревозки = ДанныеЗаполнения.ОсобыеУсловияПеревозки;
		ОсобыеУсловияПеревозкиОписание = ДанныеЗаполнения.ОсобыеУсловияПеревозкиОписание;
		//Партнер = ДанныеЗаполнения.Партнер;
		//КонтактноеЛицо = ПолучитьКонтактноеЛицо(ДанныеЗаполнения.Партнер);

		Подразделение = ДанныеЗаполнения.Подразделение;
		Склад = ДанныеЗаполнения.СкладОтправитель;
		СпособДоставки = ДанныеЗаполнения.СпособДоставки;
		//СуммаВозвратнойТары = ДанныеЗаполнения.СуммаВозвратнойТары;
		//СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		//ТребуетсяЗалогЗаТару = ДанныеЗаполнения.ТребуетсяЗалогЗаТару;
		//ФормаОплаты = ДанныеЗаполнения.ФормаОплаты;
		//ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		//ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
		
		ТипДоставки = Перечисления.ГАЛ_ТипДоставки.Перемещение;
		//НомерТелефона = ПолучитьНомерТелефона(Контрагент);
		СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Новый;
	
		ЗаполнитьТабличнуюЧастьИзОснованияНаСервере(ДокументОснование);
		
		//Если адрес доставки пустой заполняем
		//Если СтрДлина(АдресДоставки) = 0 Тогда
		//	  АдресДоставки = ПолучитьАдресДоставкиКонрагента(Контрагент);	
		//КонецЕсли;
       // Email = ПолучитьEMAIL(Контрагент);
		СпособДоставки  = Перечисления.ГАЛ_СпособыДоставки.ДоКлиента;

		
	//ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ГАЛ_ЗаказНарядНаРемонт") Тогда
	//	ДокументОснование  = ДанныеЗаполнения.Ссылка;
	//	
	//	ТипДоставки = Перечисления.ГАЛ_ТипДоставки.ЗаказНаРемонт;
	//	
	//	НомерТелефона = ПолучитьНомерТелефона(Контрагент);
	//	СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Новый;

	//	Контрагент = ДанныеЗаполнения.Контрагент;
	//	Организация = ДанныеЗаполнения.Организация;
	//	
	//	
	//	
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	Контрагенты.Партнер
	//	               |ИЗ
	//	               |	Справочник.Контрагенты КАК Контрагенты
	//	               |ГДЕ
	//	               |	Контрагенты.ПометкаУдаления = ЛОЖЬ
	//	               |	И Контрагенты.Ссылка = &Ссылка";
	//	
	//	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Контрагент);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//	
	//		Партнер = Выборка.Партнер;
	//	
	//	КонецЦикла;
	//	
	//	
	//	Для Каждого ТекСтрокаТовары из ДанныеЗаполнения.Оборудование Цикл
	//		
	//		НоваяСтрока = Товары.Добавить();
	//		//НоваяСтрока.ВидЦены = ТекСтрокаТовары.ВидЦены;
	//		//НоваяСтрока.ДатаОтгрузки = ТекСтрокаТовары.ДатаОтгрузки;
	//		//НоваяСтрока.КлючСвязи = ТекСтрокаТовары.КлючСвязи;
	//		НоваяСтрока.КодСтроки = ТекСтрокаТовары.НомерСтроки;
	//		НоваяСтрока.Количество = 1;
	//		//НоваяСтрока.КоличествоУпаковок = ТекСтрокаТовары.КоличествоУпаковок;
	//		НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
	//		//НоваяСтрока.НоменклатураНабора = ТекСтрокаТовары.НоменклатураНабора;
	//		//НоваяСтрока.Отменено = ТекСтрокаТовары.Отменено;
	//		//НоваяСтрока.ПричинаОтмены = ТекСтрокаТовары.ПричинаОтмены;
	//		//НоваяСтрока.ПроцентАвтоматическойСкидки = ТекСтрокаТовары.ПроцентАвтоматическойСкидки;
	//		//НоваяСтрока.ПроцентРучнойСкидки = ТекСтрокаТовары.ПроцентРучнойСкидки;
	//		//НоваяСтрока.Серия = ТекСтрокаТовары.Серия;
	//		//НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
	//		//НоваяСтрока.Содержание = ТекСтрокаТовары.Содержание;
	//		НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.Номенклатура.СтавкаНДС;
	//		//НоваяСтрока.СтатусУказанияСерий = ТекСтрокаТовары.СтатусУказанияСерий;
	//		//НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
	//		//НоваяСтрока.СуммаАвтоматическойСкидки = ТекСтрокаТовары.СуммаАвтоматическойСкидки;
	//		//НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
	//		//НоваяСтрока.СуммаРучнойСкидки = ТекСтрокаТовары.СуммаРучнойСкидки;
	//		//НоваяСтрока.СуммаСНДС = ТекСтрокаТовары.СуммаСНДС;
	//		//НоваяСтрока.Упаковка = ТекСтрокаТовары.Упаковка;
	//		//НоваяСтрока.Характеристика = ТекСтрокаТовары.Характеристика;
	//		//НоваяСтрока.ХарактеристикаНабора = ТекСтрокаТовары.ХарактеристикаНабора;
	//		//НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
	//		
	//		ТекНоменклатура = НоваяСтрока.Номенклатура;
	//		Если ТекНоменклатура.ВесИспользовать Тогда
	//			
	//			Вес = (ТекНоменклатура.ВесЧислитель / ?( ТекНоменклатура.ВесЗнаменатель = 0,1,ТекНоменклатура.ВесЗнаменатель)
	//			*  НоваяСтрока.Количество);
	//			НоваяСтрока.Вес = Вес;
	//			
	//		КонецЕсли;
	//		
	//		Если ТекНоменклатура.ОбъемИспользовать Тогда
	//			
	//			Объем = (ТекНоменклатура.ОбъемЧислитель / ?( ТекНоменклатура.ОбъемЗнаменатель = 0,1,ТекНоменклатура.ОбъемЗнаменатель)
	//			*  НоваяСтрока.Количество);
	//			НоваяСтрока.Объем = Объем;
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	
	//    		//Если адрес доставки пустой заполняем
	//	Если СтрДлина(АдресДоставки) = 0 Тогда
	//		  АдресДоставки = ПолучитьАдресДоставкиКонрагента(Контрагент);	
	//	КонецЕсли;
	//    Email = ПолучитьEMAIL(Контрагент);
	//	СпособДоставки  = Перечисления.ГАЛ_СпособыДоставки.ДоКлиента;

	
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры


//Получем контактное лицо по партнеру
функция ПолучитьКонтактноеЛицо(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Владелец
	|	И КонтактныеЛицаПартнеров.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Партнер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Возврат  Выборка.Ссылка;
	КонецЕсли;
	
	Возврат "";	
	
КонецФункции


//пред записью
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		//Ответственный	 
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
   //ТипДоставки
   Если не ЗначениеЗаполнено(ТипДоставки) Тогда
	   ТипДоставки = Перечисления.ГАЛ_ТипДоставки.Прочее;
   КонецЕсли;
   
КонецПроцедуры


//Получает телефон объекта
Функция ПолучитьНомерТелефона(Контрагент) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	               |	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	               |	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
    Запрос.УстановитьПараметр("Ссылка", Контрагент);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
	 Выборка.Следующий();
	     НомерТелефона = Выборка.Представление;
		 Если СтрДлина(НомерТелефона) > 0 Тогда
			 
			 НомерТелефона = ГАЛ_ДополнительныеФункцииСервер.ТолькоЧислаВСтроке(НомерТелефона);
			 Если СтрДлина(НомерТелефона) = 11 Тогда
				 НомерТелефона = Прав(НомерТелефона,СтрДлина(НомерТелефона)-1);
			 Иначе
				 
			 КонецЕсли;
			 
			 КонецЕсли;
		Возврат НомерТелефона;
	Иначе 	
		Возврат "";
	КонецЕсли;
										 
КонецФункции



//Получает телефон пользователя
Функция ПолучитьНомерТелефонаПользователя(парПользователь) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	               |	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
    Запрос.УстановитьПараметр("Ссылка", парПользователь);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
	 Выборка.Следующий();
	     ПНомерТелефона = Выборка.Представление;
		 Если СтрДлина(ПНомерТелефона) > 0 Тогда
			 
			 ПНомерТелефона = ГАЛ_ДополнительныеФункцииСервер.ТолькоЧислаВСтроке(ПНомерТелефона);
			 Если СтрДлина(ПНомерТелефона) = 11 Тогда
				 ПНомерТелефона = Прав(ПНомерТелефона,СтрДлина(ПНомерТелефона)-1);
			 Иначе
				 
			 КонецЕсли;
			 
			 КонецЕсли;
		Возврат ПНомерТелефона;
	Иначе 	
		Возврат "";
	КонецЕсли;
										 
КонецФункции




//Получает адрес доставки объекта
Функция ПолучитьАдресДоставкиКонрагента(Контрагент) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки",Истина,) );
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
		Выборка.Следующий();
		Адрес = Выборка.Представление;
		Возврат Адрес;
	Иначе 	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона,
		|	КонтрагентыКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента );
		Запрос.УстановитьПараметр("Ссылка", Контрагент);
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество()>0 Тогда
			Выборка.Следующий();
			Адрес = Выборка.Представление;
			Возврат Адрес;
		Иначе 	
			
			
			Возврат "";
			
		КонецЕсли;
		
		
		
	КонецЕсли;
										 
КонецФункции


//Получает EMAIL объекта
Функция ПолучитьEMAIL(Контрагент) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Тип = &Тип
	               |	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	               |	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
    Запрос.УстановитьПараметр("Ссылка", Контрагент);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда
	 Выборка.Следующий();
	     EmailКонтрагента = Выборка.Представление;
		 //Если СтрДлина(НомерТелефона) > 0 Тогда
			 
			 //НомерТелефона = ГАЛ_ДополнительныеФункцииСервер.ТолькоЧислаВСтроке(НомерТелефона);
			 //Если СтрДлина(НомерТелефона) = 11 Тогда
			 //    НомерТелефона = Прав(НомерТелефона,СтрДлина(НомерТелефона)-1);
			 //Иначе
			 //    
			 //КонецЕсли;
			 
			 //КонецЕсли;
		Возврат EmailКонтрагента;
	Иначе 	
		Возврат "";
	КонецЕсли;
										 
КонецФункции



//Обработка проведения
Процедура ОбработкаПроведения(Отказ, Режим)
	
	ДатаСобытия = ТекущаяДата();	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаказНаДоставку",Ссылка);	
	ТекСтатус = РегистрыСведений.ГАЛ_СостояниеЗаказаНаДоставку.ПолучитьПоследнее(ДатаСобытия,Отбор);	
    УведомитьPUSHВодителя(ТекСтатус.Статус,СтатусДоставки,Ссылка);	
	
	
	// регистр ГАЛ_СостояниеЗаказаНаДоставку
	Движения.ГАЛ_СостояниеЗаказаНаДоставку.Записывать = Истина;
	Движение = Движения.ГАЛ_СостояниеЗаказаНаДоставку.Добавить();
	Движение.Период = Дата;
	Движение.ЗаказНаДоставку = Ссылка;
	Движение.Статус = СтатусДоставки;

	// регистр ГАЛ_НоменклатураВЗаказахНаДоставку 
	Движения.ГАЛ_НоменклатураВЗаказахНаДоставку.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Если ТекСтрокаТовары.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ГАЛ_НоменклатураВЗаказахНаДоставку.Добавить();
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Характеристика = ТекСтрокаТовары.Характеристика;
		Движение.КодСтроки = ТекСтрокаТовары.КодСтроки;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

	
	//ЕСли стоит признак уведомления клиента и статус содержит шаблон: отправляем смс
	ШаблонSMS = СтатусДоставки.ШаблонSMS;
	Если ЗначениеЗаполнено(ШаблонSMS) Тогда
		Если УведомлятьПоSMS Тогда
			Если ЗначениеЗаполнено(НомерТелефона) Тогда
				НомерДляОтправки = НомерТелефона;
			ИначеЕсли ЗначениеЗаполнено(НомерТелефона2) Тогда
				НомерДляОтправки = НомерТелефона2;
			КонецЕсли;
			
			НомерДляОтправки = СтрЗаменить(НомерДляОтправки," ","");
			НомерДляОтправкиСтрокой = СтрЗаменить(НомерДляОтправки,"(","");
			НомерДляОтправкиСтрокой = СтрЗаменить(НомерДляОтправкиСтрокой,")","");
			
			Комментарий    = Строка(Номер) + "_" + Строка(СтатусДоставки);
			Если ЗначениеЗаполнено(НомерДляОтправки) Тогда
				НайденныйДокумент = НайтиСообщениеSMSПоКомментарию(Комментарий);
				//Проверяем еси уже есть документ СообщениеСМС с таким статусом, не созадем документ
				ЕСли НайденныйДокумент = Документы.СообщениеSMS.ПустаяСсылка() Тогда
					ТекстШаблонаSMS = ШаблонSMS.ТекстШаблонаSMS;
					//Получаем данные по курьеру
					ТекстШаблонаSMS = ЗаполнитьШаблон(ТекстШаблонаSMS);
					
					НовыйДокументСМС = Документы.СообщениеSMS.СоздатьДокумент();
					НовыйДокументСМС.ТекстСообщения = ТекстШаблонаSMS;
					НовыйДокументСМС.Дата           = ТекущаяДата();
					НовыйДокументСМС.Ответственный  = ПараметрыСеанса.ТекущийПользователь;
					НовыйДокументСМС.Автор          = ПараметрыСеанса.ТекущийПользователь;
					НовыйДокументСМС.Состояние      = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
					НовыйДокументСМС.Комментарий    = Комментарий; 
					
					
					НовыйАдресат = НовыйДокументСМС.Адресаты.Добавить();
					НовыйАдресат.НомерДляОтправки = НомерДляОтправкиСтрокой;
					НовыйАдресат.ПредставлениеКонтакта = КонтактноеЛицо;
					НовыйАдресат.КакСвязаться    = НомерДляОтправки;
					НовыйАдресат.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее;
					//НовыйАдресат.ИдентификаторСообщения = "123"; 
					//Попытка
					НовыйДокументСМС.Записать(РежимЗаписиДокумента.Запись);
					//Исключение
					//КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	//////EMAIL
	//ЕСли стоит признак уведомления клиента и статус содержит шаблон: отправляем EMAIL
	ШаблонEMAIL = СтатусДоставки.ШаблонEMAIL;
	Если ЗначениеЗаполнено(ШаблонEMAIL) Тогда
		Если УведомлятьПоEmail Тогда
			
			АдресДляОтправки = Email;
			
			УчетнаяЗапись  = Константы.ГАЛ_УчетнаяЗаписьЭлектроннойПочты.Получить();
			
			Комментарий    = Строка(Номер) + "_" + Строка(СтатусДоставки);
			
			Если ЗначениеЗаполнено(АдресДляОтправки) и ЗначениеЗаполнено(УчетнаяЗапись) Тогда
				НайденныйДокумент = НайтиСообщениеEMAILПоКомментарию(Комментарий);
				//Проверяем еси уже есть документ СообщениеСМС с таким статусом, не созадем документ
				ЕСли НайденныйДокумент = Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка() Тогда
					ТекстШаблонаПисьма = ШаблонEMAIL.ТекстШаблонаПисьма;
					ТекстШаблонаПисьмаHTML = ШаблонEMAIL.ТекстШаблонаПисьмаHTML;
					//Получаем данные по курьеру
					ТекстШаблонаПисьма = ЗаполнитьШаблон(ТекстШаблонаПисьма);
					ТекстШаблонаПисьмаHTML = ЗаполнитьШаблон(ТекстШаблонаПисьмаHTML);
					
					НовыйДокументEMAIL = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
					НовыйДокументEMAIL.СтатусПисьма        = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
					НовыйДокументEMAIL.УчетнаяЗапись       = УчетнаяЗапись;
					НовыйДокументEMAIL.Дата                = ТекущаяДата();
					НовыйДокументEMAIL.ДатаОтправления     = ТекущаяДата();
					НовыйДокументEMAIL.Тема                = ШаблонEMAIL.ТемаПисьма;
					НовыйДокументEMAIL.Текст               = ТекстШаблонаПисьма;
                    НовыйДокументEMAIL.ТекстHTML           = ТекстШаблонаПисьмаHTML;
					НовыйДокументEMAIL.ТипТекста           = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
                    НовыйДокументEMAIL.Автор               = ПараметрыСеанса.ТекущийПользователь;
					НовыйДокументEMAIL.Ответственный       = ПараметрыСеанса.ТекущийПользователь;
					НовыйДокументEMAIL.Комментарий         = Комментарий;
					НовыйДокументEMAIL.ОтправительПредставление = Строка(УчетнаяЗапись) ;
					
					НовыйПолучатель = НовыйДокументEMAIL.ПолучателиПисьма.Добавить();
					НовыйПолучатель.Адрес         = АдресДляОтправки;
					НовыйПолучатель.Представление = КонтактноеЛицо;
					
					
								//НовыйАдресат.ИдентификаторСообщения = "123"; 
					//Попытка
					НовыйДокументEMAIL.Записать(РежимЗаписиДокумента.Запись);
					//Исключение
					//КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// регистр ГАЛ_ДенежныеСредстваМУ 
	Движения.ГАЛ_ДенежныеСредстваМУ.Записывать = Истина;
	Для Каждого ТекСтрокаОплаты Из Оплаты Цикл
		Движение = Движения.ГАЛ_ДенежныеСредстваМУ.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.ЗаказНаДоставку = Ссылка;
		//Движение.КурьерЭкспедитор = КурьерЭкспедитор;
		Движение.Сумма = ТекСтрокаОплаты.Сумма;
		Движение.ТипДС = ТекСтрокаОплаты.ТипДС;

	КонецЦикла;

	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры


Функция НайтиСообщениеSMSПоКомментарию(Комментарий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СообщениеSMS.Ссылка
	|ИЗ
	|	Документ.СообщениеSMS КАК СообщениеSMS
	|ГДЕ
	|	СообщениеSMS.Комментарий ПОДОБНО &Комментарий
	|	И СообщениеSMS.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Комментарий",Комментарий );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЕСли Выборка.Количество()> 0 Тогда
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;	
	Иначе
		Возврат Документы.СообщениеSMS.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции


Функция НайтиСообщениеEMAILПоКомментарию(Комментарий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |ГДЕ
	               |	ЭлектронноеПисьмоИсходящее.Комментарий ПОДОБНО &Комментарий
	               |	И ЭлектронноеПисьмоИсходящее.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Комментарий",Комментарий );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЕСли Выборка.Количество()> 0 Тогда
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;	
	Иначе
		Возврат Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка();
	КонецЕсли;
	
	
КонецФункции

//Уведомляет водителя по пуш
Функция УведомитьPUSHВодителя(ТекСтатус,НовыйСтатус,Ссылка)
	
	//Проверяем назначен ли водитель документу
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ГАЛ_МаршрутыСрезПоследних.КурьерЭкспедитор
	                |ИЗ
	                |	РегистрСведений.ГАЛ_Маршруты.СрезПоследних(, ЗаказНаДоставку = &ЗаказНаДоставку) КАК ГАЛ_МаршрутыСрезПоследних";
	 
	 Запрос.УстановитьПараметр("ЗаказНаДоставку",Ссылка );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Количество()>0 Тогда
	  Выборка.Следующий();
	  ФизЛицо = Выборка.КурьерЭкспедитор;
	     //мы нашли физ лицо и его данные для отправки ПУШ
		 //теперь оприделяем нужно ли отправлять ПУШ
	 	  Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ
		                 |	ГАЛ_НастройкиPushУведомлений.Текст
		                 |ИЗ
		                 |	РегистрСведений.ГАЛ_НастройкиPushУведомлений КАК ГАЛ_НастройкиPushУведомлений
		                 |ГДЕ
		                 |	ГАЛ_НастройкиPushУведомлений.ИзСтатуса = &ИзСтатуса
		                 |	И ГАЛ_НастройкиPushУведомлений.ВСтатус = &ВСтатус
		                 |	И ГАЛ_НастройкиPushУведомлений.ФизЛицо = &ФизЛицо";
						 
						 Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
						 Запрос.УстановитьПараметр("ИзСтатуса", ТекСтатус);
						 Запрос.УстановитьПараметр("ВСтатус", НовыйСтатус);
						 
		  Результат = Запрос.Выполнить();
		  Выборка = Результат.Выбрать();
		  
		  Если Выборка.Количество()>0 Тогда
			  Выборка.Следующий();
			  
			  ГАЛ_ДополнительныеФункцииСервер.ОтправитьПушУведоплениеПодписчику(ФизЛицо,Выборка.Текст + " " + Строка(Ссылка));
		  КонецЕсли;
		  
	 
	 КонецЕсли;
	 
КонецФункции



Функция ЗаполнитьШаблон(ТекстШаблонаSMS)
	
	  	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ГАЛ_МаршрутыСрезПоследних.КурьерЭкспедитор,
	                |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ДокументОснование.Номер КАК НомерЗаказа,
	                |	ГАЛ_МаршрутыСрезПоследних.ДатаДоставки,
	                |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ВремяДоставкиС КАК ВремяДоставкиС,
	                |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку.ВремяДоставкиПо КАК ВремяДоставкиПо
	                |ПОМЕСТИТЬ ТЗФизЛицИИнфо
	                |ИЗ
	                |	РегистрСведений.ГАЛ_Маршруты.СрезПоследних КАК ГАЛ_МаршрутыСрезПоследних
	                |ГДЕ
	                |	ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку = &ЗаказНаДоставку
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизЛицо,
	                |	ФизическиеЛицаКонтактнаяИнформация.Представление КАК НомерТелефона,
	                |	ТЗФизЛицИИнфо.НомерЗаказа,
	                |	ТЗФизЛицИИнфо.ДатаДоставки,
	                |	ТЗФизЛицИИнфо.ВремяДоставкиС,
	                |	ТЗФизЛицИИнфо.ВремяДоставкиПо
	                |ИЗ
	                |	ТЗФизЛицИИнфо КАК ТЗФизЛицИИнфо
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	                |		ПО ТЗФизЛицИИнфо.КурьерЭкспедитор = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	                |ГДЕ
	                |	ФизическиеЛицаКонтактнаяИнформация.Ссылка В
	                |			(ВЫБРАТЬ
	                |				ТЗФизЛицИИнфо.КурьерЭкспедитор
	                |			ИЗ
	                |				ТЗФизЛицИИнфо КАК ТЗФизЛицо)
	                |	И ФизическиеЛицаКонтактнаяИнформация.Вид = &Вид";
	 
	 Запрос.УстановитьПараметр("ЗаказНаДоставку",Ссылка );
	 Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица );
	 
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 Если Выборка.Количество() > 0 Тогда
		 Выборка.Следующий();
		 
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[Курьер]", Строка(Выборка.ФизЛицо));
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[НомерТелефона]", Строка(Выборка.НомерТелефона));
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[НомерЗаказа]", Строка(Выборка.НомерЗаказа));
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[ВремяДоставки]", " с " + Строка(Формат(Выборка.ВремяДоставкиС,"ДФ=ЧЧ:мм"))+ " по " +Строка(Формат(Выборка.ВремяДоставкиПо,"ДФ=ЧЧ:мм"))   );
		   ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[ДатаДоставки]", Строка(Формат(Выборка.ДатаДоставки,"ДФ=dd.MM.yyyy")));
	  ИНАче
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[Курьер]", "");
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[НомерТелефона]", "");
		  ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[НомерЗаказа]", "");
		   ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[ВремяДоставки]", ""  );
		   ТекстШаблонаSMS = СтрЗаменить(ТекстШаблонаSMS,"[ДатаДоставки]", "");
	 КонецЕсли;
  
	 
	 Возврат ТекстШаблонаSMS;
	 
	 
	 
КонецФункции


	  
#Область ЗаполниитТабличнуюЧасть

Процедура ЗаполнитьТабличнуюЧастьИзОснованияНаСервере(ДокументОснование) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		  Возврат;
	  КонецЕсли;
	  


	  
	    Запрос = Новый Запрос;
				 Запрос.Текст = "ВЫБРАТЬ
				                |	ЗаказКлиентаТовары.Номенклатура,
				                |	ЗаказКлиентаТовары.Характеристика,
				                |	ЗаказКлиентаТовары.Количество,
				                |	ЗаказКлиентаТовары.КодСтроки
				                |ПОМЕСТИТЬ ТЗ
				                |ИЗ
				                |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
				                |ГДЕ
				                |	ЗаказКлиентаТовары.Ссылка = &ДокументОснование
				                |
				                |ОБЪЕДИНИТЬ ВСЕ
				                |
				                |ВЫБРАТЬ
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.Номенклатура,
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.Характеристика,
				                |	СУММА(-ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.КоличествоОборот),
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.КодСтроки
				                |ИЗ
				                |	РегистрНакопления.ГАЛ_НоменклатураВЗаказахНаДоставку.Обороты(, , Регистратор, ) КАК ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты
				                |ГДЕ
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.Регистратор <> &ЗаказНаДоставку
				                |	И ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.Регистратор.ДокументОснование = &ДокументОснование
				                |
				                |СГРУППИРОВАТЬ ПО
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.Номенклатура,
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.Характеристика,
				                |	ГАЛ_НоменклатураВЗаказахНаДоставкуОбороты.КодСтроки
				                |;
				                |
				                |////////////////////////////////////////////////////////////////////////////////
				                |ВЫБРАТЬ
				                |	ТЗ.Номенклатура,
				                |	ТЗ.Характеристика,
				                |	СУММА(ТЗ.Количество) КАК Количество,
				                |	ТЗ.КодСтроки КАК КодСтроки
				                |ПОМЕСТИТЬ ТЗИтоговая
				                |ИЗ
				                |	ТЗ КАК ТЗ
				                |
				                |СГРУППИРОВАТЬ ПО
				                |	ТЗ.Номенклатура,
				                |	ТЗ.Характеристика,
				                |	ТЗ.КодСтроки
				                |;
				                |
				                |////////////////////////////////////////////////////////////////////////////////
				                |ВЫБРАТЬ
				                |	ТЗИтоговая.Номенклатура,
				                |	ТЗИтоговая.Характеристика,
				                |	ТЗИтоговая.Количество,
				                |	ТЗИтоговая.КодСтроки
				                |ИЗ
				                |	ТЗИтоговая КАК ТЗИтоговая
				                |ГДЕ
				                |	ТЗИтоговая.Количество > 0";
								
								Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
									Запрос.Текст = СтрЗаменить(Запрос.Текст,".ЗаказКлиента." ,".ЗаказПоставщику.");
									ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
									Запрос.Текст = СтрЗаменить(Запрос.Текст,".ЗаказКлиента." ,".РеализацияТоваровУслуг.");
								ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
									Запрос.Текст = СтрЗаменить(Запрос.Текст,".ЗаказКлиента." ,".ПеремещениеТоваров.");
	
								КонецЕсли;
				 
				 Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
				 Запрос.УстановитьПараметр("ЗаказНаДоставку", ЭтотОбъект.Ссылка);
				 
				 Результат = Запрос.Выполнить();
				 ДоступныДляДоставки = Результат.Выгрузить();
				 
				 Товары.Очистить();
				 
				 
				 
				 
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		
			Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
				//Если номенклатура доступна для доставки, добавляем ее
				Отбор = Новый Структура();
				Отбор.Вставить("КодСтроки",ТекСтрокаТовары.КодСтроки);
				Строки = ДоступныДляДоставки.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;

				
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ВидЦены = ТекСтрокаТовары.ВидЦены;
			НоваяСтрока.ДатаОтгрузки = ТекСтрокаТовары.ДатаОтгрузки;
			НоваяСтрока.КлючСвязи = ТекСтрокаТовары.КлючСвязи;
			НоваяСтрока.КодСтроки = ТекСтрокаТовары.КодСтроки;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоУпаковок = ТекСтрокаТовары.КоличествоУпаковок;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.НоменклатураНабора = ТекСтрокаТовары.НоменклатураНабора;
			НоваяСтрока.Отменено = ТекСтрокаТовары.Отменено;
			НоваяСтрока.ПричинаОтмены = ТекСтрокаТовары.ПричинаОтмены;
			НоваяСтрока.ПроцентАвтоматическойСкидки = ТекСтрокаТовары.ПроцентАвтоматическойСкидки;
			НоваяСтрока.ПроцентРучнойСкидки = ТекСтрокаТовары.ПроцентРучнойСкидки;
			НоваяСтрока.Серия = ТекСтрокаТовары.Серия;
			НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
			НоваяСтрока.Содержание = ТекСтрокаТовары.Содержание;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.СтатусУказанияСерий = ТекСтрокаТовары.СтатусУказанияСерий;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаАвтоматическойСкидки = ТекСтрокаТовары.СуммаАвтоматическойСкидки;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СуммаРучнойСкидки = ТекСтрокаТовары.СуммаРучнойСкидки;
			НоваяСтрока.СуммаСНДС = ТекСтрокаТовары.СуммаСНДС;
			НоваяСтрока.Упаковка = ТекСтрокаТовары.Упаковка;
			НоваяСтрока.Характеристика = ТекСтрокаТовары.Характеристика;
			НоваяСтрока.ХарактеристикаНабора = ТекСтрокаТовары.ХарактеристикаНабора;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			
			ТекНоменклатура = НоваяСтрока.Номенклатура;
			Если ТекНоменклатура.ВесИспользовать Тогда
				
				Вес = (ТекНоменклатура.ВесЧислитель / ?( ТекНоменклатура.ВесЗнаменатель = 0,1,ТекНоменклатура.ВесЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Вес = Вес;
				
			КонецЕсли;
			
			Если ТекНоменклатура.ОбъемИспользовать Тогда
				
				Объем = (ТекНоменклатура.ОбъемЧислитель / ?( ТекНоменклатура.ОбъемЗнаменатель = 0,1,ТекНоменклатура.ОбъемЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Объем = Объем;
				
			КонецЕсли;
			
				//ПРФТ++  заполнение веса и объема из набора, если не заполнено в карточке
			Если НЕ ТекНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка() ТОгда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
				|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
				|	УпаковкиЕдиницыИзмерения.Объем КАК Объем,
				|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец");
				Запрос.УстановитьПараметр("Владелец",ТекНоменклатура.НаборУпаковок);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() ТОгда
					НоваяСтрока.Вес = ?(НоваяСтрока.Вес=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Вес);
					НоваяСтрока.Объем = ?(НоваяСтрока.Объем=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Объем);			
				КонецЕсли;
			КонецЕсли;
			//ПРФТ--
			

			
		
		КонецЦикла;
	
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		

		Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
			//Если номенклатура доступна для доставки, добавляем ее
				Отбор = Новый Структура();
				Отбор.Вставить("КодСтроки",ТекСтрокаТовары.КодСтроки);
				Строки = ДоступныДляДоставки.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.КлючСвязи = ТекСтрокаТовары.КлючСвязи;
			НоваяСтрока.КодСтроки = ТекСтрокаТовары.КодСтроки;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоУпаковок = ТекСтрокаТовары.КоличествоУпаковок;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
//			НоваяСтрока.Отменено = ТекСтрокаТовары.Отменено;
			НоваяСтрока.ПроцентРучнойСкидки = ТекСтрокаТовары.ПроцентРучнойСкидки;
			НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СуммаРучнойСкидки = ТекСтрокаТовары.СуммаРучнойСкидки;
			НоваяСтрока.СуммаСНДС = ТекСтрокаТовары.СуммаСНДС;
			НоваяСтрока.Упаковка = ТекСтрокаТовары.Упаковка;
			НоваяСтрока.Характеристика = ТекСтрокаТовары.Характеристика;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			
			ТекНоменклатура = НоваяСтрока.Номенклатура;
			Если ТекНоменклатура.ВесИспользовать Тогда
				
				Вес = (ТекНоменклатура.ВесЧислитель / ?( ТекНоменклатура.ВесЗнаменатель = 0,1,ТекНоменклатура.ВесЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Вес = Вес;
				
			КонецЕсли;
			
			Если ТекНоменклатура.ОбъемИспользовать Тогда
				
				Объем = (ТекНоменклатура.ОбъемЧислитель / ?( ТекНоменклатура.ОбъемЗнаменатель = 0,1,ТекНоменклатура.ОбъемЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Объем = Объем;
				
			КонецЕсли;
			
			
				//ПРФТ++  заполнение веса и объема из набора, если не заполнено в карточке
			Если НЕ ТекНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка() ТОгда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
				|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
				|	УпаковкиЕдиницыИзмерения.Объем КАК Объем,
				|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец");
				Запрос.УстановитьПараметр("Владелец",ТекНоменклатура.НаборУпаковок);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() ТОгда
					НоваяСтрока.Вес = ?(НоваяСтрока.Вес=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Вес);
					НоваяСтрока.Объем = ?(НоваяСтрока.Объем=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Объем);			
				КонецЕсли;
			КонецЕсли;
			//ПРФТ--
			

		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		

		Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
			//Если номенклатура доступна для доставки, добавляем ее
				Отбор = Новый Структура();
				Отбор.Вставить("КодСтроки",ТекСтрокаТовары.КодСтроки);
				Строки = ДоступныДляДоставки.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.КодСтроки = ТекСтрокаТовары.КодСтроки;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоУпаковок = ТекСтрокаТовары.КоличествоУпаковок;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Отменено = ТекСтрокаТовары.Отменено;
			НоваяСтрока.ПроцентРучнойСкидки = ТекСтрокаТовары.ПроцентРучнойСкидки;
			НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СуммаРучнойСкидки = ТекСтрокаТовары.СуммаРучнойСкидки;
			НоваяСтрока.СуммаСНДС = ТекСтрокаТовары.СуммаСНДС;
			НоваяСтрока.Упаковка = ТекСтрокаТовары.Упаковка;
			НоваяСтрока.Характеристика = ТекСтрокаТовары.Характеристика;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			
			ТекНоменклатура = НоваяСтрока.Номенклатура;
			
			
			Если ТекНоменклатура.ВесИспользовать Тогда
				
				Вес = (ТекНоменклатура.ВесЧислитель / ?( ТекНоменклатура.ВесЗнаменатель = 0,1,ТекНоменклатура.ВесЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Вес = Вес;
				
				
			КонецЕсли;
			
			Если ТекНоменклатура.ОбъемИспользовать Тогда
				
				Объем = (ТекНоменклатура.ОбъемЧислитель / ?( ТекНоменклатура.ОбъемЗнаменатель = 0,1,ТекНоменклатура.ОбъемЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Объем = Объем;
				
			КонецЕсли;
			
			//ПРФТ++  заполнение веса и объема из набора, если не заполнено в карточке
			Если НЕ ТекНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка() ТОгда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
				|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
				|	УпаковкиЕдиницыИзмерения.Объем КАК Объем,
				|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец");
				Запрос.УстановитьПараметр("Владелец",ТекНоменклатура.НаборУпаковок);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() ТОгда
					НоваяСтрока.Вес = ?(НоваяСтрока.Вес=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Вес);
					НоваяСтрока.Объем = ?(НоваяСтрока.Объем=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Объем);			
				КонецЕсли;
			КонецЕсли;
			//ПРФТ--
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		

		Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
			//Если номенклатура доступна для доставки, добавляем ее
				Отбор = Новый Структура();
				Отбор.Вставить("КодСтроки",ТекСтрокаТовары.КодСтроки);
				Строки = ДоступныДляДоставки.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.КодСтроки = ТекСтрокаТовары.КодСтроки;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоУпаковок = ТекСтрокаТовары.КоличествоУпаковок;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			//НоваяСтрока.Отменено = ТекСтрокаТовары.Отменено;
			//НоваяСтрока.ПроцентРучнойСкидки = ТекСтрокаТовары.ПроцентРучнойСкидки;
			//НоваяСтрока.Склад = ТекСтрокаТовары.Склад;
			//НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			//НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			//НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			//НоваяСтрока.СуммаРучнойСкидки = ТекСтрокаТовары.СуммаРучнойСкидки;
			//НоваяСтрока.СуммаСНДС = ТекСтрокаТовары.СуммаСНДС;
			НоваяСтрока.Упаковка = ТекСтрокаТовары.Упаковка;
			НоваяСтрока.Характеристика = ТекСтрокаТовары.Характеристика;
			//НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			
			ТекНоменклатура = НоваяСтрока.Номенклатура;
			Если ТекНоменклатура.ВесИспользовать Тогда
				
				Вес = (ТекНоменклатура.ВесЧислитель / ?( ТекНоменклатура.ВесЗнаменатель = 0,1,ТекНоменклатура.ВесЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Вес = Вес;
				
			КонецЕсли;
			
			Если ТекНоменклатура.ОбъемИспользовать Тогда
				
				Объем = (ТекНоменклатура.ОбъемЧислитель / ?( ТекНоменклатура.ОбъемЗнаменатель = 0,1,ТекНоменклатура.ОбъемЗнаменатель)
				*  НоваяСтрока.Количество);
				НоваяСтрока.Объем = Объем;
				
			КонецЕсли;
			
			
				//ПРФТ++  заполнение веса и объема из набора, если не заполнено в карточке
			Если НЕ ТекНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка() ТОгда
				Запрос = Новый Запрос("ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
				|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
				|	УпаковкиЕдиницыИзмерения.Объем КАК Объем,
				|	УпаковкиЕдиницыИзмерения.Представление КАК Представление
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец");
				Запрос.УстановитьПараметр("Владелец",ТекНоменклатура.НаборУпаковок);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() ТОгда
					НоваяСтрока.Вес = ?(НоваяСтрока.Вес=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Вес);
					НоваяСтрока.Объем = ?(НоваяСтрока.Объем=0,Выборка.Вес*НоваяСтрока.Количество,НоваяСтрока.Объем);			
				КонецЕсли;
			КонецЕсли;
			//ПРФТ--
			

			
		КонецЦикла;
	
	КонецЕсли;
		 
				 
				 
	
КонецПроцедуры   
				 
#КонецОбласти

