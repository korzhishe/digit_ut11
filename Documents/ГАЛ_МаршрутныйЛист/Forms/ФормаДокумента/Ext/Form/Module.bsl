
&НаКлиенте
Процедура ЗаказыНаДоставкуПриИзменении(Элемент)
	ОбновитьИтоговыйВесОбъемЗаполненность();
КонецПроцедуры

//При изменении заказа части Заказы

&НаКлиенте
Процедура ЗаказыНаДоставкуЗаказНаДоставкуПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЗаказыНаДоставку.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	ТекущаяСтрока = Элементы.ЗаказыНаДоставку.ТекущиеДанные.НомерСтроки;
	ЗаказыНаДоставкуЗаказНаДоставкуПриИзмененииНаСервере(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

//При изменении заказа Заказы Сервер

&НаСервере
Процедура ЗаказыНаДоставкуЗаказНаДоставкуПриИзмененииНаСервере(ТекущаяСтрока)
	
	ТекСтрока = Объект.ЗаказыНаДоставку[ТекущаяСтрока-1];
	
	
	ТекЗаказ =  ТекСтрока.ЗаказНаДоставку;
	//
	//ТекСтрока.ТипДоставки         = ТекЗаказ.ТипДоставки;
	//ТекСтрока.ДатаДоставки        = ТекЗаказ.ДатаОтгрузки;
	//ТекСтрока.ВремяДоставкиС      = ТекЗаказ.ВремяДоставкиС;
	//ТекСтрока.ВремяДоставкиПо     = ТекЗаказ.ВремяДоставкиПо;
	//ТекСтрока.СтатусДоставки      = ТекЗаказ.СтатусДоставки;
	//ТекСтрока.АдресДоставки       = ТекЗаказ.АдресДоставки;
	
	Вес   = 0;
	Объем = 0;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отменено",Ложь);
	
	ТемпТовары = ТекЗаказ.Товары.Выгрузить(Отбор,);
	//Вес и Объем в единицах измерения
	Вес   = ТемпТовары.Итог("Вес"); //* ДоставкаТоваров.КоэффициентПересчетаВТонны();
	Объем = ТемпТовары.Итог("Объем");// * ДоставкаТоваров.КоэффициентПересчетаВКубическиеМетры();
	
	ТекСтрока.Вес   = Вес;
	ТекСтрока.Объем = Объем;
	

	
КонецПроцедуры



//При изменении ТС
&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
		ТранспортноеСредствоПриИзмененииНаСервере();
	ОбновитьЗаполненностьНаКлиенте();

КонецПроцедуры


//Заполнить табличную часть
&НаСервере
Процедура ЗаполнитьЗаказыНаСервере()
	
	   Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГАЛ_СостояниеЗаказаНаДоставкуСрезПоследних.ЗаказНаДоставку КАК ЗаказНаДоставку
	               |ИЗ
	               |	РегистрСведений.ГАЛ_СостояниеЗаказаНаДоставку.СрезПоследних(
	               |			,
	               |			ВЫБОР
	               |					КОГДА &ВсеСклады
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ЗаказНаДоставку.Склад В (&Склад)
	               |							ИЛИ ЗаказНаДоставку.Склад В ИЕРАРХИИ (&Склад)
	               |				КОНЕЦ
	               |				И (ЗаказНаДоставку.Организация = &Организация
	               |					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |				И (ЗаказНаДоставку.ДатаОтгрузки >= &ДатаОтборС
	               |					И ЗаказНаДоставку.ДатаОтгрузки <= &ДатаОтборПо)
	               |				И НЕ ЗаказНаДоставку В
	               |						(ВЫБРАТЬ
	               |							ГАЛ_МаршрутыСрезПоследних.ЗаказНаДоставку
	               |						ИЗ
	               |							РегистрСведений.ГАЛ_Маршруты.СрезПоследних КАК ГАЛ_МаршрутыСрезПоследних)) КАК ГАЛ_СостояниеЗаказаНаДоставкуСрезПоследних
	               |ГДЕ
	               |	ГАЛ_СостояниеЗаказаНаДоставкуСрезПоследних.Статус В(&Статусы)";
	
	Запрос.УстановитьПараметр("ДатаОтборС", Объект.ДатаОтборС);
	Запрос.УстановитьПараметр("ДатаОтборПО", Объект.ДатаОтборПО);
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	Запрос.УстановитьПараметр("Склад",СкладОтбор );
	
		
	//Если невыбраны склады. тогда показываем все
	Если СкладОтбор.Количество()=0 Тогда
		Запрос.УстановитьПараметр("ВсеСклады",Истина);
	Иначе
		Запрос.УстановитьПараметр("ВсеСклады",Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Статусы",СтатусыОтбор );
	//Запрос.УстановитьПараметр("СтатусДоставляется",Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Доставляется );
	//Запрос.УстановитьПараметр("МассивТипов",МассивТипов );
	 //Запрос.УстановитьПараметр("СпособДоставки",Перечисления.ГАЛ_СпособыДоставки.ДоКлиента );
	
	
	
	  //Запрос = Новый Запрос;
	  //Запрос.Текст = "ВЫБРАТЬ
	  //|	ГАЛ_СостояниеЗаказаНаДоставкуСрезПоследних.ЗаказНаДоставку
	  //|ИЗ
	  //|	РегистрСведений.ГАЛ_СостояниеЗаказаНаДоставку.СрезПоследних(, ЗаказНаДоставку.ДатаОтгрузки = &ДатаОтгрузки) КАК ГАЛ_СостояниеЗаказаНаДоставкуСрезПоследних
	  //|ГДЕ
	  //|	ГАЛ_СостояниеЗаказаНаДоставкуСрезПоследних.Статус = &Статус";
	  //
	  //Запрос.УстановитьПараметр("Статус",Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению );
	  // Запрос.УстановитьПараметр("ДатаОтгрузки", Объект.ДатаДоставки);
	  // 
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выгрузить();
	  
	  
	  
	  
	  
	  ЗаказыНаДоставку = Объект.ЗаказыНаДоставку; 
	  ЗаказыНаДоставку.Очистить();
	  
	  Для Каждого ТекСтрока из Выборка Цикл
		  НоваяСтрока = ЗаказыНаДоставку.Добавить();
		  ТекЗаказ =  ТекСтрока.ЗаказНаДоставку;
		  
		  НоваяСтрока.ЗаказНаДоставку     = ТекЗаказ;
		  //НоваяСтрока.ТипДоставки         = ТекЗаказ.ТипДоставки;
		  //НоваяСтрока.ДатаДоставки        = ТекЗаказ.ДатаОтгрузки;
		  //НоваяСтрока.ВремяДоставкиС      = ТекЗаказ.ВремяДоставкиС;
		  //НоваяСтрока.ВремяДоставкиПо     = ТекЗаказ.ВремяДоставкиПо;
		  //НоваяСтрока.СтатусДоставки      = ТекЗаказ.СтатусДоставки;
		  //НоваяСтрока.АдресДоставки       = ТекЗаказ.АдресДоставки;
		  
		  Вес   = 0;
		  Объем = 0;
		  
		  Отбор = Новый Структура();
		  Отбор.Вставить("Отменено",Ложь);
		  		  
		  ТемпТовары = ТекЗаказ.Товары.Выгрузить(Отбор,);
		  //Вес и Объем в единицах измерения
		  Вес   = ТемпТовары.Итог("Вес"); //* ДоставкаТоваров.КоэффициентПересчетаВТонны();
		  Объем = ТемпТовары.Итог("Объем");// * ДоставкаТоваров.КоэффициентПересчетаВКубическиеМетры();
		  
		  НоваяСтрока.Вес   = Вес;
		  НоваяСтрока.Объем = Объем;
		  
		
	  КонецЦикла;
	  
	  
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказы(Команда)
	ЗаполнитьЗаказыНаСервере();
	ОбновитьИтоговыйВесОбъемЗаполненность();
КонецПроцедуры


//При создании на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	КоэффициентПересчетаВТонны     			 = ДоставкаТоваров.КоэффициентПересчетаВТонны();
	КоэффициентПересчетаВКубическиеМетры     = ДоставкаТоваров.КоэффициентПересчетаВКубическиеМетры();
		
	УстановитьГрузоподъемностьЕмкостьТранспортаНаСервере();
	
	ТекстЗаголовка = НСтр("ru='Объем, %ЕдиницаИзмеренияОбъема%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЕдиницаИзмеренияОбъема%", Строка(ЕдиницаИзмеренияОбъема));
	
	Элементы.ЗаказыНаДоставкуОбъем.Заголовок = ТекстЗаголовка;
	//Элементы.МаршрутОбъем.Заголовок = ТекстЗаголовка;
	
	ТекстЗаголовка = НСтр("ru='Вес, %ЕдиницаИзмеренияВеса%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЕдиницаИзмеренияВеса%", Строка(ЕдиницаИзмеренияВеса));
	
	Элементы.ЗаказыНаДоставкуВес.Заголовок = ТекстЗаголовка;
	//Элементы.МаршрутВес.Заголовок = ТекстЗаголовка;
	
	Если Не ЗначениеЗаполнено(Объект.СтатусМаршрута) Тогда
		Объект.СтатусМаршрута = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Формируется;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) Тогда
		Объект.ДатаДоставки = ТекущаяДата();
	КонецЕсли;
	
		// СтандартныеПодсистемы.Печать
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);

	// Конец СтандартныеПодсистемы.Печать

	
	Если Параметры.Ключ.Пустая() Тогда
		  Объект.ДатаОтборС  = ТекущаяДата();
		  Объект.ДатаОтборПО = ТекущаяДата();
		  
	// СтатусыОтбор.Добавить(Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Доставляется);
	  СтатусыОтбор.Добавить(Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению);

	КонецЕсли;
	

КонецПроцедуры



&НаСервере
Процедура ТранспортноеСредствоПриИзмененииНаСервере()
	
	ПараметрыТТН = Новый Структура;
	ПараметрыТТН.Вставить("АвтомобильГосударственныйНомер");
	ПараметрыТТН.Вставить("АвтомобильМарка");	
	ПараметрыТТН.Вставить("ВидПеревозки");
	ПараметрыТТН.Вставить("АвтомобильТип");
	ПараметрыТТН.Вставить("АвтомобильВместимостьВКубическихМетрах");
	ПараметрыТТН.Вставить("АвтомобильГрузоподъемностьВТоннах");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаСерия");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаНомер");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаВид");
	ПараметрыТТН.Вставить("ЛицензионнаяКарточкаРегистрационныйНомер");
	ПараметрыТТН.Вставить("Прицеп");
	ПараметрыТТН.Вставить("ГосударственныйНомерПрицепа");
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортныеСредства.Код КАК АвтомобильГосударственныйНомер,
		|	ТранспортныеСредства.Марка КАК АвтомобильМарка,
		|	ТранспортныеСредства.ВидПеревозки КАК ВидПеревозки,
		|	ТранспортныеСредства.Тип КАК АвтомобильТип,
		|	ТранспортныеСредства.ВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
		|	ТранспортныеСредства.ГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаВид,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаНомер,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаРегистрационныйНомер,
		|	ТранспортныеСредства.ЛицензионнаяКарточкаСерия,
		|	ТранспортныеСредства.Прицеп,
		|	ТранспортныеСредства.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа
		|ИЗ
		|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
		|ГДЕ
		|	ТранспортныеСредства.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ТипыТранспортныхСредств.Наименование,
		|	ТипыТранспортныхСредств.ВместимостьВКубическихМетрах,
		|	ТипыТранспортныхСредств.ГрузоподъемностьВТоннах,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.ТипыТранспортныхСредств КАК ТипыТранспортныхСредств
		|ГДЕ
		|	ТипыТранспортныхСредств.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ТранспортноеСредство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыТТН, Выборка);
			Грузоподъемность = Выборка.АвтомобильВместимостьВКубическихМетрах;	
			ЕмкостьТранспорта = Выборка.АвтомобильГрузоподъемностьВТоннах;
		КонецЕсли;
	Иначе
		Грузоподъемность = 0;	
		ЕмкостьТранспорта = 0;			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыТТН);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьГрузоподъемностьЕмкостьТранспортаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		
		РеквизитыТранспортногоСредства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТранспортноеСредство, 
		Новый Структура("ГрузоподъемностьВТоннах, ВместимостьВКубическихМетрах")); 
		
		Грузоподъемность = РеквизитыТранспортногоСредства.ГрузоподъемностьВТоннах;	
		ЕмкостьТранспорта = РеквизитыТранспортногоСредства.ВместимостьВКубическихМетрах;
		
	Иначе
		
		Грузоподъемность = 0;	
		ЕмкостьТранспорта = 0;
		
	КонецЕсли;
	
	ОбновитьИтоговыйВесОбъемЗаполненность();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыйВесОбъемЗаполненность()
	 
	Объект.Вес   = КоэффициентПересчетаВТонны * Объект.ЗаказыНаДоставку.Итог("Вес");
	Объект.Объем = КоэффициентПересчетаВКубическиеМетры * Объект.ЗаказыНаДоставку.Итог("Объем");	 
	
	ЗаполненностьПоВесу   = ?(Грузоподъемность=0,0,Объект.Вес/Грузоподъемность);
	ЗаполненностьПоОбъему = ?(ЕмкостьТранспорта=0,0,Объект.Объем/ЕмкостьТранспорта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаполненностьНаКлиенте()
	
	Если КоэффициентПересчетаВТонны <> 0 Тогда 
		ЗаполненностьПоВесу   = ?(Грузоподъемность=0,0,Объект.Вес/Грузоподъемность);	
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры <> 0 Тогда
		ЗаполненностьПоОбъему = ?(ЕмкостьТранспорта=0,0,Объект.Объем/ЕмкостьТранспорта);
	КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



//Обработка  выбора статуса документа 
&НаКлиенте
Процедура СтатусМаршрутаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если СтатусОтправленно(ВыбранноеЗначение) или СтатусПодготовлен(ВыбранноеЗначение) Тогда
		Параметр = Новый  Структура;
		Параметр.Вставить("Статус",ВыбранноеЗначение);
		Оповещение = Новый ОписаниеОповещения("ОтветНаВопросИзмененияСтатуса", ЭтотОбъект,Параметр);
	     ТекстВопроса = "Установить новый статус заданиям на доставку?";
	     ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//ИначеЕсли СтатусПодготовлен(ВыбранноеЗначение) Тогда
	//	Параметр = Новый  Структура;
	//	Параметр.Вставить("Статус",ВыбранноеЗначение);
	//	Оповещение = Новый ОписаниеОповещения("ОтветНаВопросИзмененияСтатусаПодготовлен", ЭтотОбъект,Параметр);
	//     ТекстВопроса = "Установить новый статус заданиям на доставку?";
	//     ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	
КонецПроцедуры




//Ответ на вопрос изменения статуса
&НаКлиенте 
Процедура ОтветНаВопросИзмененияСтатуса(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		//Если да необходимо всем заданиям прсотавить новый статус
		СтатусМаршрутаОбработкаВыбораНаСервере(ДополнительныеПараметры);
		//ЭтаФорма.Прочитать();
		ОповеститьОбИзменении(Тип("ДокументСсылка.ГАЛ_ЗаказНаДоставку"));
	КонецЕсли;
КонецПроцедуры 

////Ответ на вопрос изменения статуса
//&НаКлиенте 
//Процедура ОтветНаВопросИзмененияСтатусаПодготовлен(Результат, ДополнительныеПараметры) Экспорт 
//	Если Результат = КодВозвратаДиалога.Да Тогда
//		//Если да необходимо всем заданиям прсотавить новый статус
//		СтатусМаршрутаОбработкаВыбораНаСервере(ДополнительныеПараметры);
//		//ЭтаФорма.Прочитать();
//		ОповеститьОбИзменении(Тип("ДокументСсылка.ГАЛ_ЗаказНаДоставку"));
//	КонецЕсли;
//КонецПроцедуры 


//Обработка выбора статуса документа
&НаСервереБезКонтекста
Функция  СтатусОтправленно(ВыбранноеЗначение)
	Если ВыбранноеЗначение = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Отправлено или
		 ВыбранноеЗначение = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Формируется Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Обработка выбора статуса документа
&НаСервереБезКонтекста
Функция  СтатусПодготовлен(ВыбранноеЗначение)
	Если ВыбранноеЗначение = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Подготовлен Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Обработка выбора статуса документа
&НаСервере
Процедура СтатусМаршрутаОбработкаВыбораНаСервере(ДополнительныеПараметры)
	     // НачатьТранзакцию();
		  
		 // ТемпЗаказы = Объект.ЗаказыНаДоставку.Выгрузить();
		  Для Каждого ТекСтрока из Объект.ЗаказыНаДоставку Цикл
			  ТекЗаказНаДоставку =  ТекСтрока.ЗаказНаДоставку;
			  
			  Если ДополнительныеПараметры.Статус = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Отправлено Тогда
				  
				  Если (ТекЗаказНаДоставку.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению )
					 // или ТекЗаказНаДоставку.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Подготовлен)

					  и ТекЗаказНаДоставку.Проведен = истина Тогда
					  
					  ТекОбъект = ТекЗаказНаДоставку.ПолучитьОбъект();
					  ТекОбъект.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.ВДоставке;
					  ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
					  
				  КонецЕсли;
				  
			  ИначеЕсли ДополнительныеПараметры.Статус = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Формируется Тогда
				  Если (ТекЗаказНаДоставку.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.ВДоставке
					  или ТекЗаказНаДоставку.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Распределен)
					  и ТекЗаказНаДоставку.Проведен = истина Тогда
					  
					  ТекОбъект = ТекЗаказНаДоставку.ПолучитьОбъект();
					  ТекОбъект.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению;
					  ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
					 
				  КонецЕсли;
				  

			 ИначеЕсли ДополнительныеПараметры.Статус = Перечисления.ГАЛ_СтатусыМаршрутногоЛиста.Подготовлен Тогда
				  Если ТекЗаказНаДоставку.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.КРаспределению
					  и ТекЗаказНаДоставку.Проведен = истина Тогда
					  
					  ТекОбъект = ТекЗаказНаДоставку.ПолучитьОбъект();
					  ТекОбъект.СтатусДоставки = Справочники.ГАЛ_СтатусыЗаявокНаДоставку.Распределен;
					  ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
					 
				  КонецЕсли;
	  
				  
			  КонецЕсли;
			  
			  
			  
			  
		  КонецЦикла;
		  
		   //Объект.ЗаказыНаДоставку.Очистить();
		   //Объект.ЗаказыНаДоставку.Загрузить(ТемпЗаказы);
		  
		 // ЗафиксироватьТранзакцию();
КонецПроцедуры


///Создание товаров и услуг и постулпния

&НаСервере
Процедура СоздатьДокументыРеализацииТоваровНаСервере()
	
	 ТЧЗаказыНаДоставку = Объект.ЗаказыНаДоставку;
	 //Перебираем заказы на доставку
	 Для Каждого ТекСтрока из ТЧЗаказыНаДоставку Цикл
		 
		   ТекДокумент = ТекСтрока.ЗаказНаДоставку;
		   ДокументОснование =  ТекДокумент.ДокументОснование;
		   Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
			   Продолжить;
		   КонецЕсли;
		   
		   //Заказ клиента
		   Если ТипЗнч(ДокументОснование) = тип("ДокументСсылка.ЗаказКлиента") Тогда
			   
			   Заказ = ДокументОснование.ПолучитьОбъект();
			   Для Каждого Товар из Заказ.Товары Цикл
				   //Перебераем товары заказа
				   Отбор = Новый Структура();
                   Отбор.Вставить("КодСтроки",Товар.КодСтроки);  
				   НайденныеСтроки = ТекДокумент.Товары.НайтиСтроки(Отбор);
				   Если НайденныеСтроки.Количество() > 0 Тогда
					   Товар.Отменено = НайденныеСтроки[0].Отменено;
					   Если Товар.Отменено Тогда
						     Товар.ПричинаОтмены =  ПолучитьПричинуОтметыЗаказаКлиента();
					   КонецЕсли;
					  
				  КонецЕсли;

				   
				   
				   Товар.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить; 	
			   КонецЦикла;
			   
			   Попытка 
				   Заказ.Записать(РежимЗаписиДокумента.Проведение);
				   
				   
				   НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				   
				   ДанныеЗаполнения = Новый Структура;
				   ДанныеЗаполнения.Вставить("ВариантОформленияПродажи",Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
				   ДанныеЗаполнения.Вставить("ДатаОтгрузки",);
				   ДанныеЗаполнения.Вставить("ДокументОснование",Заказ.Ссылка);
				   ДанныеЗаполнения.Вставить("СкладОтгрузки",);
				   
				   НовыйДокумент.Заполнить(ДанныеЗаполнения);
				   НовыйДокумент.Дата = ТекущаяДата();
				   Попытка
					   НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);   
				   Исключение
				   КонецПопытки;

			   Исключение
			   КонецПопытки;
			   
			   
			   
			   //Заказа поставщику
		   ИначеЕсли   ТипЗнч(ДокументОснование) = тип("ДокументСсылка.ЗаказПоставщику") Тогда
			   
			   НовыйДокумент = Документы.ПоступлениеТоваров.СоздатьДокумент();
			   
			   ДанныеЗаполнения = Новый Структура;
			   ДанныеЗаполнения.Вставить("ДокументОснование",ДокументОснование);
			   ДанныеЗаполнения.Вставить("СкладОтгрузки",);
			   
			   НовыйДокумент.Заполнить(ДанныеЗаполнения);
			   НовыйДокумент.Дата = ТекущаяДата();
			   НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);  
			   
			   
		   КонецЕсли;
		   
		 
	 КонецЦикла;
	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыРеализацииТоваров(Команда)
	СоздатьДокументыРеализацииТоваровНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПричинуОтметыЗаказаКлиента()
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	   |	ПричиныОтменыЗаказовКлиентов.Ссылка
	   |ИЗ
	   |	Справочник.ПричиныОтменыЗаказовКлиентов КАК ПричиныОтменыЗаказовКлиентов
	   |ГДЕ
	   |	ПричиныОтменыЗаказовКлиентов.Наименование = ""Отменен""";
	   
	   
	   
	   Результат = Запрос.Выполнить();
	   Выборка = Результат.Выбрать();
	   
	   Если Выборка.Количество()>0 Тогда
	    Выборка.Следующий();	
	  Возврат Выборка.Ссылка; 
	Иначе
		  НовыйОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
		  НовыйОбъект.Наименование = "Отменен";
		  Попытка
			  НовыйОбъект.Записать();
		  Исключение
		  КонецПопытки;
		  
		 Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
	   
КонецФункции




 //Устанавливает условное оформление списка по статусу
 

