
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ДатаОтгрузки = ТекущаяДата();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("ДатаОтгрузки", ДатаОтгрузки);
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Статус", Статус);
	КонецЕсли;
	
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	Если Не ИспользоватьНесколькоСкладов Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.СкладПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	// Установка отборов.
	УстановитьОтборПоСкладуСервер();
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		УстановитьОтборПоДатеОформленияСервер();
	Иначе
		СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки", Дата(3999, 11, 11));
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРеализацииТоваровУслуг, "Менеджер", Менеджер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокАктовВыполненныхРабот, "Менеджер", Менеджер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРеализацииТоваровУслуг, "Статус", Статус, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокАктовНаПередачуПрав, "Менеджер", МенеджерАктНаПередачу, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокАктовНаПередачуПрав, "Статус", СтатусАктНаПередачу, СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокРаспоряженияНаОформление", "Видимость", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", ИспользоватьРасширенныеВозможностиЗаказаКлиента И ИспользоватьНесколькоСкладов);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОтгрузки", "Видимость", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокРаспоряженияНаОформлениеКонтрагент", "Видимость", Ложь);
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОформлениеСделка.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами");
	Элементы.СписокРаспоряженияНаОформлениеГрафикОплаты.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	
	УстановитьТекущуюСтраницу();
	
	ИспользоватьРеализациюПоНесколькимЗаказам           = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	ИспользоватьОтгрузкуБезПереходаПраваСобственности   = Константы.ИспользоватьОтгрузкуБезПереходаПраваСобственности.Получить();
	ИспользоватьАктыНаПередачуПрав                      = ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав");
	
	Элементы.СтраницаАктыНаПередачуПрав.Видимость = ИспользоватьАктыНаПередачуПрав;
	
	УстановитьВидимостьЭлементовОтгрузкаБезПереходаПраваСобственности();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МенеджерРеализация.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.РеализацияТоваровУслуг));
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МенеджерАктВыполненныхРабот.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.АктВыполненныхРабот));
		
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МенеджерАктНаПередачу.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.РеализацияТоваровУслуг));
		
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	НастроитьВидимостьДополнительныхОтчетовИОбработок();
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом         
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(
		ЭтаФорма, 
		Элементы.ГруппаГлобальныеКоманды, 
		Новый Структура("Источник", "Документ.РеализацияТоваровУслуг"));
		
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(
		ЭтаФорма, 
		Элементы.СписокАктыНаПередачуПравГруппаИнтеграция, 
		Новый Структура("Источник", "Документ.РеализацияТоваровУслуг"));
		
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(
		ЭтаФорма, 
		Элементы.СписокАктовВыполненныхРаботГруппаИнтеграция, 
		Новый Структура("Источник", "Документ.АктВыполненныхРабот"));
	// Конец ИнтеграцияС1СДокументооборотом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если (ИмяСобытия = "Запись_РеализацияТоваровУслуг"
	 ИЛИ ИмяСобытия = "Запись_ЗаказКлиента"
	 ИЛИ ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
	 ИЛИ ИмяСобытия = "Запись_АктВыполненныхРабот") 
	 И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаОформление Тогда
			Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.СписокРеализацииТоваровУслуг.Обновить();
		Элементы.СписокАктовВыполненныхРабот.Обновить();
		Элементы.СписокАктовНаПередачуПрав.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранТипДокументаПродажи" Тогда
		Если Параметр = "Реализация товаров и услуг" Тогда
			ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьРеализациюПоНесколькимЗаказам,
				Склад,
				ДатаОтгрузки);
		ИначеЕсли Параметр = "Акт на передачу прав" Тогда
			ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьРеализациюПоНесколькимЗаказам,
				Склад,
				ДатаОтгрузки,
				,
				Истина);
		ИначеЕсли Параметр = "Акт выполненных работ" Тогда
			ПродажиКлиент.СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам,
				ДатаОтгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
	Иначе
		Склад = Настройки.Получить("Склад");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРеализацииТоваровУслуг, "Менеджер", Менеджер, СтруктураБыстрогоОтбора, Настройки);
	Настройки.Вставить("Менеджер", Менеджер);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокАктовВыполненныхРабот, "Менеджер", Менеджер, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРеализацииТоваровУслуг, "Статус", Статус, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокАктовНаПередачуПрав, "Менеджер", МенеджерАктНаПередачу, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокАктовНаПередачуПрав, "Статус", СтатусАктНаПередачу, СтруктураБыстрогоОтбора, Настройки);	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРеализацииТоваровУслуг, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАктовВыполненныхРабот, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАктовНаПередачуПрав, "Менеджер", МенеджерАктНаПередачу, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(МенеджерАктНаПередачу));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРеализацииТоваровУслуг, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАктовНаПередачуПрав, "Статус", СтатусАктНаПередачу, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СтатусАктНаПередачу));

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьОтборПоСкладуСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)

	Если ДатаОтгрузки = '00010101' Или ДатаОтгрузки < НачалоДня(ТекущаяДата()) Тогда
		ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;

	УстановитьОтборПоДатеОформленияСервер();

КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НастроитьВидимостьДополнительныхОтчетовИОбработок();
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Список = Неопределено;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		Список = Элементы.СписокРеализацииТоваровУслуг;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненныхРабот Тогда
		Список = Элементы.СписокАктовВыполненныхРабот;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАктыНаПередачуПрав Тогда
		Список = Элементы.СписокАктовНаПередачуПрав;
	КонецЕсли;
	
	Если Список <> Неопределено Тогда
		УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Список);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Список = Неопределено;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		Список = Элементы.СписокРеализацииТоваровУслуг;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненныхРабот Тогда
		Список = Элементы.СписокАктовВыполненныхРабот;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАктыНаПередачуПрав Тогда
		Список = Элементы.СписокАктовНаПередачуПрав;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура УстановитьСтатусКОтгрузке(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		ОбрабатываемыйСписок = Элементы.СписокРеализацииТоваровУслуг;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАктыНаПередачуПрав Тогда
		ОбрабатываемыйСписок = Элементы.СписокАктовНаПередачуПрав;
	КонецЕсли;
		
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(ОбрабатываемыйСписок);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКОтгрузкеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, ОбрабатываемыйСписок)), НСтр("ru='У выделенных в списке документов будет установлен статус ""К отгрузке""'"), СписокОтветов);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОтгрузкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "КОтгрузке");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='К отгрузке'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПредоплате(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		ОбрабатываемыйСписок = Элементы.СписокРеализацииТоваровУслуг;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАктыНаПередачуПрав Тогда
		ОбрабатываемыйСписок = Элементы.СписокАктовНаПередачуПрав;
	КонецЕсли;
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(ОбрабатываемыйСписок);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусКПредоплатеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, ОбрабатываемыйСписок)), НСтр("ru='У выделенных в списке документов будет установлен статус ""К предоплате"".'"), СписокОтветов);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПредоплатеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "КПредоплате");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='К предоплате'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализовано(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		ОбрабатываемыйСписок = Элементы.СписокРеализацииТоваровУслуг;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАктыНаПередачуПрав Тогда
		ОбрабатываемыйСписок = Элементы.СписокАктовНаПередачуПрав;
	КонецЕсли;
		
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(ОбрабатываемыйСписок);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтрокиСодержатОтгрузку = Ложь;
	ВыделенныеСтрокиСодержатНеТолькоОтгрузку = Ложь;
	
	Если ИспользоватьОтгрузкуБезПереходаПраваСобственности Тогда
		
		СтруктураСписка = СформироватьСтруктуруСпискаДокументов(ВыделенныеСтроки);
		ВыделенныеСтрокиСодержатОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатОтгрузку;
		ВыделенныеСтрокиСодержатНеТолькоОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатНеТолькоОтгрузку;
		
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Если Не ВыделенныеСтрокиСодержатОтгрузку Тогда
		Ответ = Неопределено;
		СтруктураОтвета = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусРеализованоПослеВопроса", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ВыделенныеСтрокиСодержатНеТолькоОтгрузку, ОбрабатываемыйСписок, СтруктураОтвета", ВыделенныеСтроки, ВыделенныеСтрокиСодержатНеТолькоОтгрузку, ОбрабатываемыйСписок, СтруктураОтвета)), НСтр("ru='У выделенных в списке документов будет установлен статус ""Реализовано"".'"), СписокОтветов);
        Возврат;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаПереходаПраваСобственности", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыФормы.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", ВыделенныеСтрокиСодержатНеТолькоОтгрузку);
		
		СтруктураОтвета = Неопределено;
		
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ВопросОСменеСтатуса", ПараметрыФормы,,,,, Новый ОписаниеОповещения("УстановитьСтатусРеализованоЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, ОбрабатываемыйСписок)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        Возврат;
	КонецЕсли;
	
	УстановитьСтатусРеализованоФрагмент(ВыделенныеСтроки, ОбрабатываемыйСписок, СтруктураОтвета);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализованоПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ВыделенныеСтрокиСодержатНеТолькоОтгрузку = ДополнительныеПараметры.ВыделенныеСтрокиСодержатНеТолькоОтгрузку;
    ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	СтруктураОтвета = ДополнительныеПараметры.СтруктураОтвета;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьСтатусРеализованоФрагмент(ВыделенныеСтроки, ОбрабатываемыйСписок, СтруктураОтвета);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализованоЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
    
    
    СтруктураОтвета = Результат;
    Если СтруктураОтвета = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьСтатусРеализованоФрагмент(ВыделенныеСтроки, ОбрабатываемыйСписок, СтруктураОтвета);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализованоФрагмент(Знач ВыделенныеСтроки, Знач ОбрабатываемыйСписок, Знач СтруктураОтвета)
    
    Перем КоличествоОбработанных;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Отгружено", СтруктураОтвета);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Реализовано'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВПути(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		ОбрабатываемыйСписок = Элементы.СписокРеализацииТоваровУслуг;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАктыНаПередачуПрав Тогда
		ОбрабатываемыйСписок = Элементы.СписокАктовНаПередачуПрав;
	КонецЕсли;
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(ОбрабатываемыйСписок);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусВПутиЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ОбрабатываемыйСписок", ВыделенныеСтроки, ОбрабатываемыйСписок)), НСтр("ru='У выделенных в списке документов будет установлен статус ""В пути"".'"), СписокОтветов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВПутиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "ВПути");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(ОбрабатываемыйСписок, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='В пути'"));

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажу(Команда)
	
	Если Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиОформленияСохранены Тогда
		Оповщение = Новый ОписаниеОповещения("ОформитьПродажуЗавершение", ЭтотОбъект);
		ОткрытьФормуНастройкиПараметров(Оповщение);
		Возврат;
	КонецЕсли;
	
	Если СоздаватьДокументПродажи Тогда
		СоздатьНапечататьДокументы();
	Иначе
		СоздатьНаОсновании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажуЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;
	
	Если СоздаватьДокументПродажи Тогда
		СоздатьНапечататьДокументы();
	Иначе
		СоздатьНаОсновании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапечататьДокументы()
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
	
		Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
		
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивДокументов = СформироватьДокументыПродажиСервер(МассивСсылок);
	МассивПечатаемыхДокументов = Новый Массив();
	
	Для Каждого ТекЭлемент Из МассивДокументов Цикл
		
		Если Не ТекЭлемент.Проведен Тогда
			
			Если ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
				ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
			ИначеЕсли ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда 
				ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
			КонецЕсли; 
			
		ИначеЕсли ТекЭлемент.Печатать Тогда
			
			МассивПечатаемыхДокументов.Добавить(ТекЭлемент.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СписокРаспоряженияНаОформление.Обновить();
	
	Если МассивПечатаемыхДокументов.Количество() > 0 Тогда
		
		Если ПечататьРеализациюТоваровУслуг Или ПечататьАктВыполненныхРабот Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
				"РегистрСведений.НастройкиПечатиОбъектов",
				"КомплектДокументов",
				МассивПечатаемыхДокументов,
				Новый Структура());
			ТекстСообщения = НСтр("ru = 'Документы созданы и напечатаны (%КоличествоДокументов%)'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Документы созданы (%КоличествоДокументов%)'");
		КонецЕсли;
			
		ПоказатьОповещениеПользователя(
			СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", МассивДокументов.Количество()),
			,,БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументыПродажиСервер(МассивСсылок)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	СУММА(РаспоряжениеНаОформление.КОформлениюОстаток) КАК КОформлениюОстаток,
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер КАК Партнер,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент КАК Контрагент,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Договор КАК Договор,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Организация КАК Организация,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение КАК Соглашение,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка КАК Сделка,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Склад КАК Склад,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Подразделение КАК Подразделение,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа
		|					И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ЗаказыКлиентовОстатки.ЗаказКлиента.Склад
		|		КОНЕЦ КАК СкладОтгрузки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа
		|					И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИНАЧЕ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		ЗаказыКлиентовОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта КАК ВалютаВзаиморасчетов,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|		ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки КАК СпособДоставки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ПеревозчикПартнер
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ КАК ПеревозчикПартнер,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставки
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставкиПеревозчика
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставкиПеревозчика,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ КАК КалендарьВозвратаТары,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				&ДатаОтгрузки,
		|				ЗаказКлиента В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура.ВариантОформленияПродажи В (ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг), ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))) КАК ЗаказыКлиентовОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Договор,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Организация,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Подразделение,
		|		НЕОПРЕДЕЛЕНО,
		|		ЛОЖЬ,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.КОформлениюОстаток,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НалогообложениеНДС,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС,
		|		ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				&ДатаОтгрузки,
		|				ЗаказКлиента В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки) КАК РаспоряжениеНаОформление
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	КОформлениюОстаток,
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("ДатаОтгрузки", Новый Граница (КонецДня(ДатаОтгрузки), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДокументов = Новый Массив();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выгрузка = РезультатЗапроса.Выгрузить();
		
		СтруктураПоиска = Новый Структура("
			|Партнер,
			|Контрагент,
			|Договор,
			|Организация,
			|Соглашение,
			|Сделка,
			|Склад,
			|Подразделение,
			|СкладОтгрузки,
			|ХозяйственнаяОперация,
			|КОформлениюОстаток,
			|ВалютаВзаиморасчетов,
			|НалогообложениеНДС,
			|ЦенаВключаетНДС,
			|ЗапрещеноВыбиратьГруппуСкладов,
			|ВариантОформленияПродажи,
			|СпособДоставки,
			|ПеревозчикПартнер,
			|АдресДоставки,
			|АдресДоставкиПеревозчика,
			|ВернутьМногооборотнуюТару,
			|СрокВозвратаМногооборотнойТары,
			|ТребуетсяЗалогЗаТару,
			|КалендарьВозвратаТары,
			|РассчитыватьДатуВозвратаТарыПоКалендарю
			|");
		
		Для Каждого ТекСтрока Из Выгрузка Цикл
			
			МассивСсылок = Новый Массив();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			Выборка.Сбросить();
			
			Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
				МассивСсылок.Добавить(Выборка.ЗаказКлиента);
			КонецЦикла;
			
			ПараметрыОснования = Новый Структура();
			ПараметрыОснования.Вставить("ДатаОтгрузки", ДатаОтгрузки);
			Если Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
				ПараметрыОснования.Вставить("СкладОтгрузки", Склад);
				ПараметрыОснования.Вставить("ВариантОформленияПродажи", Выборка.ВариантОформленияПродажи);
			КонецЕсли;
			
			Если ((Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
				И ИспользоватьРеализациюПоНесколькимЗаказам) Или
				(Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
				И ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам) Тогда
				
				РеквизитыРаспоряжения = ПолучитьРеквизитыРаспоряжений(МассивСсылок);
				РеквизитыШапки = Новый Структура();
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
				
				ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
				ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
				СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, МассивДокументов);
				
			Иначе
				
				Для Каждого ТекЭлемент Из МассивСсылок Цикл
					ПараметрыОснования.Вставить("ДокументОснование", ТекЭлемент);
					СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, МассивДокументов);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНаОсновании()
	
	МассивСсылокДляАктовВыполненныхРабот = Новый Массив();
	МассивСсылокДляРеализации = Новый Массив();
	МассивСсылокДляАктНаПередачуПрав = Новый Массив();
	
	Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылокДляАктовВыполненныхРабот.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
	Иначе
		МассивСсылокДляАктовВыполненныхРабот.Добавить(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылокДляРеализации.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
	Иначе
		МассивСсылокДляРеализации.Добавить(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	МассивСсылокДляАктНаПередачуПрав = МассивСсылокДляРеализации;
	
	ОчиститьСообщения();
	Действие = ДействиеВводаНаОсновании(МассивСсылокДляРеализации, 
		МассивСсылокДляАктНаПередачуПрав, 
		МассивСсылокДляАктовВыполненныхРабот, 
		ДатаОтгрузки,
		Склад);
	
	Если Действие = "АктВыполненныхРабот" Тогда
		ПродажиКлиент.СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам,
			ДатаОтгрузки);
	ИначеЕсли Действие = "АктНаПередачуПрав" Тогда
		ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьРеализациюПоНесколькимЗаказам,
			Склад,
			ДатаОтгрузки,
			,
			Истина);
	ИначеЕсли Действие = "РеализацияТоваровУслуг" Тогда
		ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьРеализациюПоНесколькимЗаказам,
			Склад,
			ДатаОтгрузки);
	КонецЕсли;
	Если Действие = "ПредложитьВыбратьТипДокументаПродажи" Тогда
		СписокЗаказовДляРеализации = Новый СписокЗначений;
		СписокЗаказовДляРеализации.ЗагрузитьЗначения(МассивСсылокДляРеализации);
		СписокЗаказовДляАктовВыполненныхРабот = Новый СписокЗначений;
		СписокЗаказовДляАктовВыполненныхРабот.ЗагрузитьЗначения(МассивСсылокДляАктовВыполненныхРабот);
		СписокЗаказовДляАктНаПередачуПрав = Новый СписокЗначений;
		СписокЗаказовДляАктНаПередачуПрав.ЗагрузитьЗначения(МассивСсылокДляАктНаПередачуПрав);
		ОткрытьФорму("ОбщаяФорма.ВыборТипаДокументаПродажи", 
							Новый Структура("СписокЗаказовДляРеализации, СписокЗаказовДляАктовВыполненныхРабот, СписокЗаказовДляАктНаПередачуПрав, ДатаОтгрузки",
											СписокЗаказовДляРеализации, 
											СписокЗаказовДляАктовВыполненныхРабот,
											СписокЗаказовДляАктНаПередачуПрав,
											ДатаОтгрузки),,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		
		СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
		
	Иначе
		
		СписокУсловноеОформление = СписокРаспоряженияНаОформление.УсловноеОформление;
		
	КонецЕсли;
	
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.АктВыполненныхРабот.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Элементы.СписокРеализацииТоваровУслуг.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРеализацииТоваровУслуг;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			Элементы.СписокАктовВыполненныхРабот.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаВыполненныхРабот;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СоздатьДокументПродажи(ПоляДокумента, ПараметрыОснования, МассивДокументов)
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
			НовыйДокумент.Статус = СтатусРеализацииТоваровУслуг;
		Иначе
			НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
			НовыйДокумент.Статус = СтатусРеализацииТоваровУслуг;
		Иначе
			НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
	Иначе
		НовыйДокумент = Документы.АктВыполненныхРабот.СоздатьДокумент();
	КонецЕсли;
	
	НовыйДокумент.Дата = ДатаОтгрузки;
	НовыйДокумент.Заполнить(ПараметрыОснования);
	НовыйДокумент.СкидкиРассчитаны = Истина;
	Если НачалоДня(НовыйДокумент.Дата) = НачалоДня(ТекущаяДата()) Тогда
		НовыйДокумент.Дата = НовыйДокумент.Дата + Число(ТекущаяДата() - НачалоДня(ТекущаяДата()));
	Иначе
		НовыйДокумент.Дата = НовыйДокумент.Дата;
	КонецЕсли;
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
		ИЛИ ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент,Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	
	Если НовыйДокумент.ПроверитьЗаполнение() Тогда
		
		Попытка
			
			Если (ПечататьРеализациюТоваровУслуг 
				И (ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)) Или
				(ПечататьАктВыполненныхРабот И ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот) Тогда
				
				Печатать = Истина;
				
			Иначе
				
				Печатать = Ложь;
				
			КонецЕсли;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", НовыйДокумент.Ссылка, Истина, Печатать));
			ДокументПроведен = Истина;
			
		Исключение
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен", НовыйДокумент.Ссылка, Ложь, Ложь));
			
		КонецПопытки;
		
		Если ПоляДокумента.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС И
			(ДокументПроведен И ((ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав) И 
			НовыйДокумент.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию) Или
			ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот) Тогда
			
			СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(СчетФактура, НовыйДокумент);
			СчетФактура.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
			СчетФактура.ДокументОснование = НовыйДокумент.Ссылка;
			СчетФактура.Дата = ДатаОтгрузки;
			СчетФактура.УстановитьНовыйНомер();
			
			ДанныеСчетаФактуры = Новый Структура;
			ДанныеСчетаФактуры.Вставить("ДокументОснование", НовыйДокумент.Ссылка);
			ДанныеСчетаФактуры.Вставить("Организация",       НовыйДокумент.Организация);
			ДанныеСчетаФактуры.Вставить("Дата",              НовыйДокумент.Дата);
			ДанныеСчетаФактуры.Вставить("Выставлен",         Истина);
			ДанныеСчетаФактуры.Вставить("ДатаВыставления",   НовыйДокумент.Дата);
			
			СчетФактура.Заполнить(ДанныеСчетаФактуры);
			СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
	Иначе
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		МассивДокументов.Добавить(Новый Структура("Документ,Проведен", НовыйДокумент.Ссылка, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыРаспоряжений(МассивРаспоряжений)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчет
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетКонтрагента
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузоотправитель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузоотправитель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузополучатель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузополучатель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузоотправитель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузоотправителя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузополучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузополучателя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузополучатель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузополучателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузополучателя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Касса
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Касса)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000))) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000))
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА (ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|							И ЗаказКлиента.ЗонаДоставки <> ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.ЗонаДоставки
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЗонаДоставки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиС
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиС)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиПо
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиПо)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Контрагент КАК Контрагент,
	|		ЗаказКлиента.Организация КАК Организация,
	|		ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
	|		ЗаказКлиента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|		ЗаказКлиента.Грузоотправитель КАК Грузоотправитель,
	|		ЗаказКлиента.Грузополучатель КАК Грузополучатель,
	|		ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|		ЗаказКлиента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|		ЗаказКлиента.Касса КАК Касса,
	|		ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
	|		ЗаказКлиента.СпособДоставки                        КАК СпособДоставки,
	|		ЗаказКлиента.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
	|		ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|		ЗаказКлиента.ЗонаДоставки                          КАК ЗонаДоставки,
	|		ЗаказКлиента.ВремяДоставкиС                        КАК ВремяДоставкиС,
	|		ЗаказКлиента.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
	|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивРаспоряжений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Контрагент,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Организация,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетКонтрагента,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Грузоотправитель,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Грузополучатель,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузоотправителя,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузополучателя,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Касса,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
	|		ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки,
	|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиЗначенияПолей,
	|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиПеревозчикаЗначенияПолей,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ЗонаДоставки,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиС,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиПо,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ДополнительнаяИнформацияПоДоставке
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|	ГДЕ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&МассивРаспоряжений)) КАК ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.ФормаОплаты");
		
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("БанковскийСчет",                 Выборка.БанковскийСчет);
	СтруктураРеквизитов.Вставить("БанковскийСчетКонтрагента",      Выборка.БанковскийСчетКонтрагента);
	СтруктураРеквизитов.Вставить("Грузоотправитель",               Выборка.Грузоотправитель);
	СтруктураРеквизитов.Вставить("Грузополучатель",                Выборка.Грузополучатель);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузоотправителя", Выборка.БанковскийСчетГрузоотправителя);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузополучателя",  Выборка.БанковскийСчетГрузополучателя);
	СтруктураРеквизитов.Вставить("Касса",                          Выборка.Касса);
	СтруктураРеквизитов.Вставить("ФормаОплаты",                    Выборка.ФормаОплаты);
	
	СтруктураРеквизитов.Вставить("АдресДоставкиЗначенияПолей",            Выборка.АдресДоставкиЗначенияПолей);
	СтруктураРеквизитов.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Выборка.АдресДоставкиПеревозчикаЗначенияПолей);
	СтруктураРеквизитов.Вставить("ЗонаДоставки",                          Выборка.ЗонаДоставки);
	СтруктураРеквизитов.Вставить("ВремяДоставкиС",                        Выборка.ВремяДоставкиС);
	СтруктураРеквизитов.Вставить("ВремяДоставкиПо",                       Выборка.ВремяДоставкиПо);
	СтруктураРеквизитов.Вставить("ДополнительнаяИнформацияПоДоставке",    Выборка.ДополнительнаяИнформацияПоДоставке);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоСкладуСервер()
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДатеОформленияСервер()

	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки",
			Новый Граница(КонецДня(ДатаОтгрузки), ВидГраницы.Включая));

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДействиеВводаНаОсновании(МассивСсылокДляРеализации, МассивСсылокДляАктНаПередачуПрав, МассивСсылокДляАктовВыполненныхРабот, ДатаОтгрузки, Склад)
	
	ВыборКорректный = ОпределитьКорректностьВыбора(МассивСсылокДляРеализации, МассивСсылокДляАктНаПередачуПрав, МассивСсылокДляАктовВыполненныхРабот);
	
	Если Не ВыборКорректный ТОгда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
	               |			&ДатаОтгрузки,
	               |			ЗаказКлиента В (&МассивСсылокДляРеализации)
	               |				И (Склад = &Склад
	               |					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               |				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг)) КАК ЗаказыКлиентовОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
	               |			&ДатаОтгрузки,
	               |			ЗаказКлиента В (&МассивСсылокДляАктНаПередачуПрав)
	               |				И (Склад = &Склад
	               |					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               |				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)) КАК ЗаказыКлиентовОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
	               |			&ДатаОтгрузки,
	               |			ЗаказКлиента В (&МассивСсылокДляАктовВыполненныхРабот)
	               |				И (Склад = &Склад
	               |					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               |				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки";
	Запрос.УстановитьПараметр("МассивСсылокДляРеализации", МассивСсылокДляРеализации);
	Запрос.УстановитьПараметр("МассивСсылокДляАктНаПередачуПрав", МассивСсылокДляАктНаПередачуПрав);
	Запрос.УстановитьПараметр("МассивСсылокДляАктовВыполненныхРабот", МассивСсылокДляАктовВыполненныхРабот);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаОтгрузки", Новый Граница (КонецДня(ДатаОтгрузки), ВидГраницы.Включая));
	ТаблицаВариантов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаВариантов.Количество()=1 Тогда
		Если ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			Возврат "АктВыполненныхРабот";
		ИначеЕсли	ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			Возврат "АктНаПередачуПрав";
		ИначеЕсли	ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
			Возврат "РеализацияТоваровУслуг";
		КонецЕсли;
	ИначеЕсли	ТаблицаВариантов.Количество()>1 Тогда
		Возврат "ПредложитьВыбратьТипДокументаПродажи";
	Конецесли;
	
КонецФункции 

&НаСервере
Функция ОпределитьКорректностьВыбора(МассивСсылокДляРеализации, МассивСсылокДляАктНаПередачуПрав, МассивСсылокДляАктовВыполненныхРабот)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Партнер) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияПартнер,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Договор) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияДоговор,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияОрганизация,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Соглашение) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСоглашение,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Сделка) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСделка,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Склад) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСклад,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ХозяйственнаяОперация) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВалютаВзаиморасчетов) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияВалютаВзаиморасчетов,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.НалогообложениеНДС) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияНалогообложениеНДС,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЦенаВключаетНДС) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияЦенаВключаетНДС,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВернутьМногооборотнуюТару) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияВернутьМногооборотнуюТару,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ТребуетсяЗалогЗаТару) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияТребуетсяЗалогЗаТару,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СрокВозвратаМногооборотнойТары) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСрокВозвратаМногооборотнойТары
					|ИЗ
					|	(ВЫБРАТЬ
					|		ЗаказКлиента.Партнер               КАК Партнер,
					|		ЗаказКлиента.Контрагент            КАК Контрагент,
					|		ЗаказКлиента.Организация           КАК Организация,
					|		ЗаказКлиента.Договор               КАК Договор,
					|		ЗаказКлиента.Соглашение            КАК Соглашение,
					|		ЗаказКлиента.Сделка                КАК Сделка,
					|		ВЫБОР
					|			КОГДА
					|				ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
					|			ТОГДА
					|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
					|			ИНАЧЕ
					|				ЗаказКлиента.Склад
					|		КОНЕЦ                                       КАК Склад,
					|		ЗаказКлиента.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
					|		ЗаказКлиента.Валюта                         КАК ВалютаВзаиморасчетов,
					|		ЗаказКлиента.НалогообложениеНДС             КАК НалогообложениеНДС,
					|		ЗаказКлиента.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
					|		ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
					|		ЗаказКлиента.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
					|		ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
					|	ИЗ
					|		Документ.ЗаказКлиента КАК ЗаказКлиента
					|	ГДЕ
					|		(ЗаказКлиента.Ссылка В (&МассивСсылокДляАктовВыполненныхРабот)
					|				ИЛИ ЗаказКлиента.Ссылка В (&МассивСсылокДляАктНаПередачуПрав)
					|				ИЛИ ЗаказКлиента.Ссылка В (&МассивСсылокДляРеализации))
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ЗаявкаНаВозврат.Партнер            КАК Партнер,
					|		ЗаявкаНаВозврат.Контрагент         КАК Контрагент,
					|		ЗаявкаНаВозврат.Организация        КАК Организация,
					|		ЗаявкаНаВозврат.Договор            КАК Договор,
					|		ЗаявкаНаВозврат.Соглашение         КАК Соглашение,
					|		ЗаявкаНаВозврат.Сделка             КАК Сделка,
					|		ЗаявкаНаВозврат.Склад              КАК Склад,
					|		ВЫБОР
					|			КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
					|					ИЛИ ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
					|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
					|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
					|		КОНЕЦ                                          КАК ХозяйственнаяОперация,
					|		ЗаявкаНаВозврат.Валюта                         КАК Валюта,
					|		ЗаявкаНаВозврат.НалогообложениеНДС             КАК НалогообложениеНДС,
					|		ЗаявкаНаВозврат.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
					|		ЗаявкаНаВозврат.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
					|		ЗаявкаНаВозврат.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
					|		ЗаявкаНаВозврат.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
					|	ИЗ
					|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
					|	ГДЕ
					|		(ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляАктовВыполненныхРабот)
					|				ИЛИ ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляАктНаПередачуПрав)
					|				ИЛИ ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляРеализации))) КАК ЗаказКлиента
					|
					|";
		
	Запрос.УстановитьПараметр("МассивСсылокДляРеализации", МассивСсылокДляРеализации);
	Запрос.УстановитьПараметр("МассивСсылокДляАктНаПередачуПрав", МассивСсылокДляАктНаПередачуПрав);
	Запрос.УстановитьПараметр("МассивСсылокДляАктовВыполненныхРабот", МассивСсылокДляАктовВыполненныхРабот);
	ВыборкаРеквизитыШапки = Запрос.Выполнить().Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Если ПродажиСервер.СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа продажи на основании выделенных распоряжений невозможен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура Параметры(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗавершение", ЭтотОбъект);
	ОткрытьФормуНастройкиПараметров(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПараметрыОформленияДокументовПродажи" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			СохранитьНастройки(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Настройки)
	
	НастройкиОформленияСохранены = Истина;
	
	СоздаватьДокументПродажи       = Настройки.СоздаватьДокументПродажи;
	ПечататьРеализациюТоваровУслуг = Настройки.ПечататьРеализациюТоваровУслуг;
	ПечататьАктВыполненныхРабот    = Настройки.ПечататьАктВыполненныхРабот;
	СтатусРеализацииТоваровУслуг   = Настройки.СтатусРеализацииТоваровУслуг;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметров(Оповещение)
	
	Если Не ЗначениеЗаполнено(СтатусРеализацииТоваровУслуг) Тогда
		СтатусРеализацииТоваровУслуг = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.КОтгрузке");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СоздаватьДокументПродажи",       СоздаватьДокументПродажи);
	ПараметрыФормы.Вставить("ПечататьРеализациюТоваровУслуг", ПечататьРеализациюТоваровУслуг);
	ПараметрыФормы.Вставить("ПечататьАктВыполненныхРабот",    ПечататьАктВыполненныхРабот);
	ПараметрыФормы.Вставить("СтатусРеализацииТоваровУслуг",   СтатусРеализацииТоваровУслуг);
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыОформленияДокументовПродажи", 
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДополнительныхОтчетовИОбработок()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаОформление Тогда
		Возврат;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненныхРабот Тогда
		ОбъектМетаданных = Метаданные.Документы.АктВыполненныхРабот;
	Иначе
		ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
	КонецЕсли;
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить(
		"ДополнительныеОтчетыИОбработкиОбъектНазначения",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных));
	ПараметрыФункциональныхОпций.Вставить(
		"ДополнительныеОтчетыИОбработкиТипФормы",
		ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура УстановитьВидимостьЭлементовОтгрузкаБезПереходаПраваСобственности()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СписокРеализацииТоваровУслугДатаПерехода",
		"Видимость", 
		ИспользоватьОтгрузкуБезПереходаПраваСобственности);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СписокРеализацииТоваровУслугУстановитьСтатусВПути",
		"Видимость", 
		ИспользоватьОтгрузкуБезПереходаПраваСобственности);
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СписокАктовНаПередачуПравДатаПереходаПраваСобственности",
		"Видимость", 
		ИспользоватьОтгрузкуБезПереходаПраваСобственности);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СписокАктовНаПередачуПравУстановитьСтатусВПути",
		"Видимость", 
		ИспользоватьОтгрузкуБезПереходаПраваСобственности);
	
	Если НЕ ИспользоватьОтгрузкуБезПереходаПраваСобственности Тогда
		
		Элемент = Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыРеализацийТоваровУслуг.ВПути);
		Если Элемент <> Неопределено Тогда
			Элементы.Статус.СписокВыбора.Удалить(Элемент);
		КонецЕсли;
		
		Элемент = Элементы.СтатусАктНаПередачу.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыРеализацийТоваровУслуг.ВПути);
		Если Элемент <> Неопределено Тогда
			Элементы.СтатусАктНаПередачу.СписокВыбора.Удалить(Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтруктуруСпискаДокументов(ВыделенныеСтроки)
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатОтгрузку", Ложь);
	СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", Ложь);
	
	ЗначенияХозОпераций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВыделенныеСтроки, "ХозяйственнаяОперация");
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		Если ЗначенияХозОпераций[ТекСтрока] = Перечисления.ХозяйственныеОперации.ОтгрузкаБезПереходаПраваСобственности Тогда
			СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатОтгрузку", Истина);
		ИначеЕсли ЗначенияХозОпераций[ТекСтрока] <> Перечисления.ХозяйственныеОперации.ОтгрузкаБезПереходаПраваСобственности Тогда
			СтруктураВозврата.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", Истина);
		КонецЕсли;
		
		Если СтруктураВозврата.ВыделенныеСтрокиСодержатОтгрузку
			 И СтруктураВозврата.ВыделенныеСтрокиСодержатНеТолькоОтгрузку Тогда
			 Прервать;
		 КонецЕсли;
		 
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура СоздатьАктНаПередачуПрав(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ВариантОформленияПродажи",
		ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав")));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметры, Элементы.СписокАктовНаПередачуПрав);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)

	ОбеспечениеКлиент.ОткрытьФормуСостояниеОбеспечения(Элементы.СписокРаспоряженияНаОформление, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
